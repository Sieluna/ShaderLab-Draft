@top TranslationUnit {
  topLevelItem*
}

topLevelItem {
  FunctionDefinition |
  LinkageSpecification |
  Declaration |
  statement |
  AttributedStatement |
  TypeDefinition |
  emptyDeclaration |
  PreprocIf |
  PreprocIfdef |
  PreprocInclude |
  PreprocDef |
  PreprocFunctionDef |
  PreprocCall
}

PreprocInclude {
  token_2 (StringLiteral | SystemLibString | Identifier | CallExpression { PreprocCallExpression }) "\n"
}

PreprocDef {
  token_3 Identifier PreprocArg? "\n"
}

PreprocFunctionDef {
  token_4 Identifier PreprocParams PreprocArg? "\n"
}

PreprocParams {
  "(" ((Identifier | "...") ("," (Identifier | "..."))*)? ")"
}

PreprocCall {
  PreprocDirective PreprocArg? "\n"
}

PreprocIf {
  token_5 preprocExpression "\n" topLevelItem* (PreprocElse | PreprocElif)? token_6
}

PreprocIfdef {
  (token_7 | token_8) Identifier topLevelItem* (PreprocElse | PreprocElif)? token_9
}

PreprocElse {
  token_10 topLevelItem*
}

PreprocElif {
  token_11 preprocExpression "\n" topLevelItem* (PreprocElse | PreprocElif)?
}

PreprocIfInFieldDeclarationList {
  token_12 preprocExpression "\n" fieldDeclarationListItem* (PreprocElse { PreprocElseInFieldDeclarationList } | PreprocElif { PreprocElifInFieldDeclarationList })? token_13
}

PreprocIfdefInFieldDeclarationList {
  (token_14 | token_15) Identifier fieldDeclarationListItem* (PreprocElse { PreprocElseInFieldDeclarationList } | PreprocElif { PreprocElifInFieldDeclarationList })? token_16
}

PreprocElseInFieldDeclarationList {
  token_17 fieldDeclarationListItem*
}

PreprocElifInFieldDeclarationList {
  token_18 preprocExpression "\n" fieldDeclarationListItem* (PreprocElse { PreprocElseInFieldDeclarationList } | PreprocElif { PreprocElifInFieldDeclarationList })?
}

preprocExpression {
  Identifier |
  CallExpression { PreprocCallExpression } |
  NumberLiteral |
  CharLiteral |
  PreprocDefined |
  UnaryExpression { PreprocUnaryExpression } |
  BinaryExpression { PreprocBinaryExpression } |
  ParenthesizedExpression { PreprocParenthesizedExpression }
}

PreprocParenthesizedExpression {
  "(" preprocExpression ")"
}

PreprocDefined {
  /* precedence: 14 */ (kw<"defined"> "(" Identifier ")") |
  kw<"defined"> Identifier
}

PreprocUnaryExpression /* precedence: left 13 */ {
  ("!" | "~" | "-" | "+") preprocExpression
}

PreprocCallExpression /* precedence: 14 */ {
  Identifier ArgumentList { PreprocArgumentList }
}

PreprocArgumentList {
  "(" (preprocExpression ("," preprocExpression)*)? ")"
}

PreprocBinaryExpression {
  /* precedence: left 10 */ (preprocExpression "+" preprocExpression) |
  /* precedence: left 10 */ (preprocExpression "-" preprocExpression) |
  /* precedence: left 11 */ (preprocExpression "*" preprocExpression) |
  /* precedence: left 11 */ (preprocExpression "/" preprocExpression) |
  /* precedence: left 11 */ (preprocExpression "%" preprocExpression) |
  /* precedence: left 1 */ (preprocExpression "||" preprocExpression) |
  /* precedence: left 2 */ (preprocExpression "&&" preprocExpression) |
  /* precedence: left 3 */ (preprocExpression "|" preprocExpression) |
  /* precedence: left 4 */ (preprocExpression "^" preprocExpression) |
  /* precedence: left 5 */ (preprocExpression "&" preprocExpression) |
  /* precedence: left 6 */ (preprocExpression "==" preprocExpression) |
  /* precedence: left 6 */ (preprocExpression "!=" preprocExpression) |
  /* precedence: left 7 */ (preprocExpression ">" preprocExpression) |
  /* precedence: left 7 */ (preprocExpression ">=" preprocExpression) |
  /* precedence: left 7 */ (preprocExpression "<=" preprocExpression) |
  /* precedence: left 7 */ (preprocExpression "<" preprocExpression) |
  /* precedence: left 9 */ (preprocExpression "<<" preprocExpression) |
  /* precedence: left 9 */ (preprocExpression ">>" preprocExpression)
}

FunctionDefinition {
  (kw<"subroutine"> ("(" Identifier? ("," Identifier)* ")")?)? MsCallModifier? declarationSpecifiers declarator CompoundStatement
}

Declaration {
  (kw<"invariant"> | kw<"precise">) Identifier ";" |
  (kw<"in"> | kw<"out"> | kw<"inout"> | kw<"uniform"> | kw<"shared"> | kw<"attribute"> | kw<"varying"> | kw<"buffer"> | kw<"coherent"> | kw<"readonly"> | kw<"writeonly"> | kw<"precision"> | kw<"highp"> | kw<"mediump"> | kw<"lowp"> | kw<"subroutine"> | kw<"centroid"> | kw<"sample"> | kw<"patch"> | kw<"smooth"> | kw<"flat"> | kw<"noperspective"> | kw<"invariant"> | kw<"precise"> | ExtensionStorageClass | LayoutSpecification)* (Identifier FieldDeclarationList Identifier? ";" | declarationSpecifiers (declarator | InitDeclarator) ("," (declarator | InitDeclarator))* ";")
}

TypeDefinition {
  kw<"typedef"> TypeQualifier* typeSpecifier typeDeclarator ("," typeDeclarator)* ";"
}

declarationModifiers {
  StorageClassSpecifier |
  TypeQualifier |
  AttributeSpecifier |
  AttributeDeclaration |
  MsDeclspecModifier
}

declarationSpecifiers {
  declarationModifiers* typeSpecifier declarationModifiers*
}

LinkageSpecification {
  kw<"extern"> StringLiteral (FunctionDefinition | Declaration | DeclarationList)
}

AttributeSpecifier {
  kw<"__attribute__"> "(" ArgumentList ")"
}

Attribute {
  (Identifier "::")? Identifier ArgumentList?
}

AttributeDeclaration {
  "[[" Attribute ("," Attribute)* "]]"
}

MsDeclspecModifier {
  kw<"__declspec"> "(" Identifier ")"
}

MsBasedModifier {
  kw<"__based"> ArgumentList
}

MsCallModifier {
  kw<"__cdecl"> |
  kw<"__clrcall"> |
  kw<"__stdcall"> |
  kw<"__fastcall"> |
  kw<"__thiscall"> |
  kw<"__vectorcall">
}

MsRestrictModifier {
  kw<"__restrict">
}

MsUnsignedPtrModifier {
  kw<"__uptr">
}

MsSignedPtrModifier {
  kw<"__sptr">
}

MsUnalignedPtrModifier {
  kw<"_unaligned"> |
  kw<"__unaligned">
}

MsPointerModifier {
  MsUnalignedPtrModifier |
  MsRestrictModifier |
  MsUnsignedPtrModifier |
  MsSignedPtrModifier
}

DeclarationList {
  "{" topLevelItem* "}"
}

declarator {
  AttributedDeclarator |
  PointerDeclarator |
  FunctionDeclarator |
  ArrayDeclarator |
  ParenthesizedDeclarator |
  Identifier
}

fieldDeclarator {
  AttributedDeclarator { AttributedFieldDeclarator } |
  PointerDeclarator { PointerFieldDeclarator } |
  FunctionDeclarator { FunctionFieldDeclarator } |
  ArrayDeclarator { ArrayFieldDeclarator } |
  ParenthesizedDeclarator { ParenthesizedFieldDeclarator } |
  fieldIdentifier
}

typeDeclarator {
  AttributedDeclarator { AttributedTypeDeclarator } |
  PointerDeclarator { PointerTypeDeclarator } |
  FunctionDeclarator { FunctionTypeDeclarator } |
  ArrayDeclarator { ArrayTypeDeclarator } |
  ParenthesizedDeclarator { ParenthesizedTypeDeclarator } |
  typeIdentifier
}

abstractDeclarator {
  AbstractPointerDeclarator |
  AbstractFunctionDeclarator |
  AbstractArrayDeclarator |
  AbstractParenthesizedDeclarator
}

ParenthesizedDeclarator /* precedence: dynamic -10 */ {
  "(" declarator ")"
}

ParenthesizedFieldDeclarator /* precedence: dynamic -10 */ {
  "(" fieldDeclarator ")"
}

ParenthesizedTypeDeclarator /* precedence: dynamic -10 */ {
  "(" typeDeclarator ")"
}

AbstractParenthesizedDeclarator /* precedence: 1 */ {
  "(" abstractDeclarator ")"
}

AttributedDeclarator /* precedence: right 0 */ {
  declarator AttributeDeclaration+
}

AttributedFieldDeclarator /* precedence: right 0 */ {
  fieldDeclarator AttributeDeclaration+
}

AttributedTypeDeclarator /* precedence: right 0 */ {
  typeDeclarator AttributeDeclaration+
}

PointerDeclarator /* precedence: dynamic 1 right 0 */ {
  MsBasedModifier? "*" MsPointerModifier* TypeQualifier* declarator
}

PointerFieldDeclarator /* precedence: dynamic 1 right 0 */ {
  MsBasedModifier? "*" MsPointerModifier* TypeQualifier* fieldDeclarator
}

PointerTypeDeclarator /* precedence: dynamic 1 right 0 */ {
  MsBasedModifier? "*" MsPointerModifier* TypeQualifier* typeDeclarator
}

AbstractPointerDeclarator /* precedence: dynamic 1 right 0 */ {
  "*" TypeQualifier* abstractDeclarator?
}

FunctionDeclarator /* precedence: 1 */ {
  declarator ParameterList AttributeSpecifier*
}

FunctionFieldDeclarator /* precedence: 1 */ {
  fieldDeclarator ParameterList
}

FunctionTypeDeclarator /* precedence: 1 */ {
  typeDeclarator ParameterList
}

AbstractFunctionDeclarator /* precedence: 1 */ {
  abstractDeclarator? ParameterList
}

ArrayDeclarator /* precedence: 1 */ {
  declarator "[" TypeQualifier* (expression | "*")? "]"
}

ArrayFieldDeclarator /* precedence: 1 */ {
  fieldDeclarator "[" TypeQualifier* (expression | "*")? "]"
}

ArrayTypeDeclarator /* precedence: 1 */ {
  typeDeclarator "[" TypeQualifier* (expression | "*")? "]"
}

AbstractArrayDeclarator /* precedence: 1 */ {
  abstractDeclarator? "[" TypeQualifier* (expression | "*")? "]"
}

InitDeclarator {
  declarator "=" (InitializerList | expression)
}

CompoundStatement {
  "{" topLevelItem* "}"
}

StorageClassSpecifier {
  kw<"extern"> |
  kw<"static"> |
  kw<"auto"> |
  kw<"register"> |
  kw<"inline">
}

TypeQualifier {
  kw<"const"> |
  kw<"volatile"> |
  kw<"restrict"> |
  kw<"_Atomic">
}

typeSpecifier {
  StructSpecifier |
  UnionSpecifier |
  EnumSpecifier |
  MacroTypeSpecifier |
  SizedTypeSpecifier |
  PrimitiveType |
  typeIdentifier
}

SizedTypeSpecifier {
  (kw<"signed"> | kw<"unsigned"> | kw<"long"> | kw<"short">)+ (/* precedence: dynamic -1 */ (typeIdentifier) | PrimitiveType)?
}

EnumSpecifier {
  kw<"enum"> (typeIdentifier EnumeratorList? | EnumeratorList)
}

EnumeratorList {
  "{" (Enumerator ("," Enumerator)*)? ","? "}"
}

StructSpecifier {
  kw<"struct"> MsDeclspecModifier? (typeIdentifier FieldDeclarationList? | FieldDeclarationList)
}

UnionSpecifier {
  kw<"union"> MsDeclspecModifier? (typeIdentifier FieldDeclarationList? | FieldDeclarationList)
}

FieldDeclarationList {
  "{" fieldDeclarationListItem* "}"
}

fieldDeclarationListItem {
  FieldDeclaration |
  PreprocDef |
  PreprocFunctionDef |
  PreprocCall |
  PreprocIf { PreprocIfInFieldDeclarationList } |
  PreprocIfdef { PreprocIfdefInFieldDeclarationList }
}

FieldDeclaration {
  (kw<"in"> | kw<"out"> | kw<"inout"> | kw<"uniform"> | kw<"shared"> | kw<"attribute"> | kw<"varying"> | kw<"buffer"> | kw<"coherent"> | kw<"readonly"> | kw<"writeonly"> | kw<"precision"> | kw<"highp"> | kw<"mediump"> | kw<"lowp"> | kw<"subroutine"> | kw<"centroid"> | kw<"sample"> | kw<"patch"> | kw<"smooth"> | kw<"flat"> | kw<"noperspective"> | kw<"invariant"> | kw<"precise"> | ExtensionStorageClass | LayoutSpecification)* declarationSpecifiers (fieldDeclarator ("," fieldDeclarator)*)? BitfieldClause? ";"
}

BitfieldClause {
  ":" expression
}

Enumerator {
  Identifier ("=" expression)?
}

ParameterList {
  "(" ((ParameterDeclaration | VariadicParameter) ("," (ParameterDeclaration | VariadicParameter))*)? ")"
}

ParameterDeclaration {
  (kw<"in"> | kw<"out"> | kw<"inout"> | kw<"uniform"> | kw<"shared"> | kw<"attribute"> | kw<"varying"> | kw<"buffer"> | kw<"coherent"> | kw<"readonly"> | kw<"writeonly"> | kw<"centroid"> | kw<"sample"> | kw<"patch"> | kw<"smooth"> | kw<"flat"> | kw<"noperspective"> | kw<"precise"> | LayoutSpecification)* declarationSpecifiers (declarator | abstractDeclarator)?
}

AttributedStatement {
  AttributeDeclaration+ statement
}

AttributedNonCaseStatement {
  AttributeDeclaration+ nonCaseStatement
}

statement {
  CaseStatement |
  nonCaseStatement
}

nonCaseStatement {
  LabeledStatement |
  CompoundStatement |
  ExpressionStatement |
  IfStatement |
  SwitchStatement |
  DoStatement |
  WhileStatement |
  ForStatement |
  ReturnStatement |
  BreakStatement |
  ContinueStatement |
  GotoStatement
}

LabeledStatement {
  statementIdentifier ":" statement
}

ExpressionStatement {
  (expression | CommaExpression)? ";"
}

IfStatement /* precedence: right 0 */ {
  kw<"if"> ParenthesizedExpression statement (kw<"else"> statement)?
}

SwitchStatement {
  kw<"switch"> ParenthesizedExpression CompoundStatement
}

CaseStatement /* precedence: right 0 */ {
  (kw<"case"> expression | kw<"default">) ":" (AttributedStatement { AttributedNonCaseStatement } | nonCaseStatement | Declaration | TypeDefinition)*
}

WhileStatement {
  kw<"while"> ParenthesizedExpression statement
}

DoStatement {
  kw<"do"> statement kw<"while"> ParenthesizedExpression ";"
}

ForStatement {
  kw<"for"> "(" (Declaration | (expression | CommaExpression)? ";") expression? ";" (expression | CommaExpression)? ")" statement
}

ReturnStatement {
  kw<"return"> (expression | CommaExpression)? ";"
}

BreakStatement {
  kw<"break"> ";"
}

ContinueStatement {
  kw<"continue"> ";"
}

GotoStatement {
  kw<"goto"> statementIdentifier ";"
}

expression {
  ConditionalExpression |
  AssignmentExpression |
  BinaryExpression |
  UnaryExpression |
  UpdateExpression |
  CastExpression |
  PointerExpression |
  SizeofExpression |
  SubscriptExpression |
  CallExpression |
  FieldExpression |
  CompoundLiteralExpression |
  Identifier |
  NumberLiteral |
  StringLiteral |
  True |
  False |
  Null |
  ConcatenatedString |
  CharLiteral |
  ParenthesizedExpression
}

CommaExpression {
  expression "," (expression | CommaExpression)
}

ConditionalExpression /* precedence: right -2 */ {
  expression "?" expression ":" expression
}

assignmentLeftExpression {
  Identifier |
  CallExpression |
  FieldExpression |
  PointerExpression |
  SubscriptExpression |
  ParenthesizedExpression
}

AssignmentExpression /* precedence: right -1 */ {
  assignmentLeftExpression ("=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=") expression
}

PointerExpression /* precedence: left 12 */ {
  ("*" | "&") expression
}

UnaryExpression /* precedence: left 13 */ {
  ("!" | "~" | "-" | "+") expression
}

BinaryExpression {
  /* precedence: left 10 */ (expression "+" expression) |
  /* precedence: left 10 */ (expression "-" expression) |
  /* precedence: left 11 */ (expression "*" expression) |
  /* precedence: left 11 */ (expression "/" expression) |
  /* precedence: left 11 */ (expression "%" expression) |
  /* precedence: left 1 */ (expression "||" expression) |
  /* precedence: left 2 */ (expression "&&" expression) |
  /* precedence: left 3 */ (expression "|" expression) |
  /* precedence: left 4 */ (expression "^" expression) |
  /* precedence: left 5 */ (expression "&" expression) |
  /* precedence: left 6 */ (expression "==" expression) |
  /* precedence: left 6 */ (expression "!=" expression) |
  /* precedence: left 7 */ (expression ">" expression) |
  /* precedence: left 7 */ (expression ">=" expression) |
  /* precedence: left 7 */ (expression "<=" expression) |
  /* precedence: left 7 */ (expression "<" expression) |
  /* precedence: left 9 */ (expression "<<" expression) |
  /* precedence: left 9 */ (expression ">>" expression)
}

UpdateExpression /* precedence: right 13 */ {
  ("--" | "++") expression |
  expression ("--" | "++")
}

CastExpression /* precedence: 12 */ {
  "(" TypeDescriptor ")" expression
}

TypeDescriptor {
  TypeQualifier* typeSpecifier TypeQualifier* abstractDeclarator?
}

SizeofExpression /* precedence: 8 */ {
  kw<"sizeof"> (expression | "(" TypeDescriptor ")")
}

SubscriptExpression /* precedence: 16 */ {
  expression "[" expression "]"
}

CallExpression /* precedence: 14 */ {
  expression ArgumentList
}

ArgumentList {
  "(" (expression ("," expression)*)? ")"
}

FieldExpression {
  /* precedence: 15 */ (expression ("." | "->")) fieldIdentifier
}

CompoundLiteralExpression {
  "(" TypeDescriptor ")" InitializerList
}

ParenthesizedExpression {
  "(" (expression | CommaExpression) ")"
}

InitializerList {
  "{" ((InitializerPair | expression | InitializerList) ("," (InitializerPair | expression | InitializerList))*)? ","? "}"
}

InitializerPair {
  (SubscriptDesignator | FieldDesignator)+ "=" (expression | InitializerList)
}

SubscriptDesignator {
  "[" expression "]"
}

FieldDesignator {
  "." fieldIdentifier
}

CharLiteral {
  ("L'" | "u'" | "U'" | "u8'" | "'") (EscapeSequence | token_19) "'"
}

ConcatenatedString {
  StringLiteral StringLiteral+
}

StringLiteral {
  ("L\"" | "u\"" | "U\"" | "u8\"" | "\"") (token_20 | EscapeSequence)* "\""
}

Null {
  kw<"NULL">
}

typeIdentifier {
  TypeIdentifier { Identifier }
}

fieldIdentifier {
  FieldIdentifier { Identifier }
}

statementIdentifier {
  StatementIdentifier { Identifier }
}

emptyDeclaration {
  typeSpecifier ";"
}

MacroTypeSpecifier /* precedence: dynamic -1 */ {
  Identifier "(" TypeDescriptor ")"
}

ExtensionStorageClass {
  kw<"rayPayloadEXT"> |
  kw<"rayPayloadInEXT"> |
  kw<"hitAttributeEXT"> |
  kw<"callableDataEXT"> |
  kw<"callableDataInEXT"> |
  kw<"shaderRecordEXT">
}

LayoutSpecification {
  kw<"layout"> LayoutQualifiers
}

LayoutQualifiers {
  "(" Qualifier ("," Qualifier)* ")"
}

Qualifier {
  kw<"shared"> |
  Identifier |
  Identifier "=" expression
}

kw<term> { @specialize[name={term}]<Identifier, term> }

@skip { token_1 | Comment }

@tokens {
  token_1 {
    $[ \t\r\n] | "\\\\" "\\r"? "\\n"
  }
  token_2 {
    "#" $[ 	]* "include"
  }
  token_3 {
    "#" $[ 	]* "define"
  }
  token_4 {
    "#" $[ 	]* "define"
  }
  token_5 {
    "#" $[ 	]* "if"
  }
  token_6 {
    "#" $[ 	]* "endif"
  }
  token_7 {
    "#" $[ 	]* "ifdef"
  }
  token_8 {
    "#" $[ 	]* "ifndef"
  }
  token_9 {
    "#" $[ 	]* "endif"
  }
  token_10 {
    "#" $[ 	]* "else"
  }
  token_11 {
    "#" $[ 	]* "elif"
  }
  token_12 {
    "#" $[ 	]* "if"
  }
  token_13 {
    "#" $[ 	]* "endif"
  }
  token_14 {
    "#" $[ 	]* "ifdef"
  }
  token_15 {
    "#" $[ 	]* "ifndef"
  }
  token_16 {
    "#" $[ 	]* "endif"
  }
  token_17 {
    "#" $[ 	]* "else"
  }
  token_18 {
    "#" $[ 	]* "elif"
  }
  PreprocDirective {
    "#" $[ \t]* $[a-zA-Z] $[a-zA-Z0-9_]*
  }
  PreprocArg /* precedence: -1 */ {
    ![\n] | "\\\\" "\\r"? "\\n"+
  }
  PrimitiveType {
    "bool" | "char" | "int" | "float" | "double" | "void" | "size_t" | "ssize_t" | "intptr_t" | "uintptr_t" | "charptr_t" | "int8_t" | "int16_t" | "int32_t" | "int64_t" | "uint8_t" | "uint16_t" | "uint32_t" | "uint64_t" | "char8_t" | "char16_t" | "char32_t" | "char64_t"
  }
  VariadicParameter {
    "..."
  }
  NumberLiteral {
    $[-\+]? ("0x" | "0b")? (($[0-9]+ ("'" $[0-9]+)* | "0b" $[0-9]+ ("'" $[0-9]+)* | "0x" $[0-9a-fA-F]+ ("'" $[0-9a-fA-F]+)*) ("." ($[0-9a-fA-F]+ ("'" $[0-9a-fA-F]+)*)?)? | "." $[0-9]+ ("'" $[0-9]+)*) ($[eEpP] ($[-\+]? $[0-9a-fA-F]+ ("'" $[0-9a-fA-F]+)*)?)? ("u" | "l" | "U" | "L" | "f" | "F")*
  }
  token_19 {
    ![\n']
  }
  token_20 /* precedence: 1 */ {
    ![\\"\n]+
  }
  EscapeSequence /* precedence: 1 */ {
    "\\" (![xuU] | $[0-9] $[0-9] $[0-9]?  | "x" $[0-9a-fA-F] $[0-9a-fA-F] $[0-9a-fA-F]* | "u" $[0-9a-fA-F] $[0-9a-fA-F] $[0-9a-fA-F] $[0-9a-fA-F]  | "U" $[0-9a-fA-F] $[0-9a-fA-F] $[0-9a-fA-F] $[0-9a-fA-F] $[0-9a-fA-F] $[0-9a-fA-F] $[0-9a-fA-F] $[0-9a-fA-F] )
  }
  SystemLibString {
    "<" (![>\n] | "\\>")* ">"
  }
  True {
    "TRUE" | "true"
  }
  False {
    "FALSE" | "false"
  }
  Identifier {
    $[a-zA-Z_] $[a-zA-Z0-9_]*
  }
  Comment {
    "//" ("\\\\" (![\n] | "\\r"? "\\n") | ![\\\n])* | "/*" ![*]* "\\*"+ (![/*] ![*]* "\\*"+)* "/"
  }
}