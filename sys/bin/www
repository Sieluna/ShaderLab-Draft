#!/usr/bin/env node
const { styles } = require("../debug/style.js");
const { stdout } = require("node:process");
const sequelize = require("../handle/model");
stdout.write(styles.bold("             _                                                             _                \n" +
                            "           /' `\\     /'                      /'                          /~_)             /'\n" +
                            "         /'   ._)  /'                      /'                        ~-/'-~             /'  \n" +
                            "        (____    /'__     ____     _____,/' ____      ____           /'      ____     /'__  \n" +
                            "             ) /'    )  /'    )  /'    /' /'    )   )'    )--      /'      /'    )  /'    ) \n" +
                            "           /'/'    /' /'    /' /'    /' /(___,/'  /'          /~\\,'   _  /'    /' /'    /' \n" +
                            "  (_____,/'/'    /(__(___,/(__(___,/(__(________/'           (,/'`\\____)(___,/(__(___,/(__ \n\n"));

const devMode = process.env.NODE_ENV != "production";

if (devMode) {
    const debug = require("debug")("shaderlab:server");
    const http = require("node:http");

    const app = require("../app.js");

    let port = normalizePort(process.env.PORT || "3000");
    app.set("port", port);

    // Create HTTP server.
    let server = http.createServer(app);

    // Listen on provided port, on all network interfaces.
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);

    /**
     * Normalize a port into a number, string, or false.
     * @param {string|number} val
     * @return {number}
     */
    function normalizePort(val) {
        let port = parseInt(val, 10);
        return isNaN(port) ? val : port >= 0 ? port : false;
    }

    /**
     * Event listener for HTTP server "error" event.
     * @param {Error} error
     */
    function onError(error) {
        if (error.syscall !== "listen") throw error;
        let bind = typeof port == "string" ? "Pipe " + port : "Port " + port;
        // handle specific listen errors with friendly messages
        switch (error.code) {
            case "EACCES":
                console.error(bind + " requires elevated privileges");
                process.exit(1);
                break;
            case "EADDRINUSE":
                console.error(bind + " is already in use");
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */
    function onListening() {
        let addr = server.address();
        let bind = typeof addr == "string" ? "pipe " + addr : "port " + addr.port;
        debug("Listening on %d", bind);
    }

} else {

    const sequelize = require("../handle/model.js");
    const debug = require("debug")("shaderlab:server");

    sequelize.sync({ force: true }).then(() => {
        debug("database is synchronized");
        require("../config/inject.js")({ max: 500, root: true });
    });

    require("../app.js");
}
