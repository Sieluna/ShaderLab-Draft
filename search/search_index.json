{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"ShaderLabAPI/","text":"Backend design \u00b6 Basic set up \u00b6 token design \u00b6 To avoid anonymity visit on a heavy api, such as two table select by union or join and update something. would be quite dangerous. Data Datatype Usage id number User Id auth string permission sequenceDiagram participant client participant server participant session client ->> server: Request /api/* (delined) client ->> server: /api/user/singin {account, password} server ->> server: generate token by jwt Note right of client: singup server -->> client: response with token client ->> server: add token under Authorization header server ->> server: vertify server ->> session: add refresh token session -->> server: response with refresh token or error server-->> client: appropriate response if token is valid server-->> client: resfresh {state, new token} server-->> client: logout user permission \u00b6 Admin User Visitor /admin/* X /api/* X X X /* X X X admin -> /api*, /admin* user -> /api* visitor -> /* exclude /admin* and /api/* 3 level design would be good enough to. graph LR; Visitor --> User --> Admin Structure design \u00b6 sequenceDiagram participant model participant handle participant middle participant routes routes -->> middle: no token (delined) routes ->> middle: vertify or login middle ->> handle: request to valid data handle ->> model: query from model model -->> handle: error or json handle -->> routes: update token? handle -->> routes: error handle and resoponse graph TD; ModelHandle ----> Mysql SearchHandle --> UserHandle SearchHandle --> PostHandle SearchHandle --> TagHandle SearchHandle --> TopicHandle UserHandle ---> User PostHandle --> TagHandle PostHandle --> TopicHandle PostHandle ---> Post TagHandle --> Tag TopicHandle --> Topic graph TD; UserAPI --> UserValidator --> UserHandle PostAPI --> PostValidator --> PostHandle TagAPI --> TagValidator --> TagHandle TopicAPI --> TopicValidator --> TopicHandle SearchAPI --> SearchValidator --> SearchHandle sequenceDiagram participant req participant validator participant handle participant res req ->> validator: params is valid validator -->> res: throw and catch error validator ->> handle: deal with the safe data handle -->> validator: check the data type safe handle ->> res: return back the same data validator -->> res: throw and catch erro","title":"Backend design"},{"location":"ShaderLabAPI/#backend-design","text":"","title":"Backend design"},{"location":"ShaderLabAPI/#basic-set-up","text":"","title":"Basic set up"},{"location":"ShaderLabAPI/#token-design","text":"To avoid anonymity visit on a heavy api, such as two table select by union or join and update something. would be quite dangerous. Data Datatype Usage id number User Id auth string permission sequenceDiagram participant client participant server participant session client ->> server: Request /api/* (delined) client ->> server: /api/user/singin {account, password} server ->> server: generate token by jwt Note right of client: singup server -->> client: response with token client ->> server: add token under Authorization header server ->> server: vertify server ->> session: add refresh token session -->> server: response with refresh token or error server-->> client: appropriate response if token is valid server-->> client: resfresh {state, new token} server-->> client: logout","title":"token design"},{"location":"ShaderLabAPI/#user-permission","text":"Admin User Visitor /admin/* X /api/* X X X /* X X X admin -> /api*, /admin* user -> /api* visitor -> /* exclude /admin* and /api/* 3 level design would be good enough to. graph LR; Visitor --> User --> Admin","title":"user permission"},{"location":"ShaderLabAPI/#structure-design","text":"sequenceDiagram participant model participant handle participant middle participant routes routes -->> middle: no token (delined) routes ->> middle: vertify or login middle ->> handle: request to valid data handle ->> model: query from model model -->> handle: error or json handle -->> routes: update token? handle -->> routes: error handle and resoponse graph TD; ModelHandle ----> Mysql SearchHandle --> UserHandle SearchHandle --> PostHandle SearchHandle --> TagHandle SearchHandle --> TopicHandle UserHandle ---> User PostHandle --> TagHandle PostHandle --> TopicHandle PostHandle ---> Post TagHandle --> Tag TopicHandle --> Topic graph TD; UserAPI --> UserValidator --> UserHandle PostAPI --> PostValidator --> PostHandle TagAPI --> TagValidator --> TagHandle TopicAPI --> TopicValidator --> TopicHandle SearchAPI --> SearchValidator --> SearchHandle sequenceDiagram participant req participant validator participant handle participant res req ->> validator: params is valid validator -->> res: throw and catch error validator ->> handle: deal with the safe data handle -->> validator: check the data type safe handle ->> res: return back the same data validator -->> res: throw and catch erro","title":"Structure design"},{"location":"ShaderLabAPILogin/","text":"User API \u00b6 Analyze \u00b6 In user api should have register, login, update, abort feature. The user part have to focus on the user database. API design API Introduction Get /api/user Get the all the user Get /api/user/:id Get a user with id Post /api/user/signup Register Post /api/user/signin Login Put /api/user/avatar Update user avatar Put /api/user/email Update user email Put /api/user/password Update user password Delete /api/user/abort/:id Abort user Get /api/user/restore/:id Restore user User password could have no length limit. - md 5 could compress to 32.","title":"User API"},{"location":"ShaderLabAPILogin/#user-api","text":"","title":"User API"},{"location":"ShaderLabAPILogin/#analyze","text":"In user api should have register, login, update, abort feature. The user part have to focus on the user database. API design API Introduction Get /api/user Get the all the user Get /api/user/:id Get a user with id Post /api/user/signup Register Post /api/user/signin Login Put /api/user/avatar Update user avatar Put /api/user/email Update user email Put /api/user/password Update user password Delete /api/user/abort/:id Abort user Get /api/user/restore/:id Restore user User password could have no length limit. - md 5 could compress to 32.","title":"Analyze"},{"location":"ShaderLabAPIPost/","text":"","title":"Post API"},{"location":"ShaderLabAPITag/","text":"Tag API \u00b6 Analyze \u00b6 In tag api should have search, create (should integrate into post), update feature. The tag part should focus on the tag database. API Introduction Get /api/tag Get all the tags Put /api/tag Update the tag","title":"Tag API"},{"location":"ShaderLabAPITag/#tag-api","text":"","title":"Tag API"},{"location":"ShaderLabAPITag/#analyze","text":"In tag api should have search, create (should integrate into post), update feature. The tag part should focus on the tag database. API Introduction Get /api/tag Get all the tags Put /api/tag Update the tag","title":"Analyze"},{"location":"ShaderLabAPITopic/","text":"Topic API \u00b6 Analyze \u00b6 In topic api should have search, create, update, (remove? ) feature. The topic part should focus on the topic database. API Introduction Get /api/topic Get all the topic Post /api/topic Create a topic Put /api/topic Update the topic Get /api/topic/:topic Get a topic by id Put /api/topic/image/:id Update the topic image Put /api/topic/description/:id Update the topic description","title":"Topic API"},{"location":"ShaderLabAPITopic/#topic-api","text":"","title":"Topic API"},{"location":"ShaderLabAPITopic/#analyze","text":"In topic api should have search, create, update, (remove? ) feature. The topic part should focus on the topic database. API Introduction Get /api/topic Get all the topic Post /api/topic Create a topic Put /api/topic Update the topic Get /api/topic/:topic Get a topic by id Put /api/topic/image/:id Update the topic image Put /api/topic/description/:id Update the topic description","title":"Analyze"},{"location":"ShaderLabBuild/","text":"","title":"ShaderLabBuild"},{"location":"ShaderLabPage/","text":"Page design \u00b6 language Specification \u00b6 Module Specification nodeJS commonJS browser ESM https://mermaid-js.github.io/mermaid/","title":"Page design"},{"location":"ShaderLabPage/#page-design","text":"","title":"Page design"},{"location":"ShaderLabPage/#language-specification","text":"Module Specification nodeJS commonJS browser ESM https://mermaid-js.github.io/mermaid/","title":"language Specification"},{"location":"ShaderLabPageEditor/","text":"Feature \u00b6 The core feature of editor page should have two key features: editor, comment. In the web page, should have entrance to home page and login page (conditional). Analyze \u00b6 Navigation Bar: Elements under navigation bar has two stage: - normal -> mini icon. - large -> panel and large icon. Left Entry: CSS Naming Interop Mobeile Desktop Login Entry -> shared nav left.css sl-nav__bar True Enable Disable Right Entry: CSS Naming Interop Mobeile Desktop Login Entry -> shared nav right.css sl-nav__bar True Enable Disable Message Entry nav right.css sl-nav__bar True Disable Enable History Entry nav right.css sl-nav__bar True Disable Enable Upload Entry nav right.css sl-nav__bar True Disable Enable Main Layout: CSS Naming Interop Mobeile Desktop Recommend nav suggest.css sl-layout__recommend True Enable Enable Holder nav container.css sl-layout__holder True Enable Enable","title":"Editor Page"},{"location":"ShaderLabPageEditor/#feature","text":"The core feature of editor page should have two key features: editor, comment. In the web page, should have entrance to home page and login page (conditional).","title":"Feature"},{"location":"ShaderLabPageEditor/#analyze","text":"Navigation Bar: Elements under navigation bar has two stage: - normal -> mini icon. - large -> panel and large icon. Left Entry: CSS Naming Interop Mobeile Desktop Login Entry -> shared nav left.css sl-nav__bar True Enable Disable Right Entry: CSS Naming Interop Mobeile Desktop Login Entry -> shared nav right.css sl-nav__bar True Enable Disable Message Entry nav right.css sl-nav__bar True Disable Enable History Entry nav right.css sl-nav__bar True Disable Enable Upload Entry nav right.css sl-nav__bar True Disable Enable Main Layout: CSS Naming Interop Mobeile Desktop Recommend nav suggest.css sl-layout__recommend True Enable Enable Holder nav container.css sl-layout__holder True Enable Enable","title":"Analyze"},{"location":"ShaderLabPageLogin/","text":"Feature \u00b6 The core feature of login page should be register and login feature. In the web page, should have entrance to main page, Consider to use navigate title. Register could use two different type of account input, email or pure string and password consider have a limit 64 length. Structure design \u00b6 Background, Navigation Bar, Main Panel. Source map \u00b6 CSS Naming Interop Mobeile Desktop Background login.css sl-background None Disable Enable Navigation bar nav.css sl-nav True Disable Enable Main Panel panel.css sl-panel True Enable Enable Interop requirement \u00b6 Name Selector Main page entrance .nav-label Input form #panel-input Register Button .register Login Button .login Analyze \u00b6 Consider use regular rendering because the page only contain few simple DOM tree. So, it could draw all the component once page loaded. Drawing level consideration: Loading step \u00b6 If user already registered, this page should directly redirect to main page. When build consider direction inline the script under header. flowchart TD render[Page Load] --> check{Check local} check --> |has user data| redirect[Redirect to main] check --> |no user data| load[Page render done] load --> |width > 500| image[Lazy load image] load --> action[Button action binding] load --> alert[Loading alert] image ---> End action --> End alert --> End API interop \u00b6 Feature Request Response Page Loading GET api/img/random (Static?) RETURN blob Register POST (Account: string16, password: string32) RETURN JSON Login POST (Account: string16, password: string32) RETURN JSON","title":"Login Page"},{"location":"ShaderLabPageLogin/#feature","text":"The core feature of login page should be register and login feature. In the web page, should have entrance to main page, Consider to use navigate title. Register could use two different type of account input, email or pure string and password consider have a limit 64 length.","title":"Feature"},{"location":"ShaderLabPageLogin/#structure-design","text":"Background, Navigation Bar, Main Panel.","title":"Structure design"},{"location":"ShaderLabPageLogin/#source-map","text":"CSS Naming Interop Mobeile Desktop Background login.css sl-background None Disable Enable Navigation bar nav.css sl-nav True Disable Enable Main Panel panel.css sl-panel True Enable Enable","title":"Source map"},{"location":"ShaderLabPageLogin/#interop-requirement","text":"Name Selector Main page entrance .nav-label Input form #panel-input Register Button .register Login Button .login","title":"Interop requirement"},{"location":"ShaderLabPageLogin/#analyze","text":"Consider use regular rendering because the page only contain few simple DOM tree. So, it could draw all the component once page loaded. Drawing level consideration:","title":"Analyze"},{"location":"ShaderLabPageLogin/#loading-step","text":"If user already registered, this page should directly redirect to main page. When build consider direction inline the script under header. flowchart TD render[Page Load] --> check{Check local} check --> |has user data| redirect[Redirect to main] check --> |no user data| load[Page render done] load --> |width > 500| image[Lazy load image] load --> action[Button action binding] load --> alert[Loading alert] image ---> End action --> End alert --> End","title":"Loading step"},{"location":"ShaderLabPageLogin/#api-interop","text":"Feature Request Response Page Loading GET api/img/random (Static?) RETURN blob Register POST (Account: string16, password: string32) RETURN JSON Login POST (Account: string16, password: string32) RETURN JSON","title":"API interop"},{"location":"ShaderLabPageMain/","text":"Feature \u00b6 The core feature of home page should have three key features: search, user, preview features. In the web page, should have entrance to editor page and login page (conditional). Structure design: Navigation, Layout Navigation: search, filter and user control. CSS Naming Interop Mobeile Desktop Navigation nav.css sl-nav True Enable Enable Main Layout layout.css sl-layout True Enable Enable Analyze \u00b6 This page should contain 50% functions of the application, including search, user, info. Navigation Bar: Elements under navigation bar has two stage: - normal -> mini icon. - large -> panel and large icon. Left Entry: CSS Naming Interop Mobeile Desktop Home Entry nav left.css sl-nav__bar True Disable Enable Login Entry -> shared nav left.css sl-nav__bar True Enable Disable Right Entry: CSS Naming Interop Mobeile Desktop Login Entry -> shared nav right.css sl-nav__bar True Enable Disable Message Entry nav right.css sl-nav__bar True Disable Enable History Entry nav right.css sl-nav__bar True Disable Enable Upload Entry nav right.css sl-nav__bar True Disable Enable Main Layout: CSS Naming Interop Mobeile Desktop Recommend nav suggest.css sl-layout__recommend True Enable Enable Holder nav container.css sl-layout__holder True Enable Enable Layout should get the data from database under ranking . Feature Request Response Page Loading GET /api/post RETURN JSON GET /api/user/vertify RETURN token Search GET /api/post/tag RETURN JSON sequenceDiagram participant local participant client participant server client-->>local: get user info client-->>local: get token local->>client: user? client->>local: render user entry or login entry local->>client: token client->>server: send user server->>client: return new token client->>server: Request /api/post server->>client: Response img.src and name Search panel implement: flowchart TD Static --> focus{On focus} focus --> |No longer focus| End focus --> |Stay| extend[Open large] focus --> |Input > 0| search[Searching] extend ---> |On extend outer| End extend --> |On extend| extend search --> |> 0| extendListLayout[List searching result] search --> |< 0| extend extendListLayout --> End User avatar icon implement: flowchart TD small[User small icon] --> mouseover{On top} mouseover --> |Stay > 0.3s| large[User large icon] mouseover --> |Stay < 0.3s| lockevent[set time out] mouseover --> |Locked| End lockevent --> large large --> leave[Leave] leave --> End","title":"Main Page"},{"location":"ShaderLabPageMain/#feature","text":"The core feature of home page should have three key features: search, user, preview features. In the web page, should have entrance to editor page and login page (conditional). Structure design: Navigation, Layout Navigation: search, filter and user control. CSS Naming Interop Mobeile Desktop Navigation nav.css sl-nav True Enable Enable Main Layout layout.css sl-layout True Enable Enable","title":"Feature"},{"location":"ShaderLabPageMain/#analyze","text":"This page should contain 50% functions of the application, including search, user, info. Navigation Bar: Elements under navigation bar has two stage: - normal -> mini icon. - large -> panel and large icon. Left Entry: CSS Naming Interop Mobeile Desktop Home Entry nav left.css sl-nav__bar True Disable Enable Login Entry -> shared nav left.css sl-nav__bar True Enable Disable Right Entry: CSS Naming Interop Mobeile Desktop Login Entry -> shared nav right.css sl-nav__bar True Enable Disable Message Entry nav right.css sl-nav__bar True Disable Enable History Entry nav right.css sl-nav__bar True Disable Enable Upload Entry nav right.css sl-nav__bar True Disable Enable Main Layout: CSS Naming Interop Mobeile Desktop Recommend nav suggest.css sl-layout__recommend True Enable Enable Holder nav container.css sl-layout__holder True Enable Enable Layout should get the data from database under ranking . Feature Request Response Page Loading GET /api/post RETURN JSON GET /api/user/vertify RETURN token Search GET /api/post/tag RETURN JSON sequenceDiagram participant local participant client participant server client-->>local: get user info client-->>local: get token local->>client: user? client->>local: render user entry or login entry local->>client: token client->>server: send user server->>client: return new token client->>server: Request /api/post server->>client: Response img.src and name Search panel implement: flowchart TD Static --> focus{On focus} focus --> |No longer focus| End focus --> |Stay| extend[Open large] focus --> |Input > 0| search[Searching] extend ---> |On extend outer| End extend --> |On extend| extend search --> |> 0| extendListLayout[List searching result] search --> |< 0| extend extendListLayout --> End User avatar icon implement: flowchart TD small[User small icon] --> mouseover{On top} mouseover --> |Stay > 0.3s| large[User large icon] mouseover --> |Stay < 0.3s| lockevent[set time out] mouseover --> |Locked| End lockevent --> large large --> leave[Leave] leave --> End","title":"Analyze"}]}