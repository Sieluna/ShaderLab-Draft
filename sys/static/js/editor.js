/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./sys/public/js/editor.js":
/*!*********************************!*\
  !*** ./sys/public/js/editor.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"structure\": () => (/* binding */ structure)\n/* harmony export */ });\n/* harmony import */ var _editor_instance_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./editor/instance.js */ \"./sys/public/js/editor/instance.js\");\n/* harmony import */ var _element_editor_state_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element/editor/state.js */ \"./sys/public/js/element/editor/state.js\");\n/* harmony import */ var _element_editor_render_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element/editor/render.js */ \"./sys/public/js/element/editor/render.js\");\n/* harmony import */ var _element_editor_action_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./element/editor/action.js */ \"./sys/public/js/element/editor/action.js\");\n/* harmony import */ var _element_shared_user_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./element/shared/user.js */ \"./sys/public/js/element/shared/user.js\");\n/* harmony import */ var _element_shared_search_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./element/shared/search.js */ \"./sys/public/js/element/shared/search.js\");\n/* harmony import */ var _element_editor_template_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./element/editor/template.js */ \"./sys/public/js/element/editor/template.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst user = {}\r\n\r\nconst compileElement = document.querySelectorAll(\".sl-editor .compile\");\r\nconst avatarElement = document.querySelector(\".sl-nav .avatar-container\");\r\nconst panelElement = document.querySelector(\".sl-editor #panel\");\r\n\r\nif (user != null) {\r\n    document.querySelectorAll(\".sl-nav .login-entry\").forEach(node => node.setAttribute(\"style\", \"display: none\"));\r\n    avatarElement.setAttribute(\"style\", \"display: block\");\r\n} else {\r\n    document.querySelectorAll(\".sl-nav .login-entry\").forEach(node => node.setAttribute(\"style\", \"display: block\"));\r\n    avatarElement.setAttribute(\"style\", \"display: none\");\r\n}\r\n\r\nlet tempId = -1, structure = [];\r\n\r\n_element_editor_action_js__WEBPACK_IMPORTED_MODULE_3__.editor.on(\"nodeCreated\", function(id) {\r\n    console.log(\"select\", tempId, id, _element_editor_action_js__WEBPACK_IMPORTED_MODULE_3__.editor.getNodeFromId(id));\r\n    if (tempId > 0) document.getElementById(`glsl_${tempId}`).style.display = \"none\";\r\n    let target = document.createElement(\"div\");\r\n    target.id = `glsl_${id}`;\r\n    panelElement.append(target);\r\n    structure[id] = _element_editor_action_js__WEBPACK_IMPORTED_MODULE_3__.editor.getNodeFromId(id).name;\r\n    switch (structure[id]) {\r\n        case \"vertex\":\r\n            (0,_editor_instance_js__WEBPACK_IMPORTED_MODULE_0__.glslInstance)(\"glsl_\" + id, target, _element_editor_template_js__WEBPACK_IMPORTED_MODULE_6__.baseVs);\r\n            break;\r\n        case \"fragment\":\r\n            (0,_editor_instance_js__WEBPACK_IMPORTED_MODULE_0__.glslInstance)(\"glsl_\" + id, target, _element_editor_template_js__WEBPACK_IMPORTED_MODULE_6__.baseFs);\r\n            break;\r\n        default:\r\n            (0,_editor_instance_js__WEBPACK_IMPORTED_MODULE_0__.glslInstance)(\"glsl_\" + id, target, _element_editor_template_js__WEBPACK_IMPORTED_MODULE_6__.base);\r\n            break;\r\n    }\r\n    tempId = id;\r\n})\r\n\r\n_element_editor_action_js__WEBPACK_IMPORTED_MODULE_3__.editor.on(\"nodeSelected\", function(id) {\r\n    console.log(\"select\", tempId, id, _element_editor_action_js__WEBPACK_IMPORTED_MODULE_3__.editor.getNodeFromId(id));\r\n    if (tempId == id) return\r\n    let target = document.getElementById(`glsl_${id}`);\r\n    if (target) {\r\n        document.getElementById(`glsl_${tempId}`).style.display = \"none\";\r\n        target.style.display = \"block\";\r\n        (0,_editor_instance_js__WEBPACK_IMPORTED_MODULE_0__.glslInstance)(\"glsl_\" + id, target);\r\n        tempId = id;\r\n    } else {\r\n        document.getElementById(`glsl_${tempId}`).style.display = \"none\";\r\n        target = document.createElement(\"div\");\r\n        target.id = `glsl_${id}`;\r\n        panelElement.append(target);\r\n        (0,_editor_instance_js__WEBPACK_IMPORTED_MODULE_0__.glslInstance)(\"glsl_\" + id, target);\r\n        tempId = id;\r\n    }\r\n})\r\n\r\nwindow.onload = () => {\r\n    //document.addEventListener(\"click\", () => {\r\n    //    let formData = new FormData();\r\n    //    formData.append(\"topic\", \"\");\r\n    //    formData.append(\"name\", \"\");\r\n    //    formData.append(\"content\", \"\")\r\n    //    fetch(\"/api/post\", {\r\n    //        method: \"POST\",\r\n    //        headers: new Headers({ \"Authorization\": \"Bearer \" + localStorage.getItem(\"token\") }),\r\n    //        body: formData,\r\n    //    })\r\n    //});\r\n    ;(0,_element_shared_search_js__WEBPACK_IMPORTED_MODULE_5__.searchFeature)();\r\n    (0,_element_shared_user_js__WEBPACK_IMPORTED_MODULE_4__.userFeature)(user);\r\n    (0,_element_editor_state_js__WEBPACK_IMPORTED_MODULE_1__.stateFeature)();\r\n    (0,_element_editor_render_js__WEBPACK_IMPORTED_MODULE_2__.babylonFeature)();\r\n    (0,_element_editor_action_js__WEBPACK_IMPORTED_MODULE_3__.flowFeature)();\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor.js?");

/***/ }),

/***/ "./sys/public/js/editor/bottom.js":
/*!****************************************!*\
  !*** ./sys/public/js/editor/bottom.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"wordCounter\": () => (/* binding */ wordCounter)\n/* harmony export */ });\n/* harmony import */ var _dist_view_panel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/view/panel.js */ \"./sys/public/js/editor/dist/view/panel.js\");\n/* harmony import */ var _element_editor_render_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../element/editor/render.js */ \"./sys/public/js/element/editor/render.js\");\n\r\n\r\n\r\nfunction countWords(doc) {\r\n    let count = 0, iter = doc.iter();\r\n    while (!iter.next().done) {\r\n        for (let i = 0; i < iter.value.length; i++) {\r\n            let word = /\\w/.test(iter.value[i]);\r\n            if (word) count++;\r\n        }\r\n    }\r\n    return `Char count: ${count}`;\r\n}\r\n\r\nfunction wordCountPanel(view) {\r\n    let dom = document.createElement(\"div\"),\r\n        left = document.createElement(\"div\"),\r\n        right = document.createElement(\"div\");\r\n    dom.append(left, right);\r\n    dom.style.background = \"#fff\"\r\n    dom.style.display = \"flex\";\r\n    dom.style.justifyContent = \"space-between\";\r\n    dom.style.lineHeight = \"28px\";\r\n    dom.style.fontSize = \"14px\";\r\n    left.style.margin = \"3px 0 0 18px\";\r\n    left.textContent = countWords(view.state.doc);\r\n    right.style.margin = \"3px 18px 0 0\";\r\n    right.style.border = \"1px solid #ccc\";\r\n    right.style.borderRadius = \"10px\";\r\n    right.style.width = \"75px\";\r\n    right.style.cursor = \"pointer\";\r\n    right.style.textAlign = \"center\";\r\n    right.textContent = \"Compiler\";\r\n    right.addEventListener(\"click\", _element_editor_render_js__WEBPACK_IMPORTED_MODULE_1__.compile)\r\n    return {\r\n        dom,\r\n        update(update) {\r\n            if (update.docChanged)\r\n                left.textContent = countWords(update.state.doc);\r\n        }\r\n    }\r\n}\r\n\r\nconst wordCounter = _dist_view_panel_js__WEBPACK_IMPORTED_MODULE_0__.showPanel.of(wordCountPanel);\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/bottom.js?");

/***/ }),

/***/ "./sys/public/js/editor/default.js":
/*!*****************************************!*\
  !*** ./sys/public/js/editor/default.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"defaultConfig\": () => (/* binding */ defaultConfig)\n/* harmony export */ });\n/* harmony import */ var _dist_view_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _dist_state_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dist/state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _dist_language_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dist/language/index.js */ \"./sys/public/js/editor/dist/language/index.js\");\n/* harmony import */ var _dist_commands_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dist/commands/index.js */ \"./sys/public/js/editor/dist/commands/index.js\");\n/* harmony import */ var _dist_search_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dist/search/index.js */ \"./sys/public/js/editor/dist/search/index.js\");\n/* harmony import */ var _dist_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dist/autocomplete/index.js */ \"./sys/public/js/editor/dist/autocomplete/index.js\");\n/* harmony import */ var _dist_lint_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dist/lint/index.js */ \"./sys/public/js/editor/dist/lint/index.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst defaultConfig = [\r\n    (0,_dist_view_index_js__WEBPACK_IMPORTED_MODULE_0__.lineNumbers)(),\r\n    (0,_dist_view_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightActiveLineGutter)(),\r\n    (0,_dist_view_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightSpecialChars)(),\r\n    (0,_dist_commands_index_js__WEBPACK_IMPORTED_MODULE_3__.history)(),\r\n    (0,_dist_language_index_js__WEBPACK_IMPORTED_MODULE_2__.foldGutter)(),\r\n    (0,_dist_view_index_js__WEBPACK_IMPORTED_MODULE_0__.drawSelection)(),\r\n    (0,_dist_view_index_js__WEBPACK_IMPORTED_MODULE_0__.dropCursor)(),\r\n    _dist_state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorState.allowMultipleSelections.of(true),\r\n    (0,_dist_language_index_js__WEBPACK_IMPORTED_MODULE_2__.indentOnInput)(),\r\n    (0,_dist_language_index_js__WEBPACK_IMPORTED_MODULE_2__.syntaxHighlighting)(_dist_language_index_js__WEBPACK_IMPORTED_MODULE_2__.defaultHighlightStyle, { fallback: true }),\r\n    (0,_dist_language_index_js__WEBPACK_IMPORTED_MODULE_2__.bracketMatching)(),\r\n    (0,_dist_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__.closeBrackets)(),\r\n    (0,_dist_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__.autocompletion)(),\r\n    (0,_dist_view_index_js__WEBPACK_IMPORTED_MODULE_0__.rectangularSelection)(),\r\n    (0,_dist_view_index_js__WEBPACK_IMPORTED_MODULE_0__.crosshairCursor)(),\r\n    (0,_dist_view_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightActiveLine)(),\r\n    (0,_dist_search_index_js__WEBPACK_IMPORTED_MODULE_4__.highlightSelectionMatches)(),\r\n    _dist_view_index_js__WEBPACK_IMPORTED_MODULE_0__.keymap.of([\r\n        ..._dist_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__.closeBracketsKeymap,\r\n        ..._dist_commands_index_js__WEBPACK_IMPORTED_MODULE_3__.defaultKeymap,\r\n        ..._dist_search_index_js__WEBPACK_IMPORTED_MODULE_4__.searchKeymap,\r\n        ..._dist_commands_index_js__WEBPACK_IMPORTED_MODULE_3__.historyKeymap,\r\n        ..._dist_language_index_js__WEBPACK_IMPORTED_MODULE_2__.foldKeymap,\r\n        ..._dist_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__.completionKeymap,\r\n        ..._dist_lint_index_js__WEBPACK_IMPORTED_MODULE_6__.lintKeymap\r\n    ])\r\n];\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/default.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/autocomplete/closebrackets.js":
/*!*****************************************************************!*\
  !*** ./sys/public/js/editor/dist/autocomplete/closebrackets.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"closeBrackets\": () => (/* binding */ closeBrackets),\n/* harmony export */   \"closeBracketsKeymap\": () => (/* binding */ closeBracketsKeymap),\n/* harmony export */   \"deleteBracketPair\": () => (/* binding */ deleteBracketPair),\n/* harmony export */   \"insertBracket\": () => (/* binding */ insertBracket)\n/* harmony export */ });\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _language_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../language/index.js */ \"./sys/public/js/editor/dist/language/index.js\");\n\r\n\r\n\r\nconst defaults = {\r\n    brackets: [\"(\", \"[\", \"{\", \"'\", '\"'],\r\n    before: \")]}:;>\"\r\n};\r\nconst closeBracketEffect = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define({\r\n    map(value, mapping) {\r\n        let mapped = mapping.mapPos(value, -1, _state_index_js__WEBPACK_IMPORTED_MODULE_1__.MapMode.TrackAfter);\r\n        return mapped == null ? undefined : mapped;\r\n    }\r\n});\r\nconst skipBracketEffect = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define({\r\n    map(value, mapping) { return mapping.mapPos(value); }\r\n});\r\nconst closedBracket = new class extends _state_index_js__WEBPACK_IMPORTED_MODULE_1__.RangeValue {\r\n};\r\nclosedBracket.startSide = 1;\r\nclosedBracket.endSide = -1;\r\nconst bracketState = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create() { return _state_index_js__WEBPACK_IMPORTED_MODULE_1__.RangeSet.empty; },\r\n    update(value, tr) {\r\n        if (tr.selection) {\r\n            let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;\r\n            let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;\r\n            if (lineStart != tr.changes.mapPos(prevLineStart, -1))\r\n                value = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.RangeSet.empty;\r\n        }\r\n        value = value.map(tr.changes);\r\n        for (let effect of tr.effects) {\r\n            if (effect.is(closeBracketEffect))\r\n                value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });\r\n            else if (effect.is(skipBracketEffect))\r\n                value = value.update({ filter: from => from != effect.value });\r\n        }\r\n        return value;\r\n    }\r\n});\r\nfunction closeBrackets() {\r\n    return [inputHandler, bracketState];\r\n}\r\nconst definedClosing = \"()[]{}<>\";\r\nfunction closing(ch) {\r\n    for (let i = 0; i < definedClosing.length; i += 2)\r\n        if (definedClosing.charCodeAt(i) == ch)\r\n            return definedClosing.charAt(i + 1);\r\n    return (0,_state_index_js__WEBPACK_IMPORTED_MODULE_1__.fromCodePoint)(ch < 128 ? ch : ch + 1);\r\n}\r\nfunction config(state, pos) {\r\n    return state.languageDataAt(\"closeBrackets\", pos)[0] || defaults;\r\n}\r\nconst android = typeof navigator == \"object\" && /Android\\b/.test(navigator.userAgent);\r\nconst inputHandler = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.inputHandler.of((view, from, to, insert) => {\r\n    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)\r\n        return false;\r\n    let sel = view.state.selection.main;\r\n    if (insert.length > 2 || insert.length == 2 && (0,_state_index_js__WEBPACK_IMPORTED_MODULE_1__.codePointSize)((0,_state_index_js__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(insert, 0)) == 1 ||\r\n        from != sel.from || to != sel.to)\r\n        return false;\r\n    let tr = insertBracket(view.state, insert);\r\n    if (!tr)\r\n        return false;\r\n    view.dispatch(tr);\r\n    return true;\r\n});\r\n/** Command that implements deleting a pair of matching brackets when the cursor is between them. */\r\nconst deleteBracketPair = ({ state, dispatch }) => {\r\n    if (state.readOnly)\r\n        return false;\r\n    let conf = config(state, state.selection.main.head);\r\n    let tokens = conf.brackets || defaults.brackets;\r\n    let dont = null, changes = state.changeByRange(range => {\r\n        if (range.empty) {\r\n            let before = prevChar(state.doc, range.head);\r\n            for (let token of tokens) {\r\n                if (token == before && nextChar(state.doc, range.head) == closing((0,_state_index_js__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(token, 0)))\r\n                    return { changes: { from: range.head - token.length, to: range.head + token.length },\r\n                        range: _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.head - token.length),\r\n                        userEvent: \"delete.backward\" };\r\n            }\r\n        }\r\n        return { range: dont = range };\r\n    });\r\n    if (!dont)\r\n        dispatch(state.update(changes, { scrollIntoView: true }));\r\n    return !dont;\r\n};\r\n/** Close-brackets related key bindings. Binds Backspace to {@link deleteBracketPair}. */\r\nconst closeBracketsKeymap = [\r\n    { key: \"Backspace\", run: deleteBracketPair }\r\n];\r\nfunction insertBracket(state, bracket) {\r\n    let conf = config(state, state.selection.main.head);\r\n    let tokens = conf.brackets || defaults.brackets;\r\n    for (let tok of tokens) {\r\n        let closed = closing((0,_state_index_js__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(tok, 0));\r\n        if (bracket == tok)\r\n            return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1)\r\n                : handleOpen(state, tok, closed, conf.before || defaults.before);\r\n        if (bracket == closed && closedBracketAt(state, state.selection.main.from))\r\n            return handleClose(state, tok, closed);\r\n    }\r\n    return null;\r\n}\r\nfunction closedBracketAt(state, pos) {\r\n    let found = false;\r\n    state.field(bracketState).between(0, state.doc.length, from => {\r\n        if (from == pos)\r\n            found = true;\r\n    });\r\n    return found;\r\n}\r\nfunction nextChar(doc, pos) {\r\n    let next = doc.sliceString(pos, pos + 2);\r\n    return next.slice(0, (0,_state_index_js__WEBPACK_IMPORTED_MODULE_1__.codePointSize)((0,_state_index_js__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(next, 0)));\r\n}\r\nfunction prevChar(doc, pos) {\r\n    let prev = doc.sliceString(pos - 2, pos);\r\n    return (0,_state_index_js__WEBPACK_IMPORTED_MODULE_1__.codePointSize)((0,_state_index_js__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(prev, 0)) == prev.length ? prev : prev.slice(1);\r\n}\r\nfunction handleOpen(state, open, close, closeBefore) {\r\n    let dont = null, changes = state.changeByRange(range => {\r\n        if (!range.empty)\r\n            return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],\r\n                effects: closeBracketEffect.of(range.to + open.length),\r\n                range: _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(range.anchor + open.length, range.head + open.length) };\r\n        let next = nextChar(state.doc, range.head);\r\n        if (!next || /\\s/.test(next) || closeBefore.indexOf(next) > -1)\r\n            return { changes: { insert: open + close, from: range.head },\r\n                effects: closeBracketEffect.of(range.head + open.length),\r\n                range: _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.head + open.length) };\r\n        return { range: dont = range };\r\n    });\r\n    return dont ? null : state.update(changes, {\r\n        scrollIntoView: true,\r\n        userEvent: \"input.type\"\r\n    });\r\n}\r\nfunction handleClose(state, _open, close) {\r\n    let dont = null, moved = state.selection.ranges.map(range => {\r\n        if (range.empty && nextChar(state.doc, range.head) == close)\r\n            return _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.head + close.length);\r\n        return dont = range;\r\n    });\r\n    return dont ? null : state.update({\r\n        selection: _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(moved, state.selection.mainIndex),\r\n        scrollIntoView: true,\r\n        effects: state.selection.ranges.map(({ from }) => skipBracketEffect.of(from))\r\n    });\r\n}\r\nfunction handleSame(state, token, allowTriple) {\r\n    let dont = null, changes = state.changeByRange(range => {\r\n        if (!range.empty)\r\n            return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],\r\n                effects: closeBracketEffect.of(range.to + token.length),\r\n                range: _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(range.anchor + token.length, range.head + token.length) };\r\n        let pos = range.head, next = nextChar(state.doc, pos);\r\n        if (next == token) {\r\n            if (nodeStart(state, pos)) {\r\n                return { changes: { insert: token + token, from: pos },\r\n                    effects: closeBracketEffect.of(pos + token.length),\r\n                    range: _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(pos + token.length) };\r\n            }\r\n            else if (closedBracketAt(state, pos)) {\r\n                let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;\r\n                return { range: _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),\r\n                    effects: skipBracketEffect.of(pos) };\r\n            }\r\n        }\r\n        else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&\r\n            nodeStart(state, pos - 2 * token.length)) {\r\n            return { changes: { insert: token + token + token + token, from: pos },\r\n                effects: closeBracketEffect.of(pos + token.length),\r\n                range: _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(pos + token.length) };\r\n        }\r\n        else if (state.charCategorizer(pos)(next) != _state_index_js__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word) {\r\n            let prev = state.sliceDoc(pos - 1, pos);\r\n            if (prev != token && state.charCategorizer(pos)(prev) != _state_index_js__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word && !probablyInString(state, pos, token))\r\n                return { changes: { insert: token + token, from: pos },\r\n                    effects: closeBracketEffect.of(pos + token.length),\r\n                    range: _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(pos + token.length) };\r\n        }\r\n        return { range: dont = range };\r\n    });\r\n    return dont ? null : state.update(changes, {\r\n        scrollIntoView: true,\r\n        userEvent: \"input.type\"\r\n    });\r\n}\r\nfunction nodeStart(state, pos) {\r\n    let tree = (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.syntaxTree)(state).resolveInner(pos + 1);\r\n    return tree.parent && tree.from == pos;\r\n}\r\nfunction probablyInString(state, pos, quoteToken) {\r\n    let node = (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.syntaxTree)(state).resolveInner(pos, -1);\r\n    for (let i = 0; i < 5; i++) {\r\n        if (state.sliceDoc(node.from, node.from + quoteToken.length) == quoteToken)\r\n            return true;\r\n        let parent = node.to == pos && node.parent;\r\n        if (!parent)\r\n            break;\r\n        node = parent;\r\n    }\r\n    return false;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/autocomplete/closebrackets.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/autocomplete/completion.js":
/*!**************************************************************!*\
  !*** ./sys/public/js/editor/dist/autocomplete/completion.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CompletionContext\": () => (/* binding */ CompletionContext),\n/* harmony export */   \"Option\": () => (/* binding */ Option),\n/* harmony export */   \"applyCompletion\": () => (/* binding */ applyCompletion),\n/* harmony export */   \"asSource\": () => (/* binding */ asSource),\n/* harmony export */   \"completeFromList\": () => (/* binding */ completeFromList),\n/* harmony export */   \"cur\": () => (/* binding */ cur),\n/* harmony export */   \"ensureAnchor\": () => (/* binding */ ensureAnchor),\n/* harmony export */   \"ifIn\": () => (/* binding */ ifIn),\n/* harmony export */   \"ifNotIn\": () => (/* binding */ ifNotIn),\n/* harmony export */   \"pickedCompletion\": () => (/* binding */ pickedCompletion)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _language_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../language/index.js */ \"./sys/public/js/editor/dist/language/index.js\");\n\r\n\r\nclass CompletionContext {\r\n    constructor(state, pos, explicit) {\r\n        this.state = state;\r\n        this.pos = pos;\r\n        this.explicit = explicit;\r\n        // @internal\r\n        this.abortListeners = [];\r\n    }\r\n    tokenBefore(types) {\r\n        let token = (0,_language_index_js__WEBPACK_IMPORTED_MODULE_1__.syntaxTree)(this.state).resolveInner(this.pos, -1);\r\n        while (token && types.indexOf(token.name) < 0)\r\n            token = token.parent;\r\n        return token ? { from: token.from, to: this.pos,\r\n            text: this.state.sliceDoc(token.from, this.pos),\r\n            type: token.type } : null;\r\n    }\r\n    /** @return Get the match of ythe given expression directly before the cursor */\r\n    matchBefore(expr) {\r\n        let line = this.state.doc.lineAt(this.pos);\r\n        let start = Math.max(line.from, this.pos - 250);\r\n        let str = line.text.slice(start - line.from, this.pos - line.from);\r\n        let found = str.search(ensureAnchor(expr, false));\r\n        return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };\r\n    }\r\n    get aborted() {\r\n        return this.abortListeners == null;\r\n    }\r\n    addEventListener(type, listener) {\r\n        if (type == \"abort\" && this.abortListeners)\r\n            this.abortListeners.push(listener);\r\n    }\r\n}\r\nfunction toSet(chars) {\r\n    let flat = Object.keys(chars).join(\"\");\r\n    let words = /\\w/.test(flat);\r\n    if (words)\r\n        flat = flat.replace(/\\w/g, \"\");\r\n    return `[${words ? \"\\\\w\" : \"\"}${flat.replace(/[^\\w\\s]/g, \"\\\\$&\")}]`;\r\n}\r\nfunction prefixMatch(options) {\r\n    let first = Object.create(null), rest = Object.create(null);\r\n    for (let { label } of options) {\r\n        first[label[0]] = true;\r\n        for (let i = 1; i < label.length; i++)\r\n            rest[label[i]] = true;\r\n    }\r\n    let source = toSet(first) + toSet(rest) + \"*$\";\r\n    return [new RegExp(\"^\" + source), new RegExp(source)];\r\n}\r\nfunction completeFromList(list) {\r\n    let options = list.map(o => typeof o == \"string\" ? { label: o } : o);\r\n    let [validFor, match] = options.every(o => /^\\w+$/.test(o.label)) ? [/\\w*$/, /\\w+$/] : prefixMatch(options);\r\n    return (context) => {\r\n        let token = context.matchBefore(match);\r\n        return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;\r\n    };\r\n}\r\n/** Wrap the given completion source so that it will only fire when the cursor is in a syntax node with on of the given names */\r\nfunction ifIn(nodes, source) {\r\n    return (context) => {\r\n        for (let pos = (0,_language_index_js__WEBPACK_IMPORTED_MODULE_1__.syntaxTree)(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent)\r\n            if (nodes.indexOf(pos.name) > -1)\r\n                return source(context);\r\n        return null;\r\n    };\r\n}\r\n/**  Wrap the given completion source so that it will not fire when the cursor is in a syntax node with one of the given names. */\r\nfunction ifNotIn(nodes, source) {\r\n    return (context) => {\r\n        for (let pos = (0,_language_index_js__WEBPACK_IMPORTED_MODULE_1__.syntaxTree)(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent)\r\n            if (nodes.indexOf(pos.name) > -1)\r\n                return null;\r\n        return source(context);\r\n    };\r\n}\r\nclass Option {\r\n    constructor(completion, source, match) {\r\n        this.completion = completion;\r\n        this.source = source;\r\n        this.match = match;\r\n    }\r\n}\r\nfunction cur(state) { return state.selection.main.head; }\r\nfunction ensureAnchor(expr, start) {\r\n    var _a;\r\n    let { source } = expr;\r\n    let addStart = start && source[0] != \"^\", addEnd = source[source.length - 1] != \"$\";\r\n    if (!addStart && !addEnd)\r\n        return expr;\r\n    return new RegExp(`${addStart ? \"^\" : \"\"}(?:${source})${addEnd ? \"$\" : \"\"}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? \"i\" : \"\"));\r\n}\r\nconst pickedCompletion = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Annotation.define();\r\nfunction applyCompletion(view, option) {\r\n    const apply = option.completion.apply || option.completion.label;\r\n    let result = option.source;\r\n    if (typeof apply == \"string\") {\r\n        view.dispatch(view.state.changeByRange(range => {\r\n            if (range == view.state.selection.main)\r\n                return {\r\n                    changes: { from: result.from, to: result.to, insert: apply },\r\n                    range: _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(result.from + apply.length)\r\n                };\r\n            let len = result.to - result.from;\r\n            if (!range.empty ||\r\n                len && view.state.sliceDoc(range.from - len, range.from) != view.state.sliceDoc(result.from, result.to))\r\n                return { range };\r\n            return {\r\n                changes: { from: range.from - len, to: range.from, insert: apply },\r\n                range: _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(range.from - len + apply.length)\r\n            };\r\n        }), {\r\n            userEvent: \"input.complete\",\r\n            annotations: pickedCompletion.of(option.completion)\r\n        });\r\n    }\r\n    else {\r\n        apply(view, option.completion, result.from, result.to);\r\n    }\r\n}\r\nconst SourceCache = new WeakMap();\r\nfunction asSource(source) {\r\n    if (!Array.isArray(source))\r\n        return source;\r\n    let known = SourceCache.get(source);\r\n    if (!known)\r\n        SourceCache.set(source, known = completeFromList(source));\r\n    return known;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/autocomplete/completion.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/autocomplete/config.js":
/*!**********************************************************!*\
  !*** ./sys/public/js/editor/dist/autocomplete/config.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"completionConfig\": () => (/* binding */ completionConfig)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n\r\nconst completionConfig = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({\r\n    combine(configs) {\r\n        return (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.combineConfig)(configs, {\r\n            activateOnTyping: true,\r\n            override: null,\r\n            maxRenderedOptions: 100,\r\n            defaultKeymap: true,\r\n            optionClass: () => \"\",\r\n            aboveCursor: false,\r\n            icons: true,\r\n            addToOptions: []\r\n        }, {\r\n            defaultKeymap: (a, b) => a && b,\r\n            icons: (a, b) => a && b,\r\n            optionClass: (a, b) => c => joinClass(a(c), b(c)),\r\n            addToOptions: (a, b) => a.concat(b)\r\n        });\r\n    }\r\n});\r\nfunction joinClass(a, b) {\r\n    return a ? b ? a + \" \" + b : a : b;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/autocomplete/config.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/autocomplete/filter.js":
/*!**********************************************************!*\
  !*** ./sys/public/js/editor/dist/autocomplete/filter.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FuzzyMatcher\": () => (/* binding */ FuzzyMatcher)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n\r\n/** A pattern matcher for fuzzy completion matching. Create an instance once for a pattern, and then use that to match any number of completions. */\r\nclass FuzzyMatcher {\r\n    constructor(pattern) {\r\n        this.pattern = pattern;\r\n        this.chars = [];\r\n        this.folded = [];\r\n        // Buffers reused by calls to `match` to track matched character positions.\r\n        this.any = [];\r\n        this.precise = [];\r\n        this.byWord = [];\r\n        for (let p = 0; p < pattern.length;) {\r\n            let char = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.codePointAt)(pattern, p), size = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.codePointSize)(char);\r\n            this.chars.push(char);\r\n            let part = pattern.slice(p, p + size), upper = part.toUpperCase();\r\n            this.folded.push((0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.codePointAt)(upper == part ? part.toLowerCase() : upper, 0));\r\n            p += size;\r\n        }\r\n        this.astral = pattern.length != this.chars.length;\r\n    }\r\n    /** Matches a given word (completion) against the pattern (input). */\r\n    match(word) {\r\n        if (this.pattern.length == 0)\r\n            return [0];\r\n        if (word.length < this.pattern.length)\r\n            return null;\r\n        let { chars, folded, any, precise, byWord } = this;\r\n        // For single-character queries, only match when they occur right at the start\r\n        if (chars.length == 1) {\r\n            let first = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.codePointAt)(word, 0);\r\n            return first == chars[0] ? [0, 0, (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.codePointSize)(first)] :\r\n                first == folded[0] ? [-200 /* CaseFold */, 0, (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.codePointSize)(first)] : null;\r\n        }\r\n        let direct = word.indexOf(this.pattern);\r\n        if (direct == 0)\r\n            return [0, 0, this.pattern.length];\r\n        let len = chars.length, anyTo = 0;\r\n        if (direct < 0) {\r\n            for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {\r\n                let next = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.codePointAt)(word, i);\r\n                if (next == chars[anyTo] || next == folded[anyTo])\r\n                    any[anyTo++] = i;\r\n                i += (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.codePointSize)(next);\r\n            }\r\n            // No match, exit immediately\r\n            if (anyTo < len)\r\n                return null;\r\n        }\r\n        // This tracks the extent of the precise (non-folded, not necessarily adjacent) match\r\n        let preciseTo = 0;\r\n        // Tracks whether there is a match that hits only characters that appear to be starting words. `byWordFolded` is set to true when\r\n        // a case folded character is encountered in such a match\r\n        let byWordTo = 0, byWordFolded = false;\r\n        // If we've found a partial adjacent match, these track its state\r\n        let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;\r\n        let hasLower = /[a-z]/.test(word), wordAdjacent = true;\r\n        // Go over the option's text, scanning for the various kinds of matches\r\n        for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* NonWord */; i < e && byWordTo < len;) {\r\n            let next = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.codePointAt)(word, i);\r\n            if (direct < 0) {\r\n                if (preciseTo < len && next == chars[preciseTo])\r\n                    precise[preciseTo++] = i;\r\n                if (adjacentTo < len) {\r\n                    if (next == chars[adjacentTo] || next == folded[adjacentTo]) {\r\n                        if (adjacentTo == 0)\r\n                            adjacentStart = i;\r\n                        adjacentEnd = i + 1;\r\n                        adjacentTo++;\r\n                    }\r\n                    else {\r\n                        adjacentTo = 0;\r\n                    }\r\n                }\r\n            }\r\n            let ch, type = next < 0xff ?\r\n                (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Lower */ : next >= 65 && next <= 90 ? 1 /* Upper */ : 0 /* NonWord */) :\r\n                ((ch = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.fromCodePoint)(next)) != ch.toLowerCase() ? 1 /* Upper */ : ch != ch.toUpperCase() ? 2 /* Lower */ : 0 /* NonWord */);\r\n            if (!i || type == 1 /* Upper */ && hasLower || prevType == 0 /* NonWord */ && type != 0 /* NonWord */) {\r\n                if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))\r\n                    byWord[byWordTo++] = i;\r\n                else if (byWord.length)\r\n                    wordAdjacent = false;\r\n            }\r\n            prevType = type;\r\n            i += (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.codePointSize)(next);\r\n        }\r\n        if (byWordTo == len && byWord[0] == 0 && wordAdjacent)\r\n            return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0), byWord, word);\r\n        if (adjacentTo == len && adjacentStart == 0)\r\n            return [-200 /* CaseFold */ - word.length, 0, adjacentEnd];\r\n        if (direct > -1)\r\n            return [-700 /* NotStart */ - word.length, direct, direct + this.pattern.length];\r\n        if (adjacentTo == len)\r\n            return [-200 /* CaseFold */ + -700 /* NotStart */ - word.length, adjacentStart, adjacentEnd];\r\n        if (byWordTo == len)\r\n            return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0) + -700 /* NotStart */ +\r\n                (wordAdjacent ? 0 : -1100 /* Gap */), byWord, word);\r\n        return chars.length == 2 ? null : this.result((any[0] ? -700 /* NotStart */ : 0) + -200 /* CaseFold */ + -1100 /* Gap */, any, word);\r\n    }\r\n    result(score, positions, word) {\r\n        let result = [score - word.length], i = 1;\r\n        for (let pos of positions) {\r\n            let to = pos + (this.astral ? (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.codePointSize)((0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.codePointAt)(word, pos)) : 1);\r\n            if (i > 1 && result[i - 1] == pos)\r\n                result[i - 1] = to;\r\n            else {\r\n                result[i++] = pos;\r\n                result[i++] = to;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/autocomplete/filter.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/autocomplete/index.js":
/*!*********************************************************!*\
  !*** ./sys/public/js/editor/dist/autocomplete/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CompletionContext\": () => (/* reexport safe */ _completion_js__WEBPACK_IMPORTED_MODULE_7__.CompletionContext),\n/* harmony export */   \"acceptCompletion\": () => (/* reexport safe */ _view_js__WEBPACK_IMPORTED_MODULE_4__.acceptCompletion),\n/* harmony export */   \"autocompletion\": () => (/* binding */ autocompletion),\n/* harmony export */   \"clearSnippet\": () => (/* reexport safe */ _snippet_js__WEBPACK_IMPORTED_MODULE_6__.clearSnippet),\n/* harmony export */   \"closeBrackets\": () => (/* reexport safe */ _closebrackets_js__WEBPACK_IMPORTED_MODULE_9__.closeBrackets),\n/* harmony export */   \"closeBracketsKeymap\": () => (/* reexport safe */ _closebrackets_js__WEBPACK_IMPORTED_MODULE_9__.closeBracketsKeymap),\n/* harmony export */   \"closeCompletion\": () => (/* reexport safe */ _view_js__WEBPACK_IMPORTED_MODULE_4__.closeCompletion),\n/* harmony export */   \"completeAnyWord\": () => (/* reexport safe */ _word_js__WEBPACK_IMPORTED_MODULE_8__.completeAnyWord),\n/* harmony export */   \"completeFromList\": () => (/* reexport safe */ _completion_js__WEBPACK_IMPORTED_MODULE_7__.completeFromList),\n/* harmony export */   \"completionKeymap\": () => (/* binding */ completionKeymap),\n/* harmony export */   \"completionStatus\": () => (/* binding */ completionStatus),\n/* harmony export */   \"currentCompletions\": () => (/* binding */ currentCompletions),\n/* harmony export */   \"deleteBracketPair\": () => (/* reexport safe */ _closebrackets_js__WEBPACK_IMPORTED_MODULE_9__.deleteBracketPair),\n/* harmony export */   \"ifIn\": () => (/* reexport safe */ _completion_js__WEBPACK_IMPORTED_MODULE_7__.ifIn),\n/* harmony export */   \"ifNotIn\": () => (/* reexport safe */ _completion_js__WEBPACK_IMPORTED_MODULE_7__.ifNotIn),\n/* harmony export */   \"insertBracket\": () => (/* reexport safe */ _closebrackets_js__WEBPACK_IMPORTED_MODULE_9__.insertBracket),\n/* harmony export */   \"moveCompletionSelection\": () => (/* reexport safe */ _view_js__WEBPACK_IMPORTED_MODULE_4__.moveCompletionSelection),\n/* harmony export */   \"nextSnippetField\": () => (/* reexport safe */ _snippet_js__WEBPACK_IMPORTED_MODULE_6__.nextSnippetField),\n/* harmony export */   \"pickedCompletion\": () => (/* reexport safe */ _completion_js__WEBPACK_IMPORTED_MODULE_7__.pickedCompletion),\n/* harmony export */   \"prevSnippetField\": () => (/* reexport safe */ _snippet_js__WEBPACK_IMPORTED_MODULE_6__.prevSnippetField),\n/* harmony export */   \"selectedCompletion\": () => (/* binding */ selectedCompletion),\n/* harmony export */   \"selectedCompletionIndex\": () => (/* binding */ selectedCompletionIndex),\n/* harmony export */   \"setSelectedCompletion\": () => (/* binding */ setSelectedCompletion),\n/* harmony export */   \"snippet\": () => (/* reexport safe */ _snippet_js__WEBPACK_IMPORTED_MODULE_6__.snippet),\n/* harmony export */   \"snippetCompletion\": () => (/* reexport safe */ _snippet_js__WEBPACK_IMPORTED_MODULE_6__.snippetCompletion),\n/* harmony export */   \"snippetKeymap\": () => (/* reexport safe */ _snippet_js__WEBPACK_IMPORTED_MODULE_6__.snippetKeymap),\n/* harmony export */   \"startCompletion\": () => (/* reexport safe */ _view_js__WEBPACK_IMPORTED_MODULE_4__.startCompletion)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./state.js */ \"./sys/public/js/editor/dist/autocomplete/state.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config.js */ \"./sys/public/js/editor/dist/autocomplete/config.js\");\n/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./view.js */ \"./sys/public/js/editor/dist/autocomplete/view.js\");\n/* harmony import */ var _theme_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./theme.js */ \"./sys/public/js/editor/dist/autocomplete/theme.js\");\n/* harmony import */ var _snippet_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./snippet.js */ \"./sys/public/js/editor/dist/autocomplete/snippet.js\");\n/* harmony import */ var _completion_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./completion.js */ \"./sys/public/js/editor/dist/autocomplete/completion.js\");\n/* harmony import */ var _word_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./word.js */ \"./sys/public/js/editor/dist/autocomplete/word.js\");\n/* harmony import */ var _closebrackets_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./closebrackets.js */ \"./sys/public/js/editor/dist/autocomplete/closebrackets.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** @return Returns an extension that enables autocompletion. */\r\nfunction autocompletion(config = {}) {\r\n    return [\r\n        _state_js__WEBPACK_IMPORTED_MODULE_2__.completionState,\r\n        _config_js__WEBPACK_IMPORTED_MODULE_3__.completionConfig.of(config),\r\n        _view_js__WEBPACK_IMPORTED_MODULE_4__.completionPlugin,\r\n        completionKeymapExt,\r\n        _theme_js__WEBPACK_IMPORTED_MODULE_5__.baseTheme\r\n    ];\r\n}\r\n/**\r\n * Basic keybindings for autocompletion.\r\n *\r\n *  - Ctrl-Space: {@link startCompletion}\r\n *  - Escape: {@link closeCompletion}\r\n *  - ArrowDown: {@link moveCompletionSelection}`(true)`\r\n *  - ArrowUp: {@link moveCompletionSelection}`(false)`\r\n *  - PageDown: {@link moveCompletionSelection}`(true, \"page\")`\r\n *  - PageDown: {@link moveCompletionSelection}`(true, \"page\")`\r\n *  - Enter: {@link acceptCompletion}\r\n */\r\nconst completionKeymap = [\r\n    { key: \"Ctrl-Space\", run: _view_js__WEBPACK_IMPORTED_MODULE_4__.startCompletion },\r\n    { key: \"Escape\", run: _view_js__WEBPACK_IMPORTED_MODULE_4__.closeCompletion },\r\n    { key: \"ArrowDown\", run: (0,_view_js__WEBPACK_IMPORTED_MODULE_4__.moveCompletionSelection)(true) },\r\n    { key: \"ArrowUp\", run: (0,_view_js__WEBPACK_IMPORTED_MODULE_4__.moveCompletionSelection)(false) },\r\n    { key: \"PageDown\", run: (0,_view_js__WEBPACK_IMPORTED_MODULE_4__.moveCompletionSelection)(true, \"page\") },\r\n    { key: \"PageUp\", run: (0,_view_js__WEBPACK_IMPORTED_MODULE_4__.moveCompletionSelection)(false, \"page\") },\r\n    { key: \"Enter\", run: _view_js__WEBPACK_IMPORTED_MODULE_4__.acceptCompletion }\r\n];\r\nconst completionKeymapExt = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Prec.highest(_view_index_js__WEBPACK_IMPORTED_MODULE_1__.keymap.computeN([_config_js__WEBPACK_IMPORTED_MODULE_3__.completionConfig], state => state.facet(_config_js__WEBPACK_IMPORTED_MODULE_3__.completionConfig).defaultKeymap ? [completionKeymap] : []));\r\n/**\r\n * Get the current completion status.\r\n *\r\n * @return When completions are available, this will return `\"active\"`.\r\n *         When completions are pending (in the process of being queried), this returns `\"pending\"`. Otherwise, it returns `null`.\r\n */\r\nfunction completionStatus(state) {\r\n    let cState = state.field(_state_js__WEBPACK_IMPORTED_MODULE_2__.completionState, false);\r\n    return cState && cState.active.some(a => a.state == 1 /* Pending */) ? \"pending\" :\r\n        cState && cState.active.some(a => a.state != 0 /* Inactive */) ? \"active\" : null;\r\n}\r\nconst completionArrayCache = new WeakMap;\r\n/** Returns the available completions as an array. */\r\nfunction currentCompletions(state) {\r\n    var _a;\r\n    let open = (_a = state.field(_state_js__WEBPACK_IMPORTED_MODULE_2__.completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\r\n    if (!open)\r\n        return [];\r\n    let completions = completionArrayCache.get(open.options);\r\n    if (!completions)\r\n        completionArrayCache.set(open.options, completions = open.options.map(o => o.completion));\r\n    return completions;\r\n}\r\n/** Return the currently selected completion, if any. */\r\nfunction selectedCompletion(state) {\r\n    var _a;\r\n    let open = (_a = state.field(_state_js__WEBPACK_IMPORTED_MODULE_2__.completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\r\n    return open ? open.options[open.selected].completion : null;\r\n}\r\n/** Returns the currently selected position in the active completion list, or null if no completions are active. */\r\nfunction selectedCompletionIndex(state) {\r\n    var _a;\r\n    let open = (_a = state.field(_state_js__WEBPACK_IMPORTED_MODULE_2__.completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\r\n    return open ? open.selected : null;\r\n}\r\n/** Create an effect that can be attached to a transaction to change the currently selected completion. */\r\nfunction setSelectedCompletion(index) {\r\n    return _state_js__WEBPACK_IMPORTED_MODULE_2__.setSelectedEffect.of(index);\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/autocomplete/index.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/autocomplete/snippet.js":
/*!***********************************************************!*\
  !*** ./sys/public/js/editor/dist/autocomplete/snippet.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearSnippet\": () => (/* binding */ clearSnippet),\n/* harmony export */   \"nextSnippetField\": () => (/* binding */ nextSnippetField),\n/* harmony export */   \"prevSnippetField\": () => (/* binding */ prevSnippetField),\n/* harmony export */   \"snippet\": () => (/* binding */ snippet),\n/* harmony export */   \"snippetCompletion\": () => (/* binding */ snippetCompletion),\n/* harmony export */   \"snippetKeymap\": () => (/* binding */ snippetKeymap)\n/* harmony export */ });\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _language_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../language/index.js */ \"./sys/public/js/editor/dist/language/index.js\");\n/* harmony import */ var _theme_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./theme.js */ \"./sys/public/js/editor/dist/autocomplete/theme.js\");\n\r\n\r\n\r\n\r\nclass FieldPos {\r\n    constructor(field, line, from, to) {\r\n        this.field = field;\r\n        this.line = line;\r\n        this.from = from;\r\n        this.to = to;\r\n    }\r\n}\r\nclass FieldRange {\r\n    constructor(field, from, to) {\r\n        this.field = field;\r\n        this.from = from;\r\n        this.to = to;\r\n    }\r\n    map(changes) {\r\n        let from = changes.mapPos(this.from, -1, _state_index_js__WEBPACK_IMPORTED_MODULE_1__.MapMode.TrackDel);\r\n        let to = changes.mapPos(this.to, 1, _state_index_js__WEBPACK_IMPORTED_MODULE_1__.MapMode.TrackDel);\r\n        return from == null || to == null ? null : new FieldRange(this.field, from, to);\r\n    }\r\n}\r\nclass Snippet {\r\n    constructor(lines, fieldPositions) {\r\n        this.lines = lines;\r\n        this.fieldPositions = fieldPositions;\r\n    }\r\n    instantiate(state, pos) {\r\n        let text = [], lineStart = [pos];\r\n        let lineObj = state.doc.lineAt(pos), baseIndent = /^\\s*/.exec(lineObj.text)[0];\r\n        for (let line of this.lines) {\r\n            if (text.length) {\r\n                let indent = baseIndent, tabs = /^\\t*/.exec(line)[0].length;\r\n                for (let i = 0; i < tabs; i++)\r\n                    indent += state.facet(_language_index_js__WEBPACK_IMPORTED_MODULE_2__.indentUnit);\r\n                lineStart.push(pos + indent.length - tabs);\r\n                line = indent + line.slice(tabs);\r\n            }\r\n            text.push(line);\r\n            pos += line.length + 1;\r\n        }\r\n        let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));\r\n        return { text, ranges };\r\n    }\r\n    static parse(template) {\r\n        let fields = [];\r\n        let lines = [], positions = [], m;\r\n        for (let line of template.split(/\\r\\n?|\\n/)) {\r\n            while (m = /[#$]\\{(?:(\\d+)(?::([^}]*))?|([^}]*))\\}/.exec(line)) {\r\n                let seq = m[1] ? +m[1] : null, name = m[2] || m[3] || \"\", found = -1;\r\n                for (let i = 0; i < fields.length; i++) {\r\n                    if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)\r\n                        found = i;\r\n                }\r\n                if (found < 0) {\r\n                    let i = 0;\r\n                    while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))\r\n                        i++;\r\n                    fields.splice(i, 0, { seq, name });\r\n                    found = i;\r\n                    for (let pos of positions)\r\n                        if (pos.field >= found)\r\n                            pos.field++;\r\n                }\r\n                positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));\r\n                line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);\r\n            }\r\n            lines.push(line);\r\n        }\r\n        return new Snippet(lines, positions);\r\n    }\r\n}\r\nlet fieldMarker = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.widget({ widget: new class extends _view_index_js__WEBPACK_IMPORTED_MODULE_0__.WidgetType {\r\n        toDOM() {\r\n            let span = document.createElement(\"span\");\r\n            span.className = \"cm-snippetFieldPosition\";\r\n            return span;\r\n        }\r\n        ignoreEvent() { return false; }\r\n    } });\r\nlet fieldRange = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.mark({ class: \"cm-snippetField\" });\r\nclass ActiveSnippet {\r\n    constructor(ranges, active) {\r\n        this.ranges = ranges;\r\n        this.active = active;\r\n        this.deco = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));\r\n    }\r\n    map(changes) {\r\n        let ranges = [];\r\n        for (let r of this.ranges) {\r\n            let mapped = r.map(changes);\r\n            if (!mapped)\r\n                return null;\r\n            ranges.push(mapped);\r\n        }\r\n        return new ActiveSnippet(ranges, this.active);\r\n    }\r\n    selectionInsideField(sel) {\r\n        return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));\r\n    }\r\n}\r\nconst setActive = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define({\r\n    map(value, changes) { return value && value.map(changes); }\r\n});\r\nconst moveToField = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst snippetState = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create() { return null; },\r\n    update(value, tr) {\r\n        for (let effect of tr.effects) {\r\n            if (effect.is(setActive))\r\n                return effect.value;\r\n            if (effect.is(moveToField) && value)\r\n                return new ActiveSnippet(value.ranges, effect.value);\r\n        }\r\n        if (value && tr.docChanged)\r\n            value = value.map(tr.changes);\r\n        if (value && tr.selection && !value.selectionInsideField(tr.selection))\r\n            value = null;\r\n        return value;\r\n    },\r\n    provide: f => _view_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.decorations.from(f, val => val ? val.deco : _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.none)\r\n});\r\nfunction fieldSelection(ranges, field) {\r\n    return _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(ranges.filter(r => r.field == field).map(r => _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(r.from, r.to)));\r\n}\r\n/**\r\n *  Convert a snippet template to a function that can [apply]{@link Completion.apply} it.\r\n *  Snippets are written using syntax like this:\r\n *  @example\r\n *    \"for (let ${index} = 0; ${index} < ${end}; ${index}++) {\\n\\t${}\\n}\"\r\n */\r\nfunction snippet(template) {\r\n    let snippet = Snippet.parse(template);\r\n    return (editor, _completion, from, to) => {\r\n        let { text, ranges } = snippet.instantiate(editor.state, from);\r\n        let spec = { changes: { from, to, insert: _state_index_js__WEBPACK_IMPORTED_MODULE_1__.Text.of(text) } };\r\n        if (ranges.length)\r\n            spec.selection = fieldSelection(ranges, 0);\r\n        if (ranges.length > 1) {\r\n            let active = new ActiveSnippet(ranges, 0);\r\n            let effects = spec.effects = [setActive.of(active)];\r\n            if (editor.state.field(snippetState, false) === undefined)\r\n                effects.push(_state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, _theme_js__WEBPACK_IMPORTED_MODULE_3__.baseTheme]));\r\n        }\r\n        editor.dispatch(editor.state.update(spec));\r\n    };\r\n}\r\nfunction moveField(dir) {\r\n    return ({ state, dispatch }) => {\r\n        let active = state.field(snippetState, false);\r\n        if (!active || dir < 0 && active.active == 0)\r\n            return false;\r\n        let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);\r\n        dispatch(state.update({\r\n            selection: fieldSelection(active.ranges, next),\r\n            effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))\r\n        }));\r\n        return true;\r\n    };\r\n}\r\n/** A command that clears the active snippet, if any. */\r\nconst clearSnippet = ({ state, dispatch }) => {\r\n    let active = state.field(snippetState, false);\r\n    if (!active)\r\n        return false;\r\n    dispatch(state.update({ effects: setActive.of(null) }));\r\n    return true;\r\n};\r\n/** Move to the next snippet field, if available. */\r\nconst nextSnippetField = moveField(1);\r\n/** Move to the previous snippet field, if available. */\r\nconst prevSnippetField = moveField(-1);\r\nconst defaultSnippetKeymap = [\r\n    { key: \"Tab\", run: nextSnippetField, shift: prevSnippetField },\r\n    { key: \"Escape\", run: clearSnippet }\r\n];\r\n/** A facet that can be used to configure the key bindings used by snippets. */\r\nconst snippetKeymap = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\r\n    combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }\r\n});\r\nconst addSnippetKeymap = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.Prec.highest(_view_index_js__WEBPACK_IMPORTED_MODULE_0__.keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));\r\n/** Create a completion from a snippet. */\r\nfunction snippetCompletion(template, completion) {\r\n    return Object.assign(Object.assign({}, completion), { apply: snippet(template) });\r\n}\r\nconst snippetPointerHandler = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.domEventHandlers({\r\n    mousedown(event, view) {\r\n        let active = view.state.field(snippetState, false), pos;\r\n        if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)\r\n            return false;\r\n        let match = active.ranges.find(r => r.from <= pos && r.to >= pos);\r\n        if (!match || match.field == active.active)\r\n            return false;\r\n        view.dispatch({\r\n            selection: fieldSelection(active.ranges, match.field),\r\n            effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)\r\n        });\r\n        return true;\r\n    }\r\n});\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/autocomplete/snippet.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/autocomplete/state.js":
/*!*********************************************************!*\
  !*** ./sys/public/js/editor/dist/autocomplete/state.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ActiveResult\": () => (/* binding */ ActiveResult),\n/* harmony export */   \"ActiveSource\": () => (/* binding */ ActiveSource),\n/* harmony export */   \"CompletionState\": () => (/* binding */ CompletionState),\n/* harmony export */   \"closeCompletionEffect\": () => (/* binding */ closeCompletionEffect),\n/* harmony export */   \"completionState\": () => (/* binding */ completionState),\n/* harmony export */   \"getUserEvent\": () => (/* binding */ getUserEvent),\n/* harmony export */   \"setActiveEffect\": () => (/* binding */ setActiveEffect),\n/* harmony export */   \"setSelectedEffect\": () => (/* binding */ setSelectedEffect),\n/* harmony export */   \"startCompletionEffect\": () => (/* binding */ startCompletionEffect)\n/* harmony export */ });\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _completion_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./completion.js */ \"./sys/public/js/editor/dist/autocomplete/completion.js\");\n/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./filter.js */ \"./sys/public/js/editor/dist/autocomplete/filter.js\");\n/* harmony import */ var _tooltip_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tooltip.js */ \"./sys/public/js/editor/dist/autocomplete/tooltip.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config.js */ \"./sys/public/js/editor/dist/autocomplete/config.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n// Used to pick a preferred option when two options with the same label occur in the result.\r\nfunction score(option) {\r\n    return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +\r\n        (option.type ? 1 : 0);\r\n}\r\nfunction sortOptions(active, state) {\r\n    let options = [], i = 0;\r\n    for (let a of active)\r\n        if (a.hasResult()) {\r\n            if (a.result.filter === false) {\r\n                for (let option of a.result.options)\r\n                    options.push(new _completion_js__WEBPACK_IMPORTED_MODULE_2__.Option(option, a, [1e9 - i++]));\r\n            }\r\n            else {\r\n                let matcher = new _filter_js__WEBPACK_IMPORTED_MODULE_3__.FuzzyMatcher(state.sliceDoc(a.from, a.to)), match;\r\n                for (let option of a.result.options)\r\n                    if (match = matcher.match(option.label)) {\r\n                        if (option.boost != null)\r\n                            match[0] += option.boost;\r\n                        options.push(new _completion_js__WEBPACK_IMPORTED_MODULE_2__.Option(option, a, match));\r\n                    }\r\n            }\r\n        }\r\n    let result = [], prev = null;\r\n    for (let opt of options.sort(cmpOption)) {\r\n        if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail ||\r\n            (prev.type != null && opt.completion.type != null && prev.type != opt.completion.type) ||\r\n            prev.apply != opt.completion.apply)\r\n            result.push(opt);\r\n        else if (score(opt.completion) > score(prev))\r\n            result[result.length - 1] = opt;\r\n        prev = opt.completion;\r\n    }\r\n    return result;\r\n}\r\nclass CompletionDialog {\r\n    constructor(options, attrs, tooltip, timestamp, selected) {\r\n        this.options = options;\r\n        this.attrs = attrs;\r\n        this.tooltip = tooltip;\r\n        this.timestamp = timestamp;\r\n        this.selected = selected;\r\n    }\r\n    setSelected(selected, id) {\r\n        return selected == this.selected || selected >= this.options.length ? this :\r\n            new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected);\r\n    }\r\n    static build(active, state, id, prev, conf) {\r\n        let options = sortOptions(active, state);\r\n        if (!options.length)\r\n            return null;\r\n        let selected = 0;\r\n        if (prev && prev.selected) {\r\n            let selectedValue = prev.options[prev.selected].completion;\r\n            for (let i = 0; i < options.length; i++)\r\n                if (options[i].completion == selectedValue) {\r\n                    selected = i;\r\n                    break;\r\n                }\r\n        }\r\n        return new CompletionDialog(options, makeAttrs(id, selected), {\r\n            pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),\r\n            create: (0,_tooltip_js__WEBPACK_IMPORTED_MODULE_4__.completionTooltip)(completionState),\r\n            above: conf.aboveCursor,\r\n        }, prev ? prev.timestamp : Date.now(), selected);\r\n    }\r\n    map(changes) {\r\n        return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected);\r\n    }\r\n}\r\nclass CompletionState {\r\n    constructor(active, id, open) {\r\n        this.active = active;\r\n        this.id = id;\r\n        this.open = open;\r\n    }\r\n    static start() {\r\n        return new CompletionState(none, \"cm-ac-\" + Math.floor(Math.random() * 2e6).toString(36), null);\r\n    }\r\n    update(tr) {\r\n        let { state } = tr, conf = state.facet(_config_js__WEBPACK_IMPORTED_MODULE_5__.completionConfig);\r\n        let sources = conf.override ||\r\n            state.languageDataAt(\"autocomplete\", (0,_completion_js__WEBPACK_IMPORTED_MODULE_2__.cur)(state)).map(_completion_js__WEBPACK_IMPORTED_MODULE_2__.asSource);\r\n        let active = sources.map(source => {\r\n            let value = this.active.find(s => s.source == source) ||\r\n                new ActiveSource(source, this.active.some(a => a.state != 0 /* Inactive */) ? 1 /* Pending */ : 0 /* Inactive */);\r\n            return value.update(tr, conf);\r\n        });\r\n        if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))\r\n            active = this.active;\r\n        let open = tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||\r\n            !sameResults(active, this.active) ? CompletionDialog.build(active, state, this.id, this.open, conf)\r\n            : this.open && tr.docChanged ? this.open.map(tr.changes) : this.open;\r\n        if (!open && active.every(a => a.state != 1 /* Pending */) && active.some(a => a.hasResult()))\r\n            active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* Inactive */) : a);\r\n        for (let effect of tr.effects)\r\n            if (effect.is(setSelectedEffect))\r\n                open = open && open.setSelected(effect.value, this.id);\r\n        return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);\r\n    }\r\n    get tooltip() { return this.open ? this.open.tooltip : null; }\r\n    get attrs() { return this.open ? this.open.attrs : baseAttrs; }\r\n}\r\nfunction sameResults(a, b) {\r\n    if (a == b)\r\n        return true;\r\n    for (let iA = 0, iB = 0;;) {\r\n        while (iA < a.length && !a[iA].hasResult)\r\n            iA++;\r\n        while (iB < b.length && !b[iB].hasResult)\r\n            iB++;\r\n        let endA = iA == a.length, endB = iB == b.length;\r\n        if (endA || endB)\r\n            return endA == endB;\r\n        if (a[iA++].result != b[iB++].result)\r\n            return false;\r\n    }\r\n}\r\nconst baseAttrs = {\r\n    \"aria-autocomplete\": \"list\"\r\n};\r\nfunction makeAttrs(id, selected) {\r\n    return {\r\n        \"aria-autocomplete\": \"list\",\r\n        \"aria-haspopup\": \"listbox\",\r\n        \"aria-activedescendant\": id + \"-\" + selected,\r\n        \"aria-controls\": id\r\n    };\r\n}\r\nconst none = [];\r\nfunction cmpOption(a, b) {\r\n    let dScore = b.match[0] - a.match[0];\r\n    if (dScore)\r\n        return dScore;\r\n    return a.completion.label.localeCompare(b.completion.label);\r\n}\r\nfunction getUserEvent(tr) {\r\n    return tr.isUserEvent(\"input.type\") ? \"input\" : tr.isUserEvent(\"delete.backward\") ? \"delete\" : null;\r\n}\r\nclass ActiveSource {\r\n    constructor(source, state, explicitPos = -1) {\r\n        this.source = source;\r\n        this.state = state;\r\n        this.explicitPos = explicitPos;\r\n    }\r\n    hasResult() { return false; }\r\n    update(tr, conf) {\r\n        let event = getUserEvent(tr), value = this;\r\n        if (event)\r\n            value = value.handleUserEvent(tr, event, conf);\r\n        else if (tr.docChanged)\r\n            value = value.handleChange(tr);\r\n        else if (tr.selection && value.state != 0 /* Inactive */)\r\n            value = new ActiveSource(value.source, 0 /* Inactive */);\r\n        for (let effect of tr.effects) {\r\n            if (effect.is(startCompletionEffect))\r\n                value = new ActiveSource(value.source, 1 /* Pending */, effect.value ? (0,_completion_js__WEBPACK_IMPORTED_MODULE_2__.cur)(tr.state) : -1);\r\n            else if (effect.is(closeCompletionEffect))\r\n                value = new ActiveSource(value.source, 0 /* Inactive */);\r\n            else if (effect.is(setActiveEffect))\r\n                for (let active of effect.value)\r\n                    if (active.source == value.source)\r\n                        value = active;\r\n        }\r\n        return value;\r\n    }\r\n    handleUserEvent(tr, type, conf) {\r\n        return type == \"delete\" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* Pending */);\r\n    }\r\n    handleChange(tr) {\r\n        return tr.changes.touchesRange((0,_completion_js__WEBPACK_IMPORTED_MODULE_2__.cur)(tr.startState)) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);\r\n    }\r\n    map(changes) {\r\n        return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));\r\n    }\r\n}\r\nclass ActiveResult extends ActiveSource {\r\n    constructor(source, explicitPos, result, from, to) {\r\n        super(source, 2 /* Result */, explicitPos);\r\n        this.result = result;\r\n        this.from = from;\r\n        this.to = to;\r\n    }\r\n    hasResult() { return true; }\r\n    handleUserEvent(tr, type, conf) {\r\n        var _a;\r\n        let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);\r\n        let pos = (0,_completion_js__WEBPACK_IMPORTED_MODULE_2__.cur)(tr.state);\r\n        if ((this.explicitPos < 0 ? pos <= from : pos < this.from) ||\r\n            pos > to ||\r\n            type == \"delete\" && (0,_completion_js__WEBPACK_IMPORTED_MODULE_2__.cur)(tr.startState) == this.from)\r\n            return new ActiveSource(this.source, type == \"input\" && conf.activateOnTyping ? 1 /* Pending */ : 0 /* Inactive */);\r\n        let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos), updated;\r\n        if (checkValid(this.result.validFor, tr.state, from, to))\r\n            return new ActiveResult(this.source, explicitPos, this.result, from, to);\r\n        if (this.result.update &&\r\n            (updated = this.result.update(this.result, from, to, new _completion_js__WEBPACK_IMPORTED_MODULE_2__.CompletionContext(tr.state, pos, explicitPos >= 0))))\r\n            return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : (0,_completion_js__WEBPACK_IMPORTED_MODULE_2__.cur)(tr.state));\r\n        return new ActiveSource(this.source, 1 /* Pending */, explicitPos);\r\n    }\r\n    handleChange(tr) {\r\n        return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);\r\n    }\r\n    map(mapping) {\r\n        return mapping.empty ? this :\r\n            new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));\r\n    }\r\n}\r\nfunction checkValid(validFor, state, from, to) {\r\n    if (!validFor)\r\n        return false;\r\n    let text = state.sliceDoc(from, to);\r\n    return typeof validFor == \"function\" ? validFor(text, from, to, state) : (0,_completion_js__WEBPACK_IMPORTED_MODULE_2__.ensureAnchor)(validFor, true).test(text);\r\n}\r\nconst startCompletionEffect = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst closeCompletionEffect = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst setActiveEffect = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define({\r\n    map(sources, mapping) { return sources.map(s => s.map(mapping)); }\r\n});\r\nconst setSelectedEffect = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst completionState = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create() { return CompletionState.start(); },\r\n    update(value, tr) { return value.update(tr); },\r\n    provide: f => [\r\n        _view_index_js__WEBPACK_IMPORTED_MODULE_0__.showTooltip.from(f, val => val.tooltip),\r\n        _view_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.contentAttributes.from(f, state => state.attrs)\r\n    ]\r\n});\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/autocomplete/state.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/autocomplete/theme.js":
/*!*********************************************************!*\
  !*** ./sys/public/js/editor/dist/autocomplete/theme.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"baseTheme\": () => (/* binding */ baseTheme)\n/* harmony export */ });\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n\r\nconst baseTheme = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.baseTheme({\r\n    \".cm-tooltip.cm-tooltip-autocomplete\": {\r\n        \"& > ul\": {\r\n            fontFamily: \"monospace\",\r\n            whiteSpace: \"nowrap\",\r\n            overflow: \"hidden auto\",\r\n            maxWidth_fallback: \"700px\",\r\n            maxWidth: \"min(700px, 95vw)\",\r\n            minWidth: \"250px\",\r\n            maxHeight: \"10em\",\r\n            listStyle: \"none\",\r\n            margin: 0,\r\n            padding: 0,\r\n            \"& > li\": {\r\n                overflowX: \"hidden\",\r\n                textOverflow: \"ellipsis\",\r\n                cursor: \"pointer\",\r\n                padding: \"1px 3px\",\r\n                lineHeight: 1.2\r\n            },\r\n        }\r\n    },\r\n    \"&light .cm-tooltip-autocomplete ul li[aria-selected]\": {\r\n        background: \"#17c\",\r\n        color: \"white\",\r\n    },\r\n    \"&dark .cm-tooltip-autocomplete ul li[aria-selected]\": {\r\n        background: \"#347\",\r\n        color: \"white\",\r\n    },\r\n    \".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after\": {\r\n        content: '\"···\"',\r\n        opacity: 0.5,\r\n        display: \"block\",\r\n        textAlign: \"center\"\r\n    },\r\n    \".cm-tooltip.cm-completionInfo\": {\r\n        position: \"absolute\",\r\n        padding: \"3px 9px\",\r\n        width: \"max-content\",\r\n        maxWidth: \"300px\",\r\n    },\r\n    \".cm-completionInfo.cm-completionInfo-left\": { right: \"100%\" },\r\n    \".cm-completionInfo.cm-completionInfo-right\": { left: \"100%\" },\r\n    \"&light .cm-snippetField\": { backgroundColor: \"#00000022\" },\r\n    \"&dark .cm-snippetField\": { backgroundColor: \"#ffffff22\" },\r\n    \".cm-snippetFieldPosition\": {\r\n        verticalAlign: \"text-top\",\r\n        width: 0,\r\n        height: \"1.15em\",\r\n        margin: \"0 -0.7px -.7em\",\r\n        borderLeft: \"1.4px dotted #888\"\r\n    },\r\n    \".cm-completionMatchedText\": {\r\n        textDecoration: \"underline\"\r\n    },\r\n    \".cm-completionDetail\": {\r\n        marginLeft: \"0.5em\",\r\n        fontStyle: \"italic\"\r\n    },\r\n    \".cm-completionIcon\": {\r\n        fontSize: \"90%\",\r\n        width: \".8em\",\r\n        display: \"inline-block\",\r\n        textAlign: \"center\",\r\n        paddingRight: \".6em\",\r\n        opacity: \"0.6\"\r\n    },\r\n    \".cm-completionIcon-function, .cm-completionIcon-method\": {\r\n        \"&:after\": { content: \"'ƒ'\" }\r\n    },\r\n    \".cm-completionIcon-class\": {\r\n        \"&:after\": { content: \"'○'\" }\r\n    },\r\n    \".cm-completionIcon-interface\": {\r\n        \"&:after\": { content: \"'◌'\" }\r\n    },\r\n    \".cm-completionIcon-variable\": {\r\n        \"&:after\": { content: \"'𝑥'\" }\r\n    },\r\n    \".cm-completionIcon-constant\": {\r\n        \"&:after\": { content: \"'𝐶'\" }\r\n    },\r\n    \".cm-completionIcon-type\": {\r\n        \"&:after\": { content: \"'𝑡'\" }\r\n    },\r\n    \".cm-completionIcon-enum\": {\r\n        \"&:after\": { content: \"'∪'\" }\r\n    },\r\n    \".cm-completionIcon-property\": {\r\n        \"&:after\": { content: \"'□'\" }\r\n    },\r\n    \".cm-completionIcon-keyword\": {\r\n        \"&:after\": { content: \"'🔑\\uFE0E'\" } // Disable emoji rendering\r\n    },\r\n    \".cm-completionIcon-namespace\": {\r\n        \"&:after\": { content: \"'▢'\" }\r\n    },\r\n    \".cm-completionIcon-text\": {\r\n        \"&:after\": { content: \"'abc'\", fontSize: \"50%\", verticalAlign: \"middle\" }\r\n    }\r\n});\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/autocomplete/theme.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/autocomplete/tooltip.js":
/*!***********************************************************!*\
  !*** ./sys/public/js/editor/dist/autocomplete/tooltip.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"completionTooltip\": () => (/* binding */ completionTooltip)\n/* harmony export */ });\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"./sys/public/js/editor/dist/autocomplete/config.js\");\n/* harmony import */ var _completion_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./completion.js */ \"./sys/public/js/editor/dist/autocomplete/completion.js\");\n\r\n\r\n\r\nfunction optionContent(config) {\r\n    let content = config.addToOptions.slice();\r\n    if (config.icons)\r\n        content.push({\r\n            render(completion) {\r\n                let icon = document.createElement(\"div\");\r\n                icon.classList.add(\"cm-completionIcon\");\r\n                if (completion.type)\r\n                    icon.classList.add(...completion.type.split(/\\s+/g).map(cls => \"cm-completionIcon-\" + cls));\r\n                icon.setAttribute(\"aria-hidden\", \"true\");\r\n                return icon;\r\n            },\r\n            position: 20\r\n        });\r\n    content.push({\r\n        render(completion, _s, match) {\r\n            let labelElt = document.createElement(\"span\");\r\n            labelElt.className = \"cm-completionLabel\";\r\n            let { label } = completion, off = 0;\r\n            for (let j = 1; j < match.length;) {\r\n                let from = match[j++], to = match[j++];\r\n                if (from > off)\r\n                    labelElt.appendChild(document.createTextNode(label.slice(off, from)));\r\n                let span = labelElt.appendChild(document.createElement(\"span\"));\r\n                span.appendChild(document.createTextNode(label.slice(from, to)));\r\n                span.className = \"cm-completionMatchedText\";\r\n                off = to;\r\n            }\r\n            if (off < label.length)\r\n                labelElt.appendChild(document.createTextNode(label.slice(off)));\r\n            return labelElt;\r\n        },\r\n        position: 50\r\n    }, {\r\n        render(completion) {\r\n            if (!completion.detail)\r\n                return null;\r\n            let detailElt = document.createElement(\"span\");\r\n            detailElt.className = \"cm-completionDetail\";\r\n            detailElt.textContent = completion.detail;\r\n            return detailElt;\r\n        },\r\n        position: 80\r\n    });\r\n    return content.sort((a, b) => a.position - b.position).map(a => a.render);\r\n}\r\nfunction rangeAroundSelected(total, selected, max) {\r\n    if (total <= max)\r\n        return { from: 0, to: total };\r\n    if (selected <= (total >> 1)) {\r\n        let off = Math.floor(selected / max);\r\n        return { from: off * max, to: (off + 1) * max };\r\n    }\r\n    let off = Math.floor((total - selected) / max);\r\n    return { from: total - (off + 1) * max, to: total - off * max };\r\n}\r\nclass CompletionTooltip {\r\n    constructor(view, stateField) {\r\n        this.view = view;\r\n        this.stateField = stateField;\r\n        this.info = null;\r\n        this.placeInfo = {\r\n            read: () => this.measureInfo(),\r\n            write: (pos) => this.positionInfo(pos),\r\n            key: this\r\n        };\r\n        let cState = view.state.field(stateField);\r\n        let { options, selected } = cState.open;\r\n        let config = view.state.facet(_config_js__WEBPACK_IMPORTED_MODULE_1__.completionConfig);\r\n        this.optionContent = optionContent(config);\r\n        this.optionClass = config.optionClass;\r\n        this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);\r\n        this.dom = document.createElement(\"div\");\r\n        this.dom.className = \"cm-tooltip-autocomplete\";\r\n        this.dom.addEventListener(\"mousedown\", (e) => {\r\n            for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {\r\n                if (dom.nodeName == \"LI\" && (match = /-(\\d+)$/.exec(dom.id)) && +match[1] < options.length) {\r\n                    (0,_completion_js__WEBPACK_IMPORTED_MODULE_2__.applyCompletion)(view, options[+match[1]]);\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n        this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));\r\n        this.list.addEventListener(\"scroll\", () => {\r\n            if (this.info)\r\n                this.view.requestMeasure(this.placeInfo);\r\n        });\r\n    }\r\n    mount() {\r\n        this.updateSel();\r\n    }\r\n    update(update) {\r\n        if (update.state.field(this.stateField) != update.startState.field(this.stateField))\r\n            this.updateSel();\r\n    }\r\n    positioned() {\r\n        if (this.info)\r\n            this.view.requestMeasure(this.placeInfo);\r\n    }\r\n    updateSel() {\r\n        let cState = this.view.state.field(this.stateField), open = cState.open;\r\n        if (open.selected < this.range.from || open.selected >= this.range.to) {\r\n            this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(_config_js__WEBPACK_IMPORTED_MODULE_1__.completionConfig).maxRenderedOptions);\r\n            this.list.remove();\r\n            this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));\r\n            this.list.addEventListener(\"scroll\", () => {\r\n                if (this.info)\r\n                    this.view.requestMeasure(this.placeInfo);\r\n            });\r\n        }\r\n        if (this.updateSelectedOption(open.selected)) {\r\n            if (this.info) {\r\n                this.info.remove();\r\n                this.info = null;\r\n            }\r\n            let { completion } = open.options[open.selected];\r\n            let { info } = completion;\r\n            if (!info)\r\n                return;\r\n            let infoResult = typeof info === 'string' ? document.createTextNode(info) : info(completion);\r\n            if (!infoResult)\r\n                return;\r\n            if ('then' in infoResult) {\r\n                infoResult.then(node => {\r\n                    if (node && this.view.state.field(this.stateField, false) == cState)\r\n                        this.addInfoPane(node);\r\n                }).catch(e => (0,_view_index_js__WEBPACK_IMPORTED_MODULE_0__.logException)(this.view.state, e, \"completion info\"));\r\n            }\r\n            else {\r\n                this.addInfoPane(infoResult);\r\n            }\r\n        }\r\n    }\r\n    addInfoPane(content) {\r\n        let dom = this.info = document.createElement(\"div\");\r\n        dom.className = \"cm-tooltip cm-completionInfo\";\r\n        dom.appendChild(content);\r\n        this.dom.appendChild(dom);\r\n        this.view.requestMeasure(this.placeInfo);\r\n    }\r\n    updateSelectedOption(selected) {\r\n        let set = null;\r\n        for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {\r\n            if (i == selected) {\r\n                if (!opt.hasAttribute(\"aria-selected\")) {\r\n                    opt.setAttribute(\"aria-selected\", \"true\");\r\n                    set = opt;\r\n                }\r\n            }\r\n            else {\r\n                if (opt.hasAttribute(\"aria-selected\"))\r\n                    opt.removeAttribute(\"aria-selected\");\r\n            }\r\n        }\r\n        if (set)\r\n            scrollIntoView(this.list, set);\r\n        return set;\r\n    }\r\n    measureInfo() {\r\n        let sel = this.dom.querySelector(\"[aria-selected]\");\r\n        if (!sel || !this.info)\r\n            return null;\r\n        let listRect = this.dom.getBoundingClientRect();\r\n        let infoRect = this.info.getBoundingClientRect();\r\n        let selRect = sel.getBoundingClientRect();\r\n        if (selRect.top > Math.min(innerHeight, listRect.bottom) - 10 || selRect.bottom < Math.max(0, listRect.top) + 10)\r\n            return null;\r\n        let top = Math.max(0, Math.min(selRect.top, innerHeight - infoRect.height)) - listRect.top;\r\n        let left = this.view.textDirection == _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Direction.RTL;\r\n        let spaceLeft = listRect.left, spaceRight = innerWidth - listRect.right;\r\n        if (left && spaceLeft < Math.min(infoRect.width, spaceRight))\r\n            left = false;\r\n        else if (!left && spaceRight < Math.min(infoRect.width, spaceLeft))\r\n            left = true;\r\n        return { top, left };\r\n    }\r\n    positionInfo(pos) {\r\n        if (this.info) {\r\n            this.info.style.top = (pos ? pos.top : -1e6) + \"px\";\r\n            if (pos) {\r\n                this.info.classList.toggle(\"cm-completionInfo-left\", pos.left);\r\n                this.info.classList.toggle(\"cm-completionInfo-right\", !pos.left);\r\n            }\r\n        }\r\n    }\r\n    createListBox(options, id, range) {\r\n        const ul = document.createElement(\"ul\");\r\n        ul.id = id;\r\n        ul.setAttribute(\"role\", \"listbox\");\r\n        ul.setAttribute(\"aria-expanded\", \"true\");\r\n        for (let i = range.from; i < range.to; i++) {\r\n            let { completion, match } = options[i];\r\n            const li = ul.appendChild(document.createElement(\"li\"));\r\n            li.id = id + \"-\" + i;\r\n            li.setAttribute(\"role\", \"option\");\r\n            let cls = this.optionClass(completion);\r\n            if (cls)\r\n                li.className = cls;\r\n            for (let source of this.optionContent) {\r\n                let node = source(completion, this.view.state, match);\r\n                if (node)\r\n                    li.appendChild(node);\r\n            }\r\n        }\r\n        if (range.from)\r\n            ul.classList.add(\"cm-completionListIncompleteTop\");\r\n        if (range.to < options.length)\r\n            ul.classList.add(\"cm-completionListIncompleteBottom\");\r\n        return ul;\r\n    }\r\n}\r\n/** We allocate a new function instance every time the completion changes to force redrawing/repositioning of the tooltip */\r\nfunction completionTooltip(stateField) {\r\n    return (view) => new CompletionTooltip(view, stateField);\r\n}\r\nfunction scrollIntoView(container, element) {\r\n    let parent = container.getBoundingClientRect();\r\n    let self = element.getBoundingClientRect();\r\n    if (self.top < parent.top)\r\n        container.scrollTop -= parent.top - self.top;\r\n    else if (self.bottom > parent.bottom)\r\n        container.scrollTop += self.bottom - parent.bottom;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/autocomplete/tooltip.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/autocomplete/view.js":
/*!********************************************************!*\
  !*** ./sys/public/js/editor/dist/autocomplete/view.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"acceptCompletion\": () => (/* binding */ acceptCompletion),\n/* harmony export */   \"closeCompletion\": () => (/* binding */ closeCompletion),\n/* harmony export */   \"completionPlugin\": () => (/* binding */ completionPlugin),\n/* harmony export */   \"moveCompletionSelection\": () => (/* binding */ moveCompletionSelection),\n/* harmony export */   \"startCompletion\": () => (/* binding */ startCompletion)\n/* harmony export */ });\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state.js */ \"./sys/public/js/editor/dist/autocomplete/state.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.js */ \"./sys/public/js/editor/dist/autocomplete/config.js\");\n/* harmony import */ var _completion_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./completion.js */ \"./sys/public/js/editor/dist/autocomplete/completion.js\");\n\r\n\r\n\r\n\r\nconst CompletionInteractMargin = 75;\r\n/** Returns a command that moves the completion selection forward or backward by the given amount. */\r\nfunction moveCompletionSelection(forward, by = \"option\") {\r\n    return (view) => {\r\n        let cState = view.state.field(_state_js__WEBPACK_IMPORTED_MODULE_1__.completionState, false);\r\n        if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)\r\n            return false;\r\n        let step = 1, tooltip;\r\n        if (by == \"page\" && (tooltip = (0,_view_index_js__WEBPACK_IMPORTED_MODULE_0__.getTooltip)(view, cState.open.tooltip)))\r\n            step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector(\"li\").offsetHeight) - 1);\r\n        let selected = cState.open.selected + step * (forward ? 1 : -1), { length } = cState.open.options;\r\n        if (selected < 0)\r\n            selected = by == \"page\" ? 0 : length - 1;\r\n        else if (selected >= length)\r\n            selected = by == \"page\" ? length - 1 : 0;\r\n        view.dispatch({ effects: _state_js__WEBPACK_IMPORTED_MODULE_1__.setSelectedEffect.of(selected) });\r\n        return true;\r\n    };\r\n}\r\n/** Accept the current completion. */\r\nconst acceptCompletion = (view) => {\r\n    let cState = view.state.field(_state_js__WEBPACK_IMPORTED_MODULE_1__.completionState, false);\r\n    if (view.state.readOnly || !cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)\r\n        return false;\r\n    (0,_completion_js__WEBPACK_IMPORTED_MODULE_3__.applyCompletion)(view, cState.open.options[cState.open.selected]);\r\n    return true;\r\n};\r\n/** Explicitly start autocompletion. */\r\nconst startCompletion = (view) => {\r\n    let cState = view.state.field(_state_js__WEBPACK_IMPORTED_MODULE_1__.completionState, false);\r\n    if (!cState)\r\n        return false;\r\n    view.dispatch({ effects: _state_js__WEBPACK_IMPORTED_MODULE_1__.startCompletionEffect.of(true) });\r\n    return true;\r\n};\r\n/** Close the currently active completion. */\r\nconst closeCompletion = (view) => {\r\n    let cState = view.state.field(_state_js__WEBPACK_IMPORTED_MODULE_1__.completionState, false);\r\n    if (!cState || !cState.active.some(a => a.state != 0 /* Inactive */))\r\n        return false;\r\n    view.dispatch({ effects: _state_js__WEBPACK_IMPORTED_MODULE_1__.closeCompletionEffect.of(null) });\r\n    return true;\r\n};\r\nclass RunningQuery {\r\n    constructor(active, context) {\r\n        this.active = active;\r\n        this.context = context;\r\n        this.time = Date.now();\r\n        this.updates = [];\r\n        // Note that 'undefined' means 'not done yet', whereas 'null' means 'query returned null'.\r\n        this.done = undefined;\r\n    }\r\n}\r\nconst DebounceTime = 50, MaxUpdateCount = 50, MinAbortTime = 1000;\r\nconst completionPlugin = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.debounceUpdate = -1;\r\n        this.running = [];\r\n        this.debounceAccept = -1;\r\n        this.composing = 0 /* None */;\r\n        for (let active of view.state.field(_state_js__WEBPACK_IMPORTED_MODULE_1__.completionState).active)\r\n            if (active.state == 1 /* Pending */)\r\n                this.startQuery(active);\r\n    }\r\n    update(update) {\r\n        let cState = update.state.field(_state_js__WEBPACK_IMPORTED_MODULE_1__.completionState);\r\n        if (!update.selectionSet && !update.docChanged && update.startState.field(_state_js__WEBPACK_IMPORTED_MODULE_1__.completionState) == cState)\r\n            return;\r\n        let doesReset = update.transactions.some(tr => {\r\n            return (tr.selection || tr.docChanged) && !(0,_state_js__WEBPACK_IMPORTED_MODULE_1__.getUserEvent)(tr);\r\n        });\r\n        for (let i = 0; i < this.running.length; i++) {\r\n            let query = this.running[i];\r\n            if (doesReset ||\r\n                query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {\r\n                for (let handler of query.context.abortListeners) {\r\n                    try {\r\n                        handler();\r\n                    }\r\n                    catch (e) {\r\n                        (0,_view_index_js__WEBPACK_IMPORTED_MODULE_0__.logException)(this.view.state, e);\r\n                    }\r\n                }\r\n                query.context.abortListeners = null;\r\n                this.running.splice(i--, 1);\r\n            }\r\n            else {\r\n                query.updates.push(...update.transactions);\r\n            }\r\n        }\r\n        if (this.debounceUpdate > -1)\r\n            clearTimeout(this.debounceUpdate);\r\n        this.debounceUpdate = cState.active.some(a => a.state == 1 /* Pending */ && !this.running.some(q => q.active.source == a.source)) ?\r\n            setTimeout(() => this.startUpdate(), DebounceTime) : -1;\r\n        if (this.composing != 0 /* None */)\r\n            for (let tr of update.transactions) {\r\n                if ((0,_state_js__WEBPACK_IMPORTED_MODULE_1__.getUserEvent)(tr) == \"input\")\r\n                    this.composing = 2 /* Changed */;\r\n                else if (this.composing == 2 /* Changed */ && tr.selection)\r\n                    this.composing = 3 /* ChangedAndMoved */;\r\n            }\r\n    }\r\n    startUpdate() {\r\n        this.debounceUpdate = -1;\r\n        let { state } = this.view, cState = state.field(_state_js__WEBPACK_IMPORTED_MODULE_1__.completionState);\r\n        for (let active of cState.active) {\r\n            if (active.state == 1 /* Pending */ && !this.running.some(r => r.active.source == active.source))\r\n                this.startQuery(active);\r\n        }\r\n    }\r\n    startQuery(active) {\r\n        let { state } = this.view, pos = (0,_completion_js__WEBPACK_IMPORTED_MODULE_3__.cur)(state);\r\n        let context = new _completion_js__WEBPACK_IMPORTED_MODULE_3__.CompletionContext(state, pos, active.explicitPos == pos);\r\n        let pending = new RunningQuery(active, context);\r\n        this.running.push(pending);\r\n        Promise.resolve(active.source(context)).then(result => {\r\n            if (!pending.context.aborted) {\r\n                pending.done = result || null;\r\n                this.scheduleAccept();\r\n            }\r\n        }, err => {\r\n            this.view.dispatch({ effects: _state_js__WEBPACK_IMPORTED_MODULE_1__.closeCompletionEffect.of(null) });\r\n            (0,_view_index_js__WEBPACK_IMPORTED_MODULE_0__.logException)(this.view.state, err);\r\n        });\r\n    }\r\n    scheduleAccept() {\r\n        if (this.running.every(q => q.done !== undefined))\r\n            this.accept();\r\n        else if (this.debounceAccept < 0)\r\n            this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);\r\n    }\r\n    // For each finished query in this.running, try to create a result or, if appropriate, restart the query.\r\n    accept() {\r\n        var _a;\r\n        if (this.debounceAccept > -1)\r\n            clearTimeout(this.debounceAccept);\r\n        this.debounceAccept = -1;\r\n        let updated = [];\r\n        let conf = this.view.state.facet(_config_js__WEBPACK_IMPORTED_MODULE_2__.completionConfig);\r\n        for (let i = 0; i < this.running.length; i++) {\r\n            let query = this.running[i];\r\n            if (query.done === undefined)\r\n                continue;\r\n            this.running.splice(i--, 1);\r\n            if (query.done) {\r\n                let active = new _state_js__WEBPACK_IMPORTED_MODULE_1__.ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : (0,_completion_js__WEBPACK_IMPORTED_MODULE_3__.cur)(query.updates.length ? query.updates[0].startState : this.view.state));\r\n                // Replay the transactions that happened since the start of the request and see if that preserves the result\r\n                for (let tr of query.updates)\r\n                    active = active.update(tr, conf);\r\n                if (active.hasResult()) {\r\n                    updated.push(active);\r\n                    continue;\r\n                }\r\n            }\r\n            let current = this.view.state.field(_state_js__WEBPACK_IMPORTED_MODULE_1__.completionState).active.find(a => a.source == query.active.source);\r\n            if (current && current.state == 1 /* Pending */) {\r\n                if (query.done == null) {\r\n                    // Explicitly failed. Should clear the pending status if it hasn't been re-set in the meantime.\r\n                    let active = new _state_js__WEBPACK_IMPORTED_MODULE_1__.ActiveSource(query.active.source, 0 /* Inactive */);\r\n                    for (let tr of query.updates)\r\n                        active = active.update(tr, conf);\r\n                    if (active.state != 1 /* Pending */)\r\n                        updated.push(active);\r\n                }\r\n                else {\r\n                    // Cleared by subsequent transactions. Restart.\r\n                    this.startQuery(current);\r\n                }\r\n            }\r\n        }\r\n        if (updated.length)\r\n            this.view.dispatch({ effects: _state_js__WEBPACK_IMPORTED_MODULE_1__.setActiveEffect.of(updated) });\r\n    }\r\n}, {\r\n    eventHandlers: {\r\n        compositionstart() {\r\n            this.composing = 1 /* Started */;\r\n        },\r\n        compositionend() {\r\n            if (this.composing == 3 /* ChangedAndMoved */) {\r\n                // Safari fires compositionend events synchronously, possibly from inside an update, so dispatch asynchronously to avoid reentrancy\r\n                setTimeout(() => this.view.dispatch({ effects: _state_js__WEBPACK_IMPORTED_MODULE_1__.startCompletionEffect.of(false) }), 20);\r\n            }\r\n            this.composing = 0 /* None */;\r\n        }\r\n    }\r\n});\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/autocomplete/view.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/autocomplete/word.js":
/*!********************************************************!*\
  !*** ./sys/public/js/editor/dist/autocomplete/word.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"completeAnyWord\": () => (/* binding */ completeAnyWord)\n/* harmony export */ });\nfunction wordRE(wordChars) {\r\n    let escaped = wordChars.replace(/[\\\\[.+*?(){|^$]/g, \"\\\\$&\");\r\n    try {\r\n        return new RegExp(`[\\\\p{Alphabetic}\\\\p{Number}_${escaped}]+`, \"ug\");\r\n    }\r\n    catch (_a) {\r\n        return new RegExp(`[\\w${escaped}]`, \"g\");\r\n    }\r\n}\r\nfunction mapRE(re, f) {\r\n    return new RegExp(f(re.source), re.unicode ? \"u\" : \"\");\r\n}\r\nconst wordCaches = Object.create(null);\r\nfunction wordCache(wordChars) {\r\n    return wordCaches[wordChars] || (wordCaches[wordChars] = new WeakMap);\r\n}\r\nfunction storeWords(doc, wordRE, result, seen, ignoreAt) {\r\n    for (let lines = doc.iterLines(), pos = 0; !lines.next().done;) {\r\n        let { value } = lines, m;\r\n        wordRE.lastIndex = 0;\r\n        while (m = wordRE.exec(value)) {\r\n            if (!seen[m[0]] && pos + m.index != ignoreAt) {\r\n                result.push({ type: \"text\", label: m[0] });\r\n                seen[m[0]] = true;\r\n                if (result.length >= 2000 /* MaxList */)\r\n                    return;\r\n            }\r\n        }\r\n        pos += value.length + 1;\r\n    }\r\n}\r\nfunction collectWords(doc, cache, wordRE, to, ignoreAt) {\r\n    let big = doc.length >= 1000 /* MinCacheLen */;\r\n    let cached = big && cache.get(doc);\r\n    if (cached)\r\n        return cached;\r\n    let result = [], seen = Object.create(null);\r\n    if (doc.children) {\r\n        let pos = 0;\r\n        for (let ch of doc.children) {\r\n            if (ch.length >= 1000 /* MinCacheLen */) {\r\n                for (let c of collectWords(ch, cache, wordRE, to - pos, ignoreAt - pos)) {\r\n                    if (!seen[c.label]) {\r\n                        seen[c.label] = true;\r\n                        result.push(c);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                storeWords(ch, wordRE, result, seen, ignoreAt - pos);\r\n            }\r\n            pos += ch.length + 1;\r\n        }\r\n    }\r\n    else {\r\n        storeWords(doc, wordRE, result, seen, ignoreAt);\r\n    }\r\n    if (big && result.length < 2000 /* MaxList */)\r\n        cache.set(doc, result);\r\n    return result;\r\n}\r\n/**\r\n *  A completion source that will scan the document for words (using a [character categorizer]{@link charCategorizer}),\r\n *  and return those as completions.\r\n */\r\nconst completeAnyWord = context => {\r\n    let wordChars = context.state.languageDataAt(\"wordChars\", context.pos).join(\"\");\r\n    let re = wordRE(wordChars);\r\n    let token = context.matchBefore(mapRE(re, s => s + \"$\"));\r\n    if (!token && !context.explicit)\r\n        return null;\r\n    let from = token ? token.from : context.pos;\r\n    let options = collectWords(context.state.doc, wordCache(wordChars), re, 50000 /* Range */, from);\r\n    return { from, options, validFor: mapRE(re, s => \"^\" + s) };\r\n};\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/autocomplete/word.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/commands/commands.js":
/*!********************************************************!*\
  !*** ./sys/public/js/editor/dist/commands/commands.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"copyLineDown\": () => (/* binding */ copyLineDown),\n/* harmony export */   \"copyLineUp\": () => (/* binding */ copyLineUp),\n/* harmony export */   \"cursorCharBackward\": () => (/* binding */ cursorCharBackward),\n/* harmony export */   \"cursorCharForward\": () => (/* binding */ cursorCharForward),\n/* harmony export */   \"cursorCharLeft\": () => (/* binding */ cursorCharLeft),\n/* harmony export */   \"cursorCharRight\": () => (/* binding */ cursorCharRight),\n/* harmony export */   \"cursorDocEnd\": () => (/* binding */ cursorDocEnd),\n/* harmony export */   \"cursorDocStart\": () => (/* binding */ cursorDocStart),\n/* harmony export */   \"cursorGroupBackward\": () => (/* binding */ cursorGroupBackward),\n/* harmony export */   \"cursorGroupForward\": () => (/* binding */ cursorGroupForward),\n/* harmony export */   \"cursorGroupLeft\": () => (/* binding */ cursorGroupLeft),\n/* harmony export */   \"cursorGroupRight\": () => (/* binding */ cursorGroupRight),\n/* harmony export */   \"cursorLineBoundaryBackward\": () => (/* binding */ cursorLineBoundaryBackward),\n/* harmony export */   \"cursorLineBoundaryForward\": () => (/* binding */ cursorLineBoundaryForward),\n/* harmony export */   \"cursorLineDown\": () => (/* binding */ cursorLineDown),\n/* harmony export */   \"cursorLineEnd\": () => (/* binding */ cursorLineEnd),\n/* harmony export */   \"cursorLineStart\": () => (/* binding */ cursorLineStart),\n/* harmony export */   \"cursorLineUp\": () => (/* binding */ cursorLineUp),\n/* harmony export */   \"cursorMatchingBracket\": () => (/* binding */ cursorMatchingBracket),\n/* harmony export */   \"cursorPageDown\": () => (/* binding */ cursorPageDown),\n/* harmony export */   \"cursorPageUp\": () => (/* binding */ cursorPageUp),\n/* harmony export */   \"cursorSubwordBackward\": () => (/* binding */ cursorSubwordBackward),\n/* harmony export */   \"cursorSubwordForward\": () => (/* binding */ cursorSubwordForward),\n/* harmony export */   \"cursorSyntaxLeft\": () => (/* binding */ cursorSyntaxLeft),\n/* harmony export */   \"cursorSyntaxRight\": () => (/* binding */ cursorSyntaxRight),\n/* harmony export */   \"defaultKeymap\": () => (/* binding */ defaultKeymap),\n/* harmony export */   \"deleteCharBackward\": () => (/* binding */ deleteCharBackward),\n/* harmony export */   \"deleteCharForward\": () => (/* binding */ deleteCharForward),\n/* harmony export */   \"deleteGroupBackward\": () => (/* binding */ deleteGroupBackward),\n/* harmony export */   \"deleteGroupForward\": () => (/* binding */ deleteGroupForward),\n/* harmony export */   \"deleteLine\": () => (/* binding */ deleteLine),\n/* harmony export */   \"deleteToLineEnd\": () => (/* binding */ deleteToLineEnd),\n/* harmony export */   \"deleteToLineStart\": () => (/* binding */ deleteToLineStart),\n/* harmony export */   \"deleteTrailingWhitespace\": () => (/* binding */ deleteTrailingWhitespace),\n/* harmony export */   \"emacsStyleKeymap\": () => (/* binding */ emacsStyleKeymap),\n/* harmony export */   \"indentLess\": () => (/* binding */ indentLess),\n/* harmony export */   \"indentMore\": () => (/* binding */ indentMore),\n/* harmony export */   \"indentSelection\": () => (/* binding */ indentSelection),\n/* harmony export */   \"indentWithTab\": () => (/* binding */ indentWithTab),\n/* harmony export */   \"insertBlankLine\": () => (/* binding */ insertBlankLine),\n/* harmony export */   \"insertNewline\": () => (/* binding */ insertNewline),\n/* harmony export */   \"insertNewlineAndIndent\": () => (/* binding */ insertNewlineAndIndent),\n/* harmony export */   \"insertTab\": () => (/* binding */ insertTab),\n/* harmony export */   \"moveLineDown\": () => (/* binding */ moveLineDown),\n/* harmony export */   \"moveLineUp\": () => (/* binding */ moveLineUp),\n/* harmony export */   \"selectAll\": () => (/* binding */ selectAll),\n/* harmony export */   \"selectCharBackward\": () => (/* binding */ selectCharBackward),\n/* harmony export */   \"selectCharForward\": () => (/* binding */ selectCharForward),\n/* harmony export */   \"selectCharLeft\": () => (/* binding */ selectCharLeft),\n/* harmony export */   \"selectCharRight\": () => (/* binding */ selectCharRight),\n/* harmony export */   \"selectDocEnd\": () => (/* binding */ selectDocEnd),\n/* harmony export */   \"selectDocStart\": () => (/* binding */ selectDocStart),\n/* harmony export */   \"selectGroupBackward\": () => (/* binding */ selectGroupBackward),\n/* harmony export */   \"selectGroupForward\": () => (/* binding */ selectGroupForward),\n/* harmony export */   \"selectGroupLeft\": () => (/* binding */ selectGroupLeft),\n/* harmony export */   \"selectGroupRight\": () => (/* binding */ selectGroupRight),\n/* harmony export */   \"selectLine\": () => (/* binding */ selectLine),\n/* harmony export */   \"selectLineBoundaryBackward\": () => (/* binding */ selectLineBoundaryBackward),\n/* harmony export */   \"selectLineBoundaryForward\": () => (/* binding */ selectLineBoundaryForward),\n/* harmony export */   \"selectLineDown\": () => (/* binding */ selectLineDown),\n/* harmony export */   \"selectLineEnd\": () => (/* binding */ selectLineEnd),\n/* harmony export */   \"selectLineStart\": () => (/* binding */ selectLineStart),\n/* harmony export */   \"selectLineUp\": () => (/* binding */ selectLineUp),\n/* harmony export */   \"selectMatchingBracket\": () => (/* binding */ selectMatchingBracket),\n/* harmony export */   \"selectPageDown\": () => (/* binding */ selectPageDown),\n/* harmony export */   \"selectPageUp\": () => (/* binding */ selectPageUp),\n/* harmony export */   \"selectParentSyntax\": () => (/* binding */ selectParentSyntax),\n/* harmony export */   \"selectSubwordBackward\": () => (/* binding */ selectSubwordBackward),\n/* harmony export */   \"selectSubwordForward\": () => (/* binding */ selectSubwordForward),\n/* harmony export */   \"selectSyntaxLeft\": () => (/* binding */ selectSyntaxLeft),\n/* harmony export */   \"selectSyntaxRight\": () => (/* binding */ selectSyntaxRight),\n/* harmony export */   \"simplifySelection\": () => (/* binding */ simplifySelection),\n/* harmony export */   \"splitLine\": () => (/* binding */ splitLine),\n/* harmony export */   \"standardKeymap\": () => (/* binding */ standardKeymap),\n/* harmony export */   \"transposeChars\": () => (/* binding */ transposeChars)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _language_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../language/index.js */ \"./sys/public/js/editor/dist/language/index.js\");\n/* harmony import */ var _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lezer/common/index.js */ \"./sys/public/js/editor/dist/lezer/common/index.js\");\n/* harmony import */ var _comment_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./comment.js */ \"./sys/public/js/editor/dist/commands/comment.js\");\n\r\n\r\n\r\n\r\n\r\nfunction updateSel(sel, by) {\r\n    return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.create(sel.ranges.map(by), sel.mainIndex);\r\n}\r\nfunction setSel(state, selection) {\r\n    return state.update({ selection, scrollIntoView: true, userEvent: \"select\" });\r\n}\r\nfunction moveSel({ state, dispatch }, how) {\r\n    let selection = updateSel(state.selection, how);\r\n    if (selection.eq(state.selection))\r\n        return false;\r\n    dispatch(setSel(state, selection));\r\n    return true;\r\n}\r\nfunction rangeEnd(range, forward) {\r\n    return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(forward ? range.to : range.from);\r\n}\r\nfunction cursorByChar(view, forward) {\r\n    return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));\r\n}\r\nfunction ltrAtCursor(view) {\r\n    return view.textDirectionAt(view.state.selection.main.head) == _view_index_js__WEBPACK_IMPORTED_MODULE_1__.Direction.LTR;\r\n}\r\n/** Move the selection one character to the left (which is backward in left-to-right text, forward in right-to-left text). */\r\nconst cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));\r\n/** Move the selection one character to the right. */\r\nconst cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));\r\n/** Move the selection one character forward. */\r\nconst cursorCharForward = view => cursorByChar(view, true);\r\n/** Move the selection one character backward. */\r\nconst cursorCharBackward = view => cursorByChar(view, false);\r\nfunction cursorByGroup(view, forward) {\r\n    return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));\r\n}\r\n/** Move the selection to the left across one group of word or non-word (but also non-space) characters. */\r\nconst cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));\r\n/** Move the selection one group to the right. */\r\nconst cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));\r\n/** Move the selection one group forward. */\r\nconst cursorGroupForward = view => cursorByGroup(view, true);\r\n/** Move the selection one group backward. */\r\nconst cursorGroupBackward = view => cursorByGroup(view, false);\r\nfunction moveBySubword(view, range, forward) {\r\n    let categorize = view.state.charCategorizer(range.from);\r\n    return view.moveByChar(range, forward, start => {\r\n        let cat = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.CharCategory.Space, pos = range.from;\r\n        let done = false, sawUpper = false, sawLower = false;\r\n        let step = (next) => {\r\n            if (done)\r\n                return false;\r\n            pos += forward ? next.length : -next.length;\r\n            let nextCat = categorize(next), ahead;\r\n            if (cat == _state_index_js__WEBPACK_IMPORTED_MODULE_0__.CharCategory.Space)\r\n                cat = nextCat;\r\n            if (cat != nextCat)\r\n                return false;\r\n            if (cat == _state_index_js__WEBPACK_IMPORTED_MODULE_0__.CharCategory.Word) {\r\n                if (next.toLowerCase() == next) {\r\n                    if (!forward && sawUpper)\r\n                        return false;\r\n                    sawLower = true;\r\n                }\r\n                else if (sawLower) {\r\n                    if (forward)\r\n                        return false;\r\n                    done = true;\r\n                }\r\n                else {\r\n                    if (sawUpper && forward && categorize(ahead = view.state.sliceDoc(pos, pos + 1)) == _state_index_js__WEBPACK_IMPORTED_MODULE_0__.CharCategory.Word &&\r\n                        ahead.toLowerCase() == ahead)\r\n                        return false;\r\n                    sawUpper = true;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        step(start);\r\n        return step;\r\n    });\r\n}\r\nfunction cursorBySubword(view, forward) {\r\n    return moveSel(view, range => range.empty ? moveBySubword(view, range, forward) : rangeEnd(range, forward));\r\n}\r\n/** Move the selection one group or camel-case subword forward. */\r\nconst cursorSubwordForward = view => cursorBySubword(view, true);\r\n/** Move the selection one group or camel-case subword backward. */\r\nconst cursorSubwordBackward = view => cursorBySubword(view, false);\r\nfunction interestingNode(state, node, bracketProp) {\r\n    if (node.type.prop(bracketProp))\r\n        return true;\r\n    let len = node.to - node.from;\r\n    return len && (len > 2 || /[^\\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;\r\n}\r\nfunction moveBySyntax(state, start, forward) {\r\n    let pos = (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.syntaxTree)(state).resolveInner(start.head);\r\n    let bracketProp = forward ? _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_3__.NodeProp.closedBy : _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_3__.NodeProp.openedBy;\r\n    // Scan forward through child nodes to see if there's an interesting node ahead.\r\n    for (let at = start.head;;) {\r\n        let next = forward ? pos.childAfter(at) : pos.childBefore(at);\r\n        if (!next)\r\n            break;\r\n        if (interestingNode(state, next, bracketProp))\r\n            pos = next;\r\n        else\r\n            at = forward ? next.to : next.from;\r\n    }\r\n    let bracket = pos.type.prop(bracketProp), match, newPos;\r\n    if (bracket && (match = forward ? (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.matchBrackets)(state, pos.from, 1) : (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.matchBrackets)(state, pos.to, -1)) && match.matched)\r\n        newPos = forward ? match.end.to : match.end.from;\r\n    else\r\n        newPos = forward ? pos.to : pos.from;\r\n    return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(newPos, forward ? -1 : 1);\r\n}\r\n/** Move the cursor over the next syntactic element to the left. */\r\nconst cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));\r\n/** Move the cursor over the next syntactic element to the right. */\r\nconst cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));\r\nfunction cursorByLine(view, forward) {\r\n    return moveSel(view, range => {\r\n        if (!range.empty)\r\n            return rangeEnd(range, forward);\r\n        let moved = view.moveVertically(range, forward);\r\n        return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);\r\n    });\r\n}\r\n/** Move the selection one line up. */\r\nconst cursorLineUp = view => cursorByLine(view, false);\r\n/** Move the selection one line down. */\r\nconst cursorLineDown = view => cursorByLine(view, true);\r\nfunction pageHeight(view) {\r\n    return Math.max(view.defaultLineHeight, Math.min(view.dom.clientHeight, innerHeight) - 5);\r\n}\r\nfunction cursorByPage(view, forward) {\r\n    let { state } = view, selection = updateSel(state.selection, range => {\r\n        return range.empty ? view.moveVertically(range, forward, pageHeight(view)) : rangeEnd(range, forward);\r\n    });\r\n    if (selection.eq(state.selection))\r\n        return false;\r\n    let startPos = view.coordsAtPos(state.selection.main.head);\r\n    let scrollRect = view.scrollDOM.getBoundingClientRect();\r\n    let effect;\r\n    if (startPos && startPos.top > scrollRect.top && startPos.bottom < scrollRect.bottom &&\r\n        startPos.top - scrollRect.top <= view.scrollDOM.scrollHeight - view.scrollDOM.scrollTop - view.scrollDOM.clientHeight)\r\n        effect = _view_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorView.scrollIntoView(selection.main.head, { y: \"start\", yMargin: startPos.top - scrollRect.top });\r\n    view.dispatch(setSel(state, selection), { effects: effect });\r\n    return true;\r\n}\r\n/** Move the selection one page up. */\r\nconst cursorPageUp = view => cursorByPage(view, false);\r\n/** Move the selection one page down. */\r\nconst cursorPageDown = view => cursorByPage(view, true);\r\nfunction moveByLineBoundary(view, start, forward) {\r\n    let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);\r\n    if (moved.head == start.head && moved.head != (forward ? line.to : line.from))\r\n        moved = view.moveToLineBoundary(start, forward, false);\r\n    if (!forward && moved.head == line.from && line.length) {\r\n        let space = /^\\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;\r\n        if (space && start.head != line.from + space)\r\n            moved = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(line.from + space);\r\n    }\r\n    return moved;\r\n}\r\n/** Move the selection to the next line wrap point, or to the end of the line if there isn't one left on this line. */\r\nconst cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));\r\n/** Move the selection to previous line wrap point, or failing that to the start of the line. */\r\nconst cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));\r\n/** Move the selection to the start of the line. */\r\nconst cursorLineStart = view => moveSel(view, range => _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));\r\n/** Move the selection to the end of the line. */\r\nconst cursorLineEnd = view => moveSel(view, range => _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));\r\nfunction toMatchingBracket(state, dispatch, extend) {\r\n    let found = false, selection = updateSel(state.selection, range => {\r\n        let matching = (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.matchBrackets)(state, range.head, -1)\r\n            || (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.matchBrackets)(state, range.head, 1)\r\n            || (range.head > 0 && (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.matchBrackets)(state, range.head - 1, 1))\r\n            || (range.head < state.doc.length && (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.matchBrackets)(state, range.head + 1, -1));\r\n        if (!matching || !matching.end)\r\n            return range;\r\n        found = true;\r\n        let head = matching.start.from == range.head ? matching.end.to : matching.end.from;\r\n        return extend ? _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(range.anchor, head) : _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(head);\r\n    });\r\n    if (!found)\r\n        return false;\r\n    dispatch(setSel(state, selection));\r\n    return true;\r\n}\r\n/** Move the selection to the bracket matching the one it is currently on, if any. */\r\nconst cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);\r\n/** Extend the selection to the bracket matching the one the selection head is currently on, if any. */\r\nconst selectMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, true);\r\nfunction extendSel(view, how) {\r\n    let selection = updateSel(view.state.selection, range => {\r\n        let head = how(range);\r\n        return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(range.anchor, head.head, head.goalColumn);\r\n    });\r\n    if (selection.eq(view.state.selection))\r\n        return false;\r\n    view.dispatch(setSel(view.state, selection));\r\n    return true;\r\n}\r\nfunction selectByChar(view, forward) {\r\n    return extendSel(view, range => view.moveByChar(range, forward));\r\n}\r\n/** Move the selection head one character to the left, while leaving the anchor in place. */\r\nconst selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));\r\n/** Move the selection head one character to the right. */\r\nconst selectCharRight = view => selectByChar(view, ltrAtCursor(view));\r\n/** Move the selection head one character forward. */\r\nconst selectCharForward = view => selectByChar(view, true);\r\n/** Move the selection head one character backward. */\r\nconst selectCharBackward = view => selectByChar(view, false);\r\nfunction selectByGroup(view, forward) {\r\n    return extendSel(view, range => view.moveByGroup(range, forward));\r\n}\r\n/** Move the selection head one [group](#commands.cursorGroupLeft) to the left. */\r\nconst selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));\r\n/** Move the selection head one group to the right. */\r\nconst selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));\r\n/** Move the selection head one group forward. */\r\nconst selectGroupForward = view => selectByGroup(view, true);\r\n/** Move the selection head one group backward. */\r\nconst selectGroupBackward = view => selectByGroup(view, false);\r\nfunction selectBySubword(view, forward) {\r\n    return extendSel(view, range => moveBySubword(view, range, forward));\r\n}\r\n/** Move the selection head one group or camel-case subword forward. */\r\nconst selectSubwordForward = view => selectBySubword(view, true);\r\n/** Move the selection head one group or subword backward. */\r\nconst selectSubwordBackward = view => selectBySubword(view, false);\r\n/** Move the selection head over the next syntactic element to the left. */\r\nconst selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));\r\n/** Move the selection head over the next syntactic element to the right. */\r\nconst selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));\r\nfunction selectByLine(view, forward) {\r\n    return extendSel(view, range => view.moveVertically(range, forward));\r\n}\r\n/** Move the selection head one line up. */\r\nconst selectLineUp = view => selectByLine(view, false);\r\n/** Move the selection head one line down. */\r\nconst selectLineDown = view => selectByLine(view, true);\r\nfunction selectByPage(view, forward) {\r\n    return extendSel(view, range => view.moveVertically(range, forward, pageHeight(view)));\r\n}\r\n/** Move the selection head one page up. */\r\nconst selectPageUp = view => selectByPage(view, false);\r\n/** Move the selection head one page down. */\r\nconst selectPageDown = view => selectByPage(view, true);\r\n/** Move the selection head to the next line boundary. */\r\nconst selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));\r\n/** Move the selection head to the previous line boundary. */\r\nconst selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));\r\n/** Move the selection head to the start of the line. */\r\nconst selectLineStart = view => extendSel(view, range => _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(view.lineBlockAt(range.head).from));\r\n/** Move the selection head to the end of the line. */\r\nconst selectLineEnd = view => extendSel(view, range => _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(view.lineBlockAt(range.head).to));\r\n/** Move the selection to the start of the document. */\r\nconst cursorDocStart = ({ state, dispatch }) => {\r\n    dispatch(setSel(state, { anchor: 0 }));\r\n    return true;\r\n};\r\n/** Move the selection to the end of the document. */\r\nconst cursorDocEnd = ({ state, dispatch }) => {\r\n    dispatch(setSel(state, { anchor: state.doc.length }));\r\n    return true;\r\n};\r\n/** Move the selection head to the start of the document. */\r\nconst selectDocStart = ({ state, dispatch }) => {\r\n    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));\r\n    return true;\r\n};\r\n/** Move the selection head to the end of the document. */\r\nconst selectDocEnd = ({ state, dispatch }) => {\r\n    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));\r\n    return true;\r\n};\r\n/** Select the entire document. */\r\nconst selectAll = ({ state, dispatch }) => {\r\n    dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: \"select\" }));\r\n    return true;\r\n};\r\n/** Expand the selection to cover entire lines. */\r\nconst selectLine = ({ state, dispatch }) => {\r\n    let ranges = selectedLineBlocks(state).map(({ from, to }) => _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(from, Math.min(to + 1, state.doc.length)));\r\n    dispatch(state.update({ selection: _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.create(ranges), userEvent: \"select\" }));\r\n    return true;\r\n};\r\n/** Select the next syntactic construct that is larger than the selection. */\r\nconst selectParentSyntax = ({ state, dispatch }) => {\r\n    let selection = updateSel(state.selection, range => {\r\n        var _a;\r\n        let context = (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.syntaxTree)(state).resolveInner(range.head, 1);\r\n        while (!((context.from < range.from && context.to >= range.to) ||\r\n            (context.to > range.to && context.from <= range.from) ||\r\n            !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))\r\n            context = context.parent;\r\n        return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(context.to, context.from);\r\n    });\r\n    dispatch(setSel(state, selection));\r\n    return true;\r\n};\r\n/** Simplify the current selection. */\r\nconst simplifySelection = ({ state, dispatch }) => {\r\n    let cur = state.selection, selection = null;\r\n    if (cur.ranges.length > 1)\r\n        selection = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.create([cur.main]);\r\n    else if (!cur.main.empty)\r\n        selection = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.create([_state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(cur.main.head)]);\r\n    if (!selection)\r\n        return false;\r\n    dispatch(setSel(state, selection));\r\n    return true;\r\n};\r\nfunction deleteBy({ state, dispatch }, by) {\r\n    if (state.readOnly)\r\n        return false;\r\n    let event = \"delete.selection\";\r\n    let changes = state.changeByRange(range => {\r\n        let { from, to } = range;\r\n        if (from == to) {\r\n            let towards = by(from);\r\n            if (towards < from)\r\n                event = \"delete.backward\";\r\n            else if (towards > from)\r\n                event = \"delete.forward\";\r\n            from = Math.min(from, towards);\r\n            to = Math.max(to, towards);\r\n        }\r\n        return from == to ? { range } : { changes: { from, to }, range: _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(from) };\r\n    });\r\n    if (changes.changes.empty)\r\n        return false;\r\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: event }));\r\n    return true;\r\n}\r\nfunction skipAtomic(target, pos, forward) {\r\n    if (target instanceof _view_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorView)\r\n        for (let ranges of target.state.facet(_view_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorView.atomicRanges).map(f => f(target)))\r\n            ranges.between(pos, pos, (from, to) => {\r\n                if (from < pos && to > pos)\r\n                    pos = forward ? to : from;\r\n            });\r\n    return pos;\r\n}\r\nconst deleteByChar = (target, forward) => deleteBy(target, pos => {\r\n    let { state } = target, line = state.doc.lineAt(pos), before, targetPos;\r\n    if (!forward && pos > line.from && pos < line.from + 200 &&\r\n        !/[^ \\t]/.test(before = line.text.slice(0, pos - line.from))) {\r\n        if (before[before.length - 1] == \"\\t\")\r\n            return pos - 1;\r\n        let col = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.countColumn)(before, state.tabSize), drop = col % (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.getIndentUnit)(state) || (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.getIndentUnit)(state);\r\n        for (let i = 0; i < drop && before[before.length - 1 - i] == \" \"; i++)\r\n            pos--;\r\n        targetPos = pos;\r\n    }\r\n    else {\r\n        targetPos = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.findClusterBreak)(line.text, pos - line.from, forward, forward) + line.from;\r\n        if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))\r\n            targetPos += forward ? 1 : -1;\r\n    }\r\n    return skipAtomic(target, targetPos, forward);\r\n});\r\n/** Delete the selection, or, for cursor selections, the character before the cursor. */\r\nconst deleteCharBackward = view => deleteByChar(view, false);\r\n/** Delete the selection or the character after the cursor. */\r\nconst deleteCharForward = view => deleteByChar(view, true);\r\nconst deleteByGroup = (target, forward) => deleteBy(target, start => {\r\n    let pos = start, { state } = target, line = state.doc.lineAt(pos);\r\n    let categorize = state.charCategorizer(pos);\r\n    for (let cat = null;;) {\r\n        if (pos == (forward ? line.to : line.from)) {\r\n            if (pos == start && line.number != (forward ? state.doc.lines : 1))\r\n                pos += forward ? 1 : -1;\r\n            break;\r\n        }\r\n        let next = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.findClusterBreak)(line.text, pos - line.from, forward) + line.from;\r\n        let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);\r\n        let nextCat = categorize(nextChar);\r\n        if (cat != null && nextCat != cat)\r\n            break;\r\n        if (nextChar != \" \" || pos != start)\r\n            cat = nextCat;\r\n        pos = next;\r\n    }\r\n    return skipAtomic(target, pos, forward);\r\n});\r\n/** Delete the selection or backward until the end of the next [group]{@link moveByGroup}, only skipping groups of whitespace when they consist of a single space. */\r\nconst deleteGroupBackward = target => deleteByGroup(target, false);\r\n/** Delete the selection or forward until the end of the next group. */\r\nconst deleteGroupForward = target => deleteByGroup(target, true);\r\n/**\r\n * Delete the selection, or, if it is a cursor selection, delete to the end of the line.\r\n * If the cursor is directly at the end of the line, delete the line break after it.\r\n */\r\nconst deleteToLineEnd = view => deleteBy(view, pos => {\r\n    let lineEnd = view.lineBlockAt(pos).to;\r\n    return skipAtomic(view, pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1), true);\r\n});\r\n/**\r\n * Delete the selection, or, if it is a cursor selection, delete to the start of the line.\r\n * If the cursor is directly at the start of the line, delete the line break before it.\r\n * @param view\r\n */\r\nconst deleteToLineStart = view => deleteBy(view, pos => {\r\n    let lineStart = view.lineBlockAt(pos).from;\r\n    return skipAtomic(view, pos > lineStart ? lineStart : Math.max(0, pos - 1), false);\r\n});\r\n/** Delete all whitespace directly before a line end from the document. */\r\nconst deleteTrailingWhitespace = ({ state, dispatch }) => {\r\n    if (state.readOnly)\r\n        return false;\r\n    let changes = [];\r\n    for (let pos = 0, prev = \"\", iter = state.doc.iter();;) {\r\n        iter.next();\r\n        if (iter.lineBreak || iter.done) {\r\n            let trailing = prev.search(/\\s+$/);\r\n            if (trailing > -1)\r\n                changes.push({ from: pos - (prev.length - trailing), to: pos });\r\n            if (iter.done)\r\n                break;\r\n            prev = \"\";\r\n        }\r\n        else {\r\n            prev = iter.value;\r\n        }\r\n        pos += iter.value.length;\r\n    }\r\n    if (!changes.length)\r\n        return false;\r\n    dispatch(state.update({ changes, userEvent: \"delete\" }));\r\n    return true;\r\n};\r\n/** Replace each selection range with a line break, leaving the cursor on the line before the break. */\r\nconst splitLine = ({ state, dispatch }) => {\r\n    if (state.readOnly)\r\n        return false;\r\n    let changes = state.changeByRange(range => {\r\n        return { changes: { from: range.from, to: range.to, insert: _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Text.of([\"\", \"\"]) },\r\n            range: _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(range.from) };\r\n    });\r\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\r\n    return true;\r\n};\r\n/** Flip the characters before and after the cursor(s). */\r\nconst transposeChars = ({ state, dispatch }) => {\r\n    if (state.readOnly)\r\n        return false;\r\n    let changes = state.changeByRange(range => {\r\n        if (!range.empty || range.from == 0 || range.from == state.doc.length)\r\n            return { range };\r\n        let pos = range.from, line = state.doc.lineAt(pos);\r\n        let from = pos == line.from ? pos - 1 : (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.findClusterBreak)(line.text, pos - line.from, false) + line.from;\r\n        let to = pos == line.to ? pos + 1 : (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.findClusterBreak)(line.text, pos - line.from, true) + line.from;\r\n        return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },\r\n            range: _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(to) };\r\n    });\r\n    if (changes.changes.empty)\r\n        return false;\r\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"move.character\" }));\r\n    return true;\r\n};\r\nfunction selectedLineBlocks(state) {\r\n    let blocks = [], upto = -1;\r\n    for (let range of state.selection.ranges) {\r\n        let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);\r\n        if (!range.empty && range.to == endLine.from)\r\n            endLine = state.doc.lineAt(range.to - 1);\r\n        if (upto >= startLine.number) {\r\n            let prev = blocks[blocks.length - 1];\r\n            prev.to = endLine.to;\r\n            prev.ranges.push(range);\r\n        }\r\n        else {\r\n            blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });\r\n        }\r\n        upto = endLine.number + 1;\r\n    }\r\n    return blocks;\r\n}\r\nfunction moveLine(state, dispatch, forward) {\r\n    if (state.readOnly)\r\n        return false;\r\n    let changes = [], ranges = [];\r\n    for (let block of selectedLineBlocks(state)) {\r\n        if (forward ? block.to == state.doc.length : block.from == 0)\r\n            continue;\r\n        let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);\r\n        let size = nextLine.length + 1;\r\n        if (forward) {\r\n            changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });\r\n            for (let r of block.ranges)\r\n                ranges.push(_state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));\r\n        }\r\n        else {\r\n            changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });\r\n            for (let r of block.ranges)\r\n                ranges.push(_state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(r.anchor - size, r.head - size));\r\n        }\r\n    }\r\n    if (!changes.length)\r\n        return false;\r\n    dispatch(state.update({\r\n        changes,\r\n        scrollIntoView: true,\r\n        selection: _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.create(ranges, state.selection.mainIndex),\r\n        userEvent: \"move.line\"\r\n    }));\r\n    return true;\r\n}\r\n/** Move the selected lines up one line. */\r\nconst moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);\r\n/** Move the selected lines down one line. */\r\nconst moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);\r\nfunction copyLine(state, dispatch, forward) {\r\n    if (state.readOnly)\r\n        return false;\r\n    let changes = [];\r\n    for (let block of selectedLineBlocks(state)) {\r\n        if (forward)\r\n            changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });\r\n        else\r\n            changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });\r\n    }\r\n    dispatch(state.update({ changes, scrollIntoView: true, userEvent: \"input.copyline\" }));\r\n    return true;\r\n}\r\n/** Create a copy of the selected lines. Keep the selection in the top copy. */\r\nconst copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);\r\n/** Create a copy of the selected lines. Keep the selection in the bottom copy. */\r\nconst copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);\r\n/** Delete selected lines. */\r\nconst deleteLine = view => {\r\n    if (view.state.readOnly)\r\n        return false;\r\n    let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {\r\n        if (from > 0)\r\n            from--;\r\n        else if (to < state.doc.length)\r\n            to++;\r\n        return { from, to };\r\n    }));\r\n    let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);\r\n    view.dispatch({ changes, selection, scrollIntoView: true, userEvent: \"delete.line\" });\r\n    return true;\r\n};\r\n/** Replace the selection with a newline. */\r\nconst insertNewline = ({ state, dispatch }) => {\r\n    dispatch(state.update(state.replaceSelection(state.lineBreak), { scrollIntoView: true, userEvent: \"input\" }));\r\n    return true;\r\n};\r\nfunction isBetweenBrackets(state, pos) {\r\n    if (/\\(\\)|\\[\\]|\\{\\}/.test(state.sliceDoc(pos - 1, pos + 1)))\r\n        return { from: pos, to: pos };\r\n    let context = (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.syntaxTree)(state).resolveInner(pos);\r\n    let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;\r\n    if (before && after && before.to <= pos && after.from >= pos &&\r\n        (closedBy = before.type.prop(_lezer_common_index_js__WEBPACK_IMPORTED_MODULE_3__.NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&\r\n        state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from)\r\n        return { from: before.to, to: after.from };\r\n    return null;\r\n}\r\n/** Replace the selection with a newline and indent the newly created line(s). */\r\nconst insertNewlineAndIndent = newlineAndIndent(false);\r\n/** Create a blank, indented line below the current line. */\r\nconst insertBlankLine = newlineAndIndent(true);\r\nfunction newlineAndIndent(atEof) {\r\n    return ({ state, dispatch }) => {\r\n        if (state.readOnly)\r\n            return false;\r\n        let changes = state.changeByRange(range => {\r\n            let { from, to } = range, line = state.doc.lineAt(from);\r\n            let explode = !atEof && from == to && isBetweenBrackets(state, from);\r\n            if (atEof)\r\n                from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;\r\n            let cx = new _language_index_js__WEBPACK_IMPORTED_MODULE_2__.IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });\r\n            let indent = (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.getIndentation)(cx, from);\r\n            if (indent == null)\r\n                indent = /^\\s*/.exec(state.doc.lineAt(from).text)[0].length;\r\n            while (to < line.to && /\\s/.test(line.text[to - line.from]))\r\n                to++;\r\n            if (explode)\r\n                ({ from, to } = explode);\r\n            else if (from > line.from && from < line.from + 100 && !/\\S/.test(line.text.slice(0, from)))\r\n                from = line.from;\r\n            let insert = [\"\", (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.indentString)(state, indent)];\r\n            if (explode)\r\n                insert.push((0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.indentString)(state, cx.lineIndent(line.from, -1)));\r\n            return { changes: { from, to, insert: _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Text.of(insert) },\r\n                range: _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(from + 1 + insert[1].length) };\r\n        });\r\n        dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\r\n        return true;\r\n    };\r\n}\r\nfunction changeBySelectedLine(state, f) {\r\n    let atLine = -1;\r\n    return state.changeByRange(range => {\r\n        let changes = [];\r\n        for (let pos = range.from; pos <= range.to;) {\r\n            let line = state.doc.lineAt(pos);\r\n            if (line.number > atLine && (range.empty || range.to > line.from)) {\r\n                f(line, changes, range);\r\n                atLine = line.number;\r\n            }\r\n            pos = line.to + 1;\r\n        }\r\n        let changeSet = state.changes(changes);\r\n        return { changes,\r\n            range: _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };\r\n    });\r\n}\r\n/** Auto-indent the selected lines. This uses the [indentation service facet]{@link indentService} as source for auto-indent information. */\r\nconst indentSelection = ({ state, dispatch }) => {\r\n    if (state.readOnly)\r\n        return false;\r\n    let updated = Object.create(null);\r\n    let context = new _language_index_js__WEBPACK_IMPORTED_MODULE_2__.IndentContext(state, { overrideIndentation: start => {\r\n            let found = updated[start];\r\n            return found == null ? -1 : found;\r\n        } });\r\n    let changes = changeBySelectedLine(state, (line, changes, range) => {\r\n        let indent = (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.getIndentation)(context, line.from);\r\n        if (indent == null)\r\n            return;\r\n        if (!/\\S/.test(line.text))\r\n            indent = 0;\r\n        let cur = /^\\s*/.exec(line.text)[0];\r\n        let norm = (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.indentString)(state, indent);\r\n        if (cur != norm || range.from < line.from + cur.length) {\r\n            updated[line.from] = indent;\r\n            changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\r\n        }\r\n    });\r\n    if (!changes.changes.empty)\r\n        dispatch(state.update(changes, { userEvent: \"indent\" }));\r\n    return true;\r\n};\r\n/** Add a [unit]{@link indentUnit} of indentation to all selected lines. */\r\nconst indentMore = ({ state, dispatch }) => {\r\n    if (state.readOnly)\r\n        return false;\r\n    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {\r\n        changes.push({ from: line.from, insert: state.facet(_language_index_js__WEBPACK_IMPORTED_MODULE_2__.indentUnit) });\r\n    }), { userEvent: \"input.indent\" }));\r\n    return true;\r\n};\r\n/** Remove a [unit]{@link indentUnit} of indentation from all selected lines. */\r\nconst indentLess = ({ state, dispatch }) => {\r\n    if (state.readOnly)\r\n        return false;\r\n    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {\r\n        let space = /^\\s*/.exec(line.text)[0];\r\n        if (!space)\r\n            return;\r\n        let col = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.countColumn)(space, state.tabSize), keep = 0;\r\n        let insert = (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.indentString)(state, Math.max(0, col - (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.getIndentUnit)(state)));\r\n        while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))\r\n            keep++;\r\n        changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });\r\n    }), { userEvent: \"delete.dedent\" }));\r\n    return true;\r\n};\r\n/** Insert a tab character at the cursor or, if something is selected, use {@link indentMore} to indent the entire selection. */\r\nconst insertTab = ({ state, dispatch }) => {\r\n    if (state.selection.ranges.some(r => !r.empty))\r\n        return indentMore({ state, dispatch });\r\n    dispatch(state.update(state.replaceSelection(\"\\t\"), { scrollIntoView: true, userEvent: \"input\" }));\r\n    return true;\r\n};\r\n/**\r\n * Array of key bindings containing the Emacs-style bindings that are\r\n * available on macOS by default.\r\n *\r\n *  - Ctrl-b: {@link cursorCharLeft} ({@link selectCharLeft} with Shift)\r\n *  - Ctrl-f: {@link cursorCharRight} ({@link selectCharRight} with Shift)\r\n *  - Ctrl-p: {@link cursorLineUp} ({@link selectLineUp} with Shift)\r\n *  - Ctrl-n: {@link cursorLineDown} ({@link selectLineDown} with Shift)\r\n *  - Ctrl-a: {@link cursorLineStart} ({@link selectLineStart} with Shift)\r\n *  - Ctrl-e: {@link cursorLineEnd} ({@link selectLineEnd} with Shift)\r\n *  - Ctrl-d: {@link deleteCharForward}.\r\n *  - Ctrl-h: {@link deleteCharBackward}.\r\n *  - Ctrl-k: {@link deleteToLineEnd}.\r\n *  - Ctrl-Alt-h: {@link deleteGroupBackward}\r\n *  - Ctrl-o: {@link splitLine}\r\n *  - Ctrl-t: {@link transposeChars}\r\n *  - Ctrl-v: {@link cursorPageDown}\r\n *  - Alt-v: {@link cursorPageUp}\r\n */\r\nconst emacsStyleKeymap = [\r\n    { key: \"Ctrl-b\", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },\r\n    { key: \"Ctrl-f\", run: cursorCharRight, shift: selectCharRight },\r\n    { key: \"Ctrl-p\", run: cursorLineUp, shift: selectLineUp },\r\n    { key: \"Ctrl-n\", run: cursorLineDown, shift: selectLineDown },\r\n    { key: \"Ctrl-a\", run: cursorLineStart, shift: selectLineStart },\r\n    { key: \"Ctrl-e\", run: cursorLineEnd, shift: selectLineEnd },\r\n    { key: \"Ctrl-d\", run: deleteCharForward },\r\n    { key: \"Ctrl-h\", run: deleteCharBackward },\r\n    { key: \"Ctrl-k\", run: deleteToLineEnd },\r\n    { key: \"Ctrl-Alt-h\", run: deleteGroupBackward },\r\n    { key: \"Ctrl-o\", run: splitLine },\r\n    { key: \"Ctrl-t\", run: transposeChars },\r\n    { key: \"Ctrl-v\", run: cursorPageDown },\r\n];\r\n/**\r\n * An array of key bindings closely sticking to platform-standard or widely used bindings. (This includes the bindings from\r\n * {@link emacsStyleKeymap}, with their `key` property changed to `mac`.)\r\n *\r\n *  - ArrowLeft: {@link cursorCharLeft} ({@link selectCharLeft} with Shift)\r\n *  - ArrowRight: {@link cursorCharRight} ({@link selectCharRight} with Shift)\r\n *  - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): {@link cursorGroupLeft} ({@link selectGroupLeft} with Shift)\r\n *  - Ctrl-ArrowRight (Alt-ArrowRight on macOS): {@link cursorGroupRight} ({@link selectGroupRight} with Shift)\r\n *  - Cmd-ArrowLeft (on macOS): {@link cursorLineStart} ({@link selectLineStart} with Shift)\r\n *  - Cmd-ArrowRight (on macOS): {@link cursorLineEnd} ({@link selectLineEnd} with Shift)\r\n *  - ArrowUp: {@link cursorLineUp} ({@link selectLineUp} with Shift)\r\n *  - ArrowDown: {@link cursorLineDown} ({@link selectLineDown} with Shift)\r\n *  - Cmd-ArrowUp (on macOS): {@link cursorDocStart} ({@link selectDocStart} with Shift)\r\n *  - Cmd-ArrowDown (on macOS): {@link cursorDocEnd} ({@link selectDocEnd} with Shift)\r\n *  - Ctrl-ArrowUp (on macOS): {@link cursorPageUp} ({@link selectPageUp} with Shift)\r\n *  - Ctrl-ArrowDown (on macOS): {@link cursorPageDown} ({@link selectPageDown} with Shift)\r\n *  - PageUp: {@link cursorPageUp} ({@link selectPageUp} with Shift)\r\n *  - PageDown: {@link cursorPageDown} ({@link selectPageDown} with Shift)\r\n *  - Home: {@link cursorLineBoundaryBackward} ({@link selectLineBoundaryBackward} with Shift)\r\n *  - End: {@link cursorLineBoundaryForward} ({@link selectLineBoundaryForward} with Shift)\r\n *  - Ctrl-Home (Cmd-Home on macOS): {@link cursorDocStart} ({@link selectDocStart} with Shift)\r\n *  - Ctrl-End (Cmd-Home on macOS): {@link cursorDocEnd}) ({@link selectDocEnd} with Shift)\r\n *  - Enter: {@link insertNewlineAndIndent}\r\n *  - Ctrl-a (Cmd-a on macOS): {@link selectAll}\r\n *  - Backspace: {@link deleteCharBackward}\r\n *  - Delete: {@link deleteCharForward}\r\n *  - Ctrl-Backspace (Alt-Backspace on macOS): {@link deleteGroupBackward}\r\n *  - Ctrl-Delete (Alt-Delete on macOS): {@link deleteGroupForward}\r\n *  - Cmd-Backspace (macOS): {@link deleteToLineStart}.\r\n *  - Cmd-Delete (macOS): {@link deleteToLineEnd}.\r\n */\r\nconst standardKeymap = [\r\n    { key: \"ArrowLeft\", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },\r\n    { key: \"Mod-ArrowLeft\", mac: \"Alt-ArrowLeft\", run: cursorGroupLeft, shift: selectGroupLeft },\r\n    { mac: \"Cmd-ArrowLeft\", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },\r\n    { key: \"ArrowRight\", run: cursorCharRight, shift: selectCharRight, preventDefault: true },\r\n    { key: \"Mod-ArrowRight\", mac: \"Alt-ArrowRight\", run: cursorGroupRight, shift: selectGroupRight },\r\n    { mac: \"Cmd-ArrowRight\", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },\r\n    { key: \"ArrowUp\", run: cursorLineUp, shift: selectLineUp, preventDefault: true },\r\n    { mac: \"Cmd-ArrowUp\", run: cursorDocStart, shift: selectDocStart },\r\n    { mac: \"Ctrl-ArrowUp\", run: cursorPageUp, shift: selectPageUp },\r\n    { key: \"ArrowDown\", run: cursorLineDown, shift: selectLineDown, preventDefault: true },\r\n    { mac: \"Cmd-ArrowDown\", run: cursorDocEnd, shift: selectDocEnd },\r\n    { mac: \"Ctrl-ArrowDown\", run: cursorPageDown, shift: selectPageDown },\r\n    { key: \"PageUp\", run: cursorPageUp, shift: selectPageUp },\r\n    { key: \"PageDown\", run: cursorPageDown, shift: selectPageDown },\r\n    { key: \"Home\", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },\r\n    { key: \"Mod-Home\", run: cursorDocStart, shift: selectDocStart },\r\n    { key: \"End\", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },\r\n    { key: \"Mod-End\", run: cursorDocEnd, shift: selectDocEnd },\r\n    { key: \"Enter\", run: insertNewlineAndIndent },\r\n    { key: \"Mod-a\", run: selectAll },\r\n    { key: \"Backspace\", run: deleteCharBackward, shift: deleteCharBackward },\r\n    { key: \"Delete\", run: deleteCharForward },\r\n    { key: \"Mod-Backspace\", mac: \"Alt-Backspace\", run: deleteGroupBackward },\r\n    { key: \"Mod-Delete\", mac: \"Alt-Delete\", run: deleteGroupForward },\r\n    { mac: \"Mod-Backspace\", run: deleteToLineStart },\r\n    { mac: \"Mod-Delete\", run: deleteToLineEnd }\r\n].concat(emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));\r\n/**\r\n * The default keymap. Includes all bindings from {@link standardKeymap} plus the following:\r\n *\r\n *  - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): {@link cursorSyntaxLeft} ({@link selectSyntaxLeft} with Shift)\r\n *  - Alt-ArrowRight (Ctrl-ArrowRight on macOS): {@link cursorSyntaxRight} ({@link selectSyntaxRight} with Shift)\r\n *  - Alt-ArrowUp: {@link moveLineUp}.\r\n *  - Alt-ArrowDown: {@link moveLineDown}.\r\n *  - Shift-Alt-ArrowUp: {@link copyLineUp}.\r\n *  - Shift-Alt-ArrowDown: {@link copyLineDown}.\r\n *  - Escape: {@link simplifySelection}.\r\n *  - Ctrl-Enter (Comd-Enter on macOS): {@link insertBlankLine}.\r\n *  - Alt-l (Ctrl-l on macOS): {@link selectLine}.\r\n *  - Ctrl-i (Cmd-i on macOS): {@link selectParentSyntax}.\r\n *  - Ctrl-[ (Cmd-[ on macOS): {@link indentLess}.\r\n *  - Ctrl-] (Cmd-] on macOS): {@link indentMore}.\r\n *  - Ctrl-Alt-\\\\ (Cmd-Alt-\\\\ on macOS): {@link indentSelection}.\r\n *  - Shift-Ctrl-k (Shift-Cmd-k on macOS): {@link deleteLine}.\r\n *  - Shift-Ctrl-\\\\ (Shift-Cmd-\\\\ on macOS): {@link cursorMatchingBracket}.\r\n *  - Ctrl-/ (Cmd-/ on macOS): {@link toggleComment}.\r\n *  - Shift-Alt-a: {@link toggleBlockComment}.\r\n */\r\nconst defaultKeymap = [\r\n    { key: \"Alt-ArrowLeft\", mac: \"Ctrl-ArrowLeft\", run: cursorSyntaxLeft, shift: selectSyntaxLeft },\r\n    { key: \"Alt-ArrowRight\", mac: \"Ctrl-ArrowRight\", run: cursorSyntaxRight, shift: selectSyntaxRight },\r\n    { key: \"Alt-ArrowUp\", run: moveLineUp },\r\n    { key: \"Shift-Alt-ArrowUp\", run: copyLineUp },\r\n    { key: \"Alt-ArrowDown\", run: moveLineDown },\r\n    { key: \"Shift-Alt-ArrowDown\", run: copyLineDown },\r\n    { key: \"Escape\", run: simplifySelection },\r\n    { key: \"Mod-Enter\", run: insertBlankLine },\r\n    { key: \"Alt-l\", mac: \"Ctrl-l\", run: selectLine },\r\n    { key: \"Mod-i\", run: selectParentSyntax, preventDefault: true },\r\n    { key: \"Mod-[\", run: indentLess },\r\n    { key: \"Mod-]\", run: indentMore },\r\n    { key: \"Mod-Alt-\\\\\", run: indentSelection },\r\n    { key: \"Shift-Mod-k\", run: deleteLine },\r\n    { key: \"Shift-Mod-\\\\\", run: cursorMatchingBracket },\r\n    { key: \"Mod-/\", run: _comment_js__WEBPACK_IMPORTED_MODULE_4__.toggleComment },\r\n    { key: \"Alt-A\", run: _comment_js__WEBPACK_IMPORTED_MODULE_4__.toggleBlockComment }\r\n].concat(standardKeymap);\r\n/** A binding that binds Tab to {@link indentMore} and Shift-Tab to {@link indentLess}. */\r\nconst indentWithTab = { key: \"Tab\", run: indentMore, shift: indentLess };\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/commands/commands.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/commands/comment.js":
/*!*******************************************************!*\
  !*** ./sys/public/js/editor/dist/commands/comment.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"blockComment\": () => (/* binding */ blockComment),\n/* harmony export */   \"blockUncomment\": () => (/* binding */ blockUncomment),\n/* harmony export */   \"lineComment\": () => (/* binding */ lineComment),\n/* harmony export */   \"lineUncomment\": () => (/* binding */ lineUncomment),\n/* harmony export */   \"toggleBlockComment\": () => (/* binding */ toggleBlockComment),\n/* harmony export */   \"toggleBlockCommentByLine\": () => (/* binding */ toggleBlockCommentByLine),\n/* harmony export */   \"toggleComment\": () => (/* binding */ toggleComment),\n/* harmony export */   \"toggleLineComment\": () => (/* binding */ toggleLineComment)\n/* harmony export */ });\n/** Comment or uncomment the current selection. Will use line comments if available, otherwise falling back to block comments. */\r\nconst toggleComment = target => {\r\n    let config = getConfig(target.state);\r\n    return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;\r\n};\r\nfunction command(f, option) {\r\n    return ({ state, dispatch }) => {\r\n        if (state.readOnly)\r\n            return false;\r\n        let tr = f(option, state);\r\n        if (!tr)\r\n            return false;\r\n        dispatch(state.update(tr));\r\n        return true;\r\n    };\r\n}\r\n/** Comment or uncomment the current selection using line comments. The line comment syntax is taken from the {@link CommentTokens} [language data]{@link languageDataAt} */\r\nconst toggleLineComment = command(changeLineComment, 0 /* Toggle */);\r\n/** Comment the current selection using line comments. */\r\nconst lineComment = command(changeLineComment, 1 /* Comment */);\r\n/** Uncomment the current selection using line comments. */\r\nconst lineUncomment = command(changeLineComment, 2 /* Uncomment */);\r\n/** Comment or uncomment the current selection using block comments. The block comment syntax is taken from the {@link CommentTokens} [language data]{@link languageDataAt} */\r\nconst toggleBlockComment = command(changeBlockComment, 0 /* Toggle */);\r\n/** Comment the current selection using block comments. */\r\nconst blockComment = command(changeBlockComment, 1 /* Comment */);\r\n/** Uncomment the current selection using block comments. */\r\nconst blockUncomment = command(changeBlockComment, 2 /* Uncomment */);\r\n/** Comment or uncomment the lines around the current selection using block comments. */\r\nconst toggleBlockCommentByLine = command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* Toggle */);\r\nfunction getConfig(state, pos = state.selection.main.head) {\r\n    let data = state.languageDataAt(\"commentTokens\", pos);\r\n    return data.length ? data[0] : {};\r\n}\r\nconst SearchMargin = 50;\r\n/** Determines if the given range is block-commented in the given state. */\r\nfunction findBlockComment(state, { open, close }, from, to) {\r\n    let textBefore = state.sliceDoc(from - SearchMargin, from);\r\n    let textAfter = state.sliceDoc(to, to + SearchMargin);\r\n    let spaceBefore = /\\s*$/.exec(textBefore)[0].length, spaceAfter = /^\\s*/.exec(textAfter)[0].length;\r\n    let beforeOff = textBefore.length - spaceBefore;\r\n    if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&\r\n        textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {\r\n        return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },\r\n            close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };\r\n    }\r\n    let startText, endText;\r\n    if (to - from <= 2 * SearchMargin) {\r\n        startText = endText = state.sliceDoc(from, to);\r\n    }\r\n    else {\r\n        startText = state.sliceDoc(from, from + SearchMargin);\r\n        endText = state.sliceDoc(to - SearchMargin, to);\r\n    }\r\n    let startSpace = /^\\s*/.exec(startText)[0].length, endSpace = /\\s*$/.exec(endText)[0].length;\r\n    let endOff = endText.length - endSpace - close.length;\r\n    if (startText.slice(startSpace, startSpace + open.length) == open &&\r\n        endText.slice(endOff, endOff + close.length) == close) {\r\n        return { open: { pos: from + startSpace + open.length,\r\n                margin: /\\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },\r\n            close: { pos: to - endSpace - close.length,\r\n                margin: /\\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };\r\n    }\r\n    return null;\r\n}\r\nfunction selectedLineRanges(state) {\r\n    let ranges = [];\r\n    for (let r of state.selection.ranges) {\r\n        let fromLine = state.doc.lineAt(r.from);\r\n        let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);\r\n        let last = ranges.length - 1;\r\n        if (last >= 0 && ranges[last].to > fromLine.from)\r\n            ranges[last].to = toLine.to;\r\n        else\r\n            ranges.push({ from: fromLine.from, to: toLine.to });\r\n    }\r\n    return ranges;\r\n}\r\n/** Performs toggle, comment and uncomment of block comments in languages that support them. */\r\nfunction changeBlockComment(option, state, ranges = state.selection.ranges) {\r\n    let tokens = ranges.map(r => getConfig(state, r.from).block);\r\n    if (!tokens.every(c => c))\r\n        return null;\r\n    let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));\r\n    if (option != 2 /* Uncomment */ && !comments.every(c => c)) {\r\n        return { changes: state.changes(ranges.map((range, i) => {\r\n                if (comments[i])\r\n                    return [];\r\n                return [{ from: range.from, insert: tokens[i].open + \" \" }, { from: range.to, insert: \" \" + tokens[i].close }];\r\n            })) };\r\n    }\r\n    else if (option != 1 /* Comment */ && comments.some(c => c)) {\r\n        let changes = [];\r\n        for (let i = 0, comment; i < comments.length; i++)\r\n            if (comment = comments[i]) {\r\n                let token = tokens[i], { open, close } = comment;\r\n                changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });\r\n            }\r\n        return { changes };\r\n    }\r\n    return null;\r\n}\r\n/** Performs toggle, comment and uncomment of line comments. */\r\nfunction changeLineComment(option, state, ranges = state.selection.ranges) {\r\n    let lines = [];\r\n    let prevLine = -1;\r\n    for (let { from, to } of ranges) {\r\n        let startI = lines.length, minIndent = 1e9;\r\n        for (let pos = from; pos <= to;) {\r\n            let line = state.doc.lineAt(pos);\r\n            if (line.from > prevLine && (from == to || to > line.from)) {\r\n                prevLine = line.from;\r\n                let token = getConfig(state, pos).line;\r\n                if (!token)\r\n                    continue;\r\n                let indent = /^\\s*/.exec(line.text)[0].length;\r\n                let empty = indent == line.length;\r\n                let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;\r\n                if (indent < line.text.length && indent < minIndent)\r\n                    minIndent = indent;\r\n                lines.push({ line, comment, token, indent, empty, single: false });\r\n            }\r\n            pos = line.to + 1;\r\n        }\r\n        if (minIndent < 1e9)\r\n            for (let i = startI; i < lines.length; i++)\r\n                if (lines[i].indent < lines[i].line.text.length)\r\n                    lines[i].indent = minIndent;\r\n        if (lines.length == startI + 1)\r\n            lines[startI].single = true;\r\n    }\r\n    if (option != 2 /* Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {\r\n        let changes = [];\r\n        for (let { line, token, indent, empty, single } of lines)\r\n            if (single || !empty)\r\n                changes.push({ from: line.from + indent, insert: token + \" \" });\r\n        let changeSet = state.changes(changes);\r\n        return { changes: changeSet, selection: state.selection.map(changeSet, 1) };\r\n    }\r\n    else if (option != 1 /* Comment */ && lines.some(l => l.comment >= 0)) {\r\n        let changes = [];\r\n        for (let { line, comment, token } of lines)\r\n            if (comment >= 0) {\r\n                let from = line.from + comment, to = from + token.length;\r\n                if (line.text[to - line.from] == \" \")\r\n                    to++;\r\n                changes.push({ from, to });\r\n            }\r\n        return { changes };\r\n    }\r\n    return null;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/commands/comment.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/commands/history.js":
/*!*******************************************************!*\
  !*** ./sys/public/js/editor/dist/commands/history.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"history\": () => (/* binding */ history),\n/* harmony export */   \"historyField\": () => (/* binding */ historyField),\n/* harmony export */   \"historyKeymap\": () => (/* binding */ historyKeymap),\n/* harmony export */   \"invertedEffects\": () => (/* binding */ invertedEffects),\n/* harmony export */   \"isolateHistory\": () => (/* binding */ isolateHistory),\n/* harmony export */   \"redo\": () => (/* binding */ redo),\n/* harmony export */   \"redoDepth\": () => (/* binding */ redoDepth),\n/* harmony export */   \"redoSelection\": () => (/* binding */ redoSelection),\n/* harmony export */   \"undo\": () => (/* binding */ undo),\n/* harmony export */   \"undoDepth\": () => (/* binding */ undoDepth),\n/* harmony export */   \"undoSelection\": () => (/* binding */ undoSelection)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n\r\n\r\nconst fromHistory = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Annotation.define();\r\n/**\r\n * Transaction annotation that will prevent that transaction from being combined with other transactions in\r\n * the undo history.\r\n *\r\n * With `\"before\"`, it'll prevent merging with previous transactions.\r\n * With `\"after\"`, subsequent transactions won't be combined with this one.\r\n * With `\"full\"`, the transaction is isolated on both sides.\r\n */\r\nconst isolateHistory = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Annotation.define();\r\n/**\r\n * This facet provides a way to register functions that, given a transaction, provide a set of effects that the\r\n * history should store when inverting the transaction. This can be used to integrate some kinds of effects in\r\n * the history, so that they can be undone (and redone again).\r\n */\r\nconst invertedEffects = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst historyConfig = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({\r\n    combine(configs) {\r\n        return (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.combineConfig)(configs, {\r\n            minDepth: 100,\r\n            newGroupDelay: 500\r\n        }, { minDepth: Math.max, newGroupDelay: Math.min });\r\n    }\r\n});\r\nfunction changeEnd(changes) {\r\n    let end = 0;\r\n    changes.iterChangedRanges((_, to) => end = to);\r\n    return end;\r\n}\r\nconst historyField_ = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.StateField.define({\r\n    create() {\r\n        return HistoryState.empty;\r\n    },\r\n    update(state, tr) {\r\n        let config = tr.state.facet(historyConfig);\r\n        let fromHist = tr.annotation(fromHistory);\r\n        if (fromHist) {\r\n            let selection = tr.docChanged ? _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.single(changeEnd(tr.changes)) : undefined;\r\n            let item = HistEvent.fromTransaction(tr, selection), from = fromHist.side;\r\n            let other = from == 0 /* Done */ ? state.undone : state.done;\r\n            if (item)\r\n                other = updateBranch(other, other.length, config.minDepth, item);\r\n            else\r\n                other = addSelection(other, tr.startState.selection);\r\n            return new HistoryState(from == 0 /* Done */ ? fromHist.rest : other, from == 0 /* Done */ ? other : fromHist.rest);\r\n        }\r\n        let isolate = tr.annotation(isolateHistory);\r\n        if (isolate == \"full\" || isolate == \"before\")\r\n            state = state.isolate();\r\n        if (tr.annotation(_state_index_js__WEBPACK_IMPORTED_MODULE_0__.Transaction.addToHistory) === false)\r\n            return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;\r\n        let event = HistEvent.fromTransaction(tr);\r\n        let time = tr.annotation(_state_index_js__WEBPACK_IMPORTED_MODULE_0__.Transaction.time), userEvent = tr.annotation(_state_index_js__WEBPACK_IMPORTED_MODULE_0__.Transaction.userEvent);\r\n        if (event)\r\n            state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);\r\n        else if (tr.selection)\r\n            state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);\r\n        if (isolate == \"full\" || isolate == \"after\")\r\n            state = state.isolate();\r\n        return state;\r\n    },\r\n    toJSON(value) {\r\n        return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };\r\n    },\r\n    fromJSON(json) {\r\n        return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));\r\n    }\r\n});\r\n/** Create a history extension with the given configuration. */\r\nfunction history(config = {}) {\r\n    return [\r\n        historyField_,\r\n        historyConfig.of(config),\r\n        _view_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorView.domEventHandlers({\r\n            beforeinput(e, view) {\r\n                let command = e.inputType == \"historyUndo\" ? undo : e.inputType == \"historyRedo\" ? redo : null;\r\n                if (!command)\r\n                    return false;\r\n                e.preventDefault();\r\n                return command(view);\r\n            }\r\n        })\r\n    ];\r\n}\r\n/**\r\n * The state field used to store the history data. Should probably only be used when you want to\r\n * [serialize]{@link EditorState.toJSON} or [deserialize]{@link EditorState.fromJSON} state objects in a way\r\n * that preserves history.\r\n */\r\nconst historyField = historyField_;\r\nfunction cmd(side, selection) {\r\n    return function ({ state, dispatch }) {\r\n        if (!selection && state.readOnly)\r\n            return false;\r\n        let historyState = state.field(historyField_, false);\r\n        if (!historyState)\r\n            return false;\r\n        let tr = historyState.pop(side, state, selection);\r\n        if (!tr)\r\n            return false;\r\n        dispatch(tr);\r\n        return true;\r\n    };\r\n}\r\n/** Undo a single group of history events. Returns false if no group was available. */\r\nconst undo = cmd(0 /* Done */, false);\r\n/** Redo a group of history events. Returns false if no group was available. */\r\nconst redo = cmd(1 /* Undone */, false);\r\n/** Undo a change or selection change. */\r\nconst undoSelection = cmd(0 /* Done */, true);\r\n/** Redo a change or selection change. */\r\nconst redoSelection = cmd(1 /* Undone */, true);\r\nfunction depth(side) {\r\n    return function (state) {\r\n        let histState = state.field(historyField_, false);\r\n        if (!histState)\r\n            return 0;\r\n        let branch = side == 0 /* Done */ ? histState.done : histState.undone;\r\n        return branch.length - (branch.length && !branch[0].changes ? 1 : 0);\r\n    };\r\n}\r\n/** The amount of undoable change events available in a given state. */\r\nconst undoDepth = depth(0 /* Done */);\r\n/** The amount of redoable change events available in a given state. */\r\nconst redoDepth = depth(1 /* Undone */);\r\n/** History events store groups of changes or effects that need to be undone/redone together. */\r\nclass HistEvent {\r\n    constructor(\r\n    // The changes in this event.\r\n    changes, \r\n    // The effects associated with this event\r\n    effects, mapped, \r\n    // The selection before this event\r\n    startSelection, \r\n    // Stores selection changes after this event, to be used for selection undo/redo.\r\n    selectionsAfter) {\r\n        this.changes = changes;\r\n        this.effects = effects;\r\n        this.mapped = mapped;\r\n        this.startSelection = startSelection;\r\n        this.selectionsAfter = selectionsAfter;\r\n    }\r\n    setSelAfter(after) {\r\n        return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);\r\n    }\r\n    toJSON() {\r\n        var _a, _b, _c;\r\n        return {\r\n            changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),\r\n            mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),\r\n            startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),\r\n            selectionsAfter: this.selectionsAfter.map(s => s.toJSON())\r\n        };\r\n    }\r\n    static fromJSON(json) {\r\n        return new HistEvent(json.changes && _state_index_js__WEBPACK_IMPORTED_MODULE_0__.ChangeSet.fromJSON(json.changes), [], json.mapped && _state_index_js__WEBPACK_IMPORTED_MODULE_0__.ChangeDesc.fromJSON(json.mapped), json.startSelection && _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(_state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.fromJSON));\r\n    }\r\n    // This does not check `addToHistory` and such, it assumes the transaction needs to be converted to an item.\r\n    // Returns null when there are no changes or effects in the transaction.\r\n    static fromTransaction(tr, selection) {\r\n        let effects = none;\r\n        for (let invert of tr.startState.facet(invertedEffects)) {\r\n            let result = invert(tr);\r\n            if (result.length)\r\n                effects = effects.concat(result);\r\n        }\r\n        if (!effects.length && tr.changes.empty)\r\n            return null;\r\n        return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none);\r\n    }\r\n    static selection(selections) {\r\n        return new HistEvent(undefined, none, undefined, undefined, selections);\r\n    }\r\n}\r\nfunction updateBranch(branch, to, maxLen, newEvent) {\r\n    let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;\r\n    let newBranch = branch.slice(start, to);\r\n    newBranch.push(newEvent);\r\n    return newBranch;\r\n}\r\nfunction isAdjacent(a, b) {\r\n    let ranges = [], isAdjacent = false;\r\n    a.iterChangedRanges((f, t) => ranges.push(f, t));\r\n    b.iterChangedRanges((_f, _t, f, t) => {\r\n        for (let i = 0; i < ranges.length;) {\r\n            let from = ranges[i++], to = ranges[i++];\r\n            if (t >= from && f <= to)\r\n                isAdjacent = true;\r\n        }\r\n    });\r\n    return isAdjacent;\r\n}\r\nfunction eqSelectionShape(a, b) {\r\n    return a.ranges.length == b.ranges.length &&\r\n        a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;\r\n}\r\nfunction conc(a, b) {\r\n    return !a.length ? b : !b.length ? a : a.concat(b);\r\n}\r\nconst none = [];\r\nconst MaxSelectionsPerEvent = 200;\r\nfunction addSelection(branch, selection) {\r\n    if (!branch.length) {\r\n        return [HistEvent.selection([selection])];\r\n    }\r\n    else {\r\n        let lastEvent = branch[branch.length - 1];\r\n        let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));\r\n        if (sels.length && sels[sels.length - 1].eq(selection))\r\n            return branch;\r\n        sels.push(selection);\r\n        return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));\r\n    }\r\n}\r\n/** Assumes the top item has one or more selectionAfter values */\r\nfunction popSelection(branch) {\r\n    let last = branch[branch.length - 1];\r\n    let newBranch = branch.slice();\r\n    newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));\r\n    return newBranch;\r\n}\r\n/** Add a mapping to the top event in the given branch. If this maps away all the changes and effects in that item, drop it and propagate the mapping to the next item. */\r\nfunction addMappingToBranch(branch, mapping) {\r\n    if (!branch.length)\r\n        return branch;\r\n    let length = branch.length, selections = none;\r\n    while (length) {\r\n        let event = mapEvent(branch[length - 1], mapping, selections);\r\n        if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping\r\n            let result = branch.slice(0, length);\r\n            result[length - 1] = event;\r\n            return result;\r\n        }\r\n        else { // Drop this event, since there's no changes or effects left\r\n            mapping = event.mapped;\r\n            length--;\r\n            selections = event.selectionsAfter;\r\n        }\r\n    }\r\n    return selections.length ? [HistEvent.selection(selections)] : none;\r\n}\r\nfunction mapEvent(event, mapping, extraSelections) {\r\n    let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none, extraSelections);\r\n    // Change-less events don't store mappings (they are always the last event in a branch)\r\n    if (!event.changes)\r\n        return HistEvent.selection(selections);\r\n    let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);\r\n    let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;\r\n    return new HistEvent(mappedChanges, _state_index_js__WEBPACK_IMPORTED_MODULE_0__.StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);\r\n}\r\nconst joinableUserEvent = /^(input\\.type|delete)($|\\.)/;\r\nclass HistoryState {\r\n    constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {\r\n        this.done = done;\r\n        this.undone = undone;\r\n        this.prevTime = prevTime;\r\n        this.prevUserEvent = prevUserEvent;\r\n    }\r\n    isolate() {\r\n        return this.prevTime ? new HistoryState(this.done, this.undone) : this;\r\n    }\r\n    addChanges(event, time, userEvent, newGroupDelay, maxLen) {\r\n        let done = this.done, lastEvent = done[done.length - 1];\r\n        if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&\r\n            (!userEvent || joinableUserEvent.test(userEvent)) &&\r\n            ((!lastEvent.selectionsAfter.length &&\r\n                time - this.prevTime < newGroupDelay &&\r\n                isAdjacent(lastEvent.changes, event.changes)) ||\r\n                // For compose (but not compose.start) events, always join with previous event\r\n                userEvent == \"input.type.compose\")) {\r\n            done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));\r\n        }\r\n        else {\r\n            done = updateBranch(done, done.length, maxLen, event);\r\n        }\r\n        return new HistoryState(done, none, time, userEvent);\r\n    }\r\n    addSelection(selection, time, userEvent, newGroupDelay) {\r\n        let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;\r\n        if (last.length > 0 &&\r\n            time - this.prevTime < newGroupDelay &&\r\n            userEvent == this.prevUserEvent && userEvent && /^select($|\\.)/.test(userEvent) &&\r\n            eqSelectionShape(last[last.length - 1], selection))\r\n            return this;\r\n        return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);\r\n    }\r\n    addMapping(mapping) {\r\n        return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);\r\n    }\r\n    pop(side, state, selection) {\r\n        let branch = side == 0 /* Done */ ? this.done : this.undone;\r\n        if (branch.length == 0)\r\n            return null;\r\n        let event = branch[branch.length - 1];\r\n        if (selection && event.selectionsAfter.length) {\r\n            return state.update({\r\n                selection: event.selectionsAfter[event.selectionsAfter.length - 1],\r\n                annotations: fromHistory.of({ side, rest: popSelection(branch) }),\r\n                userEvent: side == 0 /* Done */ ? \"select.undo\" : \"select.redo\",\r\n                scrollIntoView: true\r\n            });\r\n        }\r\n        else if (!event.changes) {\r\n            return null;\r\n        }\r\n        else {\r\n            let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);\r\n            if (event.mapped)\r\n                rest = addMappingToBranch(rest, event.mapped);\r\n            return state.update({\r\n                changes: event.changes,\r\n                selection: event.startSelection,\r\n                effects: event.effects,\r\n                annotations: fromHistory.of({ side, rest }),\r\n                filter: false,\r\n                userEvent: side == 0 /* Done */ ? \"undo\" : \"redo\",\r\n                scrollIntoView: true\r\n            });\r\n        }\r\n    }\r\n}\r\nHistoryState.empty = new HistoryState(none, none);\r\n/**\r\n * Default key bindings for the undo history.\r\n *\r\n *  - Mod-z: {@link undo}.\r\n *  - Mod-y (Mod-Shift-z on macOS): {@link redo}.\r\n *  - Mod-u: {@link undoSelection}.\r\n *  - Alt-u (Mod-Shift-u on macOS): {@link redoSelection}.\r\n */\r\nconst historyKeymap = [\r\n    { key: \"Mod-z\", run: undo, preventDefault: true },\r\n    { key: \"Mod-y\", mac: \"Mod-Shift-z\", run: redo, preventDefault: true },\r\n    { key: \"Mod-u\", run: undoSelection, preventDefault: true },\r\n    { key: \"Alt-u\", mac: \"Mod-Shift-u\", run: redoSelection, preventDefault: true }\r\n];\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/commands/history.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/commands/index.js":
/*!*****************************************************!*\
  !*** ./sys/public/js/editor/dist/commands/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"blockComment\": () => (/* reexport safe */ _comment_js__WEBPACK_IMPORTED_MODULE_0__.blockComment),\n/* harmony export */   \"blockUncomment\": () => (/* reexport safe */ _comment_js__WEBPACK_IMPORTED_MODULE_0__.blockUncomment),\n/* harmony export */   \"copyLineDown\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.copyLineDown),\n/* harmony export */   \"copyLineUp\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.copyLineUp),\n/* harmony export */   \"cursorCharBackward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorCharBackward),\n/* harmony export */   \"cursorCharForward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorCharForward),\n/* harmony export */   \"cursorCharLeft\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorCharLeft),\n/* harmony export */   \"cursorCharRight\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorCharRight),\n/* harmony export */   \"cursorDocEnd\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorDocEnd),\n/* harmony export */   \"cursorDocStart\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorDocStart),\n/* harmony export */   \"cursorGroupBackward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorGroupBackward),\n/* harmony export */   \"cursorGroupForward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorGroupForward),\n/* harmony export */   \"cursorGroupLeft\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorGroupLeft),\n/* harmony export */   \"cursorGroupRight\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorGroupRight),\n/* harmony export */   \"cursorLineBoundaryBackward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorLineBoundaryBackward),\n/* harmony export */   \"cursorLineBoundaryForward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorLineBoundaryForward),\n/* harmony export */   \"cursorLineDown\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorLineDown),\n/* harmony export */   \"cursorLineEnd\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorLineEnd),\n/* harmony export */   \"cursorLineStart\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorLineStart),\n/* harmony export */   \"cursorLineUp\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorLineUp),\n/* harmony export */   \"cursorMatchingBracket\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorMatchingBracket),\n/* harmony export */   \"cursorPageDown\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorPageDown),\n/* harmony export */   \"cursorPageUp\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorPageUp),\n/* harmony export */   \"cursorSubwordBackward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorSubwordBackward),\n/* harmony export */   \"cursorSubwordForward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorSubwordForward),\n/* harmony export */   \"cursorSyntaxLeft\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorSyntaxLeft),\n/* harmony export */   \"cursorSyntaxRight\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.cursorSyntaxRight),\n/* harmony export */   \"defaultKeymap\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.defaultKeymap),\n/* harmony export */   \"deleteCharBackward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.deleteCharBackward),\n/* harmony export */   \"deleteCharForward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.deleteCharForward),\n/* harmony export */   \"deleteGroupBackward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.deleteGroupBackward),\n/* harmony export */   \"deleteGroupForward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.deleteGroupForward),\n/* harmony export */   \"deleteLine\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.deleteLine),\n/* harmony export */   \"deleteToLineEnd\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.deleteToLineEnd),\n/* harmony export */   \"deleteToLineStart\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.deleteToLineStart),\n/* harmony export */   \"deleteTrailingWhitespace\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.deleteTrailingWhitespace),\n/* harmony export */   \"emacsStyleKeymap\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.emacsStyleKeymap),\n/* harmony export */   \"history\": () => (/* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_1__.history),\n/* harmony export */   \"historyField\": () => (/* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_1__.historyField),\n/* harmony export */   \"historyKeymap\": () => (/* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_1__.historyKeymap),\n/* harmony export */   \"indentLess\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.indentLess),\n/* harmony export */   \"indentMore\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.indentMore),\n/* harmony export */   \"indentSelection\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.indentSelection),\n/* harmony export */   \"indentWithTab\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.indentWithTab),\n/* harmony export */   \"insertBlankLine\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.insertBlankLine),\n/* harmony export */   \"insertNewline\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.insertNewline),\n/* harmony export */   \"insertNewlineAndIndent\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.insertNewlineAndIndent),\n/* harmony export */   \"insertTab\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.insertTab),\n/* harmony export */   \"invertedEffects\": () => (/* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_1__.invertedEffects),\n/* harmony export */   \"isolateHistory\": () => (/* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_1__.isolateHistory),\n/* harmony export */   \"lineComment\": () => (/* reexport safe */ _comment_js__WEBPACK_IMPORTED_MODULE_0__.lineComment),\n/* harmony export */   \"lineUncomment\": () => (/* reexport safe */ _comment_js__WEBPACK_IMPORTED_MODULE_0__.lineUncomment),\n/* harmony export */   \"moveLineDown\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.moveLineDown),\n/* harmony export */   \"moveLineUp\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.moveLineUp),\n/* harmony export */   \"redo\": () => (/* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_1__.redo),\n/* harmony export */   \"redoDepth\": () => (/* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_1__.redoDepth),\n/* harmony export */   \"redoSelection\": () => (/* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_1__.redoSelection),\n/* harmony export */   \"selectAll\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectAll),\n/* harmony export */   \"selectCharBackward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectCharBackward),\n/* harmony export */   \"selectCharForward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectCharForward),\n/* harmony export */   \"selectCharLeft\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectCharLeft),\n/* harmony export */   \"selectCharRight\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectCharRight),\n/* harmony export */   \"selectDocEnd\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectDocEnd),\n/* harmony export */   \"selectDocStart\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectDocStart),\n/* harmony export */   \"selectGroupBackward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectGroupBackward),\n/* harmony export */   \"selectGroupForward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectGroupForward),\n/* harmony export */   \"selectGroupLeft\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectGroupLeft),\n/* harmony export */   \"selectGroupRight\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectGroupRight),\n/* harmony export */   \"selectLine\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectLine),\n/* harmony export */   \"selectLineBoundaryBackward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectLineBoundaryBackward),\n/* harmony export */   \"selectLineBoundaryForward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectLineBoundaryForward),\n/* harmony export */   \"selectLineDown\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectLineDown),\n/* harmony export */   \"selectLineEnd\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectLineEnd),\n/* harmony export */   \"selectLineStart\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectLineStart),\n/* harmony export */   \"selectLineUp\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectLineUp),\n/* harmony export */   \"selectMatchingBracket\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectMatchingBracket),\n/* harmony export */   \"selectPageDown\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectPageDown),\n/* harmony export */   \"selectPageUp\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectPageUp),\n/* harmony export */   \"selectParentSyntax\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectParentSyntax),\n/* harmony export */   \"selectSubwordBackward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectSubwordBackward),\n/* harmony export */   \"selectSubwordForward\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectSubwordForward),\n/* harmony export */   \"selectSyntaxLeft\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectSyntaxLeft),\n/* harmony export */   \"selectSyntaxRight\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.selectSyntaxRight),\n/* harmony export */   \"simplifySelection\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.simplifySelection),\n/* harmony export */   \"splitLine\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.splitLine),\n/* harmony export */   \"standardKeymap\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.standardKeymap),\n/* harmony export */   \"toggleBlockComment\": () => (/* reexport safe */ _comment_js__WEBPACK_IMPORTED_MODULE_0__.toggleBlockComment),\n/* harmony export */   \"toggleBlockCommentByLine\": () => (/* reexport safe */ _comment_js__WEBPACK_IMPORTED_MODULE_0__.toggleBlockCommentByLine),\n/* harmony export */   \"toggleComment\": () => (/* reexport safe */ _comment_js__WEBPACK_IMPORTED_MODULE_0__.toggleComment),\n/* harmony export */   \"toggleLineComment\": () => (/* reexport safe */ _comment_js__WEBPACK_IMPORTED_MODULE_0__.toggleLineComment),\n/* harmony export */   \"transposeChars\": () => (/* reexport safe */ _commands_js__WEBPACK_IMPORTED_MODULE_2__.transposeChars),\n/* harmony export */   \"undo\": () => (/* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_1__.undo),\n/* harmony export */   \"undoDepth\": () => (/* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_1__.undoDepth),\n/* harmony export */   \"undoSelection\": () => (/* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_1__.undoSelection)\n/* harmony export */ });\n/* harmony import */ var _comment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./comment.js */ \"./sys/public/js/editor/dist/commands/comment.js\");\n/* harmony import */ var _history_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./history.js */ \"./sys/public/js/editor/dist/commands/history.js\");\n/* harmony import */ var _commands_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commands.js */ \"./sys/public/js/editor/dist/commands/commands.js\");\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/commands/index.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/glsl.js":
/*!*******************************************!*\
  !*** ./sys/public/js/editor/dist/glsl.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"glsl\": () => (/* binding */ glsl),\n/* harmony export */   \"glslKeywords\": () => (/* binding */ glslKeywords),\n/* harmony export */   \"glslParams\": () => (/* binding */ glslParams),\n/* harmony export */   \"glslTypes\": () => (/* binding */ glslTypes),\n/* harmony export */   \"shaderLanguage\": () => (/* binding */ shaderLanguage),\n/* harmony export */   \"snippets\": () => (/* binding */ snippets)\n/* harmony export */ });\n/* harmony import */ var _language_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./language/index.js */ \"./sys/public/js/editor/dist/language/index.js\");\n/* harmony import */ var _autocomplete_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./autocomplete/index.js */ \"./sys/public/js/editor/dist/autocomplete/index.js\");\n\r\n\r\n\r\nfunction Context(indented, column, type, info, align, prev) {\r\n    this.indented = indented;\r\n    this.column = column;\r\n    this.type = type;\r\n    this.info = info;\r\n    this.align = align;\r\n    this.prev = prev;\r\n}\r\n\r\nfunction pushContext(state, col, type, info) {\r\n    let indent = state.indented;\r\n    if (state.context && state.context.type == \"statement\" && type != \"statement\")\r\n        indent = state.context.indented;\r\n    return state.context = new Context(indent, col, type, info, null, state.context);\r\n}\r\n\r\nfunction popContext(state) {\r\n    let t = state.context.type;\r\n    if (t == \")\" || t == \"]\" || t == \"}\")\r\n        state.indented = state.context.indented;\r\n    return state.context = state.context.prev;\r\n}\r\n\r\nfunction typeBefore(stream, state, pos) {\r\n    if (state.prevToken == \"variable\" || state.prevToken == \"type\") return true;\r\n    if (/\\S(?:[^- ]>|[*\\]])\\s*$|\\*$/.test(stream.string.slice(0, pos))) return true;\r\n    if (state.typeAtEndOfLine && stream.column() == stream.indentation()) return true;\r\n}\r\n\r\nfunction isTopScope(context) {\r\n    for (;;) {\r\n        if (!context || context.type == \"top\") return true;\r\n        if (context.type == \"}\" && context.prev.info != \"namespace\") return false;\r\n        context = context.prev;\r\n    }\r\n}\r\n\r\nfunction words(str) {\r\n    let obj = {}, words = str.split(\" \");\r\n    for (let i = 0; i < words.length; ++i) obj[words[i]] = true;\r\n    return obj;\r\n}\r\n\r\nfunction contains(words, word) {\r\n    return typeof words === \"function\" ? words(word) : words.propertyIsEnumerable(word);\r\n}\r\n\r\nfunction langHook(stream, state) {\r\n    if (!state.startOfLine) return false\r\n    for (var ch, next = null; ch = stream.peek();) {\r\n        if (ch == \"\\\\\" && stream.match(/^.$/)) {\r\n            next = langHook;\r\n            break;\r\n        } else if (ch == \"/\" && stream.match(/^\\/[\\/\\*]/, false)) {\r\n            break;\r\n        }\r\n        stream.next();\r\n    }\r\n    state.tokenize = next;\r\n    return \"meta\";\r\n}\r\n\r\nconst glslKeywords = words(\r\n    \"sampler1D sampler2D sampler3D samplerCube \" +\r\n    \"sampler1DShadow sampler2DShadow \" +\r\n    \"const attribute uniform varying \" +\r\n    \"break continue discard return \" +\r\n    \"for while do if else struct \" +\r\n    \"in out inout\");\r\n\r\nconst glslTypes = words(\r\n    \"float int bool void \" +\r\n    \"vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 \" +\r\n    \"mat2 mat3 mat4\"\r\n);\r\n\r\nconst glslParams = words(\"ifdef endif def\")\r\n\r\nconst shaderLanguage = (parserConfig = {}) => {\r\n    let statementIndentUnit = parserConfig.statementIndentUnit,\r\n        dontAlignCalls = parserConfig.dontAlignCalls,\r\n        keywords = glslKeywords,\r\n        types = glslTypes,\r\n        builtin = words(\"radians degrees sin cos tan asin acos atan \" +\r\n            \"pow exp log exp2 sqrt inversesqrt \" +\r\n            \"abs sign floor ceil fract mod min max clamp mix step smoothstep \" +\r\n            \"length distance dot cross normalize ftransform faceforward \" +\r\n            \"reflect refract matrixCompMult \" +\r\n            \"lessThan lessThanEqual greaterThan greaterThanEqual \" +\r\n            \"equal notEqual any all not \" +\r\n            \"texture1D texture1DProj texture1DLod texture1DProjLod \" +\r\n            \"texture2D texture2DProj texture2DLod texture2DProjLod \" +\r\n            \"texture3D texture3DProj texture3DLod texture3DProjLod \" +\r\n            \"textureCube textureCubeLod \" +\r\n            \"shadow1D shadow2D shadow1DProj shadow2DProj \" +\r\n            \"shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod \" +\r\n            \"dFdx dFdy fwidth \" +\r\n            \"noise1 noise2 noise3 noise4\"),\r\n        blockKeywords = words(\"for while do if else struct switch case\"),\r\n        defKeywords = parserConfig.defKeywords || {},\r\n        atoms = words(\"true false null \" +\r\n            \"gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex \" +\r\n            \"gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 \" +\r\n            \"gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 \" +\r\n            \"gl_FogCoord gl_PointCoord \" +\r\n            \"gl_Position gl_PointSize gl_ClipVertex \" +\r\n            \"gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor \" +\r\n            \"gl_TexCoord gl_FogFragCoord \" +\r\n            \"gl_FragCoord gl_FrontFacing \" +\r\n            \"gl_FragData gl_FragDepth \" +\r\n            \"gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix \" +\r\n            \"gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse \" +\r\n            \"gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse \" +\r\n            \"gl_TextureMatrixTranspose gl_ModelViewMatrixInverseTranspose \" +\r\n            \"gl_ProjectionMatrixInverseTranspose \" +\r\n            \"gl_ModelViewProjectionMatrixInverseTranspose \" +\r\n            \"gl_TextureMatrixInverseTranspose \" +\r\n            \"gl_NormalScale gl_DepthRange gl_ClipPlane \" +\r\n            \"gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel \" +\r\n            \"gl_FrontLightModelProduct gl_BackLightModelProduct \" +\r\n            \"gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ \" +\r\n            \"gl_FogParameters \" +\r\n            \"gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords \" +\r\n            \"gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats \" +\r\n            \"gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits \" +\r\n            \"gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits \" +\r\n            \"gl_MaxDrawBuffers\"),\r\n        hooks = { \"#\": langHook },\r\n        multiLineStrings = parserConfig.multiLineStrings,\r\n        indentStatements = parserConfig.indentStatements !== false,\r\n        indentSwitch = false,\r\n        namespaceSeparator = parserConfig.namespaceSeparator,\r\n        isPunctuationChar = parserConfig.isPunctuationChar || /[\\[\\]{}\\(\\),;\\:\\.]/,\r\n        numberStart = parserConfig.numberStart || /[\\d\\.]/,\r\n        number = parserConfig.number || /^(?:0x[a-f\\d]+|0b[01]+|(?:\\d+\\.?\\d*|\\.\\d+)(?:e[-+]?\\d+)?)(u|ll?|l|f)?/i,\r\n        isOperatorChar = parserConfig.isOperatorChar || /[+\\-*&%=<>!?|\\/]/,\r\n        isIdentifierChar = parserConfig.isIdentifierChar || /[\\w\\$_\\xa1-\\uffff]/,\r\n        // An optional function that takes a {string} token and returns true if it\r\n        // should be treated as a builtin.\r\n        isReservedIdentifier = parserConfig.isReservedIdentifier || false;\r\n\r\n    let curPunc, isDefKeyword;\r\n\r\n    function tokenBase(stream, state) {\r\n        let ch = stream.next();\r\n        if (hooks[ch]) {\r\n            var result = hooks[ch](stream, state);\r\n            if (result !== false) return result;\r\n        }\r\n        if (ch == '\"' || ch == \"'\") {\r\n            state.tokenize = tokenString(ch);\r\n            return state.tokenize(stream, state);\r\n        }\r\n        if (numberStart.test(ch)) {\r\n            stream.backUp(1)\r\n            if (stream.match(number)) return \"number\"\r\n            stream.next()\r\n        }\r\n        if (isPunctuationChar.test(ch)) {\r\n            curPunc = ch;\r\n            return null;\r\n        }\r\n        if (ch == \"/\") {\r\n            if (stream.eat(\"*\")) {\r\n                state.tokenize = tokenComment;\r\n                return tokenComment(stream, state);\r\n            }\r\n            if (stream.eat(\"/\")) {\r\n                stream.skipToEnd();\r\n                return \"comment\";\r\n            }\r\n        }\r\n        if (isOperatorChar.test(ch)) {\r\n            while (!stream.match(/^\\/[\\/*]/, false) && stream.eat(isOperatorChar)) {}\r\n            return \"operator\";\r\n        }\r\n        stream.eatWhile(isIdentifierChar);\r\n        if (namespaceSeparator) while (stream.match(namespaceSeparator))\r\n            stream.eatWhile(isIdentifierChar);\r\n\r\n        let cur = stream.current();\r\n        if (contains(keywords, cur)) {\r\n            if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\r\n            if (contains(defKeywords, cur)) isDefKeyword = true;\r\n            return \"keyword\";\r\n        }\r\n        if (contains(types, cur)) return \"type\";\r\n        if (contains(builtin, cur) || (isReservedIdentifier && isReservedIdentifier(cur))) {\r\n            if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\r\n            return \"builtin\";\r\n        }\r\n        if (contains(atoms, cur)) return \"atom\";\r\n        return \"variable\";\r\n    }\r\n\r\n    function tokenString(quote) {\r\n        return function(stream, state) {\r\n            let escaped = false, next, end = false;\r\n            while ((next = stream.next()) != null) {\r\n                if (next == quote && !escaped) {end = true; break;}\r\n                escaped = !escaped && next == \"\\\\\";\r\n            }\r\n            if (end || !(escaped || multiLineStrings))\r\n                state.tokenize = null;\r\n            return \"string\";\r\n        };\r\n    }\r\n\r\n    function tokenComment(stream, state) {\r\n        let maybeEnd = false, ch;\r\n        while (ch = stream.next()) {\r\n            if (ch == \"/\" && maybeEnd) {\r\n                state.tokenize = null;\r\n                break;\r\n            }\r\n            maybeEnd = (ch == \"*\");\r\n        }\r\n        return \"comment\";\r\n    }\r\n\r\n    function maybeEOL(stream, state) {\r\n        if (parserConfig.typeFirstDefinitions && stream.eol() && isTopScope(state.context))\r\n            state.typeAtEndOfLine = typeBefore(stream, state, stream.pos)\r\n    }\r\n\r\n    // Interface\r\n\r\n    return {\r\n        startState: function(indentUnit) {\r\n            return {\r\n                tokenize: null,\r\n                context: new Context(-indentUnit, 0, \"top\", null, false),\r\n                indented: 0,\r\n                startOfLine: true,\r\n                prevToken: null\r\n            };\r\n        },\r\n\r\n        token: function(stream, state) {\r\n            var ctx = state.context;\r\n            if (stream.sol()) {\r\n                if (ctx.align == null) ctx.align = false;\r\n                state.indented = stream.indentation();\r\n                state.startOfLine = true;\r\n            }\r\n            if (stream.eatSpace()) { maybeEOL(stream, state); return null; }\r\n            curPunc = isDefKeyword = null;\r\n            var style = (state.tokenize || tokenBase)(stream, state);\r\n            if (style == \"comment\" || style == \"meta\") return style;\r\n            if (ctx.align == null) ctx.align = true;\r\n\r\n            if (curPunc == \";\" || curPunc == \":\" || (curPunc == \",\" && stream.match(/^\\s*(?:\\/\\/.*)?$/, false)))\r\n                while (state.context.type == \"statement\") popContext(state);\r\n            else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\r\n            else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\r\n            else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\r\n            else if (curPunc == \"}\") {\r\n                while (ctx.type == \"statement\") ctx = popContext(state);\r\n                if (ctx.type == \"}\") ctx = popContext(state);\r\n                while (ctx.type == \"statement\") ctx = popContext(state);\r\n            }\r\n            else if (curPunc == ctx.type) popContext(state);\r\n            else if (indentStatements &&\r\n                (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != \";\") ||\r\n                    (ctx.type == \"statement\" && curPunc == \"newstatement\"))) {\r\n                pushContext(state, stream.column(), \"statement\", stream.current());\r\n            }\r\n\r\n            if (style == \"variable\" &&\r\n                ((state.prevToken == \"def\" ||\r\n                    (parserConfig.typeFirstDefinitions && typeBefore(stream, state, stream.start) &&\r\n                        isTopScope(state.context) && stream.match(/^\\s*\\(/, false)))))\r\n                style = \"def\";\r\n\r\n            if (hooks.token) {\r\n                var result = hooks.token(stream, state, style);\r\n                if (result !== undefined) style = result;\r\n            }\r\n\r\n            if (style == \"def\" && parserConfig.styleDefs === false) style = \"variable\";\r\n\r\n            state.startOfLine = false;\r\n            state.prevToken = isDefKeyword ? \"def\" : style || curPunc;\r\n            maybeEOL(stream, state);\r\n            return style;\r\n        },\r\n\r\n        indent: function(state, textAfter, context) {\r\n            if (state.tokenize != tokenBase && state.tokenize != null || state.typeAtEndOfLine) return null;\r\n            var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\r\n            var closing = firstChar == ctx.type;\r\n            if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\r\n            if (parserConfig.dontIndentStatements)\r\n                while (ctx.type == \"statement\" && parserConfig.dontIndentStatements.test(ctx.info))\r\n                    ctx = ctx.prev\r\n            if (hooks.indent) {\r\n                var hook = hooks.indent(state, ctx, textAfter, context.unit);\r\n                if (typeof hook == \"number\") return hook\r\n            }\r\n            var switchBlock = ctx.prev && ctx.prev.info == \"switch\";\r\n            if (parserConfig.allmanIndentation && /[{(]/.test(firstChar)) {\r\n                while (ctx.type != \"top\" && ctx.type != \"}\") ctx = ctx.prev\r\n                return ctx.indented\r\n            }\r\n            if (ctx.type == \"statement\")\r\n                return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit || context.unit);\r\n            if (ctx.align && (!dontAlignCalls || ctx.type != \")\"))\r\n                return ctx.column + (closing ? 0 : 1);\r\n            if (ctx.type == \")\" && !closing)\r\n                return ctx.indented + (statementIndentUnit || context.unit);\r\n\r\n            return ctx.indented + (closing ? 0 : context.unit) +\r\n                (!closing && switchBlock && !/^(?:case|default)\\b/.test(textAfter) ? context.unit : 0);\r\n        },\r\n\r\n        languageData: {\r\n            indentOnInput: indentSwitch ? /^\\s*(?:case .*?:|default:|\\{\\}?|\\})$/ : /^\\s*[{}]$/,\r\n            commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\r\n            autocomplete: Object.keys(keywords).concat(Object.keys(types)).concat(Object.keys(builtin)).concat(Object.keys(atoms))\r\n        }\r\n    };\r\n}\r\n\r\nconst snippets = [\r\n    (0,_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_1__.snippetCompletion)(\"${type} ${name}(${params}) {\\n\\t${}\\n}\", {\r\n        label: \"function\",\r\n        detail: \"definition\",\r\n        type: \"keyword\"\r\n    }),\r\n    (0,_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_1__.snippetCompletion)(\"for (int ${index} = 0; ${index} < ${bound}; ${index}++) {\\n\\t${}\\n}\", {\r\n        label: \"for\",\r\n        detail: \"loop\",\r\n        type: \"keyword\"\r\n    }),\r\n]\r\n\r\nconst lang = _language_index_js__WEBPACK_IMPORTED_MODULE_0__.StreamLanguage.define(shaderLanguage());\r\n\r\nconst glsl = new _language_index_js__WEBPACK_IMPORTED_MODULE_0__.LanguageSupport(lang, [\r\n    lang.data.of({\r\n        autocomplete: (0,_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_1__.ifNotIn)([\"LineComment\", \"BlockComment\", \"String\"], (0,_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_1__.completeFromList)(snippets))\r\n    })\r\n]);\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/glsl.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/javascript.js":
/*!*************************************************!*\
  !*** ./sys/public/js/editor/dist/javascript.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"autoCloseTags\": () => (/* binding */ autoCloseTags),\n/* harmony export */   \"esLint\": () => (/* binding */ esLint),\n/* harmony export */   \"javascript\": () => (/* binding */ javascript),\n/* harmony export */   \"javascriptLanguage\": () => (/* binding */ javascriptLanguage),\n/* harmony export */   \"jsxLanguage\": () => (/* binding */ jsxLanguage),\n/* harmony export */   \"snippets\": () => (/* binding */ snippets),\n/* harmony export */   \"tsxLanguage\": () => (/* binding */ tsxLanguage),\n/* harmony export */   \"typescriptLanguage\": () => (/* binding */ typescriptLanguage)\n/* harmony export */ });\n/* harmony import */ var _dist_lezer_lr_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/lezer/lr/index.js */ \"./sys/public/js/editor/dist/lezer/lr/index.js\");\n/* harmony import */ var _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dist/lezer/highlight/index.js */ \"./sys/public/js/editor/dist/lezer/highlight/index.js\");\n/* harmony import */ var _language_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./language/index.js */ \"./sys/public/js/editor/dist/language/index.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./autocomplete/index.js */ \"./sys/public/js/editor/dist/autocomplete/index.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// This file was generated by lezer-generator. You probably shouldn't edit it.\r\nconst noSemi = 281,\r\n      incdec = 1,\r\n      incdecPrefix = 2,\r\n      templateContent = 282,\r\n      InterpolationStart = 3,\r\n      templateEnd = 283,\r\n      insertSemi = 284,\r\n      TSExtends = 4,\r\n      spaces = 286,\r\n      newline = 287,\r\n      LineComment = 5,\r\n      BlockComment = 6,\r\n      Dialect_ts = 1;\r\n\r\n/* Hand-written tokenizers for JavaScript tokens that can't be\r\n   expressed by lezer's built-in tokenizer. */\r\n\r\nconst space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];\r\n\r\nconst braceR = 125, braceL = 123, semicolon = 59, slash = 47, star = 42, plus = 43, minus = 45, dollar = 36, backtick = 96, backslash = 92;\r\n\r\nconst trackNewline = new _dist_lezer_lr_index_js__WEBPACK_IMPORTED_MODULE_0__.ContextTracker({\r\n    start: false,\r\n    shift(context, term) {\r\n        return term == LineComment || term == BlockComment || term == spaces ? context : term == newline\r\n    },\r\n    strict: false\r\n});\r\n\r\nconst insertSemicolon = new _dist_lezer_lr_index_js__WEBPACK_IMPORTED_MODULE_0__.ExternalTokenizer((input, stack) => {\r\n    let {next} = input;\r\n    if ((next == braceR || next == -1 || stack.context) && stack.canShift(insertSemi))\r\n        input.acceptToken(insertSemi);\r\n}, {contextual: true, fallback: true});\r\n\r\nconst noSemicolon = new _dist_lezer_lr_index_js__WEBPACK_IMPORTED_MODULE_0__.ExternalTokenizer((input, stack) => {\r\n    let {next} = input, after;\r\n    if (space.indexOf(next) > -1) return\r\n    if (next == slash && ((after = input.peek(1)) == slash || after == star)) return\r\n    if (next != braceR && next != semicolon && next != -1 && !stack.context && stack.canShift(noSemi))\r\n        input.acceptToken(noSemi);\r\n}, {contextual: true});\r\n\r\nconst incdecToken = new _dist_lezer_lr_index_js__WEBPACK_IMPORTED_MODULE_0__.ExternalTokenizer((input, stack) => {\r\n    let {next} = input;\r\n    if (next == plus || next == minus) {\r\n        input.advance();\r\n        if (next == input.next) {\r\n            input.advance();\r\n            let mayPostfix = !stack.context && stack.canShift(incdec);\r\n            input.acceptToken(mayPostfix ? incdec : incdecPrefix);\r\n        }\r\n    }\r\n}, {contextual: true});\r\n\r\nconst template = new _dist_lezer_lr_index_js__WEBPACK_IMPORTED_MODULE_0__.ExternalTokenizer(input => {\r\n    for (let afterDollar = false, i = 0;; i++) {\r\n        let {next} = input;\r\n        if (next < 0) {\r\n            if (i) input.acceptToken(templateContent);\r\n            break\r\n        } else if (next == backtick) {\r\n            if (i) input.acceptToken(templateContent);\r\n            else input.acceptToken(templateEnd, 1);\r\n            break\r\n        } else if (next == braceL && afterDollar) {\r\n            if (i == 1) input.acceptToken(InterpolationStart, 1);\r\n            else input.acceptToken(templateContent, -1);\r\n            break\r\n        } else if (next == 10 /* \"\\n\" */ && i) {\r\n            // Break up template strings on lines, to avoid huge tokens\r\n            input.advance();\r\n            input.acceptToken(templateContent);\r\n            break\r\n        } else if (next == backslash) {\r\n            input.advance();\r\n        }\r\n        afterDollar = next == dollar;\r\n        input.advance();\r\n    }\r\n});\r\n\r\nfunction tsExtends(value, stack) {\r\n    return value == \"extends\" && stack.dialectEnabled(Dialect_ts) ? TSExtends : -1\r\n}\r\n\r\nconst jsHighlight = (0,_dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.styleTags)({\r\n    \"get set async static\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.modifier,\r\n    \"for while do if else switch try catch finally return throw break continue default case\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.controlKeyword,\r\n    \"in of await yield void typeof delete instanceof\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.operatorKeyword,\r\n    \"let var const function class extends\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.definitionKeyword,\r\n    \"import export from\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.moduleKeyword,\r\n    \"with debugger as new\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.keyword,\r\n    TemplateString: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.special(_dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.string),\r\n    Super: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.atom,\r\n    BooleanLiteral: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.bool,\r\n    this: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.self,\r\n    null: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags[\"null\"],\r\n    Star: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.modifier,\r\n    VariableName: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.variableName,\r\n    \"CallExpression/VariableName TaggedTemplateExpression/VariableName\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags[\"function\"](_dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.variableName),\r\n    VariableDefinition: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.definition(_dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.variableName),\r\n    Label: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.labelName,\r\n    PropertyName: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.propertyName,\r\n    PrivatePropertyName: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.special(_dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.propertyName),\r\n    \"CallExpression/MemberExpression/PropertyName\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags[\"function\"](_dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.propertyName),\r\n    \"FunctionDeclaration/VariableDefinition\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags[\"function\"](_dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.definition(_dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.variableName)),\r\n    \"ClassDeclaration/VariableDefinition\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.definition(_dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.className),\r\n    PropertyDefinition: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.definition(_dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.propertyName),\r\n    PrivatePropertyDefinition: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.definition(_dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.special(_dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.propertyName)),\r\n    UpdateOp: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.updateOperator,\r\n    LineComment: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.lineComment,\r\n    BlockComment: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.blockComment,\r\n    Number: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.number,\r\n    String: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.string,\r\n    ArithOp: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.arithmeticOperator,\r\n    LogicOp: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.logicOperator,\r\n    BitOp: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.bitwiseOperator,\r\n    CompareOp: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.compareOperator,\r\n    RegExp: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.regexp,\r\n    Equals: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.definitionOperator,\r\n    \"Arrow : Spread\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.punctuation,\r\n    \"( )\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.paren,\r\n    \"[ ]\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.squareBracket,\r\n    \"{ }\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.brace,\r\n    \"InterpolationStart InterpolationEnd\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.special(_dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.brace),\r\n    \".\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.derefOperator,\r\n    \", ;\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.separator,\r\n\r\n    TypeName: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.typeName,\r\n    TypeDefinition: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.definition(_dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.typeName),\r\n    \"type enum interface implements namespace module declare\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.definitionKeyword,\r\n    \"abstract global Privacy readonly override\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.modifier,\r\n    \"is keyof unique infer\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.operatorKeyword,\r\n\r\n    JSXAttributeValue: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.attributeValue,\r\n    JSXText: _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.content,\r\n    \"JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.angleBracket,\r\n    \"JSXIdentifier JSXNameSpacedName\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.tagName,\r\n    \"JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName\": _dist_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags.attributeName\r\n});\r\n\r\n// This file was generated by lezer-generator. You probably shouldn't edit it.\r\nconst spec_identifier = {__proto__:null,export:18, as:23, from:29, default:32, async:37, function:38, this:48, true:56, false:56, void:66, typeof:70, null:86, super:88, new:122, await:139, yield:141, delete:142, class:152, extends:154, public:197, private:197, protected:197, readonly:199, instanceof:220, in:222, const:224, import:256, keyof:307, unique:311, infer:317, is:351, abstract:371, implements:373, type:375, let:378, var:380, interface:387, enum:391, namespace:397, module:399, declare:403, global:407, for:428, of:437, while:440, with:444, do:448, if:452, else:454, switch:458, case:464, try:470, catch:474, finally:478, return:482, throw:486, break:490, continue:494, debugger:498};\r\nconst spec_word = {__proto__:null,async:109, get:111, set:113, public:161, private:161, protected:161, static:163, abstract:165, override:167, readonly:173, new:355};\r\nconst spec_LessThan = {__proto__:null,\"<\":129};\r\nconst parser = _dist_lezer_lr_index_js__WEBPACK_IMPORTED_MODULE_0__.LRParser.deserialize({\r\n  version: 14,\r\n  states: \"$4|O`QYOOO'QQ$IfO'#ChO'XOSO'#DVO)dQYO'#D]O)tQYO'#DhO){QYO'#DrO-xQYO'#DxOOQO'#E]'#E]O.]QWO'#E[O.bQWO'#E[OOQ$IU'#Ef'#EfO0aQ$IfO'#ItO2wQ$IfO'#IuO3eQWO'#EzO3jQpO'#FaOOQ$IU'#FS'#FSO3rO!bO'#FSO4QQWO'#FhO5_QWO'#FgOOQ$IU'#Iu'#IuOOQ$IS'#It'#ItOOQQ'#J^'#J^O5dQWO'#HpO5iQ$I[O'#HqOOQQ'#Ih'#IhOOQQ'#Hr'#HrQ`QYOOO){QYO'#DjO5qQWO'#G[O5vQ#tO'#CmO6UQWO'#EZO6aQWO'#EgO6fQ#tO'#FRO7QQWO'#G[O7VQWO'#G`O7bQWO'#G`O7pQWO'#GcO7pQWO'#GdO7pQWO'#GfO5qQWO'#GiO8aQWO'#GlO9oQWO'#CdO:PQWO'#GyO:XQWO'#HPO:XQWO'#HRO`QYO'#HTO:XQWO'#HVO:XQWO'#HYO:^QWO'#H`O:cQ$I]O'#HfO){QYO'#HhO:nQ$I]O'#HjO:yQ$I]O'#HlO5iQ$I[O'#HnO){QYO'#DWOOOS'#Ht'#HtO;UOSO,59qOOQ$IU,59q,59qO=gQbO'#ChO=qQYO'#HuO>UQWO'#IvO@TQbO'#IvO'dQYO'#IvO@[QWO,59wO@rQ&jO'#DbOAkQWO'#E]OAxQWO'#JROBTQWO'#JQOBTQWO'#JQOB]QWO,5:yOBbQWO'#JPOBiQWO'#DyO5vQ#tO'#EZOBwQWO'#EZOCSQ`O'#FROOQ$IU,5:S,5:SOC[QYO,5:SOEYQ$IfO,5:^OEvQWO,5:dOFaQ$I[O'#JOO7VQWO'#I}OFhQWO'#I}OFpQWO,5:xOFuQWO'#I}OGTQYO,5:vOITQWO'#EWOJ_QWO,5:vOKnQWO'#DlOKuQYO'#DqOLPQ&jO,5;PO){QYO,5;POOQQ'#Er'#ErOOQQ'#Et'#EtO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;RO){QYO,5;ROOQQ'#Ex'#ExOLXQYO,5;cOOQ$IU,5;h,5;hOOQ$IU,5;i,5;iONXQWO,5;iOOQ$IU,5;j,5;jO){QYO'#IPON^Q$I[O,5<TONxQWO,5;RO){QYO,5;fO! bQpO'#JVO! PQpO'#JVO! iQpO'#JVO! zQpO,5;qOOOO,5;{,5;{O!!YQYO'#FcOOOO'#IO'#IOO3rO!bO,5;nO!!aQpO'#FeOOQ$IU,5;n,5;nO!!}Q,UO'#CrOOQ$IU'#Cu'#CuO!#bQWO'#CuO!#gOSO'#CyO!$TQ#tO,5<QO!$[QWO,5<SO!%hQWO'#FrO!%uQWO'#FsO!%zQWO'#FwO!&yQ&jO'#F{O!'lQ,UO'#IqOOQ$IU'#Iq'#IqO!'vQWO'#IpO!(UQWO'#IoOOQ$IU'#Cs'#CsOOQ$IU'#C|'#C|O!(^QWO'#DOOJdQWO'#FjOJdQWO'#FlO!(cQWO'#FnO!(hQWO'#FoO!(mQWO'#FuOJdQWO'#FzO!(rQWO'#E^O!)ZQWO,5<RO`QYO,5>[OOQQ'#Ik'#IkOOQQ,5>],5>]OOQQ-E;p-E;pO!+VQ$IfO,5:UOOQ$IS'#Cp'#CpO!+vQ#tO,5<vOOQO'#Cf'#CfO!,XQWO'#CqO!,aQ$I[O'#IlO5_QWO'#IlO:^QWO,59XO!,rQpO,59XO!,zQ#tO,59XO5vQ#tO,59XO!-VQWO,5:vO!-_QWO'#GxO!-mQWO'#JbO){QYO,5;kO!-uQ&jO,5;mO!-zQWO,5=cO!.PQWO,5=cO!.UQWO,5=cO5iQ$I[O,5=cO5qQWO,5<vO!.dQWO'#E_O!.xQ&jO'#E`OOQ$IS'#JP'#JPO!/ZQ$I[O'#J_O5iQ$I[O,5<zO7pQWO,5=QOOQO'#Cr'#CrO!/fQpO,5<}O!/nQ#tO,5=OO!/yQWO,5=QO!0OQ`O,5=TO:^QWO'#GnO5qQWO'#GpO!0WQWO'#GpO5vQ#tO'#GsO!0]QWO'#GsOOQQ,5=W,5=WO!0bQWO'#GtO!0jQWO'#CmO!0oQWO,59OO!0yQWO,59OO!2{QYO,59OOOQQ,59O,59OO!3YQ$I[O,59OO){QYO,59OO!3eQYO'#G{OOQQ'#G|'#G|OOQQ'#G}'#G}O`QYO,5=eO!3uQWO,5=eO){QYO'#DxO`QYO,5=kO`QYO,5=mO!3zQWO,5=oO`QYO,5=qO!4PQWO,5=tO!4UQYO,5=zOOQQ,5>Q,5>QO){QYO,5>QO5iQ$I[O,5>SOOQQ,5>U,5>UO!8VQWO,5>UOOQQ,5>W,5>WO!8VQWO,5>WOOQQ,5>Y,5>YO!8[Q`O,59rOOOS-E;r-E;rOOQ$IU1G/]1G/]O!8aQbO,5>aO'dQYO,5>aOOQO,5>f,5>fO!8kQYO'#HuOOQO-E;s-E;sO!8xQWO,5?bO!9QQbO,5?bO!9XQWO,5?lOOQ$IU1G/c1G/cO!9aQpO'#DTOOQO'#Ix'#IxO){QYO'#IxO!:OQpO'#IxO!:mQpO'#DcO!;OQ&jO'#DcO!=ZQYO'#DcO!=bQWO'#IwO!=jQWO,59|O!=oQWO'#EaO!=}QWO'#JSO!>VQWO,5:zO!>mQ&jO'#DcO){QYO,5?mO!>wQWO'#HzOOQO-E;x-E;xO!9XQWO,5?lOOQ$IS1G0e1G0eO!@TQ&jO'#D|OOQ$IU,5:e,5:eO){QYO,5:eOITQWO,5:eO!@[QWO,5:eO:^QWO,5:uO!,rQpO,5:uO!,zQ#tO,5:uO5vQ#tO,5:uOOQ$IU1G/n1G/nOOQ$IU1G0O1G0OOOQ$IS'#EV'#EVO){QYO,5?jO!@gQ$I[O,5?jO!@xQ$I[O,5?jO!APQWO,5?iO!AXQWO'#H|O!APQWO,5?iOOQ$IS1G0d1G0dO7VQWO,5?iOOQ$IU1G0b1G0bO!AsQ$IfO1G0bO!BdQ$IdO,5:rOOQ$IU'#Fq'#FqO!CQQ$IfO'#IqOGTQYO1G0bO!EPQ#tO'#IyO!EZQWO,5:WO!E`QbO'#IzO){QYO'#IzO!EjQWO,5:]OOQ$IU'#DT'#DTOOQ$IU1G0k1G0kO!EoQWO1G0kO!HQQ$IfO1G0mO!HXQ$IfO1G0mO!JlQ$IfO1G0mO!JsQ$IfO1G0mO!LzQ$IfO1G0mO!M_Q$IfO1G0mO#!OQ$IfO1G0mO#!VQ$IfO1G0mO#$jQ$IfO1G0mO#$qQ$IfO1G0mO#&fQ$IfO1G0mO#)`Q7^O'#ChO#+ZQ7^O1G0}O#-UQ7^O'#IuOOQ$IU1G1T1G1TO#-iQ$IfO,5>kOOQ$IS-E;}-E;}O#.YQ$IfO1G0mOOQ$IU1G0m1G0mO#0[Q$IfO1G1QO#0{QpO,5;sO#1QQpO,5;tO#1VQpO'#F[O#1kQWO'#FZOOQO'#JW'#JWOOQO'#H}'#H}O#1pQpO1G1]OOQ$IU1G1]1G1]OOOO1G1f1G1fO#2OQ7^O'#ItO#2YQWO,5;}OLXQYO,5;}OOOO-E;|-E;|OOQ$IU1G1Y1G1YOOQ$IU,5<P,5<PO#2_QpO,5<POOQ$IU,59a,59aOITQWO'#C{OOOS'#Hs'#HsO#2dOSO,59eOOQ$IU,59e,59eO){QYO1G1lO!(hQWO'#IRO#2oQWO,5<eOOQ$IU,5<b,5<bOOQO'#GV'#GVOJdQWO,5<pOOQO'#GX'#GXOJdQWO,5<rOJdQWO,5<tOOQO1G1n1G1nO#2zQ`O'#CpO#3_Q`O,5<^O#3fQWO'#JZO5qQWO'#JZO#3tQWO,5<`OJdQWO,5<_O#3yQ`O'#FqO#4WQ`O'#J[O#4bQWO'#J[OITQWO'#J[O#4gQWO,5<cOOQ$IS'#Dg'#DgO#4lQWO'#FtO#4wQpO'#F|O!&tQ&jO'#F|O!&tQ&jO'#GOO#5YQWO'#GPO!(mQWO'#GSO#5_Q$I[O'#ITO#5jQ&jO,5<gOOQ$IU,5<g,5<gO#5qQ&jO'#F|O#6PQ&jO'#F}O#6XQ&jO'#F}OOQ$IU,5<u,5<uOJdQWO,5?[OJdQWO,5?[O#6^QWO'#IUO#6iQWO,5?ZOOQ$IU'#Ch'#ChO#7]Q#tO,59jOOQ$IU,59j,59jO#8OQ#tO,5<UO#8qQ#tO,5<WO#8{QWO,5<YOOQ$IU,5<Z,5<ZO#9QQWO,5<aO#9VQ#tO,5<fOGTQYO1G1mO#9gQWO1G1mOOQQ1G3v1G3vOOQ$IU1G/p1G/pONXQWO1G/pOOQQ1G2b1G2bOITQWO1G2bO){QYO1G2bOITQWO1G2bO#9lQWO1G2bO#9zQWO,59]O#;TQWO'#EWOOQ$IS,5?W,5?WO#;_Q$I[O,5?WOOQQ1G.s1G.sO:^QWO1G.sO!,rQpO1G.sO!,zQ#tO1G.sO#;pQWO1G0bO#;uQWO'#ChO#<QQWO'#JcO#<YQWO,5=dO#<_QWO'#JcO#<dQWO'#JcO#<lQWO'#I^O#<zQWO,5?|O#=SQbO1G1VOOQ$IU1G1X1G1XO5qQWO1G2}O#=ZQWO1G2}O#=`QWO1G2}O#=eQWO1G2}OOQQ1G2}1G2}O#=jQ#tO1G2bO7VQWO'#JQO7VQWO'#EaO7VQWO'#IWO#={Q$I[O,5?yOOQQ1G2f1G2fO!/yQWO1G2lOITQWO1G2iO#>WQWO1G2iOOQQ1G2j1G2jOITQWO1G2jO#>]QWO1G2jO#>eQ&jO'#GhOOQQ1G2l1G2lO!&tQ&jO'#IYO!0OQ`O1G2oOOQQ1G2o1G2oOOQQ,5=Y,5=YO#>mQ#tO,5=[O5qQWO,5=[O#5YQWO,5=_O5_QWO,5=_O!,rQpO,5=_O!,zQ#tO,5=_O5vQ#tO,5=_O#?OQWO'#JaO#?ZQWO,5=`OOQQ1G.j1G.jO#?`Q$I[O1G.jO#?kQWO1G.jO#?pQWO1G.jO5iQ$I[O1G.jO#?xQbO,5@OO#@SQWO,5@OO#@_QYO,5=gO#@fQWO,5=gO7VQWO,5@OOOQQ1G3P1G3PO`QYO1G3POOQQ1G3V1G3VOOQQ1G3X1G3XO:XQWO1G3ZO#@kQYO1G3]O#DfQYO'#H[OOQQ1G3`1G3`O#DsQWO'#HbO:^QWO'#HdOOQQ1G3f1G3fO#D{QYO1G3fO5iQ$I[O1G3lOOQQ1G3n1G3nOOQ$IS'#Fx'#FxO5iQ$I[O1G3pO5iQ$I[O1G3rOOOS1G/^1G/^O#HyQ`O,5<TO#IRQbO1G3{OOQO1G4Q1G4QO){QYO,5>aO#I]QWO1G4|O#IeQWO1G5WO#ImQWO,5?dOLXQYO,5:{O7VQWO,5:{O:^QWO,59}OLXQYO,59}O!,rQpO,59}O#IrQ7^O,59}OOQO,5:{,5:{O#I|Q&jO'#HvO#JdQWO,5?cOOQ$IU1G/h1G/hO#JlQ&jO'#H{O#KQQWO,5?nOOQ$IS1G0f1G0fO!;OQ&jO,59}O#KYQbO1G5XO7VQWO,5>fOOQ$IS'#ES'#ESO#KdQ$ItO'#ETO!?{Q&jO'#D}OOQO'#Hy'#HyO#LOQ&jO,5:hOOQ$IU,5:h,5:hO#LVQ&jO'#D}O#LhQ&jO'#D}O#LoQ&jO'#EYO#LrQ&jO'#ETO#MPQ&jO'#ETO!?{Q&jO'#ETO#MdQWO1G0PO#MiQ`O1G0POOQ$IU1G0P1G0PO){QYO1G0POITQWO1G0POOQ$IU1G0a1G0aO:^QWO1G0aO!,rQpO1G0aO!,zQ#tO1G0aO#MpQ$IfO1G5UO){QYO1G5UO#NQQ$I[O1G5UO#NcQWO1G5TO7VQWO,5>hOOQO,5>h,5>hO#NkQWO,5>hOOQO-E;z-E;zO#NcQWO1G5TO#NyQ$IfO,59jO$!xQ$IfO,5<UO$$zQ$IfO,5<WO$&|Q$IfO,5<fOOQ$IU7+%|7+%|O$)UQ$IfO7+%|O$)uQWO'#HwO$*PQWO,5?eOOQ$IU1G/r1G/rO$*XQYO'#HxO$*fQWO,5?fO$*nQbO,5?fOOQ$IU1G/w1G/wOOQ$IU7+&V7+&VO$*xQ7^O,5:^O){QYO7+&iO$+SQ7^O,5:UOOQO1G1_1G1_OOQO1G1`1G1`O$+aQMhO,5;vOLXQYO,5;uOOQO-E;{-E;{OOQ$IU7+&w7+&wOOOO7+'Q7+'QOOOO1G1i1G1iO$+lQWO1G1iOOQ$IU1G1k1G1kO$+qQ`O,59gOOOS-E;q-E;qOOQ$IU1G/P1G/PO$+xQ$IfO7+'WOOQ$IU,5>m,5>mO$,iQWO,5>mOOQ$IU1G2P1G2PP$,nQWO'#IRPOQ$IU-E<P-E<PO$-_Q#tO1G2[O$.QQ#tO1G2^O$.[Q#tO1G2`OOQ$IU1G1x1G1xO$.cQWO'#IQO$.qQWO,5?uO$.qQWO,5?uO$.yQWO,5?uO$/UQWO,5?uOOQO1G1z1G1zO$/dQ#tO1G1yO$/tQWO'#ISO$0UQWO,5?vOITQWO,5?vO$0^Q`O,5?vOOQ$IU1G1}1G1}OOQ$IS,5<h,5<hOOQ$IS,5<i,5<iO$0hQWO,5<iO#5TQWO,5<iO!,rQpO,5<hO$0mQWO,5<jOOQ$IS,5<k,5<kO$0hQWO,5<nOOQO,5>o,5>oOOQO-E<R-E<ROOQ$IU1G2R1G2RO!&tQ&jO,5<hO$0uQWO,5<iO!&tQ&jO,5<jO!&tQ&jO,5<iO$1QQ#tO1G4vO$1[Q#tO1G4vOOQO,5>p,5>pOOQO-E<S-E<SO!-uQ&jO,59lO){QYO,59lO$1iQWO1G1tOJdQWO1G1{O$1nQ$IfO7+'XOOQ$IU7+'X7+'XOGTQYO7+'XOOQ$IU7+%[7+%[O$2_Q`O'#J]O#MdQWO7+'|O$2iQWO7+'|O$2qQ`O7+'|OOQQ7+'|7+'|OITQWO7+'|O){QYO7+'|OITQWO7+'|OOQO1G.w1G.wO$2{Q$IdO'#ChO$3`Q$IdO,5<lO$4QQWO,5<lOOQ$IS1G4r1G4rOOQQ7+$_7+$_O:^QWO7+$_O!,rQpO7+$_OGTQYO7+%|O$4VQWO'#I]O$4hQWO,5?}OOQO1G3O1G3OO5qQWO,5?}O$4hQWO,5?}O$4pQWO,5?}OOQO,5>x,5>xOOQO-E<[-E<[OOQ$IU7+&q7+&qO$4uQWO7+(iO5iQ$I[O7+(iO5qQWO7+(iO$4zQWO7+(iO$5PQWO7+'|OOQ$IS,5>r,5>rOOQ$IS-E<U-E<UOOQQ7+(W7+(WO$5_Q$IdO7+(TOITQWO7+(TO$5iQ`O7+(UOOQQ7+(U7+(UOITQWO7+(UO$5pQWO'#J`O$5{QWO,5=SOOQO,5>t,5>tOOQO-E<W-E<WOOQQ7+(Z7+(ZO$6uQ&jO'#GqOOQQ1G2v1G2vOITQWO1G2vO){QYO1G2vOITQWO1G2vO$6|QWO1G2vO$7[Q#tO1G2vO5iQ$I[O1G2yO#5YQWO1G2yO5_QWO1G2yO!,rQpO1G2yO!,zQ#tO1G2yO$7mQWO'#I[O$7xQWO,5?{O$8QQ&jO,5?{OOQ$IS1G2z1G2zOOQQ7+$U7+$UO$8YQWO7+$UO5iQ$I[O7+$UO$8_QWO7+$UO){QYO1G5jO){QYO1G5kO$8dQYO1G3RO$8kQWO1G3RO$8pQYO1G3RO$8wQ$I[O1G5jOOQQ7+(k7+(kO5iQ$I[O7+(uO`QYO7+(wOOQQ'#Jf'#JfOOQQ'#I_'#I_O$9RQYO,5=vOOQQ,5=v,5=vO){QYO'#H]O$9`QWO'#H_OOQQ,5=|,5=|O7VQWO,5=|OOQQ,5>O,5>OOOQQ7+)Q7+)QOOQQ7+)W7+)WOOQQ7+)[7+)[OOQQ7+)^7+)^OOQO1G5O1G5OO$9eQ7^O1G0gO$9oQWO1G0gOOQO1G/i1G/iO$9zQ7^O1G/iO:^QWO1G/iOLXQYO'#DcOOQO,5>b,5>bOOQO-E;t-E;tOOQO,5>g,5>gOOQO-E;y-E;yO!,rQpO1G/iO:^QWO,5:iOOQO,5:o,5:oO){QYO,5:oO$:UQ$I[O,5:oO$:aQ$I[O,5:oO!,rQpO,5:iOOQO-E;w-E;wOOQ$IU1G0S1G0SO!?{Q&jO,5:iO$:oQ&jO,5:iO$;QQ$ItO,5:oO$;lQ&jO,5:iO!?{Q&jO,5:oOOQO,5:t,5:tO$;sQ&jO,5:oO$<QQ$I[O,5:oOOQ$IU7+%k7+%kO#MdQWO7+%kO#MiQ`O7+%kOOQ$IU7+%{7+%{O:^QWO7+%{O!,rQpO7+%{O$<fQ$IfO7+*pO){QYO7+*pOOQO1G4S1G4SO7VQWO1G4SO$<vQWO7+*oO$=OQ$IfO1G2[O$?QQ$IfO1G2^O$ASQ$IfO1G1yO$C[Q#tO,5>cOOQO-E;u-E;uO$CfQbO,5>dO){QYO,5>dOOQO-E;v-E;vO$CpQWO1G5QO$CxQ7^O1G0bO$FPQ7^O1G0mO$FWQ7^O1G0mO$HXQ7^O1G0mO$H`Q7^O1G0mO$JTQ7^O1G0mO$JhQ7^O1G0mO$LuQ7^O1G0mO$L|Q7^O1G0mO$N}Q7^O1G0mO% UQ7^O1G0mO%!yQ7^O1G0mO%#^Q$IfO<<JTO%#}Q7^O1G0mO%&UQ7^O'#IqO%'nQ7^O1G1QOLXQYO'#F^OOQO'#JX'#JXOOQO1G1b1G1bO%'{QWO1G1aO%(QQ7^O,5>kOOOO7+'T7+'TOOOS1G/R1G/ROOQ$IU1G4X1G4XOJdQWO7+'zO%([QWO,5>lO5qQWO,5>lOOQO-E<O-E<OO%(jQWO1G5aO%(jQWO1G5aO%(rQWO1G5aO%(}Q`O,5>nO%)XQWO,5>nOITQWO,5>nOOQO-E<Q-E<QO%)^Q`O1G5bO%)hQWO1G5bOOQ$IS1G2T1G2TO$0hQWO1G2TOOQ$IS1G2S1G2SO%)pQWO1G2UOITQWO1G2UOOQ$IS1G2Y1G2YO!,rQpO1G2SO#5TQWO1G2TO%)uQWO1G2UO%)}QWO1G2TOJdQWO7+*bOOQ$IU1G/W1G/WO%*YQWO1G/WOOQ$IU7+'`7+'`O%*_Q#tO7+'gO%*oQ$IfO<<JsOOQ$IU<<Js<<JsOITQWO'#IVO%+`QWO,5?wOOQQ<<Kh<<KhOITQWO<<KhO#MdQWO<<KhO%+hQWO<<KhO%+pQ`O<<KhOITQWO1G2WOOQQ<<Gy<<GyO:^QWO<<GyO%+zQ$IfO<<IhOOQ$IU<<Ih<<IhOOQO,5>w,5>wO%,kQWO,5>wO%,pQWO,5>wOOQO-E<Z-E<ZO%,xQWO1G5iO%,xQWO1G5iO5qQWO1G5iO%-QQWO<<LTOOQQ<<LT<<LTO%-VQWO<<LTO5iQ$I[O<<LTO){QYO<<KhOITQWO<<KhOOQQ<<Ko<<KoO$5_Q$IdO<<KoOOQQ<<Kp<<KpO$5iQ`O<<KpO%-[Q&jO'#IXO%-gQWO,5?zOLXQYO,5?zOOQQ1G2n1G2nO#KdQ$ItO'#ETO!?{Q&jO'#GrOOQO'#IZ'#IZO%-oQ&jO,5=]OOQQ,5=],5=]O%-vQ&jO'#ETO%.RQ&jO'#ETO%.jQ&jO'#ETO%.tQ&jO'#GrO%/VQWO7+(bO%/[QWO7+(bO%/dQ`O7+(bOOQQ7+(b7+(bOITQWO7+(bO){QYO7+(bOITQWO7+(bO%/nQWO7+(bOOQQ7+(e7+(eO5iQ$I[O7+(eO#5YQWO7+(eO5_QWO7+(eO!,rQpO7+(eO%/|QWO,5>vOOQO-E<Y-E<YOOQO'#Gu'#GuO%0XQWO1G5gO5iQ$I[O<<GpOOQQ<<Gp<<GpO%0aQWO<<GpO%0fQWO7++UO%0kQWO7++VOOQQ7+(m7+(mO%0pQWO7+(mO%0uQYO7+(mO%0|QWO7+(mO){QYO7++UO){QYO7++VOOQQ<<La<<LaOOQQ<<Lc<<LcOOQQ-E<]-E<]OOQQ1G3b1G3bO%1RQWO,5=wOOQQ,5=y,5=yO%1WQWO1G3hOLXQYO7+&ROOQO7+%T7+%TO%1]Q7^O1G5XO:^QWO7+%TOOQO1G0T1G0TO%1gQ$IfO1G0ZOOQO1G0Z1G0ZO){QYO1G0ZO%1qQ$I[O1G0ZO:^QWO1G0TO!,rQpO1G0TO!?{Q&jO1G0TO%1|Q$I[O1G0ZO%2[Q&jO1G0TO%2mQ$I[O1G0ZO%3RQ$ItO1G0ZO%3]Q&jO1G0TO!?{Q&jO1G0ZOOQ$IU<<IV<<IVOOQ$IU<<Ig<<IgO:^QWO<<IgO%3dQ$IfO<<N[OOQO7+)n7+)nO%3tQ$IfO7+'gO%5|QbO1G4OO%6WQ7^O7+%|O%6|Q7^O,59jO%8zQ7^O,5<UO%:{Q7^O,5<WO%<hQ7^O,5<fO%>WQ7^O7+'WO%>eQ7^O7+'XO%>rQWO,5;xOOQO7+&{7+&{O%>wQ#tO<<KfOOQO1G4W1G4WO%?XQWO1G4WO%?dQWO1G4WO%?rQWO7+*{O%?rQWO7+*{OITQWO1G4YO%?zQ`O1G4YO%@UQWO7+*|OOQ$IS7+'o7+'oO$0hQWO7+'pO%@^Q`O7+'pOOQ$IS7+'n7+'nO$0hQWO7+'oO%@eQWO7+'pOITQWO7+'pO#5TQWO7+'oO%@jQ#tO<<M|OOQ$IU7+$r7+$rO%@tQ`O,5>qOOQO-E<T-E<TO#MdQWOANASOOQQANASANASOITQWOANASO%AOQ$IdO7+'rOOQQAN=eAN=eO5qQWO1G4cOOQO1G4c1G4cO%A`QWO1G4cO%AeQWO7++TO%AeQWO7++TO5iQ$I[OANAoO%AmQWOANAoOOQQANAoANAoO%ArQWOANASO%AzQ`OANASOOQQANAZANAZOOQQANA[ANA[O%BUQWO,5>sOOQO-E<V-E<VO%BaQ7^O1G5fO#5YQWO,5=^O5_QWO,5=^O!,rQpO,5=^OOQO-E<X-E<XOOQQ1G2w1G2wO$;QQ$ItO,5:oO!?{Q&jO,5=^O%BkQ&jO,5=^O%B|Q&jO,5:oOOQQ<<K|<<K|OITQWO<<K|O%/VQWO<<K|O%CWQWO<<K|O%C`Q`O<<K|O){QYO<<K|OITQWO<<K|OOQQ<<LP<<LPO5iQ$I[O<<LPO#5YQWO<<LPO5_QWO<<LPO%CjQ&jO1G4bO%CrQWO7++ROOQQAN=[AN=[O5iQ$I[OAN=[OOQQ<<Np<<NpOOQQ<<Nq<<NqOOQQ<<LX<<LXO%CzQWO<<LXO%DPQYO<<LXO%DWQWO<<NpO%D]QWO<<NqOOQQ1G3c1G3cO:^QWO7+)SO%DbQ7^O<<ImOOQO<<Ho<<HoOOQO7+%u7+%uO%1gQ$IfO7+%uO){QYO7+%uOOQO7+%o7+%oO:^QWO7+%oO!,rQpO7+%oO%DlQ$I[O7+%uO!?{Q&jO7+%oO%DwQ$I[O7+%uO%EVQ&jO7+%oO%EhQ$I[O7+%uOOQ$IUAN?RAN?RO%E|Q$IfO<<KfO%HUQ7^O<<JTO%HcQ7^O1G1yO%JgQ7^O1G2[O%LhQ7^O1G2^O%NTQ7^O<<JsO%NbQ7^O<<IhOOQO1G1d1G1dOOQO7+)r7+)rO%NoQWO7+)rO%NzQWO<<NgO& SQ`O7+)tOOQ$IS<<K[<<K[O$0hQWO<<K[OOQ$IS<<KZ<<KZO& ^Q`O<<K[O$0hQWO<<KZOOQQG26nG26nO#MdQWOG26nOOQO7+)}7+)}O5qQWO7+)}O& eQWO<<NoOOQQG27ZG27ZO5iQ$I[OG27ZOITQWOG26nOLXQYO1G4_O& mQWO7++QO5iQ$I[O1G2xO#5YQWO1G2xO5_QWO1G2xO!,rQpO1G2xO!?{Q&jO1G2xO%3RQ$ItO1G0ZO& uQ&jO1G2xO%/VQWOANAhOOQQANAhANAhOITQWOANAhO&!WQWOANAhO&!`Q`OANAhOOQQANAkANAkO5iQ$I[OANAkO#5YQWOANAkOOQO'#Gv'#GvOOQO7+)|7+)|OOQQG22vG22vOOQQANAsANAsO&!jQWOANAsOOQQAND[AND[OOQQAND]AND]OOQQ<<Ln<<LnOOQO<<Ia<<IaO%1gQ$IfO<<IaOOQO<<IZ<<IZO:^QWO<<IZO){QYO<<IaO!,rQpO<<IZO&!oQ$I[O<<IaO!?{Q&jO<<IZO&!zQ$I[O<<IaO&#YQ7^O7+'gOOQO<<M^<<M^OOQ$ISAN@vAN@vO$0hQWOAN@vOOQ$ISAN@uAN@uOOQQLD,YLD,YOOQO<<Mi<<MiOOQQLD,uLD,uO#MdQWOLD,YO&$xQ7^O7+)yOOQO7+(d7+(dO5iQ$I[O7+(dO#5YQWO7+(dO5_QWO7+(dO!,rQpO7+(dO!?{Q&jO7+(dOOQQG27SG27SO%/VQWOG27SOITQWOG27SOOQQG27VG27VO5iQ$I[OG27VOOQQG27_G27_OOQOAN>{AN>{OOQOAN>uAN>uO%1gQ$IfOAN>{O:^QWOAN>uO){QYOAN>{O!,rQpOAN>uO&%SQ$I[OAN>{O&%_Q7^O<<KfOOQ$ISG26bG26bOOQQ!$( t!$( tOOQO<<LO<<LOO5iQ$I[O<<LOO#5YQWO<<LOO5_QWO<<LOO!,rQpO<<LOOOQQLD,nLD,nO%/VQWOLD,nOOQQLD,qLD,qOOQOG24gG24gOOQOG24aG24aO%1gQ$IfOG24gO:^QWOG24aO){QYOG24gO&&}QMhO,5:rO&'tQ!LQO'#IqOOQOANAjANAjO5iQ$I[OANAjO#5YQWOANAjO5_QWOANAjOOQQ!$(!Y!$(!YOOQOLD*RLD*ROOQOLD){LD){O%1gQ$IfOLD*RO&(hQMhO,59jO&)[QMhO,5<UO&*OQMhO,5<WO&*rQMhO,5<fOOQOG27UG27UO5iQ$I[OG27UO#5YQWOG27UOOQO!$'Mm!$'MmO&+iQMhO1G2[O&,]QMhO1G2^O&-PQMhO1G1yOOQOLD,pLD,pO5iQ$I[OLD,pO&-vQMhO7+'gOOQO!$(![!$(![O&.mQMhO<<KfOLXQYO'#DrO&/dQbO'#ItOLXQYO'#DjO&/kQ$IfO'#ChO&0UQbO'#ChO&0fQYO,5:vO&2fQWO'#EWOLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO,5;ROLXQYO'#IPO&3pQWO,5<TO&5SQWO,5;ROLXQYO,5;fO!(^QWO'#DOO!(^QWO'#DOO!(^QWO'#DOOITQWO'#FjO&2fQWO'#FjO&3xQWO'#FjOITQWO'#FlO&2fQWO'#FlO&3xQWO'#FlOITQWO'#FzO&2fQWO'#FzO&3xQWO'#FzOLXQYO,5?mO&0fQYO1G0bO&5ZQ7^O'#ChOLXQYO1G1lOITQWO,5<pO&2fQWO,5<pO&3xQWO,5<pOITQWO,5<rO&2fQWO,5<rO&3xQWO,5<rOITQWO,5<_O&2fQWO,5<_O&3xQWO,5<_O&0fQYO1G1mOLXQYO7+&iOITQWO1G1{O&2fQWO1G1{O&3xQWO1G1{O&0fQYO7+'XO&0fQYO7+%|OITQWO7+'zO&2fQWO7+'zO&3xQWO7+'zO&5eQWO7+'pO&5eQWO<<K[O&5eQWOAN@vO&5jQWO'#E[O&5oQWO'#E[O&5wQWO'#EzO&5|QWO'#EgO&6RQWO'#JRO&6^QWO'#JPO&6iQWO,5:vO&6nQ#tO,5<QO&6uQWO'#FsO&6zQWO'#FsO&7PQWO'#FsO&7UQWO,5<RO&7^QWO,5:vO&7fQ7^O1G0}O&7mQWO,5<aO&7rQWO,5<aO&7wQWO,5<aO&7|QWO1G1mO&8RQWO1G0bO&8WQ#tO1G2`O&8_Q#tO1G2`O&8fQ#tO1G2`O&8mQWO1G2UO&8rQ`O7+'pO&8yQWO7+'pO&9OQ`O<<K[O4QQWO'#FhO5_QWO'#FgOBwQWO'#EZOLXQYO,5;cO!(mQWO'#FuO!(mQWO'#FuO!(mQWO'#FuOJdQWO,5<tOJdQWO,5<tOJdQWO,5<tO&9VQWO,5<jOITQWO1G2UO&9_QWO1G2UOITQWO7+'pO!&tQ&jO'#GOO!&tQ&jO,5<j\",\r\n  stateData: \"&:]~O'YOS'ZOSTOSUOS~OPTOQTOXyO]cO_hObnOcmOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!TSO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!nlO#dsO#tpO#x^O%PqO%RtO%TrO%UrO%XuO%ZvO%^wO%_wO%axO%nzO%t{O%v|O%x}O%z!OO%}!PO&T!QO&Z!RO&]!SO&_!TO&a!UO&c!VO']PO'fQO'oYO'|aO~OP[XZ[X_[Xj[Xu[Xv[Xx[X!R[X!a[X!b[X!d[X!j[X!{[X#WdX#[[X#][X#^[X#_[X#`[X#a[X#b[X#c[X#e[X#g[X#i[X#j[X#o[X'W[X'f[X'p[X'w[X'x[X~O!]$lX~P$zOR!WO'U!XO'V!ZO~OPTOQTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!T!bO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O']![O'fQO'oYO'|aO~O!Q!`O!R!]O!O'jP!O'tP~P'dO!S!mO~P`OPTOQTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!T!bO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O']9WO'fQO'oYO'|aO~OPTOQTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!T!bO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O'fQO'oYO'|aO~O!Q!rO#U!uO#V!rO']9XO!c'qP~P+{O#W!vO~O!]!wO#W!vO~OP#^OZ#dOj#ROu!{Ov!{Ox!|O!R#bO!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO#j#ZO'fQO'p#[O'w!}O'x#OO~O_'hX'W'hX!c'hX!O'hX!T'hX%Q'hX!]'hX~P.jO!{#eO#o#eOP'iXZ'iX_'iXj'iXu'iXv'iXx'iX!R'iX!a'iX!b'iX!d'iX!j'iX#['iX#]'iX#^'iX#_'iX#`'iX#a'iX#b'iX#e'iX#g'iX#i'iX#j'iX'f'iX'p'iX'w'iX'x'iX~O#c'iX'W'iX!O'iX!c'iXn'iX!T'iX%Q'iX!]'iX~P0zO!{#eO~O#z#fO$R#jO~O!T#kO#x^O$U#lO$W#nO~O]#qOh$OOj#rOk#qOl#qOq$POs$QOx#xO!T#yO!_$VO!d#vO#V$WO#t$TO$_$RO$a$SO$d$UO']#pO'f#sO'a'cP~O!d$XO~O!]$ZO~O_$[O'W$[O~O']$`O~O!d$XO']$`O'^$bO'b$cO~Oc$iO!d$XO']$`O~O#c#TO~O]$rOu$nO!T$kO!d$mO%R$qO']$`O'^$bO^(UP~O!n$sO~Ox$tO!T$uO']$`O~Ox$tO!T$uO%Z$yO']$`O~O']$zO~O#dsO%RtO%TrO%UrO%XuO%ZvO%^wO%_wO~Ob%TOc%SO!n%QO%P%RO%c%PO~P7uOb%WOcmO!T%VO!nlO#dsO%PqO%TrO%UrO%XuO%ZvO%^wO%_wO%axO~O`%ZO!{%^O%R%XO'^$bO~P8tO!d%_O!g%cO~O!d%dO~O!TSO~O_$[O'T%lO'W$[O~O_$[O'T%oO'W$[O~O_$[O'T%qO'W$[O~OR!WO'U!XO'V%uO~OP[XZ[Xj[Xu[Xv[Xx[X!R[X!RdX!a[X!b[X!d[X!j[X!{[X!{dX#WdX#[[X#][X#^[X#_[X#`[X#a[X#b[X#c[X#e[X#g[X#i[X#j[X#o[X'f[X'p[X'w[X'x[X~O!O[X!OdX~P;aO!Q%wO!O&iX!O&nX!R&iX!R&nX~P'dO!R%yO!O'jX~OP#^OZ#dOj#ROu!{Ov!{Ox!|O!R%yO!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO#j#ZO'fQO'p#[O'w!}O'x#OO~O!O'jX~P>^O!O&OO~Ox&RO!W&]O!X&UO!Y&UO'^$bO~O]&SOk&SO!Q&VO'g&PO!S'kP!S'vP~P@aO!O'sX!R'sX!]'sX!c'sX'p'sX~O!{'sX#W#PX!S'sX~PAYO!{&^O!O'uX!R'uX~O!R&_O!O'tX~O!O&bO~O!{#eO~PAYOS&fO!T&cO!o&eO']$`O~Oc&kO!d$XO']$`O~Ou$nO!d$mO~O!S&lO~P`Ou!{Ov!{Ox!|O!b!yO!d!zO'fQOP!faZ!faj!fa!R!fa!a!fa!j!fa#[!fa#]!fa#^!fa#_!fa#`!fa#a!fa#b!fa#c!fa#e!fa#g!fa#i!fa#j!fa'p!fa'w!fa'x!fa~O_!fa'W!fa!O!fa!c!fan!fa!T!fa%Q!fa!]!fa~PCcO!c&mO~O!]!wO!{&oO'p&nO!R'rX_'rX'W'rX~O!c'rX~PE{O!R&sO!c'qX~O!c&uO~Ox$tO!T$uO#V&vO']$`O~OPTOQTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!TSO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O']9WO'fQO'oYO'|aO~O]#qOh$OOj#rOk#qOl#qOq$POs9kOx#xO!T#yO!_;RO!d#vO#V9tO#t$TO$_9nO$a9qO$d$UO']&zO'f#sO~O#W&|O~O]#qOh$OOj#rOk#qOl#qOq$POs$QOx#xO!T#yO!_$VO!d#vO#V$WO#t$TO$_$RO$a$SO$d$UO']&zO'f#sO~O'a'mP~PJdO!Q'QO!c'nP~P){O'g'SO'oYO~OP9TOQ9TO]cOb;POc!jOhcOj9TOkcOlcOq9TOs9TOxRO{cO|cO}cO!T!bO!_9VO!dUO!g9TO!h9TO!i9TO!j9TO!k9TO!n!iO#t!lO#x^O']'bO'fQO'oYO'|:}O~O!d!zO~O!R#bO_$]a'W$]a!c$]a!O$]a!T$]a%Q$]a!]$]a~O#d'iO~PITO!]'kO!T'yX#w'yX#z'yX$R'yX~Ou'lO~P! POu'lO!T'yX#w'yX#z'yX$R'yX~O!T'nO#w'rO#z'mO$R'sO~O!Q'vO~PLXO#z#fO$R'yO~Ou$eXx$eX!b$eX'p$eX'w$eX'x$eX~OSfX!RfX!{fX'afX'a$eX~P!!iOk'{O~OR'|O'U'}O'V(PO~Ou(ROx(SO'p#[O'w(UO'x(WO~O'a(QO~P!#rO'a(ZO~O]#qOh$OOj#rOk#qOl#qOq$POs9kOx#xO!T#yO!_;RO!d#vO#V9tO#t$TO$_9nO$a9qO$d$UO'f#sO~O!Q(_O']([O!c'}P~P!$aO#W(aO~O!Q(eO'](bO!O(OP~P!$aOj(sOx(kO!W(qO!X(jO!Y(jO!d(hO!x(rO$w(mO'^$bO'g(gO~O!S(pO~P!&XO!b!yOu'eXx'eX'p'eX'w'eX'x'eX!R'eX!{'eX~O'a'eX#m'eX~P!'QOS(vO!{(uO!R'dX'a'dX~O!R(wO'a'cX~O'](yO~O!d)OO~O']&zO~O!d(hO~Ox$tO!Q!rO!T$uO#U!uO#V!rO']$`O!c'qP~O!]!wO#W)SO~OP#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO#j#ZO'fQO'p#[O'w!}O'x#OO~O_!^a!R!^a'W!^a!O!^a!c!^an!^a!T!^a%Q!^a!]!^a~P!)cOS)[O!T&cO!o)ZO%Q)YO'b$cO~O']$zO'a'cP~O!])_O!T'`X_'`X!R'`X'W'`X~O!d$XO'b$cO~O!d$XO']$`O'b$cO~O!]!wO#W&|O~O])jO%R)kO'])gO!S(VP~O!R)lO^(UX~O'g'SO~OZ)pO~O^)qO~O!T$kO']$`O'^$bO^(UP~Ox$tO!Q)vO!R&_O!T$uO']$`O!O'tP~O]&YOk&YO!Q)wO'g'SO!S'vP~O!R)xO_(RX'W(RX~O!{)|O'b$cO~OS*PO!T#yO'b$cO~O!T*RO~Ou*TO!TSO~O!n*YO~Oc*_O~O'](yO!S(TP~Oc$iO~O%RtO']$zO~P8tOZ*eO^*dO~OPTOQTO]cObnOcmOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!nlO#x^O%PqO'fQO'oYO'|aO~O!T!bO#t!lO']9WO~P!1RO^*dO_$[O'W$[O~O_*iO#d*kO%T*kO%U*kO~P){O!d%_O~O%t*pO~O!T*rO~O&V*tO&X*uOP&SaQ&SaX&Sa]&Sa_&Sab&Sac&Sah&Saj&Sak&Sal&Saq&Sas&Sax&Sa{&Sa|&Sa}&Sa!T&Sa!_&Sa!d&Sa!g&Sa!h&Sa!i&Sa!j&Sa!k&Sa!n&Sa#d&Sa#t&Sa#x&Sa%P&Sa%R&Sa%T&Sa%U&Sa%X&Sa%Z&Sa%^&Sa%_&Sa%a&Sa%n&Sa%t&Sa%v&Sa%x&Sa%z&Sa%}&Sa&T&Sa&Z&Sa&]&Sa&_&Sa&a&Sa&c&Sa'S&Sa']&Sa'f&Sa'o&Sa'|&Sa!S&Sa%{&Sa`&Sa&Q&Sa~O']*zO~On*}O~O!O&ia!R&ia~P!)cO!Q+RO!O&iX!R&iX~P){O!R%yO!O'ja~O!O'ja~P>^O!R&_O!O'ta~O!RwX!R!ZX!SwX!S!ZX!]wX!]!ZX!d!ZX!{wX'b!ZX~O!]+WO!{+VO!R#TX!R'lX!S#TX!S'lX!]'lX!d'lX'b'lX~O!]+YO!d$XO'b$cO!R!VX!S!VX~O]&QOk&QOx&RO'g(gO~OP9TOQ9TO]cOb;POc!jOhcOj9TOkcOlcOq9TOs9TOxRO{cO|cO}cO!T!bO!_9VO!dUO!g9TO!h9TO!i9TO!j9TO!k9TO!n!iO#t!lO#x^O'fQO'oYO'|:}O~O']9yO~P!;^O!R+^O!S'kX~O!S+`O~O!]+WO!{+VO!R#TX!S#TX~O!R+aO!S'vX~O!S+cO~O]&QOk&QOx&RO'^$bO'g(gO~O!X+dO!Y+dO~P!>[Ox$tO!Q+fO!T$uO']$`O!O&nX!R&nX~O_+jO!W+mO!X+iO!Y+iO!r+qO!s+oO!t+pO!u+nO!x+rO'^$bO'g(gO'o+gO~O!S+lO~P!?]OS+wO!T&cO!o+vO~O!{+}O!R'ra!c'ra_'ra'W'ra~O!]!wO~P!@gO!R&sO!c'qa~Ox$tO!Q,QO!T$uO#U,SO#V,QO']$`O!R&pX!c&pX~O_#Oi!R#Oi'W#Oi!O#Oi!c#Oin#Oi!T#Oi%Q#Oi!]#Oi~P!)cO#W!za!R!za!c!za!{!za!T!za_!za'W!za!O!za~P!#rO#W'eXP'eXZ'eX_'eXj'eXv'eX!a'eX!d'eX!j'eX#['eX#]'eX#^'eX#_'eX#`'eX#a'eX#b'eX#c'eX#e'eX#g'eX#i'eX#j'eX'W'eX'f'eX!c'eX!O'eX!T'eXn'eX%Q'eX!]'eX~P!'QO!R,]O'a'mX~P!#rO'a,_O~O!R,`O!c'nX~P!)cO!c,cO~O!O,dO~OP#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O'fQOZ#Zi_#Zij#Zi!R#Zi!a#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'w#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~O#[#Zi~P!EtO#[#PO~P!EtOP#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO'fQOZ#Zi_#Zi!R#Zi!a#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'w#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~Oj#Zi~P!H`Oj#RO~P!H`OP#^Oj#ROu!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO'fQO_#Zi!R#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'w#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~OZ#Zi!a#Zi#a#Zi#b#Zi#c#Zi~P!JzOZ#dO!a#TO#a#TO#b#TO#c#TO~P!JzOP#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO'fQO_#Zi!R#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~O'w#Zi~P!MrO'w!}O~P!MrOP#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO'fQO'w!}O_#Zi!R#Zi#i#Zi#j#Zi'W#Zi'p#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~O'x#Zi~P#!^O'x#OO~P#!^OP#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO'fQO'w!}O'x#OO~O_#Zi!R#Zi#j#Zi'W#Zi'p#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~P#$xOP[XZ[Xj[Xu[Xv[Xx[X!a[X!b[X!d[X!j[X!{[X#WdX#[[X#][X#^[X#_[X#`[X#a[X#b[X#c[X#e[X#g[X#i[X#j[X#o[X'f[X'p[X'w[X'x[X!R[X!S[X~O#m[X~P#']OP#^OZ9iOj9^Ou!{Ov!{Ox!|O!a9`O!b!yO!d!zO!j#^O#[9[O#]9]O#^9]O#_9]O#`9_O#a9`O#b9`O#c9`O#e9aO#g9cO#i9eO#j9fO'fQO'p#[O'w!}O'x#OO~O#m,fO~P#)gOP'iXZ'iXj'iXu'iXv'iXx'iX!a'iX!b'iX!d'iX!j'iX#['iX#]'iX#^'iX#_'iX#`'iX#a'iX#b'iX#e'iX#g'iX#i'iX#j'iX'f'iX'p'iX'w'iX'x'iX!R'iX~O!{9jO#o9jO#c'iX#m'iX!S'iX~P#+bO_&sa!R&sa'W&sa!c&san&sa!O&sa!T&sa%Q&sa!]&sa~P!)cOP#ZiZ#Zi_#Zij#Ziv#Zi!R#Zi!a#Zi!b#Zi!d#Zi!j#Zi#[#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'f#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~P!#rO_#ni!R#ni'W#ni!O#ni!c#nin#ni!T#ni%Q#ni!]#ni~P!)cO#z,hO~O#z,iO~O!]'kO!{,jO!T$OX#w$OX#z$OX$R$OX~O!Q,kO~O!T'nO#w,mO#z'mO$R,nO~O!R9gO!S'hX~P#)gO!S,oO~O$R,qO~OR'|O'U'}O'V,tO~O],wOk,wO!O,xO~O!RdX!]dX!cdX!c$eX'pdX~P!!iO!c-OO~P!#rO!R-PO!]!wO'p&nO!c'}X~O!c-UO~O!O$eX!R$eX!]$lX~P!!iO!R-WO!O(OX~P!#rO!]-YO~O!O-[O~O!Q(_O']$`O!c'}P~Oj-`O!]!wO!d$XO'b$cO'p&nO~O!])_O~O_$[O!R-eO'W$[O~O!S-gO~P!&XO!X-hO!Y-hO'^$bO'g(gO~Ox-jO'g(gO~O!x-kO~O']$zO!R&xX'a&xX~O!R(wO'a'ca~Ou-pOv-pOx-qO'pra'wra'xra!Rra!{ra~O'ara#mra~P#6qOu(ROx(SO'p$^a'w$^a'x$^a!R$^a!{$^a~O'a$^a#m$^a~P#7gOu(ROx(SO'p$`a'w$`a'x$`a!R$`a!{$`a~O'a$`a#m$`a~P#8YO]-rO~O#W-sO~O'a$na!R$na#m$na!{$na~P!#rO#W-vO~OS.PO!T&cO!o.OO%Q-}O~O'a.QO~O]#qOj#rOk#qOl#qOq$POs9kOx#xO!T#yO!_;RO!d#vO#V9tO#t$TO$_9nO$a9qO$d$UO'f#sO~Oh.SO'].RO~P#:PO!])_O!T'`a_'`a!R'`a'W'`a~O#W.YO~OZ[X!RdX!SdX~O!R.ZO!S(VX~O!S.]O~OZ.^O~O].`O'])gO~O!T$kO']$`O^'QX!R'QX~O!R)lO^(Ua~O!c.cO~P!)cO].eO~OZ.fO~O^.gO~OS.PO!T&cO!o.OO%Q-}O'b$cO~O!R)xO_(Ra'W(Ra~O!{.mO~OS.pO!T#yO~O'g'SO!S(SP~OS.zO!T.vO!o.yO%Q.xO'b$cO~OZ/UO!R/SO!S(TX~O!S/VO~O^/XO_$[O'W$[O~O]/YO~O]/ZO'](yO~O#c/[O%r/]O~P0zO!{#eO#c/[O%r/]O~O_/^O~P){O_/`O~O%{/dOP%yiQ%yiX%yi]%yi_%yib%yic%yih%yij%yik%yil%yiq%yis%yix%yi{%yi|%yi}%yi!T%yi!_%yi!d%yi!g%yi!h%yi!i%yi!j%yi!k%yi!n%yi#d%yi#t%yi#x%yi%P%yi%R%yi%T%yi%U%yi%X%yi%Z%yi%^%yi%_%yi%a%yi%n%yi%t%yi%v%yi%x%yi%z%yi%}%yi&T%yi&Z%yi&]%yi&_%yi&a%yi&c%yi'S%yi']%yi'f%yi'o%yi'|%yi!S%yi`%yi&Q%yi~O`/jO!S/hO&Q/iO~P`O!TSO!d/lO~O&X*uOP&SiQ&SiX&Si]&Si_&Sib&Sic&Sih&Sij&Sik&Sil&Siq&Sis&Six&Si{&Si|&Si}&Si!T&Si!_&Si!d&Si!g&Si!h&Si!i&Si!j&Si!k&Si!n&Si#d&Si#t&Si#x&Si%P&Si%R&Si%T&Si%U&Si%X&Si%Z&Si%^&Si%_&Si%a&Si%n&Si%t&Si%v&Si%x&Si%z&Si%}&Si&T&Si&Z&Si&]&Si&_&Si&a&Si&c&Si'S&Si']&Si'f&Si'o&Si'|&Si!S&Si%{&Si`&Si&Q&Si~O!R#bOn$]a~O!O&ii!R&ii~P!)cO!R%yO!O'ji~O!R&_O!O'ti~O!O/rO~O!R!Va!S!Va~P#)gO]&QOk&QO!Q/xO'g(gO!R&jX!S&jX~P@aO!R+^O!S'ka~O]&YOk&YO!Q)wO'g'SO!R&oX!S&oX~O!R+aO!S'va~O!O'ui!R'ui~P!)cO_$[O!]!wO!d$XO!j0SO!{0QO'W$[O'b$cO'p&nO~O!S0VO~P!?]O!X0WO!Y0WO'^$bO'g(gO'o+gO~O!W0XO~P#LVO!TSO!W0XO!u0ZO!x0[O~P#LVO!W0XO!s0^O!t0^O!u0ZO!x0[O~P#LVO!T&cO~O!T&cO~P!#rO!R'ri!c'ri_'ri'W'ri~P!)cO!{0gO!R'ri!c'ri_'ri'W'ri~O!R&sO!c'qi~Ox$tO!T$uO#V0iO']$`O~O#WraPraZra_rajra!ara!bra!dra!jra#[ra#]ra#^ra#_ra#`ra#ara#bra#cra#era#gra#ira#jra'Wra'fra!cra!Ora!Tranra%Qra!]ra~P#6qO#W$^aP$^aZ$^a_$^aj$^av$^a!a$^a!b$^a!d$^a!j$^a#[$^a#]$^a#^$^a#_$^a#`$^a#a$^a#b$^a#c$^a#e$^a#g$^a#i$^a#j$^a'W$^a'f$^a!c$^a!O$^a!T$^an$^a%Q$^a!]$^a~P#7gO#W$`aP$`aZ$`a_$`aj$`av$`a!a$`a!b$`a!d$`a!j$`a#[$`a#]$`a#^$`a#_$`a#`$`a#a$`a#b$`a#c$`a#e$`a#g$`a#i$`a#j$`a'W$`a'f$`a!c$`a!O$`a!T$`an$`a%Q$`a!]$`a~P#8YO#W$naP$naZ$na_$naj$nav$na!R$na!a$na!b$na!d$na!j$na#[$na#]$na#^$na#_$na#`$na#a$na#b$na#c$na#e$na#g$na#i$na#j$na'W$na'f$na!c$na!O$na!T$na!{$nan$na%Q$na!]$na~P!#rO_#Oq!R#Oq'W#Oq!O#Oq!c#Oqn#Oq!T#Oq%Q#Oq!]#Oq~P!)cO!R&kX'a&kX~PJdO!R,]O'a'ma~O!Q0qO!R&lX!c&lX~P){O!R,`O!c'na~O!R,`O!c'na~P!)cO#m!fa!S!fa~PCcO#m!^a!R!^a!S!^a~P#)gO!T1UO#x^O$P1VO~O!S1ZO~On1[O~P!#rO_$Yq!R$Yq'W$Yq!O$Yq!c$Yqn$Yq!T$Yq%Q$Yq!]$Yq~P!)cO!O1]O~O],wOk,wO~Ou(ROx(SO'x(WO'p$xi'w$xi!R$xi!{$xi~O'a$xi#m$xi~P$,vOu(ROx(SO'p$zi'w$zi'x$zi!R$zi!{$zi~O'a$zi#m$zi~P$-iO#m1^O~P!#rO!Q1`O']$`O!R&tX!c&tX~O!R-PO!c'}a~O!R-PO!]!wO!c'}a~O!R-PO!]!wO'p&nO!c'}a~O'a$gi!R$gi#m$gi!{$gi~P!#rO!Q1gO'](bO!O&vX!R&vX~P!$aO!R-WO!O(Oa~O!R-WO!O(Oa~P!#rO!]!wO~O!]!wO#c1oO~Oj1rO!]!wO'p&nO~O!R'di'a'di~P!#rO!{1uO!R'di'a'di~P!#rO!c1xO~O_$Zq!R$Zq'W$Zq!O$Zq!c$Zqn$Zq!T$Zq%Q$Zq!]$Zq~P!)cO!R1|O!T(PX~P!#rO!T&cO%Q2PO~O!T&cO%Q2PO~P!#rO!T$eX$u[X_$eX!R$eX'W$eX~P!!iO$u2TOugXxgX!TgX'pgX'wgX'xgX_gX!RgX'WgX~O$u2TO~O]2ZO%R2[O'])gO!R'PX!S'PX~O!R.ZO!S(Va~OZ2`O~O^2aO~O]2dO~OS2fO!T&cO!o2eO%Q2PO~O_$[O'W$[O~P!#rO!T#yO~P!#rO!R2kO!{2mO!S(SX~O!S2nO~Ox;]O!W2wO!X2pO!Y2pO!r2vO!s2uO!t2uO!x2tO'^$bO'g(gO'o+gO~O!S2sO~P$6QOS3OO!T.vO!o2}O%Q2|O~OS3OO!T.vO!o2}O%Q2|O'b$cO~O'](yO!R'OX!S'OX~O!R/SO!S(Ta~O]3YO'g3XO~O]3ZO~O^3]O~O!c3`O~P){O_3bO~O_3bO~P){O#c3dO%r3eO~PE{O`/jO!S3iO&Q/iO~P`O!]3kO~O!R#Ti!S#Ti~P#)gO!{3mO!R#Ti!S#Ti~O!R!Vi!S!Vi~P#)gO_$[O!{3tO'W$[O~O_$[O!]!wO!{3tO'W$[O~O!X3xO!Y3xO'^$bO'g(gO'o+gO~O_$[O!]!wO!d$XO!j3yO!{3tO'W$[O'b$cO'p&nO~O!W3zO~P$:oO!W3zO!u3}O!x4OO~P$:oO_$[O!]!wO!j3yO!{3tO'W$[O'p&nO~O!R'rq!c'rq_'rq'W'rq~P!)cO!R&sO!c'qq~O#W$xiP$xiZ$xi_$xij$xiv$xi!a$xi!b$xi!d$xi!j$xi#[$xi#]$xi#^$xi#_$xi#`$xi#a$xi#b$xi#c$xi#e$xi#g$xi#i$xi#j$xi'W$xi'f$xi!c$xi!O$xi!T$xin$xi%Q$xi!]$xi~P$,vO#W$ziP$ziZ$zi_$zij$ziv$zi!a$zi!b$zi!d$zi!j$zi#[$zi#]$zi#^$zi#_$zi#`$zi#a$zi#b$zi#c$zi#e$zi#g$zi#i$zi#j$zi'W$zi'f$zi!c$zi!O$zi!T$zin$zi%Q$zi!]$zi~P$-iO#W$giP$giZ$gi_$gij$giv$gi!R$gi!a$gi!b$gi!d$gi!j$gi#[$gi#]$gi#^$gi#_$gi#`$gi#a$gi#b$gi#c$gi#e$gi#g$gi#i$gi#j$gi'W$gi'f$gi!c$gi!O$gi!T$gi!{$gin$gi%Q$gi!]$gi~P!#rO!R&ka'a&ka~P!#rO!R&la!c&la~P!)cO!R,`O!c'ni~O#m#Oi!R#Oi!S#Oi~P#)gOP#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O'fQOZ#Zij#Zi!a#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'w#Zi'x#Zi!R#Zi!S#Zi~O#[#Zi~P$DVO#[9[O~P$DVOP#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[9[O#]9]O#^9]O#_9]O'fQOZ#Zi!a#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'w#Zi'x#Zi!R#Zi!S#Zi~Oj#Zi~P$F_Oj9^O~P$F_OP#^Oj9^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[9[O#]9]O#^9]O#_9]O#`9_O'fQO#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'w#Zi'x#Zi!R#Zi!S#Zi~OZ#Zi!a#Zi#a#Zi#b#Zi#c#Zi~P$HgOZ9iO!a9`O#a9`O#b9`O#c9`O~P$HgOP#^OZ9iOj9^Ou!{Ov!{Ox!|O!a9`O!b!yO!d!zO!j#^O#[9[O#]9]O#^9]O#_9]O#`9_O#a9`O#b9`O#c9`O#e9aO'fQO#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'x#Zi!R#Zi!S#Zi~O'w#Zi~P$J{O'w!}O~P$J{OP#^OZ9iOj9^Ou!{Ov!{Ox!|O!a9`O!b!yO!d!zO!j#^O#[9[O#]9]O#^9]O#_9]O#`9_O#a9`O#b9`O#c9`O#e9aO#g9cO'fQO'w!}O#i#Zi#j#Zi#m#Zi'p#Zi!R#Zi!S#Zi~O'x#Zi~P$MTO'x#OO~P$MTOP#^OZ9iOj9^Ou!{Ov!{Ox!|O!a9`O!b!yO!d!zO!j#^O#[9[O#]9]O#^9]O#_9]O#`9_O#a9`O#b9`O#c9`O#e9aO#g9cO#i9eO'fQO'w!}O'x#OO~O#j#Zi#m#Zi'p#Zi!R#Zi!S#Zi~P% ]O_#ky!R#ky'W#ky!O#ky!c#kyn#ky!T#ky%Q#ky!]#ky~P!)cOP#ZiZ#Zij#Ziv#Zi!a#Zi!b#Zi!d#Zi!j#Zi#[#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'f#Zi!R#Zi!S#Zi~P!#rO!b!yOu'eXx'eX'p'eX'w'eX'x'eX!S'eX~OP'eXZ'eXj'eXv'eX!a'eX!d'eX!j'eX#['eX#]'eX#^'eX#_'eX#`'eX#a'eX#b'eX#c'eX#e'eX#g'eX#i'eX#j'eX#m'eX'f'eX!R'eX~P%%mO#m#ni!R#ni!S#ni~P#)gO!S4`O~O!R&sa!S&sa~P#)gO!]!wO'p&nO!R&ta!c&ta~O!R-PO!c'}i~O!R-PO!]!wO!c'}i~O!O&va!R&va~P!#rO!]4gO~O!R-WO!O(Oi~P!#rO!R-WO!O(Oi~O!O4kO~O!]!wO#c4pO~Oj4qO!]!wO'p&nO~O!O4sO~O'a$iq!R$iq#m$iq!{$iq~P!#rO_$Zy!R$Zy'W$Zy!O$Zy!c$Zyn$Zy!T$Zy%Q$Zy!]$Zy~P!)cO!R1|O!T(Pa~O!T&cO%Q4xO~O!T&cO%Q4xO~P!#rO_#Oy!R#Oy'W#Oy!O#Oy!c#Oyn#Oy!T#Oy%Q#Oy!]#Oy~P!)cOZ4{O~O]4}O'])gO~O!R.ZO!S(Vi~O]5QO~O^5RO~O'g'SO!R&{X!S&{X~O!R2kO!S(Sa~O!S5`O~P$6QOx;^O'g(gO'o+gO~O!W5cO!X5bO!Y5bO!x0[O'^$bO'g(gO'o+gO~O!s5dO!t5dO~P%.RO!X5bO!Y5bO'^$bO'g(gO'o+gO~O!T.vO~O!T.vO%Q5fO~O!T.vO%Q5fO~P!#rOS5kO!T.vO!o5jO%Q5fO~OZ5pO!R'Oa!S'Oa~O!R/SO!S(Ti~O]5sO~O!c5tO~O!c5uO~O!c5vO~O!c5vO~P){O_5xO~O!]5{O~O!c5|O~O!R'ui!S'ui~P#)gO_$[O'W$[O~P!)cO_$[O!{6RO'W$[O~O_$[O!]!wO!{6RO'W$[O~O!X6WO!Y6WO'^$bO'g(gO'o+gO~O_$[O!]!wO!j6XO!{6RO'W$[O'p&nO~O!d$XO'b$cO~P%2mO!W6YO~P%2[O!R'ry!c'ry_'ry'W'ry~P!)cO#W$iqP$iqZ$iq_$iqj$iqv$iq!R$iq!a$iq!b$iq!d$iq!j$iq#[$iq#]$iq#^$iq#_$iq#`$iq#a$iq#b$iq#c$iq#e$iq#g$iq#i$iq#j$iq'W$iq'f$iq!c$iq!O$iq!T$iq!{$iqn$iq%Q$iq!]$iq~P!#rO!R&li!c&li~P!)cO#m#Oq!R#Oq!S#Oq~P#)gOu-pOv-pOx-qO'pra'wra'xra!Sra~OPraZrajra!ara!bra!dra!jra#[ra#]ra#^ra#_ra#`ra#ara#bra#cra#era#gra#ira#jra#mra'fra!Rra~P%6eOu(ROx(SO'p$^a'w$^a'x$^a!S$^a~OP$^aZ$^aj$^av$^a!a$^a!b$^a!d$^a!j$^a#[$^a#]$^a#^$^a#_$^a#`$^a#a$^a#b$^a#c$^a#e$^a#g$^a#i$^a#j$^a#m$^a'f$^a!R$^a~P%8fOu(ROx(SO'p$`a'w$`a'x$`a!S$`a~OP$`aZ$`aj$`av$`a!a$`a!b$`a!d$`a!j$`a#[$`a#]$`a#^$`a#_$`a#`$`a#a$`a#b$`a#c$`a#e$`a#g$`a#i$`a#j$`a#m$`a'f$`a!R$`a~P%:gOP$naZ$naj$nav$na!a$na!b$na!d$na!j$na#[$na#]$na#^$na#_$na#`$na#a$na#b$na#c$na#e$na#g$na#i$na#j$na#m$na'f$na!R$na!S$na~P!#rO#m$Yq!R$Yq!S$Yq~P#)gO#m$Zq!R$Zq!S$Zq~P#)gO!S6dO~O'a$|y!R$|y#m$|y!{$|y~P!#rO!]!wO!R&ti!c&ti~O!]!wO'p&nO!R&ti!c&ti~O!R-PO!c'}q~O!O&vi!R&vi~P!#rO!R-WO!O(Oq~O!O6jO~P!#rO!O6jO~O!R'dy'a'dy~P!#rO!R&ya!T&ya~P!#rO!T$tq_$tq!R$tq'W$tq~P!#rOZ6qO~O!R.ZO!S(Vq~O]6tO~O!T&cO%Q6uO~O!T&cO%Q6uO~P!#rO!{6vO!R&{a!S&{a~O!R2kO!S(Si~P#)gO!X6|O!Y6|O'^$bO'g(gO'o+gO~O!W7OO!x4OO~P%BkO!T.vO%Q7RO~O!T.vO%Q7RO~P!#rO]7YO'g7XO~O!R/SO!S(Tq~O!c7[O~O!c7[O~P){O!c7^O~O!c7_O~O!R#Ty!S#Ty~P#)gO_$[O!{7eO'W$[O~O_$[O!]!wO!{7eO'W$[O~O!X7hO!Y7hO'^$bO'g(gO'o+gO~O_$[O!]!wO!j7iO!{7eO'W$[O'p&nO~O#W$|yP$|yZ$|y_$|yj$|yv$|y!R$|y!a$|y!b$|y!d$|y!j$|y#[$|y#]$|y#^$|y#_$|y#`$|y#a$|y#b$|y#c$|y#e$|y#g$|y#i$|y#j$|y'W$|y'f$|y!c$|y!O$|y!T$|y!{$|yn$|y%Q$|y!]$|y~P!#rO#m#ky!R#ky!S#ky~P#)gOP$giZ$gij$giv$gi!a$gi!b$gi!d$gi!j$gi#[$gi#]$gi#^$gi#_$gi#`$gi#a$gi#b$gi#c$gi#e$gi#g$gi#i$gi#j$gi#m$gi'f$gi!R$gi!S$gi~P!#rOu(ROx(SO'x(WO'p$xi'w$xi!S$xi~OP$xiZ$xij$xiv$xi!a$xi!b$xi!d$xi!j$xi#[$xi#]$xi#^$xi#_$xi#`$xi#a$xi#b$xi#c$xi#e$xi#g$xi#i$xi#j$xi#m$xi'f$xi!R$xi~P%JROu(ROx(SO'p$zi'w$zi'x$zi!S$zi~OP$ziZ$zij$ziv$zi!a$zi!b$zi!d$zi!j$zi#[$zi#]$zi#^$zi#_$zi#`$zi#a$zi#b$zi#c$zi#e$zi#g$zi#i$zi#j$zi#m$zi'f$zi!R$zi~P%LSO#m$Zy!R$Zy!S$Zy~P#)gO#m#Oy!R#Oy!S#Oy~P#)gO!]!wO!R&tq!c&tq~O!R-PO!c'}y~O!O&vq!R&vq~P!#rO!O7mO~P!#rO!R.ZO!S(Vy~O!R2kO!S(Sq~O!X7yO!Y7yO'^$bO'g(gO'o+gO~O!T.vO%Q7|O~O!T.vO%Q7|O~P!#rO!c8PO~O_$[O!{8UO'W$[O~O_$[O!]!wO!{8UO'W$[O~OP$iqZ$iqj$iqv$iq!a$iq!b$iq!d$iq!j$iq#[$iq#]$iq#^$iq#_$iq#`$iq#a$iq#b$iq#c$iq#e$iq#g$iq#i$iq#j$iq#m$iq'f$iq!R$iq!S$iq~P!#rO!R&{q!S&{q~P#)gO_$[O!{8hO'W$[O~OP$|yZ$|yj$|yv$|y!a$|y!b$|y!d$|y!j$|y#[$|y#]$|y#^$|y#_$|y#`$|y#a$|y#b$|y#c$|y#e$|y#g$|y#i$|y#j$|y#m$|y'f$|y!R$|y!S$|y~P!#rO!S!za!W!za!X!za!Y!za!r!za!s!za!t!za!x!za'^!za'g!za'o!za~P!#rO!W'eX!X'eX!Y'eX!r'eX!s'eX!t'eX!x'eX'^'eX'g'eX'o'eX~P%%mO!Wra!Xra!Yra!rra!sra!tra!xra'^ra'gra'ora~P%6eO!W$^a!X$^a!Y$^a!r$^a!s$^a!t$^a!x$^a'^$^a'g$^a'o$^a~P%8fO!W$`a!X$`a!Y$`a!r$`a!s$`a!t$`a!x$`a'^$`a'g$`a'o$`a~P%:gO!S$na!W$na!X$na!Y$na!r$na!s$na!t$na!x$na'^$na'g$na'o$na~P!#rO!W$xi!X$xi!Y$xi!r$xi!s$xi!t$xi!x$xi'^$xi'g$xi'o$xi~P%JRO!W$zi!X$zi!Y$zi!r$zi!s$zi!t$zi!x$zi'^$zi'g$zi'o$zi~P%LSO!S$gi!W$gi!X$gi!Y$gi!r$gi!s$gi!t$gi!x$gi'^$gi'g$gi'o$gi~P!#rO!S$iq!W$iq!X$iq!Y$iq!r$iq!s$iq!t$iq!x$iq'^$iq'g$iq'o$iq~P!#rO!S$|y!W$|y!X$|y!Y$|y!r$|y!s$|y!t$|y!x$|y'^$|y'g$|y'o$|y~P!#rOn'hX~P.jOn[X!O[X!c[X%r[X!T[X%Q[X!][X~P$zO!]dX!c[X!cdX'pdX~P;aOP9TOQ9TO]cOb;POc!jOhcOj9TOkcOlcOq9TOs9TOxRO{cO|cO}cO!TSO!_9VO!dUO!g9TO!h9TO!i9TO!j9TO!k9TO!n!iO#t!lO#x^O']'bO'fQO'oYO'|:}O~O]#qOh$OOj#rOk#qOl#qOq$POs9lOx#xO!T#yO!_;SO!d#vO#V9uO#t$TO$_9oO$a9rO$d$UO']&zO'f#sO~O!R9gO!S$]a~O]#qOh$OOj#rOk#qOl#qOq$POs9mOx#xO!T#yO!_;TO!d#vO#V9vO#t$TO$_9pO$a9sO$d$UO']&zO'f#sO~O#d'iO~P&3xO!S[X!SdX~P;aO!]9ZO~O#W9YO~O!]!wO#W9YO~O!{9jO~O#c9`O~O!{9wO!R'uX!S'uX~O!{9jO!R'sX!S'sX~O#W9xO~O'a9zO~P!#rO#W:RO~O#W:SO~O#W:TO~O!]!wO#W:UO~O!]!wO#W9xO~O#m:VO~P#)gO#W:WO~O#W:XO~O#W:YO~O#W:ZO~O#W:[O~O#m:]O~P!#rO#m:^O~P!#rO#m:_O~P!#rO!O:`O~O!O:aO~P!#rO!O:aO~O!O:bO~P!#rO!]!wO#c;YO~O!]!wO#c;[O~O#x~!b!r!t!u#U#V'|$_$a$d$u%P%Q%R%X%Z%^%_%a%c~UT#x'|#]}'Y'Z#z'Y']'g~\",\r\n  goto: \"#Hc(ZPPPPPPPP([P(lP*`PPPP-zPP.a3s5g5zP5zPPP5zP7t5zP5zP7xPP8OP8d<uPPPP<yPPPP<y?kPPP?qBSP<yPDgPPPPF`<yPPPPPHX<yPPKYLVPPPPLZMsPM{N|PLV<y<y!$^!'X!+z!+z!/ZPPP!/b!2W<yPPPPPPPPPP!4}P!6`PP<y!7mP<yP<y<y<y<yP<y!:[PP!=TP!?x!@Q!@U!@UP!=QP!@Y!@YP!B}P!CR<y<y!CX!E{5zP5zP5z5zP!GO5z5z!IU5z!Ki5z!Mi5z5z!NV#!]#!]#!a#!]#!iP#!]P5z##e5z#$y5z5z-zPPP#&cPP#&{#&{P#&{P#'b#&{PP#'hP#'_P#'_#'zMw#'_#(i#(o#(r([#(u([P#(|#(|#(|P([P([P([P([PP([P#)S#)VP#)V([P#)ZP#)^P([P([P([P([P([P([([#)d#)n#)t#)z#*Y#*`#*f#*p#*v#+V#+]#+k#+q#+w#,V#,l#.[#.j#.p#.v#.|#/S#/^#/d#/j#/t#0W#0^PPPPPPPP#0dPP#1W#4`PP#5v#5}#6VPP#;X#=l#Ch#Ck#Cn#Cy#C|PP#DP#DT#Dr#Ei#Em#FRPP#FV#F]#FaP#Fd#Fh#Fk#GZ#Gq#Gv#Gy#G|#HS#HV#HZ#H_mhOSj}!n$Z%b%e%f%h*m*r/d/gQ$hmQ$opQ%YyS&U!b+^Q&j!jS(j#y(oQ)e$iQ)r$qQ*^%SQ+d&]S+i&c+kQ+{&kQ-h(qQ/R*_Y0W+m+n+o+p+qS2p.v2rU3x0X0Z0^U5b2u2v2wS6W3z3}S6|5c5dQ7h6YR7y7O$p[ORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$Z$m%Z%^%b%d%e%f%h%l%w%y&R&^&e&o&|'Q(Q)S)Z*i*m*r+R+v+},`,f-q-v.O.Y.y/[/]/^/`/d/g/i0Q0g0q2e2}3b3d3e3t5j5x6R7e8U8h!j'd#]#k&V'v+V+Y,k/x1U2m3m6v9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QQ(z$QQ)j$kQ*`%VQ*g%_Q,V9kQ.T)_Q.`)kQ/Z*eQ2Z.ZQ3V/SQ4X9mQ4}2[R8s9lpeOSjy}!n$Z%X%b%e%f%h*m*r/d/gR*b%Z&WVOSTjkn}!S!W!k!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$Z$m%Z%^%_%b%d%e%f%h%l%y&R&^&e&o&|'Q'v(Q)S)Z*i*m*r+R+V+Y+v+},`,f,k-q-v.O.Y.y/[/]/^/`/d/g/i/x0Q0g0q1U2e2m2}3b3d3e3m3t5j5x6R6v7e8U8h9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;P;Q[!cRU!]!`%w&VQ$alQ$gmS$lp$qv$vrs!r!u$X$t&_&s&v)v)w)x*k+W+f,Q,S/l0iQ%OwQ&g!iQ&i!jS(^#v(hS)d$h$iQ)h$kQ)u$sQ*X%QQ*]%SS+z&j&kQ-T(_Q.X)eQ._)kQ.a)lQ.d)pQ.|*YS/Q*^*_Q0e+{Q1_-PQ2Y.ZQ2^.^Q2c.fQ3U/RQ4d1`Q4|2[Q5P2`Q6p4{R7p6q!Y$em!j$g$h$i&T&i&j&k(i)d)e+Z+h+z+{-a.X/}0T0Y0e1q3w3|6U7f8VQ)]$aQ)}${Q*Q$|Q*[%SQ.h)uQ.{*XU/P*]*^*_Q3P.|S3T/Q/RQ5]2oQ5o3US6z5^5aS7w6{6}Q8_7xR8n8`W#|a$c(w:}S${t%XQ$|uQ$}vR){$y$o#{a!w!y#d#v#x$R$S$W&f'|(V(X(Y(a(e(u(v)Y)[)_)|*P+w,]-W-Y-s-}.P.m.p.x.z1^1g1o1u1|2P2T2f2|3O4g4p4x5f5k6u7R7|9Z9i9n9o9p9q9r9s9t9u9v9{9|9}:O:P:Q:R:S:T:W:X:Y:]:^:_:};U;V;W;Y;[T'}#s(OX({$Q9k9l9mU&Y!b$u+aQ'T!{Q)o$nQ.q*RQ1v-pR5X2k&^cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&V&^&e&o&|'Q'v(Q)S)Z*i*m*r+R+V+Y+v+},`,f,k-q-v.O.Y.y/[/]/^/`/d/g/i/x0Q0g0q1U2e2m2}3b3d3e3m3t5j5x6R6v7e8U8h9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;Q$]#aZ!_!o$_%v%|&x'P'V'W'X'Y'Z'[']'^'_'`'a'c'f'j't)n+P+[+e+|,[,b,e,g,u-t/s/v0f0p0t0u0v0w0x0y0z0{0|0}1O1P1Q1T1Y1z2W3o3r4S4V4W4]4^5Z5}6Q6^6b6c7b7s8S8f8r9U:pT!XQ!Y&_cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&V&^&e&o&|'Q'v(Q)S)Z*i*m*r+R+V+Y+v+},`,f,k-q-v.O.Y.y/[/]/^/`/d/g/i/x0Q0g0q1U2e2m2}3b3d3e3m3t5j5x6R6v7e8U8h9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QQ&W!bR/y+^Y&Q!b&U&]+^+dS(i#y(oS+h&c+kS-a(j(qQ-b(kQ-i(rQ.s*TU0T+i+m+nU0Y+o+p+qS0_+r2tQ1q-hQ1s-jQ1t-kS2o.v2rU3w0W0X0ZQ3{0[Q3|0^S5^2p2wS5a2u2vU6U3x3z3}Q6Z4OS6{5b5cQ6}5dS7f6W6YS7x6|7OQ8V7hQ8`7yQ;X;]R;Z;^lhOSj}!n$Z%b%e%f%h*m*r/d/gQ%j!QS&w!v9YQ)b$fQ*V%OQ*W%PQ+x&hS,Z&|9xS-u)S:UQ.V)cQ.u*UQ/k*tQ/m*uQ/u+XQ0]+oQ0c+yS1{-v:ZQ2U.WS2X.Y:[Q3n/wQ3q0OQ4Q0dQ4z2VQ6O3pQ6S3vQ6[4RQ7`5|Q7c6TQ8R7dQ8e8TR8q8g$W#`Z!_!o%v%|&x'P'V'W'X'Y'Z'[']'^'_'`'a'c'f'j't)n+P+[+e+|,[,b,e,u-t/s/v0f0p0t0u0v0w0x0y0z0{0|0}1O1P1Q1T1Y1z2W3o3r4S4V4W4]4^5Z5}6Q6^6b6c7b7s8S8f8r9U:pW(t#z&{1S8jT)W$_,g$W#_Z!_!o%v%|&x'P'V'W'X'Y'Z'[']'^'_'`'a'c'f'j't)n+P+[+e+|,[,b,e,u-t/s/v0f0p0t0u0v0w0x0y0z0{0|0}1O1P1Q1T1Y1z2W3o3r4S4V4W4]4^5Z5}6Q6^6b6c7b7s8S8f8r9U:pQ'e#`S)V$_,gR-w)W&^cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&V&^&e&o&|'Q'v(Q)S)Z*i*m*r+R+V+Y+v+},`,f,k-q-v.O.Y.y/[/]/^/`/d/g/i/x0Q0g0q1U2e2m2}3b3d3e3m3t5j5x6R6v7e8U8h9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QQ%e{Q%f|Q%h!OQ%i!PR/c*pQ&d!iQ)X$aQ+u&gS-|)])uS0`+s+tW2O-y-z-{.hS4P0a0bU4w2Q2R2SU6n4v5T5UQ7o6oR8Z7rT+j&c+kS+h&c+kU0T+i+m+nU0Y+o+p+qS0_+r2tS2o.v2rU3w0W0X0ZQ3{0[Q3|0^S5^2p2wS5a2u2vU6U3x3z3}Q6Z4OS6{5b5cQ6}5dS7f6W6YS7x6|7OQ8V7hR8`7yS+j&c+kT2q.v2rS&q!q/aQ-S(^Q-_(iS0S+h2oQ1d-TS1l-`-iU3y0Y0_5aQ4c1_S4n1r1tU6X3{3|6}Q6f4dQ6m4qR7i6ZQ!xXS&p!q/aQ)T$YQ)`$dQ)f$jQ,O&qQ-R(^Q-^(iQ-c(lQ.U)aQ.}*ZS0R+h2oS1c-S-TS1k-_-iQ1n-bQ1p-dQ3R/OW3u0S0Y0_5aQ4b1_Q4f1dS4j1l1tQ4o1sQ5m3SW6V3y3{3|6}S6e4c4dS6i4k:`Q6k4nQ6x5[Q7V5nS7g6X6ZQ7k6fS7l6j:aQ7n6mQ7u6yQ8O7WQ8W7iS8Y7m:bQ8]7vQ8l8^Q8x8mQ9P8yQ:i:dQ:t:nQ:u:oQ:y;XR:{;Z$rWORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&^&e&o&|'Q(Q)S)Z*i*m*r+R+v+},`,f-q-v.O.Y.y/[/]/^/`/d/g/i0Q0g0q2e2}3b3d3e3t5j5x6R7e8U8hS!xn!k!j:c#]#k&V'v+V+Y,k/x1U2m3m6v9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QR:i;P$rXORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&^&e&o&|'Q(Q)S)Z*i*m*r+R+v+},`,f-q-v.O.Y.y/[/]/^/`/d/g/i0Q0g0q2e2}3b3d3e3t5j5x6R7e8U8hQ$Yb!Y$dm!j$g$h$i&T&i&j&k(i)d)e+Z+h+z+{-a.X/}0T0Y0e1q3w3|6U7f8VS$jn!kQ)a$eQ*Z%SW/O*[*]*^*_U3S/P/Q/RQ5[2oS5n3T3UU6y5]5^5aQ7W5oU7v6z6{6}S8^7w7xS8m8_8`Q8y8n!j:d#]#k&V'v+V+Y,k/x1U2m3m6v9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QQ:n;OR:o;P$f]OSTjk}!S!W!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$Z$m%Z%^%b%d%e%f%h%l%y&R&^&e&o&|'Q(Q)S)Z*i*m*r+R+v+},`,f-q-v.O.Y.y/[/]/^/`/d/g/i0Q0g0q2e2}3b3d3e3t5j5x6R7e8U8hY!hRU!]!`%wv$vrs!r!u$X$t&_&s&v)v)w)x*k+W+f,Q,S/l0iQ*h%_!h:e#]#k'v+V+Y,k/x1U2m3m6v9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QR:h&VS&Z!b$uR/{+a$p[ORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$Z$m%Z%^%b%d%e%f%h%l%w%y&R&^&e&o&|'Q(Q)S)Z*i*m*r+R+v+},`,f-q-v.O.Y.y/[/]/^/`/d/g/i0Q0g0q2e2}3b3d3e3t5j5x6R7e8U8h!j'd#]#k&V'v+V+Y,k/x1U2m3m6v9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QR*g%_$roORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&^&e&o&|'Q(Q)S)Z*i*m*r+R+v+},`,f-q-v.O.Y.y/[/]/^/`/d/g/i0Q0g0q2e2}3b3d3e3t5j5x6R7e8U8hQ'T!{!k:f#]#k&V'v+V+Y,k/x1U2m3m6v9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;Q!h#VZ!_$_%v%|&x'P'^'_'`'a'f'j)n+P+e+|,[,b,u-t0f0p1Q1z2W3r4S4V6Q7b8S8f8r9U!R9b'c't+[,g/s/v0t0|0}1O1P1T1Y3o4W4]4^5Z5}6^6b6c7s:p!d#XZ!_$_%v%|&x'P'`'a'f'j)n+P+e+|,[,b,u-t0f0p1Q1z2W3r4S4V6Q7b8S8f8r9U}9d'c't+[,g/s/v0t1O1P1T1Y3o4W4]4^5Z5}6^6b6c7s:p!`#]Z!_$_%v%|&x'P'f'j)n+P+e+|,[,b,u-t0f0p1Q1z2W3r4S4V6Q7b8S8f8r9Un(Y#t&})R,}-V-l-m0n1y4a4r:j:v:w:xx;Q'c't+[,g/s/v0t1T1Y3o4W4]4^5Z5}6^6b6c7s:p!d;U&y'h(](c+t,Y,r-Z-x-{.l.n0b0m1e1i2S2h2j2z4U4h4l4t4y5U5i6]6h6l7T:z:|Y;V8i8v8}9Q9SZ;W1R4[6_7j8X&^cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&V&^&e&o&|'Q'v(Q)S)Z*i*m*r+R+V+Y+v+},`,f,k-q-v.O.Y.y/[/]/^/`/d/g/i/x0Q0g0q1U2e2m2}3b3d3e3m3t5j5x6R6v7e8U8h9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QS#l`#mR1V,j&e_ORSTU`jk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k#m$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&V&^&e&o&|'Q'v(Q)S)Z*i*m*r+R+V+Y+v+},`,f,j,k-q-v.O.Y.y/[/]/^/`/d/g/i/x0Q0g0q1U2e2m2}3b3d3e3m3t5j5x6R6v7e8U8h9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QS#g^#nT'm#i'qT#h^#nT'o#i'q&e`ORSTU`jk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k#m$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&V&^&e&o&|'Q'v(Q)S)Z*i*m*r+R+V+Y+v+},`,f,j,k-q-v.O.Y.y/[/]/^/`/d/g/i/x0Q0g0q1U2e2m2}3b3d3e3m3t5j5x6R6v7e8U8h9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;QT#l`#mQ#o`R'x#m$rbORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$Z$m%Z%^%_%b%d%e%f%h%l%w%y&R&^&e&o&|'Q(Q)S)Z*i*m*r+R+v+},`,f-q-v.O.Y.y/[/]/^/`/d/g/i0Q0g0q2e2}3b3d3e3t5j5x6R7e8U8h!k;O#]#k&V'v+V+Y,k/x1U2m3m6v9T9V9Y9[9]9^9_9`9a9b9c9d9e9f9g9j9w9x9z:U:V:Z:[;Q#RdOSUj}!S!W!n!|#k$Z%Z%^%_%b%d%e%f%h%l&R&e'v)Z*i*m*r+v,k-q.O.y/[/]/^/`/d/g/i1U2e2}3b3d3e5j5xv#za!y$R$S$W(V(X(Y(a(u(v,]-s1^1u:};U;V;W#Q&{!w#d#v#x&f'|(e)Y)[)_)|*P+w-W-Y-}.P.m.p.x.z1g1o1|2P2T2f2|3O4g4p4x5f5k6u7R7|9n9q9t9{:O:R:W:];Y;[Q)P$UQ,v(Rb1S9i9p9s9v9}:Q:T:Y:_c8j9Z9o9r9u9|:P:S:X:^v#wa!y$R$S$W(V(X(Y(a(u(v,]-s1^1u:};U;V;WS(l#y(oQ)Q$VQ-d(m#Q:k!w#d#v#x&f'|(e)Y)[)_)|*P+w-W-Y-}.P.m.p.x.z1g1o1|2P2T2f2|3O4g4p4x5f5k6u7R7|9n9q9t9{:O:R:W:];Y;[b:l9Z9o9r9u9|:P:S:X:^b:m9i9p9s9v9}:Q:T:Y:_Q:q;RQ:r;SR:s;Tv#za!y$R$S$W(V(X(Y(a(u(v,]-s1^1u:};U;V;W#Q&{!w#d#v#x&f'|(e)Y)[)_)|*P+w-W-Y-}.P.m.p.x.z1g1o1|2P2T2f2|3O4g4p4x5f5k6u7R7|9n9q9t9{:O:R:W:];Y;[b1S9i9p9s9v9}:Q:T:Y:_c8j9Z9o9r9u9|:P:S:X:^lfOSj}!n$Z%b%e%f%h*m*r/d/gQ(d#xQ*{%oQ*|%qR1f-W$n#{a!w!y#d#v#x$R$S$W&f'|(V(X(Y(a(e(u(v)Y)[)_)|*P+w,]-W-Y-s-}.P.m.p.x.z1^1g1o1u1|2P2T2f2|3O4g4p4x5f5k6u7R7|9Z9i9n9o9p9q9r9s9t9u9v9{9|9}:O:P:Q:R:S:T:W:X:Y:]:^:_:};U;V;W;Y;[Q*O$|Q.o*QQ2i.nR5W2jT(n#y(oS(n#y(oT2q.v2rQ)`$dQ-c(lQ.U)aQ.}*ZQ3R/OQ5m3SQ6x5[Q7V5nQ7u6yQ8O7WQ8]7vQ8l8^Q8x8mR9P8yn(V#t&})R,}-V-l-m0n1y4a4r:j:v:w:x!d9{&y'h(](c+t,Y,r-Z-x-{.l.n0b0m1e1i2S2h2j2z4U4h4l4t4y5U5i6]6h6l7T:z:|Y9|8i8v8}9Q9SZ9}1R4[6_7j8Xp(X#t&})R,{,}-V-l-m0n1y4a4r:j:v:w:x!f:O&y'h(](c+t,Y,r-Z-x-{.l.n0b0k0m1e1i2S2h2j2z4U4h4l4t4y5U5i6]6h6l7T:z:|[:P8i8v8{8}9Q9S]:Q1R4[6_6`7j8XpeOSjy}!n$Z%X%b%e%f%h*m*r/d/gQ%UxR*i%_peOSjy}!n$Z%X%b%e%f%h*m*r/d/gR%UxQ*S$}R.k){qeOSjy}!n$Z%X%b%e%f%h*m*r/d/gQ.w*XS2{.{.|W5e2x2y2z3PU7Q5g5h5iU7z7P7S7TQ8a7{R8o8bQ%]yR*c%XR3Y/UR7Y5pS$lp$qR.a)lQ%bzR*m%cR*s%iT/e*r/gR*w%jQ*v%jR/n*wQjOQ!nST$^j!nQ(O#sR,s(OQ!YQR%t!YQ!^RU%z!^%{+SQ%{!_R+S%|Q+_&WR/z+_Q,^&}R0o,^Q,a'PS0r,a0sR0s,bQ+k&cR0U+kS!eR$tU&`!e&a+TQ&a!fR+T%}Q+b&ZR/|+bQ&t!sQ,P&rU,T&t,P0jR0j,UQ'q#iR,l'qQ#m`R'w#mQ#cZU'g#c+O9hQ+O9UR9h'tQ-Q(^W1a-Q1b4e6gU1b-R-S-TS4e1c1dR6g4f$Z(T#t&y&}'h(](c(|(})R+t,W,X,Y,r,{,|,}-V-Z-l-m-x-{.l.n0b0k0l0m0n1R1e1i1y2S2h2j2z4U4Y4Z4[4a4h4l4r4t4y5U5i6]6_6`6a6h6l7T7j8X8i8t8u8v8{8|8}9Q9S:j:v:w:x:z:|Q-X(cU1h-X1j4iQ1j-ZR4i1iQ(o#yR-f(oQ(x#}R-o(xQ1}-xR4u1}Q)y$wR.j)yQ2l.qS5Y2l6wR6w5ZQ*U%OR.t*UQ2r.vR5_2rQ/T*`S3W/T5qR5q3YQ.[)hW2].[2_5O6rQ2_._Q5O2^R6r5PQ)m$lR.b)mQ/g*rR3h/gWiOSj!nQ%g}Q)U$ZQ*l%bQ*n%eQ*o%fQ*q%hQ/b*mS/e*r/gR3g/dQ$]gQ%k!RQ%n!TQ%p!UQ%r!VQ)t$rQ)z$xQ*b%]Q*y%mQ-e(nS/W*c*fQ/o*xQ/p*{Q/q*|S0P+h2oQ2b.eQ2g.lQ3Q.}Q3[/YQ3f/cY3s0R0S0Y0_5aQ5S2dQ5V2hQ5l3RQ5r3Z[6P3r3u3y3{3|6}Q6s5QQ7U5mQ7Z5sW7a6Q6V6X6ZQ7q6tQ7t6xQ7}7VU8Q7b7g7iQ8[7uQ8c8OS8d8S8WQ8k8]Q8p8fQ8w8lQ8z8rQ9O8xR9R9PQ$fmQ&h!jU)c$g$h$iQ+X&TU+y&i&j&kQ-](iS.W)d)eQ/w+ZQ0O+hS0d+z+{Q1m-aQ2V.XQ3p/}S3v0T0YQ4R0eQ4m1qS6T3w3|Q7d6UQ8T7fR8g8VS#ua:}R)^$cU#}a$c:}R-n(wQ#taS&y!w)_Q&}!yQ'h#dQ(]#vQ(c#xQ(|$RQ(}$SQ)R$WQ+t&fQ,W9nQ,X9qQ,Y9tQ,r'|Q,{(VQ,|(XQ,}(YQ-V(aQ-Z(eQ-l(uQ-m(vd-x)Y-}.x2P2|4x5f6u7R7|Q-{)[Q.l)|Q.n*PQ0b+wQ0k9{Q0l:OQ0m:RQ0n,]Q1R9iQ1e-WQ1i-YQ1y-sQ2S.PQ2h.mQ2j.pQ2z.zQ4U:WQ4Y9pQ4Z9sQ4[9vQ4a1^Q4h1gQ4l1oQ4r1uQ4t1|Q4y2TQ5U2fQ5i3OQ6]:]Q6_:TQ6`9}Q6a:QQ6h4gQ6l4pQ7T5kQ7j:YQ8X:_Q8i9ZQ8t9oQ8u9rQ8v9uQ8{9|Q8|:PQ8}:SQ9Q:XQ9S:^Q:j:}Q:v;UQ:w;VQ:x;WQ:z;YR:|;[lgOSj}!n$Z%b%e%f%h*m*r/d/gS!pU%dQ%m!SQ%s!WQ'U!|Q'u#kS*f%Z%^Q*j%_Q*x%lQ+U&RQ+s&eQ,p'vQ-z)ZQ/_*iQ0a+vQ1X,kQ1w-qQ2R.OQ2y.yQ3^/[Q3_/]Q3a/^Q3c/`Q3j/iQ4_1UQ5T2eQ5h2}Q5w3bQ5y3dQ5z3eQ7S5jR7]5x!vZOSUj}!S!n!|$Z%Z%^%_%b%d%e%f%h%l&R&e)Z*i*m*r+v-q.O.y/[/]/^/`/d/g/i2e2}3b3d3e5j5xQ!_RQ!oTQ$_kS%v!]%yQ%|!`Q&x!vQ'P!zQ'V#PQ'W#QQ'X#RQ'Y#SQ'Z#TQ'[#UQ']#VQ'^#WQ'_#XQ'`#YQ'a#ZQ'c#]Q'f#bQ'j#eW't#k'v,k1UQ)n$mS+P%w+RS+[&V/xQ+e&^Q+|&oQ,[&|Q,b'QQ,e9TQ,g9VQ,u(QQ-t)SQ/s+VQ/v+YQ0f+}Q0p,`Q0t9YQ0u9[Q0v9]Q0w9^Q0x9_Q0y9`Q0z9aQ0{9bQ0|9cQ0}9dQ1O9eQ1P9fQ1Q,fQ1T9jQ1Y9gQ1z-vQ2W.YQ3o9wQ3r0QQ4S0gQ4V0qQ4W9xQ4]9zQ4^:UQ5Z2mQ5}3mQ6Q3tQ6^:VQ6b:ZQ6c:[Q7b6RQ7s6vQ8S7eQ8f8UQ8r8hQ9U!WR:p;QR!aRR&X!bS&T!b+^S+Z&U&]R/}+dR'O!yR'R!zT!tU$XS!sU$XU$wrs*kS&r!r!uQ,R&sQ,U&vQ.i)xS0h,Q,SR4T0i`!dR!]!`$t%w&_)v+fh!qUrs!r!u$X&s&v)x,Q,S0iQ/a*kQ/t+WQ3l/lT:g&V)wT!gR$tS!fR$tS%x!]&_S%}!`)vS+Q%w+fT+]&V)wT&[!b$uQ#i^R'z#nT'p#i'qR1W,jT(`#v(hR(f#xQ-y)YQ2Q-}Q2x.xQ4v2PQ5g2|Q6o4xQ7P5fQ7r6uQ7{7RR8b7|lhOSj}!n$Z%b%e%f%h*m*r/d/gQ%[yR*b%XV$xrs*kR.r*RR*a%VQ$ppR)s$qR)i$kT%`z%cT%az%cT/f*r/g\",\r\n  nodeNames: \"⚠ ArithOp ArithOp InterpolationStart extends LineComment BlockComment Script ExportDeclaration export Star as VariableName String from ; default FunctionDeclaration async function VariableDefinition TypeParamList TypeDefinition ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString Interpolation null super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression await yield delete LogicOp BitOp ParenthesizedExpression ClassExpression class extends ClassBody MethodDeclaration Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression PrivatePropertyName BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXStartTag JSXSelfClosingTag JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody MethodDeclaration AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement\",\r\n  maxTerm: 332,\r\n  context: trackNewline,\r\n  nodeProps: [\r\n    [\"closedBy\", 3,\"InterpolationEnd\",40,\"]\",51,\"}\",66,\")\",132,\"JSXSelfCloseEndTag JSXEndTag\",146,\"JSXEndTag\"],\r\n    [\"group\", -26,8,15,17,58,184,188,191,192,194,197,200,211,213,219,221,223,225,228,234,240,242,244,246,248,250,251,\"Statement\",-30,12,13,24,27,28,41,43,44,45,47,52,60,68,74,75,91,92,101,103,119,122,124,125,126,127,129,130,148,149,151,\"Expression\",-22,23,25,29,32,34,152,154,156,157,159,160,161,163,164,165,167,168,169,178,180,182,183,\"Type\",-3,79,85,90,\"ClassItem\"],\r\n    [\"openedBy\", 30,\"InterpolationStart\",46,\"[\",50,\"{\",65,\"(\",131,\"JSXStartTag\",141,\"JSXStartTag JSXStartCloseTag\"]\r\n  ],\r\n  propSources: [jsHighlight],\r\n  skippedNodes: [0,5,6],\r\n  repeatNodeCount: 28,\r\n  tokenData: \"!C}~R!`OX%TXY%cYZ'RZ[%c[]%T]^'R^p%Tpq%cqr'crs(kst0htu2`uv4pvw5ewx6cxy<yyz=Zz{=k{|>k|}?O}!O>k!O!P?`!P!QCl!Q!R!0[!R![!1q![!]!7s!]!^!8V!^!_!8g!_!`!9d!`!a!:[!a!b!<R!b!c%T!c!}2`!}#O!=d#O#P%T#P#Q!=t#Q#R!>U#R#S2`#S#T!>i#T#o2`#o#p!>y#p#q!?O#q#r!?f#r#s!?x#s$f%T$f$g%c$g#BY2`#BY#BZ!@Y#BZ$IS2`$IS$I_!@Y$I_$I|2`$I|$I}!Bq$I}$JO!Bq$JO$JT2`$JT$JU!@Y$JU$KV2`$KV$KW!@Y$KW&FU2`&FU&FV!@Y&FV?HT2`?HT?HU!@Y?HU~2`W%YR$UWO!^%T!_#o%T#p~%T7Z%jg$UW'Y7ROX%TXY%cYZ%TZ[%c[p%Tpq%cq!^%T!_#o%T#p$f%T$f$g%c$g#BY%T#BY#BZ%c#BZ$IS%T$IS$I_%c$I_$JT%T$JT$JU%c$JU$KV%T$KV$KW%c$KW&FU%T&FU&FV%c&FV?HT%T?HT?HU%c?HU~%T7Z'YR$UW'Z7RO!^%T!_#o%T#p~%T$T'jS$UW!j#{O!^%T!_!`'v!`#o%T#p~%T$O'}S#e#v$UWO!^%T!_!`(Z!`#o%T#p~%T$O(bR#e#v$UWO!^%T!_#o%T#p~%T'u(rZ$UW]!ROY(kYZ)eZr(krs*rs!^(k!^!_+U!_#O(k#O#P-b#P#o(k#o#p+U#p~(k&r)jV$UWOr)ers*Ps!^)e!^!_*a!_#o)e#o#p*a#p~)e&r*WR$P&j$UWO!^%T!_#o%T#p~%T&j*dROr*ars*ms~*a&j*rO$P&j'u*{R$P&j$UW]!RO!^%T!_#o%T#p~%T'm+ZV]!ROY+UYZ*aZr+Urs+ps#O+U#O#P+w#P~+U'm+wO$P&j]!R'm+zROr+Urs,Ts~+U'm,[U$P&j]!ROY,nZr,nrs-Vs#O,n#O#P-[#P~,n!R,sU]!ROY,nZr,nrs-Vs#O,n#O#P-[#P~,n!R-[O]!R!R-_PO~,n'u-gV$UWOr(krs-|s!^(k!^!_+U!_#o(k#o#p+U#p~(k'u.VZ$P&j$UW]!ROY.xYZ%TZr.xrs/rs!^.x!^!_,n!_#O.x#O#P0S#P#o.x#o#p,n#p~.x!Z/PZ$UW]!ROY.xYZ%TZr.xrs/rs!^.x!^!_,n!_#O.x#O#P0S#P#o.x#o#p,n#p~.x!Z/yR$UW]!RO!^%T!_#o%T#p~%T!Z0XT$UWO!^.x!^!_,n!_#o.x#o#p,n#p~.x2k0mZ$UWOt%Ttu1`u!^%T!_!c%T!c!}1`!}#R%T#R#S1`#S#T%T#T#o1`#p$g%T$g~1`2k1g]$UW'o2cOt%Ttu1`u!Q%T!Q![1`![!^%T!_!c%T!c!}1`!}#R%T#R#S1`#S#T%T#T#o1`#p$g%T$g~1`7Z2k_$UW#zS']%k'g2bOt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$g%T$g~2`[3q_$UW#zSOt%Ttu3ju}%T}!O3j!O!Q%T!Q![3j![!^%T!_!c%T!c!}3j!}#R%T#R#S3j#S#T%T#T#o3j#p$g%T$g~3j$O4wS#^#v$UWO!^%T!_!`5T!`#o%T#p~%T$O5[R$UW#o#vO!^%T!_#o%T#p~%T6d5lU'x6[$UWOv%Tvw6Ow!^%T!_!`5T!`#o%T#p~%T$O6VS$UW#i#vO!^%T!_!`5T!`#o%T#p~%T'u6jZ$UW]!ROY6cYZ7]Zw6cwx*rx!^6c!^!_8T!_#O6c#O#P:T#P#o6c#o#p8T#p~6c&r7bV$UWOw7]wx*Px!^7]!^!_7w!_#o7]#o#p7w#p~7]&j7zROw7wwx*mx~7w'm8YV]!ROY8TYZ7wZw8Twx+px#O8T#O#P8o#P~8T'm8rROw8Twx8{x~8T'm9SU$P&j]!ROY9fZw9fwx-Vx#O9f#O#P9}#P~9f!R9kU]!ROY9fZw9fwx-Vx#O9f#O#P9}#P~9f!R:QPO~9f'u:YV$UWOw6cwx:ox!^6c!^!_8T!_#o6c#o#p8T#p~6c'u:xZ$P&j$UW]!ROY;kYZ%TZw;kwx/rx!^;k!^!_9f!_#O;k#O#P<e#P#o;k#o#p9f#p~;k!Z;rZ$UW]!ROY;kYZ%TZw;kwx/rx!^;k!^!_9f!_#O;k#O#P<e#P#o;k#o#p9f#p~;k!Z<jT$UWO!^;k!^!_9f!_#o;k#o#p9f#p~;k%V=QR!d$}$UWO!^%T!_#o%T#p~%TZ=bR!cR$UWO!^%T!_#o%T#p~%T5s=tU'^2s#_#v$UWOz%Tz{>W{!^%T!_!`5T!`#o%T#p~%T$O>_S#[#v$UWO!^%T!_!`5T!`#o%T#p~%T$u>rSj$m$UWO!^%T!_!`5T!`#o%T#p~%T&i?VR!R&a$UWO!^%T!_#o%T#p~%T7Z?gVu6`$UWO!O%T!O!P?|!P!Q%T!Q![@r![!^%T!_#o%T#p~%Ty@RT$UWO!O%T!O!P@b!P!^%T!_#o%T#p~%Ty@iR!Qq$UWO!^%T!_#o%T#p~%Ty@yZ$UWkqO!Q%T!Q![@r![!^%T!_!g%T!g!hAl!h#R%T#R#S@r#S#X%T#X#YAl#Y#o%T#p~%TyAqZ$UWO{%T{|Bd|}%T}!OBd!O!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%TyBiV$UWO!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%TyCVV$UWkqO!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%T7ZCs`$UW#]#vOYDuYZ%TZzDuz{Jl{!PDu!P!Q!-e!Q!^Du!^!_Fx!_!`!.^!`!a!/]!a!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~DuXD|[$UW}POYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~DuXEy_$UW}PO!^%T!_#Z%T#Z#[Er#[#]%T#]#^Er#^#a%T#a#bEr#b#g%T#g#hEr#h#i%T#i#jEr#j#m%T#m#nEr#n#o%T#p~%TPF}V}POYFxZ!PFx!P!QGd!Q!}Fx!}#OG{#O#PHh#P~FxPGiU}P#Z#[Gd#]#^Gd#a#bGd#g#hGd#i#jGd#m#nGdPHOTOYG{Z#OG{#O#PH_#P#QFx#Q~G{PHbQOYG{Z~G{PHkQOYFxZ~FxXHvY$UWOYHqYZ%TZ!^Hq!^!_G{!_#OHq#O#PIf#P#QDu#Q#oHq#o#pG{#p~HqXIkV$UWOYHqYZ%TZ!^Hq!^!_G{!_#oHq#o#pG{#p~HqXJVV$UWOYDuYZ%TZ!^Du!^!_Fx!_#oDu#o#pFx#p~Du7ZJs^$UW}POYJlYZKoZzJlz{NQ{!PJl!P!Q!,R!Q!^Jl!^!_!!]!_!}Jl!}#O!'|#O#P!+a#P#oJl#o#p!!]#p~Jl7ZKtV$UWOzKoz{LZ{!^Ko!^!_M]!_#oKo#o#pM]#p~Ko7ZL`X$UWOzKoz{LZ{!PKo!P!QL{!Q!^Ko!^!_M]!_#oKo#o#pM]#p~Ko7ZMSR$UWU7RO!^%T!_#o%T#p~%T7RM`ROzM]z{Mi{~M]7RMlTOzM]z{Mi{!PM]!P!QM{!Q~M]7RNQOU7R7ZNX^$UW}POYJlYZKoZzJlz{NQ{!PJl!P!Q! T!Q!^Jl!^!_!!]!_!}Jl!}#O!'|#O#P!+a#P#oJl#o#p!!]#p~Jl7Z! ^_$UWU7R}PO!^%T!_#Z%T#Z#[Er#[#]%T#]#^Er#^#a%T#a#bEr#b#g%T#g#hEr#h#i%T#i#jEr#j#m%T#m#nEr#n#o%T#p~%T7R!!bY}POY!!]YZM]Zz!!]z{!#Q{!P!!]!P!Q!&x!Q!}!!]!}#O!$`#O#P!&f#P~!!]7R!#VY}POY!!]YZM]Zz!!]z{!#Q{!P!!]!P!Q!#u!Q!}!!]!}#O!$`#O#P!&f#P~!!]7R!#|UU7R}P#Z#[Gd#]#^Gd#a#bGd#g#hGd#i#jGd#m#nGd7R!$cWOY!$`YZM]Zz!$`z{!${{#O!$`#O#P!&S#P#Q!!]#Q~!$`7R!%OYOY!$`YZM]Zz!$`z{!${{!P!$`!P!Q!%n!Q#O!$`#O#P!&S#P#Q!!]#Q~!$`7R!%sTU7ROYG{Z#OG{#O#PH_#P#QFx#Q~G{7R!&VTOY!$`YZM]Zz!$`z{!${{~!$`7R!&iTOY!!]YZM]Zz!!]z{!#Q{~!!]7R!&}_}POzM]z{Mi{#ZM]#Z#[!&x#[#]M]#]#^!&x#^#aM]#a#b!&x#b#gM]#g#h!&x#h#iM]#i#j!&x#j#mM]#m#n!&x#n~M]7Z!(R[$UWOY!'|YZKoZz!'|z{!(w{!^!'|!^!_!$`!_#O!'|#O#P!*o#P#QJl#Q#o!'|#o#p!$`#p~!'|7Z!(|^$UWOY!'|YZKoZz!'|z{!(w{!P!'|!P!Q!)x!Q!^!'|!^!_!$`!_#O!'|#O#P!*o#P#QJl#Q#o!'|#o#p!$`#p~!'|7Z!*PY$UWU7ROYHqYZ%TZ!^Hq!^!_G{!_#OHq#O#PIf#P#QDu#Q#oHq#o#pG{#p~Hq7Z!*tX$UWOY!'|YZKoZz!'|z{!(w{!^!'|!^!_!$`!_#o!'|#o#p!$`#p~!'|7Z!+fX$UWOYJlYZKoZzJlz{NQ{!^Jl!^!_!!]!_#oJl#o#p!!]#p~Jl7Z!,Yc$UW}POzKoz{LZ{!^Ko!^!_M]!_#ZKo#Z#[!,R#[#]Ko#]#^!,R#^#aKo#a#b!,R#b#gKo#g#h!,R#h#iKo#i#j!,R#j#mKo#m#n!,R#n#oKo#o#pM]#p~Ko7Z!-lV$UWT7ROY!-eYZ%TZ!^!-e!^!_!.R!_#o!-e#o#p!.R#p~!-e7R!.WQT7ROY!.RZ~!.R$P!.g[$UW#o#v}POYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~Du]!/f[#wS$UW}POYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~Duy!0cd$UWkqO!O%T!O!P@r!P!Q%T!Q![!1q![!^%T!_!g%T!g!hAl!h#R%T#R#S!1q#S#U%T#U#V!3X#V#X%T#X#YAl#Y#b%T#b#c!2w#c#d!4m#d#l%T#l#m!5{#m#o%T#p~%Ty!1x_$UWkqO!O%T!O!P@r!P!Q%T!Q![!1q![!^%T!_!g%T!g!hAl!h#R%T#R#S!1q#S#X%T#X#YAl#Y#b%T#b#c!2w#c#o%T#p~%Ty!3OR$UWkqO!^%T!_#o%T#p~%Ty!3^W$UWO!Q%T!Q!R!3v!R!S!3v!S!^%T!_#R%T#R#S!3v#S#o%T#p~%Ty!3}Y$UWkqO!Q%T!Q!R!3v!R!S!3v!S!^%T!_#R%T#R#S!3v#S#b%T#b#c!2w#c#o%T#p~%Ty!4rV$UWO!Q%T!Q!Y!5X!Y!^%T!_#R%T#R#S!5X#S#o%T#p~%Ty!5`X$UWkqO!Q%T!Q!Y!5X!Y!^%T!_#R%T#R#S!5X#S#b%T#b#c!2w#c#o%T#p~%Ty!6QZ$UWO!Q%T!Q![!6s![!^%T!_!c%T!c!i!6s!i#R%T#R#S!6s#S#T%T#T#Z!6s#Z#o%T#p~%Ty!6z]$UWkqO!Q%T!Q![!6s![!^%T!_!c%T!c!i!6s!i#R%T#R#S!6s#S#T%T#T#Z!6s#Z#b%T#b#c!2w#c#o%T#p~%T%w!7|R!]V$UW#m%hO!^%T!_#o%T#p~%T!P!8^R_w$UWO!^%T!_#o%T#p~%T6i!8rR'bd!a0`#x&s'|P!P!Q!8{!^!_!9Q!_!`!9_W!9QO$WW#v!9VP#`#v!_!`!9Y#v!9_O#o#v#v!9dO#a#v%w!9kT!{%o$UWO!^%T!_!`'v!`!a!9z!a#o%T#p~%T$P!:RR#W#w$UWO!^%T!_#o%T#p~%T%w!:gT'a!s#a#v$RS$UWO!^%T!_!`!:v!`!a!;W!a#o%T#p~%T$O!:}R#a#v$UWO!^%T!_#o%T#p~%T$O!;_T#`#v$UWO!^%T!_!`5T!`!a!;n!a#o%T#p~%T$O!;uS#`#v$UWO!^%T!_!`5T!`#o%T#p~%T6i!<YV'p6a$UWO!O%T!O!P!<o!P!^%T!_!a%T!a!b!=P!b#o%T#p~%T)z!<vRv)r$UWO!^%T!_#o%T#p~%T$O!=WS$UW#j#vO!^%T!_!`5T!`#o%T#p~%T7V!=kRx6}$UWO!^%T!_#o%T#p~%TZ!={R!OR$UWO!^%T!_#o%T#p~%T$O!>]S#g#v$UWO!^%T!_!`5T!`#o%T#p~%T$P!>pR$UW'f#wO!^%T!_#o%T#p~%T~!?OO!T~6d!?VT'w6[$UWO!^%T!_!`5T!`#o%T#p#q!=P#q~%T5g!?oR!S5]nQ$UWO!^%T!_#o%T#p~%TX!@PR!kP$UWO!^%T!_#o%T#p~%T7Z!@gr$UW'Y7R#zS']%k'g2bOX%TXY%cYZ%TZ[%c[p%Tpq%cqt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$f%T$f$g%c$g#BY2`#BY#BZ!@Y#BZ$IS2`$IS$I_!@Y$I_$JT2`$JT$JU!@Y$JU$KV2`$KV$KW!@Y$KW&FU2`&FU&FV!@Y&FV?HT2`?HT?HU!@Y?HU~2`7Z!CO_$UW'Z7R#zS']%k'g2bOt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$g%T$g~2`\",\r\n  tokenizers: [noSemicolon, incdecToken, template, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, insertSemicolon],\r\n  topRules: {\"Script\":[0,7]},\r\n  dialects: {jsx: 11707, ts: 11709},\r\n  dynamicPrecedences: {\"149\":1,\"176\":1},\r\n  specialized: [{term: 289, get: (value, stack) => (tsExtends(value, stack) << 1)},{term: 289, get: value => spec_identifier[value] || -1},{term: 299, get: value => spec_word[value] || -1},{term: 63, get: value => spec_LessThan[value] || -1}],\r\n  tokenPrec: 11730\r\n});\r\n\r\nconst snippets = [\r\n    (0,_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__.snippetCompletion)(\"function ${name}(${params}) {\\n\\t${}\\n}\", {\r\n        label: \"function\",\r\n        detail: \"definition\",\r\n        type: \"keyword\"\r\n    }),\r\n    (0,_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__.snippetCompletion)(\"for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\\n\\t${}\\n}\", {\r\n        label: \"for\",\r\n        detail: \"loop\",\r\n        type: \"keyword\"\r\n    }),\r\n    (0,_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__.snippetCompletion)(\"for (let ${name} of ${collection}) {\\n\\t${}\\n}\", {\r\n        label: \"for\",\r\n        detail: \"of loop\",\r\n        type: \"keyword\"\r\n    }),\r\n    (0,_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__.snippetCompletion)(\"try {\\n\\t${}\\n} catch (${error}) {\\n\\t${}\\n}\", {\r\n        label: \"try\",\r\n        detail: \"block\",\r\n        type: \"keyword\"\r\n    }),\r\n    (0,_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__.snippetCompletion)(\"class ${name} {\\n\\tconstructor(${params}) {\\n\\t\\t${}\\n\\t}\\n}\", {\r\n        label: \"class\",\r\n        detail: \"definition\",\r\n        type: \"keyword\"\r\n    }),\r\n    (0,_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__.snippetCompletion)(\"import {${names}} from \\\"${module}\\\"\\n${}\", {\r\n        label: \"import\",\r\n        detail: \"named\",\r\n        type: \"keyword\"\r\n    }),\r\n    (0,_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__.snippetCompletion)(\"import ${name} from \\\"${module}\\\"\\n${}\", {\r\n        label: \"import\",\r\n        detail: \"default\",\r\n        type: \"keyword\"\r\n    })\r\n];\r\n\r\nconst javascriptLanguage = _language_index_js__WEBPACK_IMPORTED_MODULE_2__.LRLanguage.define({\r\n    parser: parser.configure({\r\n        props: [\r\n            _language_index_js__WEBPACK_IMPORTED_MODULE_2__.indentNodeProp.add({\r\n                IfStatement: (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.continuedIndent)({ except: /^\\s*({|else\\b)/ }),\r\n                TryStatement: (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.continuedIndent)({ except: /^\\s*({|catch\\b|finally\\b)/ }),\r\n                LabeledStatement: _language_index_js__WEBPACK_IMPORTED_MODULE_2__.flatIndent,\r\n                SwitchBody: context => {\r\n                    let after = context.textAfter, closed = /^\\s*\\}/.test(after), isCase = /^\\s*(case|default)\\b/.test(after);\r\n                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\r\n                },\r\n                Block: (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.delimitedIndent)({ closing: \"}\" }),\r\n                ArrowFunction: cx => cx.baseIndent + cx.unit,\r\n                \"TemplateString BlockComment\": () => -1,\r\n                \"Statement Property\": (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.continuedIndent)({ except: /^{/ }),\r\n                JSXElement(context) {\r\n                    let closed = /^\\s*<\\//.test(context.textAfter);\r\n                    return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\r\n                },\r\n                JSXEscape(context) {\r\n                    let closed = /\\s*\\}/.test(context.textAfter);\r\n                    return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\r\n                },\r\n                \"JSXOpenTag JSXSelfClosingTag\"(context) {\r\n                    return context.column(context.node.from) + context.unit;\r\n                }\r\n            }),\r\n            _language_index_js__WEBPACK_IMPORTED_MODULE_2__.foldNodeProp.add({\r\n                \"Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression\": _language_index_js__WEBPACK_IMPORTED_MODULE_2__.foldInside,\r\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\r\n            })\r\n        ]\r\n    }),\r\n    languageData: {\r\n        closeBrackets: { brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"] },\r\n        commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\r\n        indentOnInput: /^\\s*(?:case |default:|\\{|\\}|<\\/)$/,\r\n        wordChars: \"$\"\r\n    }\r\n});\r\n\r\nconst typescriptLanguage = javascriptLanguage.configure({ dialect: \"ts\" });\r\nconst jsxLanguage = javascriptLanguage.configure({ dialect: \"jsx\" });\r\nconst tsxLanguage = javascriptLanguage.configure({ dialect: \"jsx ts\" });\r\n\r\nfunction javascript(config = {}) {\r\n    let lang = config.jsx ? (config.typescript ? tsxLanguage : jsxLanguage) : config.typescript ? typescriptLanguage : javascriptLanguage;\r\n    return new _language_index_js__WEBPACK_IMPORTED_MODULE_2__.LanguageSupport(lang, [\r\n        javascriptLanguage.data.of({\r\n            autocomplete: (0,_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__.ifNotIn)([\"LineComment\", \"BlockComment\", \"String\"], (0,_autocomplete_index_js__WEBPACK_IMPORTED_MODULE_5__.completeFromList)(snippets))\r\n        }),\r\n        config.jsx ? autoCloseTags : [],\r\n    ]);\r\n}\r\n\r\nfunction elementName(doc, tree, max = doc.length) {\r\n    if (!tree) return \"\";\r\n    let name = tree.getChild(\"JSXIdentifier\");\r\n    return name ? doc.sliceString(name.from, Math.min(name.to, max)) : \"\";\r\n}\r\n\r\nconst android = typeof navigator == \"object\" && /Android\\b/.test(navigator.userAgent);\r\n\r\n// Extension that will automatically insert JSX close tags when a `>` or `/` is typed.\r\nconst autoCloseTags = _view_index_js__WEBPACK_IMPORTED_MODULE_4__.EditorView.inputHandler.of((view, from, to, text) => {\r\n    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly ||\r\n        from != to || (text != \">\" && text != \"/\") ||\r\n        !javascriptLanguage.isActiveAt(view.state, from, -1))\r\n        return false;\r\n    let { state } = view;\r\n    let changes = state.changeByRange(range => {\r\n        var _a, _b, _c;\r\n        let { head } = range, around = (0,_language_index_js__WEBPACK_IMPORTED_MODULE_2__.syntaxTree)(state).resolveInner(head, -1), name;\r\n        if (around.name == \"JSXStartTag\")\r\n            around = around.parent;\r\n        if (text == \">\" && around.name == \"JSXFragmentTag\") {\r\n            return { range: _state_index_js__WEBPACK_IMPORTED_MODULE_3__.EditorSelection.cursor(head + 1), changes: { from: head, insert: `><>` } };\r\n        } else if (text == \">\" && around.name == \"JSXIdentifier\") {\r\n            if (((_b = (_a = around.parent) === null || _a === void 0 ? void 0 : _a.lastChild) === null || _b === void 0 ? void 0 : _b.name) != \"JSXEndTag\" && (name = elementName(state.doc, around.parent, head)))\r\n                return { range: _state_index_js__WEBPACK_IMPORTED_MODULE_3__.EditorSelection.cursor(head + 1), changes: { from: head, insert: `></${name}>` } };\r\n        } else if (text == \"/\" && around.name == \"JSXFragmentTag\") {\r\n            let empty = around.parent, base = empty === null || empty === void 0 ? void 0 : empty.parent;\r\n            if (empty.from == head - 1 && ((_c = base.lastChild) === null || _c === void 0 ? void 0 : _c.name) != \"JSXEndTag\" && (name = elementName(state.doc, base === null || base === void 0 ? void 0 : base.firstChild, head))) {\r\n                let insert = `/${name}>`;\r\n                return { range: _state_index_js__WEBPACK_IMPORTED_MODULE_3__.EditorSelection.cursor(head + insert.length), changes: { from: head, insert } };\r\n            }\r\n        }\r\n        return { range };\r\n    });\r\n    if (changes.changes.empty)\r\n        return false;\r\n    view.dispatch(changes, { userEvent: \"input.type\", scrollIntoView: true });\r\n    return true;\r\n});\r\n\r\nfunction esLint(eslint, config) {\r\n    if (!config) {\r\n        config = {\r\n            parserOptions: { ecmaVersion: 2019, sourceType: \"module\" },\r\n            env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },\r\n            rules: {}\r\n        };\r\n        eslint.getRules().forEach((desc, name) => {\r\n            if (desc.meta.docs.recommended)\r\n                config.rules[name] = 2;\r\n        });\r\n    }\r\n    return (view) => {\r\n        let { state } = view, found = [];\r\n        for (let { from, to } of javascriptLanguage.findRegions(state)) {\r\n            let fromLine = state.doc.lineAt(from), offset = { line: fromLine.number - 1, col: from - fromLine.from, pos: from };\r\n            for (let d of eslint.verify(state.sliceDoc(from, to), config))\r\n                found.push(translateDiagnostic(d, state.doc, offset));\r\n        }\r\n        return found;\r\n    };\r\n}\r\n\r\nfunction mapPos(line, col, doc, offset) {\r\n    return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);\r\n}\r\n\r\nfunction translateDiagnostic(input, doc, offset) {\r\n    let start = mapPos(input.line, input.column, doc, offset);\r\n    let result = {\r\n        from: start,\r\n        to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,\r\n        message: input.message,\r\n        source: input.ruleId ? \"jshint:\" + input.ruleId : \"jshint\",\r\n        severity: input.severity == 1 ? \"warning\" : \"error\",\r\n    };\r\n    if (input.fix) {\r\n        let { range, text } = input.fix, from = range[0] + offset.pos - start, to = range[1] + offset.pos - start;\r\n        result.actions = [{\r\n            name: \"fix\",\r\n            apply(view, start) {\r\n                view.dispatch({ changes: { from: start + from, to: start + to, insert: text }, scrollIntoView: true });\r\n            }\r\n        }];\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/javascript.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/language/fold.js":
/*!****************************************************!*\
  !*** ./sys/public/js/editor/dist/language/fold.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"codeFolding\": () => (/* binding */ codeFolding),\n/* harmony export */   \"foldAll\": () => (/* binding */ foldAll),\n/* harmony export */   \"foldCode\": () => (/* binding */ foldCode),\n/* harmony export */   \"foldEffect\": () => (/* binding */ foldEffect),\n/* harmony export */   \"foldGutter\": () => (/* binding */ foldGutter),\n/* harmony export */   \"foldInside\": () => (/* binding */ foldInside),\n/* harmony export */   \"foldKeymap\": () => (/* binding */ foldKeymap),\n/* harmony export */   \"foldNodeProp\": () => (/* binding */ foldNodeProp),\n/* harmony export */   \"foldService\": () => (/* binding */ foldService),\n/* harmony export */   \"foldable\": () => (/* binding */ foldable),\n/* harmony export */   \"foldedRanges\": () => (/* binding */ foldedRanges),\n/* harmony export */   \"unfoldAll\": () => (/* binding */ unfoldAll),\n/* harmony export */   \"unfoldCode\": () => (/* binding */ unfoldCode),\n/* harmony export */   \"unfoldEffect\": () => (/* binding */ unfoldEffect)\n/* harmony export */ });\n/* harmony import */ var _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lezer/common/index.js */ \"./sys/public/js/editor/dist/lezer/common/index.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _language_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./language.js */ \"./sys/public/js/editor/dist/language/language.js\");\n\r\n\r\n\r\n\r\n/**\r\n * A facet that registers a code folding service. When called with the extent of a line,\r\n * such a function should return a foldable range that starts on that line (but continues\r\n * beyond it), if one can be found.\r\n */\r\nconst foldService = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.Facet.define();\r\n/**\r\n * This node prop is used to associate folding information with syntax node types. Given a\r\n * syntax node, it should check whether that tree is foldable and return the range that can\r\n * be collapsed when it is.\r\n */\r\nconst foldNodeProp = new _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp();\r\n/**\r\n * [Fold](#language.foldNodeProp) function that folds everything but the first and the last\r\n * child of a syntax node. Useful for nodes that start and end with delimiters.\r\n */\r\nfunction foldInside(node) {\r\n    let first = node.firstChild, last = node.lastChild;\r\n    return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;\r\n}\r\nfunction syntaxFolding(state, start, end) {\r\n    let tree = (0,_language_js__WEBPACK_IMPORTED_MODULE_3__.syntaxTree)(state);\r\n    if (tree.length < end)\r\n        return null;\r\n    let inner = tree.resolveInner(end);\r\n    let found = null;\r\n    for (let cur = inner; cur; cur = cur.parent) {\r\n        if (cur.to <= end || cur.from > end)\r\n            continue;\r\n        if (found && cur.from < start)\r\n            break;\r\n        let prop = cur.type.prop(foldNodeProp);\r\n        if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {\r\n            let value = prop(cur, state);\r\n            if (value && value.from <= end && value.from >= start && value.to > end)\r\n                found = value;\r\n        }\r\n    }\r\n    return found;\r\n}\r\nfunction isUnfinished(node) {\r\n    let ch = node.lastChild;\r\n    return ch && ch.to == node.to && ch.type.isError;\r\n}\r\n/**\r\n * Check whether the given line is foldable. First asks any fold services registered through\r\n * {@link foldService}, and if none of them return a result, tries to query the\r\n * [fold node prop]{@link foldNodeProp} of syntax nodes that cover the end of the line.\r\n */\r\nfunction foldable(state, lineStart, lineEnd) {\r\n    for (let service of state.facet(foldService)) {\r\n        let result = service(state, lineStart, lineEnd);\r\n        if (result)\r\n            return result;\r\n    }\r\n    return syntaxFolding(state, lineStart, lineEnd);\r\n}\r\nfunction mapRange(range, mapping) {\r\n    let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);\r\n    return from >= to ? undefined : { from, to };\r\n}\r\n/**\r\n * State effect that can be attached to a transaction to fold the given range. (You probably\r\n * only need this in exceptional circumstances—usually you'll just want to let\r\n * {@link foldCode} and the [fold gutter]{@link foldGutter} create the transactions.)\r\n */\r\nconst foldEffect = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define({ map: mapRange });\r\n/** State effect that unfolds the given range (if it was folded). */\r\nconst unfoldEffect = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define({ map: mapRange });\r\nfunction selectedLines(view) {\r\n    let lines = [];\r\n    for (let { head } of view.state.selection.ranges) {\r\n        if (lines.some(l => l.from <= head && l.to >= head))\r\n            continue;\r\n        lines.push(view.lineBlockAt(head));\r\n    }\r\n    return lines;\r\n}\r\nconst foldState = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create() {\r\n        return _view_index_js__WEBPACK_IMPORTED_MODULE_2__.Decoration.none;\r\n    },\r\n    update(folded, tr) {\r\n        folded = folded.map(tr.changes);\r\n        for (let e of tr.effects) {\r\n            if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to))\r\n                folded = folded.update({ add: [foldWidget.range(e.value.from, e.value.to)] });\r\n            else if (e.is(unfoldEffect))\r\n                folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,\r\n                    filterFrom: e.value.from, filterTo: e.value.to });\r\n        }\r\n        // Clear folded ranges that cover the selection head\r\n        if (tr.selection) {\r\n            let onSelection = false, { head } = tr.selection.main;\r\n            folded.between(head, head, (a, b) => { if (a < head && b > head)\r\n                onSelection = true; });\r\n            if (onSelection)\r\n                folded = folded.update({\r\n                    filterFrom: head,\r\n                    filterTo: head,\r\n                    filter: (a, b) => b <= head || a >= head\r\n                });\r\n        }\r\n        return folded;\r\n    },\r\n    provide: f => _view_index_js__WEBPACK_IMPORTED_MODULE_2__.EditorView.decorations.from(f)\r\n});\r\n/** Get a [range set](#state.RangeSet) containing the folded range in the given state. */\r\nfunction foldedRanges(state) {\r\n    return state.field(foldState, false) || _state_index_js__WEBPACK_IMPORTED_MODULE_1__.RangeSet.empty;\r\n}\r\nfunction findFold(state, from, to) {\r\n    var _a;\r\n    let found = null;\r\n    (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {\r\n        if (!found || found.from > from)\r\n            found = { from, to };\r\n    });\r\n    return found;\r\n}\r\nfunction foldExists(folded, from, to) {\r\n    let found = false;\r\n    folded.between(from, from, (a, b) => { if (a == from && b == to)\r\n        found = true; });\r\n    return found;\r\n}\r\nfunction maybeEnable(state, other) {\r\n    return state.field(foldState, false) ? other : other.concat(_state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.appendConfig.of(codeFolding()));\r\n}\r\n/** Fold the lines that are selected, if possible. */\r\nconst foldCode = view => {\r\n    for (let line of selectedLines(view)) {\r\n        let range = foldable(view.state, line.from, line.to);\r\n        if (range) {\r\n            view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n/** Unfold folded ranges on selected lines. */\r\nconst unfoldCode = view => {\r\n    if (!view.state.field(foldState, false))\r\n        return false;\r\n    let effects = [];\r\n    for (let line of selectedLines(view)) {\r\n        let folded = findFold(view.state, line.from, line.to);\r\n        if (folded)\r\n            effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\r\n    }\r\n    if (effects.length)\r\n        view.dispatch({ effects });\r\n    return effects.length > 0;\r\n};\r\nfunction announceFold(view, range, fold = true) {\r\n    let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;\r\n    return _view_index_js__WEBPACK_IMPORTED_MODULE_2__.EditorView.announce.of(`${view.state.phrase(fold ? \"Folded lines\" : \"Unfolded lines\")} ${lineFrom} ${view.state.phrase(\"to\")} ${lineTo}.`);\r\n}\r\n/**\r\n * Fold all top-level foldable ranges. Note that, in most cases, folding information will depend\r\n * on the [syntax tree]{@link syntaxTree}, and folding everything may not work reliably when the\r\n * document hasn't been fully parsed (either because the editor state was only just initialized,\r\n * or because the document is so big that the parser decided not to parse it entirely).\r\n */\r\nconst foldAll = view => {\r\n    let { state } = view, effects = [];\r\n    for (let pos = 0; pos < state.doc.length;) {\r\n        let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);\r\n        if (range)\r\n            effects.push(foldEffect.of(range));\r\n        pos = (range ? view.lineBlockAt(range.to) : line).to + 1;\r\n    }\r\n    if (effects.length)\r\n        view.dispatch({ effects: maybeEnable(view.state, effects) });\r\n    return !!effects.length;\r\n};\r\n/** Unfold all folded code. */\r\nconst unfoldAll = view => {\r\n    let field = view.state.field(foldState, false);\r\n    if (!field || !field.size)\r\n        return false;\r\n    let effects = [];\r\n    field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });\r\n    view.dispatch({ effects });\r\n    return true;\r\n};\r\n/**\r\n * Default fold-related key bindings.\r\n *  - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): {@link foldCode}.\r\n *  - Ctrl-Shift-] (Cmd-Alt-] on macOS): {@link unfoldCode}.\r\n *  - Ctrl-Alt-[: {@link foldAll}.\r\n *  - Ctrl-Alt-]: {@link unfoldAll}.\r\n */\r\nconst foldKeymap = [\r\n    { key: \"Ctrl-Shift-[\", mac: \"Cmd-Alt-[\", run: foldCode },\r\n    { key: \"Ctrl-Shift-]\", mac: \"Cmd-Alt-]\", run: unfoldCode },\r\n    { key: \"Ctrl-Alt-[\", run: foldAll },\r\n    { key: \"Ctrl-Alt-]\", run: unfoldAll }\r\n];\r\nconst defaultConfig = {\r\n    placeholderDOM: null,\r\n    placeholderText: \"…\"\r\n};\r\nconst foldConfig = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\r\n    combine(values) { return (0,_state_index_js__WEBPACK_IMPORTED_MODULE_1__.combineConfig)(values, defaultConfig); }\r\n});\r\n/** Create an extension that configures code folding. */\r\nfunction codeFolding(config) {\r\n    let result = [foldState, baseTheme];\r\n    if (config)\r\n        result.push(foldConfig.of(config));\r\n    return result;\r\n}\r\nconst foldWidget = _view_index_js__WEBPACK_IMPORTED_MODULE_2__.Decoration.replace({ widget: new class extends _view_index_js__WEBPACK_IMPORTED_MODULE_2__.WidgetType {\r\n        toDOM(view) {\r\n            let { state } = view, conf = state.facet(foldConfig);\r\n            let onclick = (event) => {\r\n                let line = view.lineBlockAt(view.posAtDOM(event.target));\r\n                let folded = findFold(view.state, line.from, line.to);\r\n                if (folded)\r\n                    view.dispatch({ effects: unfoldEffect.of(folded) });\r\n                event.preventDefault();\r\n            };\r\n            if (conf.placeholderDOM)\r\n                return conf.placeholderDOM(view, onclick);\r\n            let element = document.createElement(\"span\");\r\n            element.textContent = conf.placeholderText;\r\n            element.setAttribute(\"aria-label\", state.phrase(\"folded code\"));\r\n            element.title = state.phrase(\"unfold\");\r\n            element.className = \"cm-foldPlaceholder\";\r\n            element.onclick = onclick;\r\n            return element;\r\n        }\r\n    } });\r\nconst foldGutterDefaults = {\r\n    openText: \"⌄\",\r\n    closedText: \"›\",\r\n    markerDOM: null,\r\n    domEventHandlers: {},\r\n};\r\nclass FoldMarker extends _view_index_js__WEBPACK_IMPORTED_MODULE_2__.GutterMarker {\r\n    constructor(config, open) {\r\n        super();\r\n        this.config = config;\r\n        this.open = open;\r\n    }\r\n    eq(other) { return this.config == other.config && this.open == other.open; }\r\n    toDOM(view) {\r\n        if (this.config.markerDOM)\r\n            return this.config.markerDOM(this.open);\r\n        let span = document.createElement(\"span\");\r\n        span.textContent = this.open ? this.config.openText : this.config.closedText;\r\n        span.title = view.state.phrase(this.open ? \"Fold line\" : \"Unfold line\");\r\n        return span;\r\n    }\r\n}\r\n/**\r\n * Create an extension that registers a fold gutter, which shows a fold status indicator before\r\n * foldable lines (which can be clicked to fold or unfold the line).\r\n */\r\nfunction foldGutter(config = {}) {\r\n    let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);\r\n    let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);\r\n    let markers = _view_index_js__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.fromClass(class {\r\n        constructor(view) {\r\n            this.from = view.viewport.from;\r\n            this.markers = this.buildMarkers(view);\r\n        }\r\n        update(update) {\r\n            if (update.docChanged || update.viewportChanged ||\r\n                update.startState.facet(_language_js__WEBPACK_IMPORTED_MODULE_3__.language) != update.state.facet(_language_js__WEBPACK_IMPORTED_MODULE_3__.language) ||\r\n                update.startState.field(foldState, false) != update.state.field(foldState, false) ||\r\n                (0,_language_js__WEBPACK_IMPORTED_MODULE_3__.syntaxTree)(update.startState) != (0,_language_js__WEBPACK_IMPORTED_MODULE_3__.syntaxTree)(update.state))\r\n                this.markers = this.buildMarkers(update.view);\r\n        }\r\n        buildMarkers(view) {\r\n            let builder = new _state_index_js__WEBPACK_IMPORTED_MODULE_1__.RangeSetBuilder();\r\n            for (let line of view.viewportLineBlocks) {\r\n                let mark = findFold(view.state, line.from, line.to) ? canUnfold :\r\n                    foldable(view.state, line.from, line.to) ? canFold : null;\r\n                if (mark)\r\n                    builder.add(line.from, line.from, mark);\r\n            }\r\n            return builder.finish();\r\n        }\r\n    });\r\n    let { domEventHandlers } = fullConfig;\r\n    return [\r\n        markers,\r\n        (0,_view_index_js__WEBPACK_IMPORTED_MODULE_2__.gutter)({\r\n            class: \"cm-foldGutter\",\r\n            markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || _state_index_js__WEBPACK_IMPORTED_MODULE_1__.RangeSet.empty; },\r\n            initialSpacer() {\r\n                return new FoldMarker(fullConfig, false);\r\n            },\r\n            domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {\r\n                    if (domEventHandlers.click && domEventHandlers.click(view, line, event))\r\n                        return true;\r\n                    let folded = findFold(view.state, line.from, line.to);\r\n                    if (folded) {\r\n                        view.dispatch({ effects: unfoldEffect.of(folded) });\r\n                        return true;\r\n                    }\r\n                    let range = foldable(view.state, line.from, line.to);\r\n                    if (range) {\r\n                        view.dispatch({ effects: foldEffect.of(range) });\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                } })\r\n        }),\r\n        codeFolding()\r\n    ];\r\n}\r\nconst baseTheme = _view_index_js__WEBPACK_IMPORTED_MODULE_2__.EditorView.baseTheme({\r\n    \".cm-foldPlaceholder\": {\r\n        backgroundColor: \"#eee\",\r\n        border: \"1px solid #ddd\",\r\n        color: \"#888\",\r\n        borderRadius: \".2em\",\r\n        margin: \"0 1px\",\r\n        padding: \"0 1px\",\r\n        cursor: \"pointer\"\r\n    },\r\n    \".cm-foldGutter span\": {\r\n        padding: \"0 1px\",\r\n        cursor: \"pointer\"\r\n    }\r\n});\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/language/fold.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/language/highlight.js":
/*!*********************************************************!*\
  !*** ./sys/public/js/editor/dist/language/highlight.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HighlightStyle\": () => (/* binding */ HighlightStyle),\n/* harmony export */   \"defaultHighlightStyle\": () => (/* binding */ defaultHighlightStyle),\n/* harmony export */   \"highlightingFor\": () => (/* binding */ highlightingFor),\n/* harmony export */   \"syntaxHighlighting\": () => (/* binding */ syntaxHighlighting)\n/* harmony export */ });\n/* harmony import */ var _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lezer/highlight/index.js */ \"./sys/public/js/editor/dist/lezer/highlight/index.js\");\n/* harmony import */ var _utils_style_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/style-mod.js */ \"./sys/public/js/editor/dist/utils/style-mod.js\");\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _language_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./language.js */ \"./sys/public/js/editor/dist/language/language.js\");\n\r\n\r\n\r\n\r\n\r\n/** A highlight style associates CSS styles with higlighting [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag). */\r\nclass HighlightStyle {\r\n    constructor(spec, options) {\r\n        let modSpec;\r\n        function def(spec) {\r\n            let cls = _utils_style_mod_js__WEBPACK_IMPORTED_MODULE_1__.StyleModule.newName();\r\n            (modSpec || (modSpec = Object.create(null)))[\".\" + cls] = spec;\r\n            return cls;\r\n        }\r\n        const scopeOpt = options.scope;\r\n        this.scope = scopeOpt instanceof _language_js__WEBPACK_IMPORTED_MODULE_4__.Language ? (type) => type.prop(_language_js__WEBPACK_IMPORTED_MODULE_4__.languageDataProp) == scopeOpt.data\r\n            : scopeOpt ? (type) => type == scopeOpt : undefined;\r\n        this.style = (0,_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tagHighlighter)(spec.map(style => ({\r\n            tag: style.tag,\r\n            class: style.class || def(Object.assign({}, style, { tag: null }))\r\n        })), {\r\n            all: typeof options.all == \"string\" ? options.all : options.all ? def(options.all) : undefined,\r\n        }).style;\r\n        this.module = modSpec ? new _utils_style_mod_js__WEBPACK_IMPORTED_MODULE_1__.StyleModule(modSpec) : null;\r\n        this.themeType = options.themeType;\r\n    }\r\n    /**\r\n     * Create a highlighter style that associates the given styles to\r\n     * the given tags. The specs must be objects that hold a style tag\r\n     * or array of tags in their `tag` property, and either a single\r\n     * `class` property providing a static CSS class (for highlighter\r\n     * that rely on external styling), or a\r\n     * [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\r\n     * set of CSS properties (which define the styling for those tags).\r\n     * The CSS rules created for a highlighter will be emitted in the\r\n     * order of the spec's properties. That means that for elements that\r\n     * have multiple tags associated with them, styles defined further\r\n     * down in the list will have a higher CSS precedence than styles\r\n     * defined earlier.\r\n     */\r\n    static define(specs, options) {\r\n        return new HighlightStyle(specs, options || {});\r\n    }\r\n}\r\nconst highlighterFacet = _state_index_js__WEBPACK_IMPORTED_MODULE_3__.Facet.define();\r\nconst fallbackHighlighter = _state_index_js__WEBPACK_IMPORTED_MODULE_3__.Facet.define({\r\n    combine(values) { return values.length ? [values[0]] : null; }\r\n});\r\nfunction getHighlighters(state) {\r\n    let main = state.facet(highlighterFacet);\r\n    return main.length ? main : state.facet(fallbackHighlighter);\r\n}\r\n/**\r\n * Wrap a highlighter in an editor extension that uses it to apply syntax\r\n * highlighting to the editor content.\r\n *\r\n * When multiple (non-fallback) styles are provided, the styling applied is\r\n * the union of the classes they emit.\r\n */\r\nfunction syntaxHighlighting(highlighter, options) {\r\n    let ext = [treeHighlighter], themeType;\r\n    if (highlighter instanceof HighlightStyle) {\r\n        if (highlighter.module)\r\n            ext.push(_view_index_js__WEBPACK_IMPORTED_MODULE_2__.EditorView.styleModule.of(highlighter.module));\r\n        themeType = highlighter.themeType;\r\n    }\r\n    if (options === null || options === void 0 ? void 0 : options.fallback)\r\n        ext.push(fallbackHighlighter.of(highlighter));\r\n    else if (themeType)\r\n        ext.push(highlighterFacet.computeN([_view_index_js__WEBPACK_IMPORTED_MODULE_2__.EditorView.darkTheme], state => {\r\n            return state.facet(_view_index_js__WEBPACK_IMPORTED_MODULE_2__.EditorView.darkTheme) == (themeType == \"dark\") ? [highlighter] : [];\r\n        }));\r\n    else\r\n        ext.push(highlighterFacet.of(highlighter));\r\n    return ext;\r\n}\r\n/**\r\n * Returns the CSS classes (if any) that the highlighters active in the state would\r\n * assign to the given style [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag)\r\n * and (optional) language [scope]{@link options.scope}.\r\n */\r\nfunction highlightingFor(state, tags, scope) {\r\n    let highlighters = getHighlighters(state);\r\n    let result = null;\r\n    if (highlighters)\r\n        for (let highlighter of highlighters) {\r\n            if (!highlighter.scope || scope && highlighter.scope(scope)) {\r\n                let cls = highlighter.style(tags);\r\n                if (cls)\r\n                    result = result ? result + \" \" + cls : cls;\r\n            }\r\n        }\r\n    return result;\r\n}\r\nclass TreeHighlighter {\r\n    constructor(view) {\r\n        this.markCache = Object.create(null);\r\n        this.tree = (0,_language_js__WEBPACK_IMPORTED_MODULE_4__.syntaxTree)(view.state);\r\n        this.decorations = this.buildDeco(view, getHighlighters(view.state));\r\n    }\r\n    update(update) {\r\n        let tree = (0,_language_js__WEBPACK_IMPORTED_MODULE_4__.syntaxTree)(update.state), highlighters = getHighlighters(update.state);\r\n        let styleChange = highlighters != getHighlighters(update.startState);\r\n        if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {\r\n            this.decorations = this.decorations.map(update.changes);\r\n        }\r\n        else if (tree != this.tree || update.viewportChanged || styleChange) {\r\n            this.tree = tree;\r\n            this.decorations = this.buildDeco(update.view, highlighters);\r\n        }\r\n    }\r\n    buildDeco(view, highlighters) {\r\n        if (!highlighters || !this.tree.length)\r\n            return _view_index_js__WEBPACK_IMPORTED_MODULE_2__.Decoration.none;\r\n        let builder = new _state_index_js__WEBPACK_IMPORTED_MODULE_3__.RangeSetBuilder();\r\n        for (let { from, to } of view.visibleRanges) {\r\n            (0,_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.highlightTree)(this.tree, highlighters, (from, to, style) => {\r\n                builder.add(from, to, this.markCache[style] || (this.markCache[style] = _view_index_js__WEBPACK_IMPORTED_MODULE_2__.Decoration.mark({ class: style })));\r\n            }, from, to);\r\n        }\r\n        return builder.finish();\r\n    }\r\n}\r\nconst treeHighlighter = _state_index_js__WEBPACK_IMPORTED_MODULE_3__.Prec.high(_view_index_js__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.fromClass(TreeHighlighter, {\r\n    decorations: v => v.decorations\r\n}));\r\n/** A default highlight style (works well with light themes). */\r\nconst defaultHighlightStyle = HighlightStyle.define([\r\n    { tag: _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.meta,\r\n        color: \"#7a757a\" },\r\n    { tag: _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.link,\r\n        textDecoration: \"underline\" },\r\n    { tag: _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.heading,\r\n        textDecoration: \"underline\",\r\n        fontWeight: \"bold\" },\r\n    { tag: _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.emphasis,\r\n        fontStyle: \"italic\" },\r\n    { tag: _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.strong,\r\n        fontWeight: \"bold\" },\r\n    { tag: _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.strikethrough,\r\n        textDecoration: \"line-through\" },\r\n    { tag: _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.keyword,\r\n        color: \"#708\" },\r\n    { tag: [_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.atom, _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.bool, _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.url, _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.contentSeparator, _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.labelName],\r\n        color: \"#219\" },\r\n    { tag: [_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.literal, _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.inserted],\r\n        color: \"#164\" },\r\n    { tag: [_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.string, _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.deleted],\r\n        color: \"#a11\" },\r\n    { tag: [_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.regexp, _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.escape, _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.special(_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.string)],\r\n        color: \"#e40\" },\r\n    { tag: _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.definition(_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.variableName),\r\n        color: \"#00f\" },\r\n    { tag: _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.local(_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.variableName),\r\n        color: \"#30a\" },\r\n    { tag: [_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.typeName, _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.namespace],\r\n        color: \"#085\" },\r\n    { tag: _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.className,\r\n        color: \"#167\" },\r\n    { tag: [_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.special(_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.variableName), _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.macroName],\r\n        color: \"#256\" },\r\n    { tag: _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.definition(_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.propertyName),\r\n        color: \"#00c\" },\r\n    { tag: _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.comment,\r\n        color: \"#940\" },\r\n    { tag: _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_0__.tags.invalid,\r\n        color: \"#f00\" }\r\n]);\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/language/highlight.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/language/indent.js":
/*!******************************************************!*\
  !*** ./sys/public/js/editor/dist/language/indent.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IndentContext\": () => (/* binding */ IndentContext),\n/* harmony export */   \"TreeIndentContext\": () => (/* binding */ TreeIndentContext),\n/* harmony export */   \"continuedIndent\": () => (/* binding */ continuedIndent),\n/* harmony export */   \"delimitedIndent\": () => (/* binding */ delimitedIndent),\n/* harmony export */   \"flatIndent\": () => (/* binding */ flatIndent),\n/* harmony export */   \"getIndentUnit\": () => (/* binding */ getIndentUnit),\n/* harmony export */   \"getIndentation\": () => (/* binding */ getIndentation),\n/* harmony export */   \"indentNodeProp\": () => (/* binding */ indentNodeProp),\n/* harmony export */   \"indentOnInput\": () => (/* binding */ indentOnInput),\n/* harmony export */   \"indentService\": () => (/* binding */ indentService),\n/* harmony export */   \"indentString\": () => (/* binding */ indentString),\n/* harmony export */   \"indentUnit\": () => (/* binding */ indentUnit)\n/* harmony export */ });\n/* harmony import */ var _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lezer/common/index.js */ \"./sys/public/js/editor/dist/lezer/common/index.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _language_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./language.js */ \"./sys/public/js/editor/dist/language/language.js\");\n\r\n\r\n\r\nconst indentService = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.Facet.define();\r\nconst indentUnit = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\r\n    combine: values => {\r\n        if (!values.length)\r\n            return \"  \";\r\n        if (!/^(?: +|\\t+)$/.test(values[0]))\r\n            throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\r\n        return values[0];\r\n    }\r\n});\r\nfunction getIndentUnit(state) {\r\n    let unit = state.facet(indentUnit);\r\n    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\r\n}\r\nfunction indentString(state, cols) {\r\n    let result = \"\", ts = state.tabSize;\r\n    if (state.facet(indentUnit).charCodeAt(0) == 9)\r\n        while (cols >= ts) {\r\n            result += \"\\t\";\r\n            cols -= ts;\r\n        }\r\n    for (let i = 0; i < cols; i++)\r\n        result += \" \";\r\n    return result;\r\n}\r\nfunction getIndentation(context, pos) {\r\n    if (context instanceof _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorState)\r\n        context = new IndentContext(context);\r\n    for (let service of context.state.facet(indentService)) {\r\n        let result = service(context, pos);\r\n        if (result != null)\r\n            return result;\r\n    }\r\n    let tree = (0,_language_js__WEBPACK_IMPORTED_MODULE_2__.syntaxTree)(context.state);\r\n    return tree ? syntaxIndentation(context, tree, pos) : null;\r\n}\r\nclass IndentContext {\r\n    constructor(state, \r\n    // @internal\r\n    options = {}) {\r\n        this.state = state;\r\n        this.options = options;\r\n        this.unit = getIndentUnit(state);\r\n    }\r\n    lineAt(pos, bias = 1) {\r\n        let line = this.state.doc.lineAt(pos);\r\n        let { simulateBreak, simulateDoubleBreak } = this.options;\r\n        if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {\r\n            if (simulateDoubleBreak && simulateBreak == pos)\r\n                return { text: \"\", from: pos };\r\n            else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)\r\n                return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };\r\n            else\r\n                return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };\r\n        }\r\n        return line;\r\n    }\r\n    textAfterPos(pos, bias = 1) {\r\n        if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)\r\n            return \"\";\r\n        let { text, from } = this.lineAt(pos, bias);\r\n        return text.slice(pos - from, Math.min(text.length, pos + 100 - from));\r\n    }\r\n    column(pos, bias = 1) {\r\n        let { text, from } = this.lineAt(pos, bias);\r\n        let result = this.countColumn(text, pos - from);\r\n        let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;\r\n        if (override > -1)\r\n            result += override - this.countColumn(text, text.search(/\\S|$/));\r\n        return result;\r\n    }\r\n    countColumn(line, pos = line.length) {\r\n        return (0,_state_index_js__WEBPACK_IMPORTED_MODULE_1__.countColumn)(line, this.state.tabSize, pos);\r\n    }\r\n    lineIndent(pos, bias = 1) {\r\n        let { text, from } = this.lineAt(pos, bias);\r\n        let override = this.options.overrideIndentation;\r\n        if (override) {\r\n            let overriden = override(from);\r\n            if (overriden > -1)\r\n                return overriden;\r\n        }\r\n        return this.countColumn(text, text.search(/\\S|$/));\r\n    }\r\n    get simulatedBreak() {\r\n        return this.options.simulateBreak || null;\r\n    }\r\n}\r\nconst indentNodeProp = new _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp();\r\n// Compute the indentation for a given position from the syntax tree.\r\nfunction syntaxIndentation(cx, ast, pos) {\r\n    return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);\r\n}\r\nfunction ignoreClosed(cx) {\r\n    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;\r\n}\r\nfunction indentStrategy(tree) {\r\n    let strategy = tree.type.prop(indentNodeProp);\r\n    if (strategy)\r\n        return strategy;\r\n    let first = tree.firstChild, close;\r\n    if (first && (close = first.type.prop(_lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp.closedBy))) {\r\n        let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;\r\n        return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);\r\n    }\r\n    return tree.parent == null ? topIndent : null;\r\n}\r\nfunction indentFrom(node, pos, base) {\r\n    for (; node; node = node.parent) {\r\n        let strategy = indentStrategy(node);\r\n        if (strategy)\r\n            return strategy(TreeIndentContext.create(base, pos, node));\r\n    }\r\n    return null;\r\n}\r\nfunction topIndent() { return 0; }\r\nclass TreeIndentContext extends IndentContext {\r\n    constructor(base, pos, node) {\r\n        super(base.state, base.options);\r\n        this.base = base;\r\n        this.pos = pos;\r\n        this.node = node;\r\n    }\r\n    // @internal\r\n    static create(base, pos, node) {\r\n        return new TreeIndentContext(base, pos, node);\r\n    }\r\n    get textAfter() {\r\n        return this.textAfterPos(this.pos);\r\n    }\r\n    get baseIndent() {\r\n        let line = this.state.doc.lineAt(this.node.from);\r\n        // Skip line starts that are covered by a sibling (or cousin, etc)\r\n        for (;;) {\r\n            let atBreak = this.node.resolve(line.from);\r\n            while (atBreak.parent && atBreak.parent.from == atBreak.from)\r\n                atBreak = atBreak.parent;\r\n            if (isParent(atBreak, this.node))\r\n                break;\r\n            line = this.state.doc.lineAt(atBreak.from);\r\n        }\r\n        return this.lineIndent(line.from);\r\n    }\r\n    continue() {\r\n        let parent = this.node.parent;\r\n        return parent ? indentFrom(parent, this.pos, this.base) : 0;\r\n    }\r\n}\r\nfunction isParent(parent, of) {\r\n    for (let cur = of; cur; cur = cur.parent)\r\n        if (parent == cur)\r\n            return true;\r\n    return false;\r\n}\r\n// Check whether a delimited node is aligned (meaning there are\r\n// non-skipped nodes on the same line as the opening delimiter). And\r\n// if so, return the opening token.\r\nfunction bracketedAligned(context) {\r\n    let tree = context.node;\r\n    let openToken = tree.childAfter(tree.from), last = tree.lastChild;\r\n    if (!openToken)\r\n        return null;\r\n    let sim = context.options.simulateBreak;\r\n    let openLine = context.state.doc.lineAt(openToken.from);\r\n    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\r\n    for (let pos = openToken.to;;) {\r\n        let next = tree.childAfter(pos);\r\n        if (!next || next == last)\r\n            return null;\r\n        if (!next.type.isSkipped)\r\n            return next.from < lineEnd ? openToken : null;\r\n        pos = next.to;\r\n    }\r\n}\r\nfunction delimitedIndent({ closing, align = true, units = 1 }) {\r\n    return (context) => delimitedStrategy(context, align, units, closing);\r\n}\r\nfunction delimitedStrategy(context, align, units, closing, closedAt) {\r\n    let after = context.textAfter, space = after.match(/^\\s*/)[0].length;\r\n    let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\r\n    let aligned = align ? bracketedAligned(context) : null;\r\n    if (aligned)\r\n        return closed ? context.column(aligned.from) : context.column(aligned.to);\r\n    return context.baseIndent + (closed ? 0 : context.unit * units);\r\n}\r\nconst flatIndent = (context) => context.baseIndent;\r\nfunction continuedIndent({ except, units = 1 } = {}) {\r\n    return (context) => {\r\n        let matchExcept = except && except.test(context.textAfter);\r\n        return context.baseIndent + (matchExcept ? 0 : units * context.unit);\r\n    };\r\n}\r\nconst DontIndentBeyond = 200;\r\n/**\r\n * Enables reindentation on input. When a language defines an `indentOnInput` field in its\r\n * [language data]{@link EditorState.languageDataAt}, which must hold a regular expression,\r\n * the line at the cursor will be reindented whenever new text is typed and the input from\r\n * the start of the line up to the cursor matches that regexp.\r\n *\r\n * To avoid unneccesary reindents, it is recommended to start the regexp with `^` (usually followed by\r\n * `\\s*`), and end it with `$`. For example, `/^\\s*\\}$/` will reindent when a closing brace is added at\r\n * the start of a line.\r\n */\r\nfunction indentOnInput() {\r\n    return _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorState.transactionFilter.of(tr => {\r\n        if (!tr.docChanged || !tr.isUserEvent(\"input.type\") && !tr.isUserEvent(\"input.complete\"))\r\n            return tr;\r\n        let rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\r\n        if (!rules.length)\r\n            return tr;\r\n        let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);\r\n        if (head > line.from + DontIndentBeyond)\r\n            return tr;\r\n        let lineStart = doc.sliceString(line.from, head);\r\n        if (!rules.some(r => r.test(lineStart)))\r\n            return tr;\r\n        let { state } = tr, last = -1, changes = [];\r\n        for (let { head } of state.selection.ranges) {\r\n            let line = state.doc.lineAt(head);\r\n            if (line.from == last)\r\n                continue;\r\n            last = line.from;\r\n            let indent = getIndentation(state, line.from);\r\n            if (indent == null)\r\n                continue;\r\n            let cur = /^\\s*/.exec(line.text)[0];\r\n            let norm = indentString(state, indent);\r\n            if (cur != norm)\r\n                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\r\n        }\r\n        return changes.length ? [tr, { changes, sequential: true }] : tr;\r\n    });\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/language/indent.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/language/index.js":
/*!*****************************************************!*\
  !*** ./sys/public/js/editor/dist/language/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HighlightStyle\": () => (/* reexport safe */ _highlight_js__WEBPACK_IMPORTED_MODULE_3__.HighlightStyle),\n/* harmony export */   \"IndentContext\": () => (/* reexport safe */ _indent_js__WEBPACK_IMPORTED_MODULE_1__.IndentContext),\n/* harmony export */   \"LRLanguage\": () => (/* reexport safe */ _language_js__WEBPACK_IMPORTED_MODULE_0__.LRLanguage),\n/* harmony export */   \"Language\": () => (/* reexport safe */ _language_js__WEBPACK_IMPORTED_MODULE_0__.Language),\n/* harmony export */   \"LanguageDescription\": () => (/* reexport safe */ _language_js__WEBPACK_IMPORTED_MODULE_0__.LanguageDescription),\n/* harmony export */   \"LanguageSupport\": () => (/* reexport safe */ _language_js__WEBPACK_IMPORTED_MODULE_0__.LanguageSupport),\n/* harmony export */   \"ParseContext\": () => (/* reexport safe */ _language_js__WEBPACK_IMPORTED_MODULE_0__.ParseContext),\n/* harmony export */   \"StreamLanguage\": () => (/* reexport safe */ _stream_parser_js__WEBPACK_IMPORTED_MODULE_5__.StreamLanguage),\n/* harmony export */   \"StringStream\": () => (/* reexport safe */ _stringstream_js__WEBPACK_IMPORTED_MODULE_6__.StringStream),\n/* harmony export */   \"TreeIndentContext\": () => (/* reexport safe */ _indent_js__WEBPACK_IMPORTED_MODULE_1__.TreeIndentContext),\n/* harmony export */   \"bracketMatching\": () => (/* reexport safe */ _matchbrackets_js__WEBPACK_IMPORTED_MODULE_4__.bracketMatching),\n/* harmony export */   \"codeFolding\": () => (/* reexport safe */ _fold_js__WEBPACK_IMPORTED_MODULE_2__.codeFolding),\n/* harmony export */   \"continuedIndent\": () => (/* reexport safe */ _indent_js__WEBPACK_IMPORTED_MODULE_1__.continuedIndent),\n/* harmony export */   \"defaultHighlightStyle\": () => (/* reexport safe */ _highlight_js__WEBPACK_IMPORTED_MODULE_3__.defaultHighlightStyle),\n/* harmony export */   \"defineLanguageFacet\": () => (/* reexport safe */ _language_js__WEBPACK_IMPORTED_MODULE_0__.defineLanguageFacet),\n/* harmony export */   \"delimitedIndent\": () => (/* reexport safe */ _indent_js__WEBPACK_IMPORTED_MODULE_1__.delimitedIndent),\n/* harmony export */   \"ensureSyntaxTree\": () => (/* reexport safe */ _language_js__WEBPACK_IMPORTED_MODULE_0__.ensureSyntaxTree),\n/* harmony export */   \"flatIndent\": () => (/* reexport safe */ _indent_js__WEBPACK_IMPORTED_MODULE_1__.flatIndent),\n/* harmony export */   \"foldAll\": () => (/* reexport safe */ _fold_js__WEBPACK_IMPORTED_MODULE_2__.foldAll),\n/* harmony export */   \"foldCode\": () => (/* reexport safe */ _fold_js__WEBPACK_IMPORTED_MODULE_2__.foldCode),\n/* harmony export */   \"foldEffect\": () => (/* reexport safe */ _fold_js__WEBPACK_IMPORTED_MODULE_2__.foldEffect),\n/* harmony export */   \"foldGutter\": () => (/* reexport safe */ _fold_js__WEBPACK_IMPORTED_MODULE_2__.foldGutter),\n/* harmony export */   \"foldInside\": () => (/* reexport safe */ _fold_js__WEBPACK_IMPORTED_MODULE_2__.foldInside),\n/* harmony export */   \"foldKeymap\": () => (/* reexport safe */ _fold_js__WEBPACK_IMPORTED_MODULE_2__.foldKeymap),\n/* harmony export */   \"foldNodeProp\": () => (/* reexport safe */ _fold_js__WEBPACK_IMPORTED_MODULE_2__.foldNodeProp),\n/* harmony export */   \"foldService\": () => (/* reexport safe */ _fold_js__WEBPACK_IMPORTED_MODULE_2__.foldService),\n/* harmony export */   \"foldable\": () => (/* reexport safe */ _fold_js__WEBPACK_IMPORTED_MODULE_2__.foldable),\n/* harmony export */   \"foldedRanges\": () => (/* reexport safe */ _fold_js__WEBPACK_IMPORTED_MODULE_2__.foldedRanges),\n/* harmony export */   \"forceParsing\": () => (/* reexport safe */ _language_js__WEBPACK_IMPORTED_MODULE_0__.forceParsing),\n/* harmony export */   \"getIndentUnit\": () => (/* reexport safe */ _indent_js__WEBPACK_IMPORTED_MODULE_1__.getIndentUnit),\n/* harmony export */   \"getIndentation\": () => (/* reexport safe */ _indent_js__WEBPACK_IMPORTED_MODULE_1__.getIndentation),\n/* harmony export */   \"highlightingFor\": () => (/* reexport safe */ _highlight_js__WEBPACK_IMPORTED_MODULE_3__.highlightingFor),\n/* harmony export */   \"indentNodeProp\": () => (/* reexport safe */ _indent_js__WEBPACK_IMPORTED_MODULE_1__.indentNodeProp),\n/* harmony export */   \"indentOnInput\": () => (/* reexport safe */ _indent_js__WEBPACK_IMPORTED_MODULE_1__.indentOnInput),\n/* harmony export */   \"indentService\": () => (/* reexport safe */ _indent_js__WEBPACK_IMPORTED_MODULE_1__.indentService),\n/* harmony export */   \"indentString\": () => (/* reexport safe */ _indent_js__WEBPACK_IMPORTED_MODULE_1__.indentString),\n/* harmony export */   \"indentUnit\": () => (/* reexport safe */ _indent_js__WEBPACK_IMPORTED_MODULE_1__.indentUnit),\n/* harmony export */   \"language\": () => (/* reexport safe */ _language_js__WEBPACK_IMPORTED_MODULE_0__.language),\n/* harmony export */   \"languageDataProp\": () => (/* reexport safe */ _language_js__WEBPACK_IMPORTED_MODULE_0__.languageDataProp),\n/* harmony export */   \"matchBrackets\": () => (/* reexport safe */ _matchbrackets_js__WEBPACK_IMPORTED_MODULE_4__.matchBrackets),\n/* harmony export */   \"syntaxHighlighting\": () => (/* reexport safe */ _highlight_js__WEBPACK_IMPORTED_MODULE_3__.syntaxHighlighting),\n/* harmony export */   \"syntaxParserRunning\": () => (/* reexport safe */ _language_js__WEBPACK_IMPORTED_MODULE_0__.syntaxParserRunning),\n/* harmony export */   \"syntaxTree\": () => (/* reexport safe */ _language_js__WEBPACK_IMPORTED_MODULE_0__.syntaxTree),\n/* harmony export */   \"syntaxTreeAvailable\": () => (/* reexport safe */ _language_js__WEBPACK_IMPORTED_MODULE_0__.syntaxTreeAvailable),\n/* harmony export */   \"unfoldAll\": () => (/* reexport safe */ _fold_js__WEBPACK_IMPORTED_MODULE_2__.unfoldAll),\n/* harmony export */   \"unfoldCode\": () => (/* reexport safe */ _fold_js__WEBPACK_IMPORTED_MODULE_2__.unfoldCode),\n/* harmony export */   \"unfoldEffect\": () => (/* reexport safe */ _fold_js__WEBPACK_IMPORTED_MODULE_2__.unfoldEffect)\n/* harmony export */ });\n/* harmony import */ var _language_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./language.js */ \"./sys/public/js/editor/dist/language/language.js\");\n/* harmony import */ var _indent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./indent.js */ \"./sys/public/js/editor/dist/language/indent.js\");\n/* harmony import */ var _fold_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fold.js */ \"./sys/public/js/editor/dist/language/fold.js\");\n/* harmony import */ var _highlight_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./highlight.js */ \"./sys/public/js/editor/dist/language/highlight.js\");\n/* harmony import */ var _matchbrackets_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./matchbrackets.js */ \"./sys/public/js/editor/dist/language/matchbrackets.js\");\n/* harmony import */ var _stream_parser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./stream-parser.js */ \"./sys/public/js/editor/dist/language/stream-parser.js\");\n/* harmony import */ var _stringstream_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./stringstream.js */ \"./sys/public/js/editor/dist/language/stringstream.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/language/index.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/language/language.js":
/*!********************************************************!*\
  !*** ./sys/public/js/editor/dist/language/language.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LRLanguage\": () => (/* binding */ LRLanguage),\n/* harmony export */   \"Language\": () => (/* binding */ Language),\n/* harmony export */   \"LanguageDescription\": () => (/* binding */ LanguageDescription),\n/* harmony export */   \"LanguageSupport\": () => (/* binding */ LanguageSupport),\n/* harmony export */   \"ParseContext\": () => (/* binding */ ParseContext),\n/* harmony export */   \"defineLanguageFacet\": () => (/* binding */ defineLanguageFacet),\n/* harmony export */   \"ensureSyntaxTree\": () => (/* binding */ ensureSyntaxTree),\n/* harmony export */   \"forceParsing\": () => (/* binding */ forceParsing),\n/* harmony export */   \"language\": () => (/* binding */ language),\n/* harmony export */   \"languageDataProp\": () => (/* binding */ languageDataProp),\n/* harmony export */   \"syntaxParserRunning\": () => (/* binding */ syntaxParserRunning),\n/* harmony export */   \"syntaxTree\": () => (/* binding */ syntaxTree),\n/* harmony export */   \"syntaxTreeAvailable\": () => (/* binding */ syntaxTreeAvailable)\n/* harmony export */ });\n/* harmony import */ var _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lezer/common/index.js */ \"./sys/public/js/editor/dist/lezer/common/index.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\nvar _a;\r\n\r\n\r\n\r\n/** Node prop stored in a parser's top syntax node to provide the facet that stores language-specific data for that language. */\r\nconst languageDataProp = new _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp();\r\n/**\r\n * Helper function to define a facet (to be added to the top syntax node(s) for a language via\r\n * {@link languageDataProp}), that will be used to associate language data with the language.\r\n * You probably only need this when subclassing {@link Language}.\r\n */\r\nfunction defineLanguageFacet(baseData) {\r\n    return _state_index_js__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\r\n        combine: baseData ? values => values.concat(baseData) : undefined\r\n    });\r\n}\r\n/**\r\n * A language object manages parsing and per-language [metadata]{@link languageDataAt}.\r\n * Parse data is managed as a [Lezer](https://lezer.codemirror.net) tree. The class\r\n * can be used directly, via the {@link LRLanguage} subclass for\r\n * [Lezer](https://lezer.codemirror.net/) LR parsers, or via the {@link StreamLanguage}\r\n * subclass for stream parsers.\r\n */\r\nclass Language {\r\n    /**\r\n     * Construct a language object. If you need to invoke this directly, first define a data\r\n     * facet with {@link defineLanguageFacet}, and then configure your parser to\r\n     * [attach]{@link languageDataProp} it to the language's outer syntax node.\r\n     * @param data The [language data]{@link languageDataAt} facet used for this language.\r\n     * @param parser\r\n     * @param extraExtensions\r\n     */\r\n    constructor(data, parser, extraExtensions = []) {\r\n        this.data = data;\r\n        // Kludge to define EditorState.tree as a debugging helper,\r\n        // without the EditorState package actually knowing about\r\n        // languages and lezer trees.\r\n        if (!_state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorState.prototype.hasOwnProperty(\"tree\"))\r\n            Object.defineProperty(_state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorState.prototype, \"tree\", { get() { return syntaxTree(this); } });\r\n        this.parser = parser;\r\n        this.extension = [\r\n            language.of(this),\r\n            _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorState.languageData.of((state, pos, side) => state.facet(languageDataFacetAt(state, pos, side)))\r\n        ].concat(extraExtensions);\r\n    }\r\n    /** Query whether this language is active at the given position. */\r\n    isActiveAt(state, pos, side = -1) {\r\n        return languageDataFacetAt(state, pos, side) == this.data;\r\n    }\r\n    /**\r\n     * Find the document regions that were parsed using this language.\r\n     * The returned regions will _include_ any nested languages rooted\r\n     * in this language, when those exist.\r\n     */\r\n    findRegions(state) {\r\n        let lang = state.facet(language);\r\n        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)\r\n            return [{ from: 0, to: state.doc.length }];\r\n        if (!lang || !lang.allowsNesting)\r\n            return [];\r\n        let result = [];\r\n        let explore = (tree, from) => {\r\n            if (tree.prop(languageDataProp) == this.data) {\r\n                result.push({ from, to: from + tree.length });\r\n                return;\r\n            }\r\n            let mount = tree.prop(_lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp.mounted);\r\n            if (mount) {\r\n                if (mount.tree.prop(languageDataProp) == this.data) {\r\n                    if (mount.overlay)\r\n                        for (let r of mount.overlay)\r\n                            result.push({ from: r.from + from, to: r.to + from });\r\n                    else\r\n                        result.push({ from: from, to: from + tree.length });\r\n                    return;\r\n                }\r\n                else if (mount.overlay) {\r\n                    let size = result.length;\r\n                    explore(mount.tree, mount.overlay[0].from + from);\r\n                    if (result.length > size)\r\n                        return;\r\n                }\r\n            }\r\n            for (let i = 0; i < tree.children.length; i++) {\r\n                let ch = tree.children[i];\r\n                if (ch instanceof _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree)\r\n                    explore(ch, tree.positions[i] + from);\r\n            }\r\n        };\r\n        explore(syntaxTree(state), 0);\r\n        return result;\r\n    }\r\n    /** Indicates whether this language allows nested languages. The default implementation returns true. */\r\n    get allowsNesting() { return true; }\r\n}\r\n// @internal\r\nLanguage.setState = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nfunction languageDataFacetAt(state, pos, side) {\r\n    let topLang = state.facet(language);\r\n    if (!topLang)\r\n        return null;\r\n    let facet = topLang.data;\r\n    if (topLang.allowsNesting) {\r\n        for (let node = syntaxTree(state).topNode; node; node = node.enter(pos, side, _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.IterMode.ExcludeBuffers))\r\n            facet = node.type.prop(languageDataProp) || facet;\r\n    }\r\n    return facet;\r\n}\r\n/** A subclass of {@link Language} for use with Lezer [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser) parsers. */\r\nclass LRLanguage extends Language {\r\n    constructor(data, parser) {\r\n        super(data, parser);\r\n        this.parser = parser;\r\n    }\r\n    /** Define a language from a parser. */\r\n    static define(spec) {\r\n        let data = defineLanguageFacet(spec.languageData);\r\n        return new LRLanguage(data, spec.parser.configure({\r\n            props: [languageDataProp.add(type => type.isTop ? data : undefined)]\r\n        }));\r\n    }\r\n    /** Create a new instance of this language with a reconfigured version of its parser. */\r\n    configure(options) {\r\n        return new LRLanguage(this.data, this.parser.configure(options));\r\n    }\r\n    get allowsNesting() { return this.parser.hasWrappers(); }\r\n}\r\n/**\r\n * Get the syntax tree for a state, which is the current (possibly incomplete) parse tree of the\r\n * active [language]{@link Language}, or the empty tree if there is no language available.\r\n */\r\nfunction syntaxTree(state) {\r\n    let field = state.field(Language.state, false);\r\n    return field ? field.tree : _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree.empty;\r\n}\r\n/**\r\n * Try to get a parse tree that spans at least up to `upto`. The method will do at most `timeout`\r\n * milliseconds of work to parse up to that point if the tree isn't already available.\r\n */\r\nfunction ensureSyntaxTree(state, upto, timeout = 50) {\r\n    var _a;\r\n    let parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;\r\n    return !parse ? null : parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;\r\n}\r\n/**\r\n * Queries whether there is a full syntax tree available up to the given document position.\r\n * If there isn't, the background parse process _might_ still be working and update the tree\r\n * further, but there is no guarantee of that—the parser will [stop working]{@link syntaxParserRunning}\r\n * when it has spent a certain amount of time or has moved beyond the visible viewport.\r\n * Always returns false if no language has been enabled.\r\n */\r\nfunction syntaxTreeAvailable(state, upto = state.doc.length) {\r\n    var _a;\r\n    return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;\r\n}\r\n/**\r\n * Move parsing forward, and update the editor state afterwards to reflect the new tree.\r\n * Will work for at most `timeout` milliseconds. Returns true if the parser managed get\r\n * to the given position in that time.\r\n */\r\nfunction forceParsing(view, upto = view.viewport.to, timeout = 100) {\r\n    let success = ensureSyntaxTree(view.state, upto, timeout);\r\n    if (success != syntaxTree(view.state))\r\n        view.dispatch({});\r\n    return !!success;\r\n}\r\n/**\r\n * Tells you whether the language parser is planning to do more parsing work (in a\r\n * `requestIdleCallback` pseudo-thread) or has stopped running, either because it\r\n * parsed the entire document, because it spent too much time and was cut off, or\r\n * because there is no language parser enabled.\r\n */\r\nfunction syntaxParserRunning(view) {\r\n    var _a;\r\n    return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;\r\n}\r\n// Lezer-style Input object for a Text document.\r\nclass DocInput {\r\n    constructor(doc, length = doc.length) {\r\n        this.doc = doc;\r\n        this.length = length;\r\n        this.cursorPos = 0;\r\n        this.string = \"\";\r\n        this.cursor = doc.iter();\r\n    }\r\n    syncTo(pos) {\r\n        this.string = this.cursor.next(pos - this.cursorPos).value;\r\n        this.cursorPos = pos + this.string.length;\r\n        return this.cursorPos - this.string.length;\r\n    }\r\n    chunk(pos) {\r\n        this.syncTo(pos);\r\n        return this.string;\r\n    }\r\n    get lineChunks() { return true; }\r\n    read(from, to) {\r\n        let stringStart = this.cursorPos - this.string.length;\r\n        if (from < stringStart || to >= this.cursorPos)\r\n            return this.doc.sliceString(from, to);\r\n        else\r\n            return this.string.slice(from - stringStart, to - stringStart);\r\n    }\r\n}\r\nlet currentContext = null;\r\n/** A parse context provided to parsers working on the editor content. */\r\nclass ParseContext {\r\n    constructor(parser, \r\n    /** The current editor state. */\r\n    state, \r\n    /** Tree fragments that can be reused by incremental re-parses. */\r\n    fragments = [], \r\n    // @internal\r\n    tree, \r\n    // @internal\r\n    treeLen, \r\n    /**\r\n     * The current editor viewport (or some overapproximation thereof). Intended to be used\r\n     * for opportunistically avoiding work (in which case {@link skipUntilInView} should be\r\n     * called to make sure the parser is restarted when the skipped region becomes visible).\r\n     */\r\n    viewport, \r\n    // @internal\r\n    skipped, \r\n    /**\r\n     * This is where skipping parsers can register a promise that, when resolved, will\r\n     * schedule a new parse. It is cleared when the parse worker picks up the promise.\r\n     */\r\n    scheduleOn) {\r\n        this.parser = parser;\r\n        this.state = state;\r\n        this.fragments = fragments;\r\n        this.tree = tree;\r\n        this.treeLen = treeLen;\r\n        this.viewport = viewport;\r\n        this.skipped = skipped;\r\n        this.scheduleOn = scheduleOn;\r\n        this.parse = null;\r\n        // @internal\r\n        this.tempSkipped = [];\r\n    }\r\n    // @internal\r\n    static create(parser, state, viewport) {\r\n        return new ParseContext(parser, state, [], _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree.empty, 0, viewport, [], null);\r\n    }\r\n    startParse() {\r\n        return this.parser.startParse(new DocInput(this.state.doc), this.fragments);\r\n    }\r\n    // @internal\r\n    work(until, upto) {\r\n        if (upto != null && upto >= this.state.doc.length)\r\n            upto = undefined;\r\n        if (this.tree != _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {\r\n            this.takeTree();\r\n            return true;\r\n        }\r\n        return this.withContext(() => {\r\n            var _a;\r\n            if (typeof until == \"number\") {\r\n                let endTime = Date.now() + until;\r\n                until = () => Date.now() > endTime;\r\n            }\r\n            if (!this.parse)\r\n                this.parse = this.startParse();\r\n            if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&\r\n                upto < this.state.doc.length)\r\n                this.parse.stopAt(upto);\r\n            for (;;) {\r\n                let done = this.parse.advance();\r\n                if (done) {\r\n                    this.fragments = this.withoutTempSkipped(_lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));\r\n                    this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;\r\n                    this.tree = done;\r\n                    this.parse = null;\r\n                    if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))\r\n                        this.parse = this.startParse();\r\n                    else\r\n                        return true;\r\n                }\r\n                if (until())\r\n                    return false;\r\n            }\r\n        });\r\n    }\r\n    // @internal\r\n    takeTree() {\r\n        let pos, tree;\r\n        if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {\r\n            if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)\r\n                this.parse.stopAt(pos);\r\n            this.withContext(() => { while (!(tree = this.parse.advance())) { } });\r\n            this.treeLen = pos;\r\n            this.tree = tree;\r\n            this.fragments = this.withoutTempSkipped(_lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.TreeFragment.addTree(this.tree, this.fragments, true));\r\n            this.parse = null;\r\n        }\r\n    }\r\n    withContext(f) {\r\n        let prev = currentContext;\r\n        currentContext = this;\r\n        try {\r\n            return f();\r\n        }\r\n        finally {\r\n            currentContext = prev;\r\n        }\r\n    }\r\n    withoutTempSkipped(fragments) {\r\n        for (let r; r = this.tempSkipped.pop();)\r\n            fragments = cutFragments(fragments, r.from, r.to);\r\n        return fragments;\r\n    }\r\n    // @internal\r\n    changes(changes, newState) {\r\n        let { fragments, tree, treeLen, viewport, skipped } = this;\r\n        this.takeTree();\r\n        if (!changes.empty) {\r\n            let ranges = [];\r\n            changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));\r\n            fragments = _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.TreeFragment.applyChanges(fragments, ranges);\r\n            tree = _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree.empty;\r\n            treeLen = 0;\r\n            viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };\r\n            if (this.skipped.length) {\r\n                skipped = [];\r\n                for (let r of this.skipped) {\r\n                    let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);\r\n                    if (from < to)\r\n                        skipped.push({ from, to });\r\n                }\r\n            }\r\n        }\r\n        return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);\r\n    }\r\n    // @internal\r\n    updateViewport(viewport) {\r\n        if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)\r\n            return false;\r\n        this.viewport = viewport;\r\n        let startLen = this.skipped.length;\r\n        for (let i = 0; i < this.skipped.length; i++) {\r\n            let { from, to } = this.skipped[i];\r\n            if (from < viewport.to && to > viewport.from) {\r\n                this.fragments = cutFragments(this.fragments, from, to);\r\n                this.skipped.splice(i--, 1);\r\n            }\r\n        }\r\n        if (this.skipped.length >= startLen)\r\n            return false;\r\n        this.reset();\r\n        return true;\r\n    }\r\n    // @internal\r\n    reset() {\r\n        if (this.parse) {\r\n            this.takeTree();\r\n            this.parse = null;\r\n        }\r\n    }\r\n    /**\r\n     * Notify the parse scheduler that the given region was skipped because it wasn't in view,\r\n     * and the parse should be restarted when it comes into view.\r\n     */\r\n    skipUntilInView(from, to) {\r\n        this.skipped.push({ from, to });\r\n    }\r\n    /**\r\n     * Returns a parser intended to be used as placeholder when asynchronously loading a nested\r\n     * parser. It'll skip its input and mark it as not-really-parsed, so that the next update\r\n     * will parse it again.\r\n     * @param until a reparse will be scheduled when the promise resolves.\r\n     */\r\n    static getSkippingParser(until) {\r\n        return new class extends _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Parser {\r\n            createParse(input, fragments, ranges) {\r\n                let from = ranges[0].from, to = ranges[ranges.length - 1].to;\r\n                let parser = {\r\n                    parsedPos: from,\r\n                    advance() {\r\n                        let cx = currentContext;\r\n                        if (cx) {\r\n                            for (let r of ranges)\r\n                                cx.tempSkipped.push(r);\r\n                            if (until)\r\n                                cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;\r\n                        }\r\n                        this.parsedPos = to;\r\n                        return new _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree(_lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.none, [], [], to - from);\r\n                    },\r\n                    stoppedAt: null,\r\n                    stopAt() { }\r\n                };\r\n                return parser;\r\n            }\r\n        };\r\n    }\r\n    // @internal\r\n    isDone(upto) {\r\n        upto = Math.min(upto, this.state.doc.length);\r\n        let frags = this.fragments;\r\n        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;\r\n    }\r\n    /** Get the context for the current parse, or `null` if no editor parse is in progress. */\r\n    static get() { return currentContext; }\r\n}\r\nfunction cutFragments(fragments, from, to) {\r\n    return _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);\r\n}\r\nclass LanguageState {\r\n    constructor(\r\n    // A mutable parse state that is used to preserve work done during\r\n    // the lifetime of a state when moving to the next state.\r\n    context) {\r\n        this.context = context;\r\n        this.tree = context.tree;\r\n    }\r\n    apply(tr) {\r\n        if (!tr.docChanged && this.tree == this.context.tree)\r\n            return this;\r\n        let newCx = this.context.changes(tr.changes, tr.state);\r\n        // If the previous parse wasn't done, go forward only up to its\r\n        // end position or the end of the viewport, to avoid slowing down\r\n        // state updates with parse work beyond the viewport.\r\n        let upto = this.context.treeLen == tr.startState.doc.length ? undefined\r\n            : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);\r\n        if (!newCx.work(20 /* Apply */, upto))\r\n            newCx.takeTree();\r\n        return new LanguageState(newCx);\r\n    }\r\n    static init(state) {\r\n        let vpTo = Math.min(3000 /* InitViewport */, state.doc.length);\r\n        let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });\r\n        if (!parseState.work(20 /* Apply */, vpTo))\r\n            parseState.takeTree();\r\n        return new LanguageState(parseState);\r\n    }\r\n}\r\nLanguage.state = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create: LanguageState.init,\r\n    update(value, tr) {\r\n        for (let e of tr.effects)\r\n            if (e.is(Language.setState))\r\n                return e.value;\r\n        if (tr.startState.facet(language) != tr.state.facet(language))\r\n            return LanguageState.init(tr.state);\r\n        return value.apply(tr);\r\n    }\r\n});\r\nlet requestIdle = (callback) => {\r\n    let timeout = setTimeout(() => callback(), 500 /* MaxPause */);\r\n    return () => clearTimeout(timeout);\r\n};\r\nif (typeof requestIdleCallback != \"undefined\")\r\n    requestIdle = (callback) => {\r\n        let idle = -1, timeout = setTimeout(() => {\r\n            idle = requestIdleCallback(callback, { timeout: 500 /* MaxPause */ - 100 /* MinPause */ });\r\n        }, 100 /* MinPause */);\r\n        return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);\r\n    };\r\nconst isInputPending = typeof navigator != \"undefined\" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)\r\n    ? () => navigator.scheduling.isInputPending() : null;\r\nconst parseWorker = _view_index_js__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.fromClass(class ParseWorker {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.working = null;\r\n        this.workScheduled = 0;\r\n        // End of the current time chunk\r\n        this.chunkEnd = -1;\r\n        // Milliseconds of budget left for this chunk\r\n        this.chunkBudget = -1;\r\n        this.work = this.work.bind(this);\r\n        this.scheduleWork();\r\n    }\r\n    update(update) {\r\n        let cx = this.view.state.field(Language.state).context;\r\n        if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)\r\n            this.scheduleWork();\r\n        if (update.docChanged) {\r\n            if (this.view.hasFocus)\r\n                this.chunkBudget += 50 /* ChangeBonus */;\r\n            this.scheduleWork();\r\n        }\r\n        this.checkAsyncSchedule(cx);\r\n    }\r\n    scheduleWork() {\r\n        if (this.working)\r\n            return;\r\n        let { state } = this.view, field = state.field(Language.state);\r\n        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))\r\n            this.working = requestIdle(this.work);\r\n    }\r\n    work(deadline) {\r\n        this.working = null;\r\n        let now = Date.now();\r\n        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk\r\n            this.chunkEnd = now + 30000 /* ChunkTime */;\r\n            this.chunkBudget = 3000 /* ChunkBudget */;\r\n        }\r\n        if (this.chunkBudget <= 0)\r\n            return; // No more budget\r\n        let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);\r\n        if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* MaxParseAhead */))\r\n            return;\r\n        let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Slice */, deadline && !isInputPending ? Math.max(25 /* MinSlice */, deadline.timeRemaining() - 5) : 1e9);\r\n        let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;\r\n        let done = field.context.work(() => {\r\n            return isInputPending && isInputPending() || Date.now() > endTime;\r\n        }, vpTo + (viewportFirst ? 0 : 100000 /* MaxParseAhead */));\r\n        this.chunkBudget -= Date.now() - now;\r\n        if (done || this.chunkBudget <= 0) {\r\n            field.context.takeTree();\r\n            this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });\r\n        }\r\n        if (this.chunkBudget > 0 && !(done && !viewportFirst))\r\n            this.scheduleWork();\r\n        this.checkAsyncSchedule(field.context);\r\n    }\r\n    checkAsyncSchedule(cx) {\r\n        if (cx.scheduleOn) {\r\n            this.workScheduled++;\r\n            cx.scheduleOn\r\n                .then(() => this.scheduleWork())\r\n                .catch(err => (0,_view_index_js__WEBPACK_IMPORTED_MODULE_2__.logException)(this.view.state, err))\r\n                .then(() => this.workScheduled--);\r\n            cx.scheduleOn = null;\r\n        }\r\n    }\r\n    destroy() {\r\n        if (this.working)\r\n            this.working();\r\n    }\r\n    isWorking() {\r\n        return !!(this.working || this.workScheduled > 0);\r\n    }\r\n}, {\r\n    eventHandlers: { focus() { this.scheduleWork(); } }\r\n});\r\n/** The facet used to associate a language with an editor state. */\r\nconst language = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\r\n    combine(languages) { return languages.length ? languages[0] : null; },\r\n    enables: [Language.state, parseWorker]\r\n});\r\n/**\r\n * This class bundles a {@link language} with an optional set of supporting extensions.\r\n * Language packages are encouraged to export a function that optionally takes a\r\n * configuration object and returns a `LanguageSupport` instance, as the main way for\r\n * client code to use the package.\r\n */\r\nclass LanguageSupport {\r\n    /** Create a language support object. */\r\n    constructor(\r\n    /** The language object. */\r\n    language, \r\n    /**\r\n     * An optional set of supporting extensions. When nesting a language in another\r\n     * language, the outer language is encouraged to include the supporting extensions\r\n     * for its inner languages in its own set of support extensions.\r\n     */\r\n    support = []) {\r\n        this.language = language;\r\n        this.support = support;\r\n        this.extension = [language, support];\r\n    }\r\n}\r\n/**\r\n * Language descriptions are used to store metadata about languages and to dynamically load them.\r\n * Their main role is finding the appropriate language for a filename or dynamically loading\r\n * nested parsers.\r\n */\r\nclass LanguageDescription {\r\n    constructor(\r\n    /** The name of this language. */\r\n    name, \r\n    /** Alternative names for the mode (lowercased, includes `this.name`). */\r\n    alias, \r\n    /** File extensions associated with this language. */\r\n    extensions, \r\n    /** Optional filename pattern that should be associated with this language. */\r\n    filename, loadFunc, \r\n    /** If the language has been loaded, this will hold its value. */\r\n    support = undefined) {\r\n        this.name = name;\r\n        this.alias = alias;\r\n        this.extensions = extensions;\r\n        this.filename = filename;\r\n        this.loadFunc = loadFunc;\r\n        this.support = support;\r\n        this.loading = null;\r\n    }\r\n    /**\r\n     * Start loading the the language. Will return a promise that resolves to a\r\n     * {@link LanguageSupport} object when the language successfully loads.\r\n     */\r\n    load() {\r\n        return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => { this.loading = null; throw err; }));\r\n    }\r\n    /**\r\n     * Create a language description.\r\n     * @param spec.name The language's name.\r\n     * @param [spec.alias] An optional array of alternative names.\r\n     * @param [spec.extensions] An optional array of filename extensions associated with this language.\r\n     * @param [spec.filename] An optional filename pattern associated with this language.\r\n     * @param [spec.load] A function that will asynchronously load the language.\r\n     * @param [spec.support] Alternatively to `load`, you can provide an already loaded support object. Either this or `load` should be provided.\r\n     */\r\n    static of(spec) {\r\n        let { load, support } = spec;\r\n        if (!load) {\r\n            if (!support)\r\n                throw new RangeError(\"Must pass either 'load' or 'support' to LanguageDescription.of\");\r\n            load = () => Promise.resolve(support);\r\n        }\r\n        return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);\r\n    }\r\n    /**\r\n     * Look for a language in the given array of descriptions that matches the filename.\r\n     * Will first match {@link filename} patterns, and then {@link extensions}, and return\r\n     * the first language that matches.\r\n     */\r\n    static matchFilename(descs, filename) {\r\n        for (let d of descs)\r\n            if (d.filename && d.filename.test(filename))\r\n                return d;\r\n        let ext = /\\.([^.]+)$/.exec(filename);\r\n        if (ext)\r\n            for (let d of descs)\r\n                if (d.extensions.indexOf(ext[1]) > -1)\r\n                    return d;\r\n        return null;\r\n    }\r\n    /**\r\n     * Look for a language whose name or alias matches the the given name (case-insensitively).\r\n     * If `fuzzy` is true, and no direct matchs is found, this'll also search for a language\r\n     * whose name or alias occurs in the string (for names shorter than three characters, only\r\n     * when surrounded by non-word characters).\r\n     */\r\n    static matchLanguageName(descs, name, fuzzy = true) {\r\n        name = name.toLowerCase();\r\n        for (let d of descs)\r\n            if (d.alias.some(a => a == name))\r\n                return d;\r\n        if (fuzzy)\r\n            for (let d of descs)\r\n                for (let a of d.alias) {\r\n                    let found = name.indexOf(a);\r\n                    if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length])))\r\n                        return d;\r\n                }\r\n        return null;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/language/language.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/language/matchbrackets.js":
/*!*************************************************************!*\
  !*** ./sys/public/js/editor/dist/language/matchbrackets.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"bracketMatching\": () => (/* binding */ bracketMatching),\n/* harmony export */   \"matchBrackets\": () => (/* binding */ matchBrackets)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _language_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./language.js */ \"./sys/public/js/editor/dist/language/language.js\");\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lezer/common/index.js */ \"./sys/public/js/editor/dist/lezer/common/index.js\");\n\r\n\r\n\r\n\r\nconst baseTheme = _view_index_js__WEBPACK_IMPORTED_MODULE_2__.EditorView.baseTheme({\r\n    \"&.cm-focused .cm-matchingBracket\": { backgroundColor: \"#328c8252\" },\r\n    \"&.cm-focused .cm-nonmatchingBracket\": { backgroundColor: \"#bb555544\" }\r\n});\r\nconst DefaultScanDist = 10000, DefaultBrackets = \"()[]{}\";\r\nconst bracketMatchingConfig = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({\r\n    combine(configs) {\r\n        return (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.combineConfig)(configs, {\r\n            afterCursor: true,\r\n            brackets: DefaultBrackets,\r\n            maxScanDistance: DefaultScanDist,\r\n            renderMatch: defaultRenderMatch\r\n        });\r\n    }\r\n});\r\nconst matchingMark = _view_index_js__WEBPACK_IMPORTED_MODULE_2__.Decoration.mark({ class: \"cm-matchingBracket\" }), nonmatchingMark = _view_index_js__WEBPACK_IMPORTED_MODULE_2__.Decoration.mark({ class: \"cm-nonmatchingBracket\" });\r\nfunction defaultRenderMatch(match) {\r\n    let decorations = [];\r\n    let mark = match.matched ? matchingMark : nonmatchingMark;\r\n    decorations.push(mark.range(match.start.from, match.start.to));\r\n    if (match.end)\r\n        decorations.push(mark.range(match.end.from, match.end.to));\r\n    return decorations;\r\n}\r\nconst bracketMatchingState = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.StateField.define({\r\n    create() { return _view_index_js__WEBPACK_IMPORTED_MODULE_2__.Decoration.none; },\r\n    update(deco, tr) {\r\n        if (!tr.docChanged && !tr.selection)\r\n            return deco;\r\n        let decorations = [];\r\n        let config = tr.state.facet(bracketMatchingConfig);\r\n        for (let range of tr.state.selection.ranges) {\r\n            if (!range.empty)\r\n                continue;\r\n            let match = matchBrackets(tr.state, range.head, -1, config)\r\n                || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))\r\n                || (config.afterCursor &&\r\n                    (matchBrackets(tr.state, range.head, 1, config) ||\r\n                        (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));\r\n            if (match)\r\n                decorations = decorations.concat(config.renderMatch(match, tr.state));\r\n        }\r\n        return _view_index_js__WEBPACK_IMPORTED_MODULE_2__.Decoration.set(decorations, true);\r\n    },\r\n    provide: f => _view_index_js__WEBPACK_IMPORTED_MODULE_2__.EditorView.decorations.from(f)\r\n});\r\nconst bracketMatchingUnique = [\r\n    bracketMatchingState,\r\n    baseTheme\r\n];\r\n/**\r\n * Create an extension that enables bracket matching. Whenever the cursor is next to a bracket,\r\n * that bracket and the one it matches are highlighted. Or, when no matching bracket is found,\r\n * another highlighting style is used to indicate this.\r\n */\r\nfunction bracketMatching(config = {}) {\r\n    return [bracketMatchingConfig.of(config), bracketMatchingUnique];\r\n}\r\nfunction matchingNodes(node, dir, brackets) {\r\n    let byProp = node.prop(dir < 0 ? _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_3__.NodeProp.openedBy : _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_3__.NodeProp.closedBy);\r\n    if (byProp)\r\n        return byProp;\r\n    if (node.name.length == 1) {\r\n        let index = brackets.indexOf(node.name);\r\n        if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))\r\n            return [brackets[index + dir]];\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Find the matching bracket for the token at `pos`, scanning direction `dir`. Only the\r\n * `brackets` and `maxScanDistance` properties are used from `config`, if given. Returns\r\n * null if no bracket was found at `pos`, or a match result otherwise.\r\n */\r\nfunction matchBrackets(state, pos, dir, config = {}) {\r\n    let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;\r\n    let tree = (0,_language_js__WEBPACK_IMPORTED_MODULE_1__.syntaxTree)(state), node = tree.resolveInner(pos, dir);\r\n    for (let cur = node; cur; cur = cur.parent) {\r\n        let matches = matchingNodes(cur.type, dir, brackets);\r\n        if (matches && cur.from < cur.to)\r\n            return matchMarkedBrackets(state, pos, dir, cur, matches, brackets);\r\n    }\r\n    return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);\r\n}\r\nfunction matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {\r\n    let parent = token.parent, firstToken = { from: token.from, to: token.to };\r\n    let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();\r\n    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))\r\n        do {\r\n            if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {\r\n                if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {\r\n                    return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: true };\r\n                }\r\n                else if (matchingNodes(cursor.type, dir, brackets)) {\r\n                    depth++;\r\n                }\r\n                else if (matchingNodes(cursor.type, -dir, brackets)) {\r\n                    depth--;\r\n                    if (depth == 0)\r\n                        return {\r\n                            start: firstToken,\r\n                            end: cursor.from == cursor.to ? undefined : { from: cursor.from, to: cursor.to },\r\n                            matched: false\r\n                        };\r\n                }\r\n            }\r\n        } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());\r\n    return { start: firstToken, matched: false };\r\n}\r\nfunction matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {\r\n    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);\r\n    let bracket = brackets.indexOf(startCh);\r\n    if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))\r\n        return null;\r\n    let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };\r\n    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;\r\n    for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {\r\n        let text = iter.value;\r\n        if (dir < 0)\r\n            distance += text.length;\r\n        let basePos = pos + distance * dir;\r\n        for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {\r\n            let found = brackets.indexOf(text[pos]);\r\n            if (found < 0 || tree.resolve(basePos + pos, 1).type != tokenType)\r\n                continue;\r\n            if ((found % 2 == 0) == (dir > 0)) {\r\n                depth++;\r\n            }\r\n            else if (depth == 1) { // Closing\r\n                return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };\r\n            }\r\n            else {\r\n                depth--;\r\n            }\r\n        }\r\n        if (dir > 0)\r\n            distance += text.length;\r\n    }\r\n    return iter.done ? { start: startToken, matched: false } : null;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/language/matchbrackets.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/language/stream-parser.js":
/*!*************************************************************!*\
  !*** ./sys/public/js/editor/dist/language/stream-parser.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StreamLanguage\": () => (/* binding */ StreamLanguage),\n/* harmony export */   \"StringStream\": () => (/* reexport safe */ _stringstream_js__WEBPACK_IMPORTED_MODULE_4__.StringStream)\n/* harmony export */ });\n/* harmony import */ var _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lezer/common/index.js */ \"./sys/public/js/editor/dist/lezer/common/index.js\");\n/* harmony import */ var _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lezer/highlight/index.js */ \"./sys/public/js/editor/dist/lezer/highlight/index.js\");\n/* harmony import */ var _language_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./language.js */ \"./sys/public/js/editor/dist/language/language.js\");\n/* harmony import */ var _indent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./indent.js */ \"./sys/public/js/editor/dist/language/indent.js\");\n/* harmony import */ var _stringstream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stringstream.js */ \"./sys/public/js/editor/dist/language/stringstream.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nfunction fullParser(spec) {\r\n    return {\r\n        token: spec.token,\r\n        blankLine: spec.blankLine || (() => { }),\r\n        startState: spec.startState || (() => true),\r\n        copyState: spec.copyState || defaultCopyState,\r\n        indent: spec.indent || (() => null),\r\n        languageData: spec.languageData || {},\r\n        tokenTable: spec.tokenTable || noTokens\r\n    };\r\n}\r\nfunction defaultCopyState(state) {\r\n    if (typeof state != \"object\")\r\n        return state;\r\n    let newState = {};\r\n    for (let prop in state) {\r\n        let val = state[prop];\r\n        newState[prop] = (val instanceof Array ? val.slice() : val);\r\n    }\r\n    return newState;\r\n}\r\n/** A [language]{@link Language} class based on a CodeMirror 5-style [streaming parser](#language.StreamParser). */\r\nclass StreamLanguage extends _language_js__WEBPACK_IMPORTED_MODULE_2__.Language {\r\n    constructor(parser) {\r\n        let data = (0,_language_js__WEBPACK_IMPORTED_MODULE_2__.defineLanguageFacet)(parser.languageData);\r\n        let p = fullParser(parser), self;\r\n        let impl = new class extends _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Parser {\r\n            createParse(input, fragments, ranges) {\r\n                return new Parse(self, input, fragments, ranges);\r\n            }\r\n        };\r\n        super(data, impl, [_indent_js__WEBPACK_IMPORTED_MODULE_3__.indentService.of((cx, pos) => this.getIndent(cx, pos))]);\r\n        this.topNode = docID(data);\r\n        self = this;\r\n        this.streamParser = p;\r\n        this.stateAfter = new _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp({ perNode: true });\r\n        this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;\r\n    }\r\n    /** Define a stream language. */\r\n    static define(spec) { return new StreamLanguage(spec); }\r\n    getIndent(cx, pos) {\r\n        let tree = (0,_language_js__WEBPACK_IMPORTED_MODULE_2__.syntaxTree)(cx.state), at = tree.resolve(pos);\r\n        while (at && at.type != this.topNode)\r\n            at = at.parent;\r\n        if (!at)\r\n            return null;\r\n        let start = findState(this, tree, 0, at.from, pos), statePos, state;\r\n        if (start) {\r\n            state = start.state;\r\n            statePos = start.pos + 1;\r\n        }\r\n        else {\r\n            state = this.streamParser.startState(cx.unit);\r\n            statePos = 0;\r\n        }\r\n        if (pos - statePos > 10000 /* MaxIndentScanDist */)\r\n            return null;\r\n        while (statePos < pos) {\r\n            let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);\r\n            if (line.length) {\r\n                let stream = new _stringstream_js__WEBPACK_IMPORTED_MODULE_4__.StringStream(line.text, cx.state.tabSize, cx.unit);\r\n                while (stream.pos < end - line.from)\r\n                    readToken(this.streamParser.token, stream, state);\r\n            }\r\n            else {\r\n                this.streamParser.blankLine(state, cx.unit);\r\n            }\r\n            if (end == pos)\r\n                break;\r\n            statePos = line.to + 1;\r\n        }\r\n        let { text } = cx.lineAt(pos);\r\n        return this.streamParser.indent(state, /^\\s*(.*)/.exec(text)[1], cx);\r\n    }\r\n    get allowsNesting() { return false; }\r\n}\r\nfunction findState(lang, tree, off, startPos, before) {\r\n    let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);\r\n    if (state)\r\n        return { state: lang.streamParser.copyState(state), pos: off + tree.length };\r\n    for (let i = tree.children.length - 1; i >= 0; i--) {\r\n        let child = tree.children[i], pos = off + tree.positions[i];\r\n        let found = child instanceof _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree && pos < before && findState(lang, child, pos, startPos, before);\r\n        if (found)\r\n            return found;\r\n    }\r\n    return null;\r\n}\r\nfunction cutTree(lang, tree, from, to, inside) {\r\n    if (inside && from <= 0 && to >= tree.length)\r\n        return tree;\r\n    if (!inside && tree.type == lang.topNode)\r\n        inside = true;\r\n    for (let i = tree.children.length - 1; i >= 0; i--) {\r\n        let pos = tree.positions[i], child = tree.children[i], inner;\r\n        if (pos < to && child instanceof _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree) {\r\n            if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))\r\n                break;\r\n            return !inside ? inner\r\n                : new _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction findStartInFragments(lang, fragments, startPos, editorState) {\r\n    for (let f of fragments) {\r\n        let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);\r\n        let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;\r\n        if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))\r\n            return { state: found.state, tree };\r\n    }\r\n    return { state: lang.streamParser.startState(editorState ? (0,_indent_js__WEBPACK_IMPORTED_MODULE_3__.getIndentUnit)(editorState) : 4), tree: _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree.empty };\r\n}\r\nclass Parse {\r\n    constructor(lang, input, fragments, ranges) {\r\n        this.lang = lang;\r\n        this.input = input;\r\n        this.fragments = fragments;\r\n        this.ranges = ranges;\r\n        this.stoppedAt = null;\r\n        this.chunks = [];\r\n        this.chunkPos = [];\r\n        this.chunk = [];\r\n        this.chunkReused = undefined;\r\n        this.rangeIndex = 0;\r\n        this.to = ranges[ranges.length - 1].to;\r\n        let context = _language_js__WEBPACK_IMPORTED_MODULE_2__.ParseContext.get(), from = ranges[0].from;\r\n        let { state, tree } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);\r\n        this.state = state;\r\n        this.parsedPos = this.chunkStart = from + tree.length;\r\n        for (let i = 0; i < tree.children.length; i++) {\r\n            this.chunks.push(tree.children[i]);\r\n            this.chunkPos.push(tree.positions[i]);\r\n        }\r\n        if (context && this.parsedPos < context.viewport.from - 100000 /* MaxDistanceBeforeViewport */) {\r\n            this.state = this.lang.streamParser.startState((0,_indent_js__WEBPACK_IMPORTED_MODULE_3__.getIndentUnit)(context.state));\r\n            context.skipUntilInView(this.parsedPos, context.viewport.from);\r\n            this.parsedPos = context.viewport.from;\r\n        }\r\n        this.moveRangeIndex();\r\n    }\r\n    advance() {\r\n        let context = _language_js__WEBPACK_IMPORTED_MODULE_2__.ParseContext.get();\r\n        let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);\r\n        let end = Math.min(parseEnd, this.chunkStart + 2048 /* ChunkSize */);\r\n        if (context)\r\n            end = Math.min(end, context.viewport.to);\r\n        while (this.parsedPos < end)\r\n            this.parseLine(context);\r\n        if (this.chunkStart < this.parsedPos)\r\n            this.finishChunk();\r\n        if (this.parsedPos >= parseEnd)\r\n            return this.finish();\r\n        if (context && this.parsedPos >= context.viewport.to) {\r\n            context.skipUntilInView(this.parsedPos, parseEnd);\r\n            return this.finish();\r\n        }\r\n        return null;\r\n    }\r\n    stopAt(pos) {\r\n        this.stoppedAt = pos;\r\n    }\r\n    lineAfter(pos) {\r\n        let chunk = this.input.chunk(pos);\r\n        if (!this.input.lineChunks) {\r\n            let eol = chunk.indexOf(\"\\n\");\r\n            if (eol > -1)\r\n                chunk = chunk.slice(0, eol);\r\n        }\r\n        else if (chunk == \"\\n\") {\r\n            chunk = \"\";\r\n        }\r\n        return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);\r\n    }\r\n    nextLine() {\r\n        let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;\r\n        for (let index = this.rangeIndex;;) {\r\n            let rangeEnd = this.ranges[index].to;\r\n            if (rangeEnd >= end)\r\n                break;\r\n            line = line.slice(0, rangeEnd - (end - line.length));\r\n            index++;\r\n            if (index == this.ranges.length)\r\n                break;\r\n            let rangeStart = this.ranges[index].from;\r\n            let after = this.lineAfter(rangeStart);\r\n            line += after;\r\n            end = rangeStart + after.length;\r\n        }\r\n        return { line, end };\r\n    }\r\n    skipGapsTo(pos, offset, side) {\r\n        for (;;) {\r\n            let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;\r\n            if (side > 0 ? end > offPos : end >= offPos)\r\n                break;\r\n            let start = this.ranges[++this.rangeIndex].from;\r\n            offset += start - end;\r\n        }\r\n        return offset;\r\n    }\r\n    moveRangeIndex() {\r\n        while (this.ranges[this.rangeIndex].to < this.parsedPos)\r\n            this.rangeIndex++;\r\n    }\r\n    emitToken(id, from, to, size, offset) {\r\n        if (this.ranges.length > 1) {\r\n            offset = this.skipGapsTo(from, offset, 1);\r\n            from += offset;\r\n            let len0 = this.chunk.length;\r\n            offset = this.skipGapsTo(to, offset, -1);\r\n            to += offset;\r\n            size += this.chunk.length - len0;\r\n        }\r\n        this.chunk.push(id, from, to, size);\r\n        return offset;\r\n    }\r\n    parseLine(context) {\r\n        let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;\r\n        let stream = new _stringstream_js__WEBPACK_IMPORTED_MODULE_4__.StringStream(line, context ? context.state.tabSize : 4, context ? (0,_indent_js__WEBPACK_IMPORTED_MODULE_3__.getIndentUnit)(context.state) : 2);\r\n        if (stream.eol()) {\r\n            streamParser.blankLine(this.state, stream.indentUnit);\r\n        }\r\n        else {\r\n            while (!stream.eol()) {\r\n                let token = readToken(streamParser.token, stream, this.state);\r\n                if (token)\r\n                    offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);\r\n                if (stream.start > 10000 /* MaxLineLength */)\r\n                    break;\r\n            }\r\n        }\r\n        this.parsedPos = end;\r\n        this.moveRangeIndex();\r\n        if (this.parsedPos < this.to)\r\n            this.parsedPos++;\r\n    }\r\n    finishChunk() {\r\n        let tree = _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree.build({\r\n            buffer: this.chunk,\r\n            start: this.chunkStart,\r\n            length: this.parsedPos - this.chunkStart,\r\n            nodeSet,\r\n            topID: 0,\r\n            maxBufferLength: 2048 /* ChunkSize */,\r\n            reused: this.chunkReused\r\n        });\r\n        tree = new _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);\r\n        this.chunks.push(tree);\r\n        this.chunkPos.push(this.chunkStart - this.ranges[0].from);\r\n        this.chunk = [];\r\n        this.chunkReused = undefined;\r\n        this.chunkStart = this.parsedPos;\r\n    }\r\n    finish() {\r\n        return new _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();\r\n    }\r\n}\r\nfunction readToken(token, stream, state) {\r\n    stream.start = stream.pos;\r\n    for (let i = 0; i < 10; i++) {\r\n        let result = token(stream, state);\r\n        if (stream.pos > stream.start)\r\n            return result;\r\n    }\r\n    throw new Error(\"Stream parser failed to advance stream.\");\r\n}\r\nconst noTokens = Object.create(null);\r\nconst typeArray = [_lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.none];\r\nconst nodeSet = new _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeSet(typeArray);\r\nconst warned = [];\r\nconst defaultTable = Object.create(null);\r\nfor (let [legacyName, name] of [\r\n    [\"variable\", \"variableName\"],\r\n    [\"variable-2\", \"variableName.special\"],\r\n    [\"string-2\", \"string.special\"],\r\n    [\"def\", \"variableName.definition\"],\r\n    [\"tag\", \"typeName\"],\r\n    [\"attribute\", \"propertyName\"],\r\n    [\"type\", \"typeName\"],\r\n    [\"builtin\", \"variableName.standard\"],\r\n    [\"qualifier\", \"modifier\"],\r\n    [\"error\", \"invalid\"],\r\n    [\"header\", \"heading\"],\r\n    [\"property\", \"propertyName\"]\r\n])\r\n    defaultTable[legacyName] = createTokenType(noTokens, name);\r\nclass TokenTable {\r\n    constructor(extra) {\r\n        this.extra = extra;\r\n        this.table = Object.assign(Object.create(null), defaultTable);\r\n    }\r\n    resolve(tag) {\r\n        return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));\r\n    }\r\n}\r\nconst defaultTokenTable = new TokenTable(noTokens);\r\nfunction warnForPart(part, msg) {\r\n    if (warned.indexOf(part) > -1)\r\n        return;\r\n    warned.push(part);\r\n    console.warn(msg);\r\n}\r\nfunction createTokenType(extra, tagStr) {\r\n    let tag = null;\r\n    for (let part of tagStr.split(\".\")) {\r\n        let value = (extra[part] || _lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.tags[part]);\r\n        if (!value) {\r\n            warnForPart(part, `Unknown highlighting tag ${part}`);\r\n        }\r\n        else if (typeof value == \"function\") {\r\n            if (!tag)\r\n                warnForPart(part, `Modifier ${part} used at start of tag`);\r\n            else\r\n                tag = value(tag);\r\n        }\r\n        else {\r\n            if (tag)\r\n                warnForPart(part, `Tag ${part} used as modifier`);\r\n            else\r\n                tag = value;\r\n        }\r\n    }\r\n    if (!tag)\r\n        return 0;\r\n    let name = tagStr.replace(/ /g, \"_\"), type = _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.define({\r\n        id: typeArray.length,\r\n        name,\r\n        props: [(0,_lezer_highlight_index_js__WEBPACK_IMPORTED_MODULE_1__.styleTags)({ [name]: tag })]\r\n    });\r\n    typeArray.push(type);\r\n    return type.id;\r\n}\r\nfunction docID(data) {\r\n    let type = _lezer_common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.define({ id: typeArray.length, name: \"Document\", props: [_language_js__WEBPACK_IMPORTED_MODULE_2__.languageDataProp.add(() => data)] });\r\n    typeArray.push(type);\r\n    return type;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/language/stream-parser.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/language/stringstream.js":
/*!************************************************************!*\
  !*** ./sys/public/js/editor/dist/language/stringstream.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StringStream\": () => (/* binding */ StringStream)\n/* harmony export */ });\n/** Counts the column offset in a string, taking tabs into account. Used mostly to find indentation. */\r\nfunction countCol(string, end, tabSize, startIndex = 0, startValue = 0) {\r\n    if (end == null) {\r\n        end = string.search(/[^\\s\\u00a0]/);\r\n        if (end == -1)\r\n            end = string.length;\r\n    }\r\n    let n = startValue;\r\n    for (let i = startIndex; i < end; i++) {\r\n        if (string.charCodeAt(i) == 9)\r\n            n += tabSize - (n % tabSize);\r\n        else\r\n            n++;\r\n    }\r\n    return n;\r\n}\r\n/** Encapsulates a single line of input. Given to stream syntax code, which uses it to tokenize the content. */\r\nclass StringStream {\r\n    /** Create a stream. */\r\n    constructor(\r\n    /** The line. */\r\n    string, tabSize, \r\n    /** The current indent unit size. */\r\n    indentUnit) {\r\n        this.string = string;\r\n        this.tabSize = tabSize;\r\n        this.indentUnit = indentUnit;\r\n        /** The current position on the line. */\r\n        this.pos = 0;\r\n        /** The start position of the current token. */\r\n        this.start = 0;\r\n        this.lastColumnPos = 0;\r\n        this.lastColumnValue = 0;\r\n    }\r\n    /** True if we are at the end of the line. */\r\n    eol() { return this.pos >= this.string.length; }\r\n    /** True if we are at the start of the line. */\r\n    sol() { return this.pos == 0; }\r\n    /** Get the next code unit after the current position, or undefined if we're at the end of the line. */\r\n    peek() { return this.string.charAt(this.pos) || undefined; }\r\n    /** Read the next code unit and advance `this.pos`. */\r\n    next() {\r\n        if (this.pos < this.string.length)\r\n            return this.string.charAt(this.pos++);\r\n    }\r\n    /** Match the next character against the given string, regular expression, or predicate. Consume and return it if it matches. */\r\n    eat(match) {\r\n        let ch = this.string.charAt(this.pos);\r\n        let ok;\r\n        if (typeof match == \"string\")\r\n            ok = ch == match;\r\n        else\r\n            ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));\r\n        if (ok) {\r\n            ++this.pos;\r\n            return ch;\r\n        }\r\n    }\r\n    /**\r\n     * Continue matching characters that match the given string, regular expression, or\r\n     * predicate function. Return true if any characters were consumed.\r\n     */\r\n    eatWhile(match) {\r\n        let start = this.pos;\r\n        while (this.eat(match)) { }\r\n        return this.pos > start;\r\n    }\r\n    /** Consume whitespace ahead of `this.pos`. Return true if any was found. */\r\n    eatSpace() {\r\n        let start = this.pos;\r\n        while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\r\n            ++this.pos;\r\n        return this.pos > start;\r\n    }\r\n    /** Move to the end of the line. */\r\n    skipToEnd() { this.pos = this.string.length; }\r\n    /** Move to directly before the given character, if found on the current line. */\r\n    skipTo(ch) {\r\n        let found = this.string.indexOf(ch, this.pos);\r\n        if (found > -1) {\r\n            this.pos = found;\r\n            return true;\r\n        }\r\n    }\r\n    /** Move back `n` characters. */\r\n    backUp(n) { this.pos -= n; }\r\n    /** Get the column position at `this.pos`. */\r\n    column() {\r\n        if (this.lastColumnPos < this.start) {\r\n            this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\r\n            this.lastColumnPos = this.start;\r\n        }\r\n        return this.lastColumnValue;\r\n    }\r\n    /** Get the indentation column of the current line. */\r\n    indentation() {\r\n        return countCol(this.string, null, this.tabSize);\r\n    }\r\n    /**\r\n     * Match the input against the given string or regular expression (which should start with a `^`).\r\n     * Return true or the regexp match if it matches.\r\n     *\r\n     * Unless `consume` is set to `false`, this will move `this.pos` past the matched text.\r\n     *\r\n     * When matching a string `caseInsensitive` can be set to true to make the match case-insensitive.\r\n     */\r\n    match(pattern, consume, caseInsensitive) {\r\n        if (typeof pattern == \"string\") {\r\n            let cased = (str) => caseInsensitive ? str.toLowerCase() : str;\r\n            let substr = this.string.substr(this.pos, pattern.length);\r\n            if (cased(substr) == cased(pattern)) {\r\n                if (consume !== false)\r\n                    this.pos += pattern.length;\r\n                return true;\r\n            }\r\n            else\r\n                return null;\r\n        }\r\n        else {\r\n            let match = this.string.slice(this.pos).match(pattern);\r\n            if (match && match.index > 0)\r\n                return null;\r\n            if (match && consume !== false)\r\n                this.pos += match[0].length;\r\n            return match;\r\n        }\r\n    }\r\n    /** Get the current token. */\r\n    current() { return this.string.slice(this.start, this.pos); }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/language/stringstream.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/lezer/common/index.js":
/*!*********************************************************!*\
  !*** ./sys/public/js/editor/dist/lezer/common/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DefaultBufferLength\": () => (/* reexport safe */ _tree_js__WEBPACK_IMPORTED_MODULE_0__.DefaultBufferLength),\n/* harmony export */   \"IterMode\": () => (/* reexport safe */ _tree_js__WEBPACK_IMPORTED_MODULE_0__.IterMode),\n/* harmony export */   \"MountedTree\": () => (/* reexport safe */ _tree_js__WEBPACK_IMPORTED_MODULE_0__.MountedTree),\n/* harmony export */   \"NodeProp\": () => (/* reexport safe */ _tree_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp),\n/* harmony export */   \"NodeSet\": () => (/* reexport safe */ _tree_js__WEBPACK_IMPORTED_MODULE_0__.NodeSet),\n/* harmony export */   \"NodeType\": () => (/* reexport safe */ _tree_js__WEBPACK_IMPORTED_MODULE_0__.NodeType),\n/* harmony export */   \"NodeWeakMap\": () => (/* reexport safe */ _tree_js__WEBPACK_IMPORTED_MODULE_0__.NodeWeakMap),\n/* harmony export */   \"Parser\": () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_1__.Parser),\n/* harmony export */   \"Tree\": () => (/* reexport safe */ _tree_js__WEBPACK_IMPORTED_MODULE_0__.Tree),\n/* harmony export */   \"TreeBuffer\": () => (/* reexport safe */ _tree_js__WEBPACK_IMPORTED_MODULE_0__.TreeBuffer),\n/* harmony export */   \"TreeCursor\": () => (/* reexport safe */ _tree_js__WEBPACK_IMPORTED_MODULE_0__.TreeCursor),\n/* harmony export */   \"TreeFragment\": () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_1__.TreeFragment),\n/* harmony export */   \"parseMixed\": () => (/* reexport safe */ _mix_js__WEBPACK_IMPORTED_MODULE_2__.parseMixed)\n/* harmony export */ });\n/* harmony import */ var _tree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tree.js */ \"./sys/public/js/editor/dist/lezer/common/tree.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse.js */ \"./sys/public/js/editor/dist/lezer/common/parse.js\");\n/* harmony import */ var _mix_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mix.js */ \"./sys/public/js/editor/dist/lezer/common/mix.js\");\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/lezer/common/index.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/lezer/common/mix.js":
/*!*******************************************************!*\
  !*** ./sys/public/js/editor/dist/lezer/common/mix.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parseMixed\": () => (/* binding */ parseMixed)\n/* harmony export */ });\n/* harmony import */ var _tree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tree.js */ \"./sys/public/js/editor/dist/lezer/common/tree.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse.js */ \"./sys/public/js/editor/dist/lezer/common/parse.js\");\n\r\n\r\nfunction parseMixed(nest) {\r\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\r\n}\r\nclass InnerParse {\r\n    constructor(parser, parse, overlay, target, ranges) {\r\n        this.parser = parser;\r\n        this.parse = parse;\r\n        this.overlay = overlay;\r\n        this.target = target;\r\n        this.ranges = ranges;\r\n    }\r\n}\r\nclass ActiveOverlay {\r\n    constructor(parser, predicate, mounts, index, start, target, prev) {\r\n        this.parser = parser;\r\n        this.predicate = predicate;\r\n        this.mounts = mounts;\r\n        this.index = index;\r\n        this.start = start;\r\n        this.target = target;\r\n        this.prev = prev;\r\n        this.depth = 0;\r\n        this.ranges = [];\r\n    }\r\n}\r\nconst stoppedInner = new _tree_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp({ perNode: true });\r\nclass MixedParse {\r\n    constructor(base, nest, input, fragments, ranges) {\r\n        this.nest = nest;\r\n        this.input = input;\r\n        this.fragments = fragments;\r\n        this.ranges = ranges;\r\n        this.inner = [];\r\n        this.innerDone = 0;\r\n        this.baseTree = null;\r\n        this.stoppedAt = null;\r\n        this.baseParse = base;\r\n    }\r\n    advance() {\r\n        if (this.baseParse) {\r\n            let done = this.baseParse.advance();\r\n            if (!done)\r\n                return null;\r\n            this.baseParse = null;\r\n            this.baseTree = done;\r\n            this.startInner();\r\n            if (this.stoppedAt != null)\r\n                for (let inner of this.inner)\r\n                    inner.parse.stopAt(this.stoppedAt);\r\n        }\r\n        if (this.innerDone == this.inner.length) {\r\n            let result = this.baseTree;\r\n            if (this.stoppedAt != null)\r\n                result = new _tree_js__WEBPACK_IMPORTED_MODULE_0__.Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\r\n            return result;\r\n        }\r\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\r\n        if (done) {\r\n            this.innerDone++;\r\n            // This is a somewhat dodgy but super helpful hack where we\r\n            // patch up nodes created by the inner parse (and thus\r\n            // presumably not aliased anywhere else) to hold the information\r\n            // about the inner parse.\r\n            let props = Object.assign(Object.create(null), inner.target.props);\r\n            props[_tree_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp.mounted.id] = new _tree_js__WEBPACK_IMPORTED_MODULE_0__.MountedTree(done, inner.overlay, inner.parser);\r\n            inner.target.props = props;\r\n        }\r\n        return null;\r\n    }\r\n    get parsedPos() {\r\n        if (this.baseParse)\r\n            return 0;\r\n        let pos = this.input.length;\r\n        for (let i = this.innerDone; i < this.inner.length; i++) {\r\n            if (this.inner[i].ranges[0].from < pos)\r\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\r\n        }\r\n        return pos;\r\n    }\r\n    stopAt(pos) {\r\n        this.stoppedAt = pos;\r\n        if (this.baseParse)\r\n            this.baseParse.stopAt(pos);\r\n        else\r\n            for (let i = this.innerDone; i < this.inner.length; i++)\r\n                this.inner[i].parse.stopAt(pos);\r\n    }\r\n    startInner() {\r\n        let fragmentCursor = new FragmentCursor(this.fragments);\r\n        let overlay = null;\r\n        let covered = null;\r\n        let cursor = new _tree_js__WEBPACK_IMPORTED_MODULE_0__.TreeCursor(new _tree_js__WEBPACK_IMPORTED_MODULE_0__.TreeNode(this.baseTree, this.ranges[0].from, 0, null), _tree_js__WEBPACK_IMPORTED_MODULE_0__.IterMode.IncludeAnonymous | _tree_js__WEBPACK_IMPORTED_MODULE_0__.IterMode.IgnoreMounts);\r\n        scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\r\n            let enter = true, range;\r\n            if (fragmentCursor.hasNode(cursor)) {\r\n                if (overlay) {\r\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\r\n                    if (match)\r\n                        for (let r of match.mount.overlay) {\r\n                            let from = r.from + match.pos, to = r.to + match.pos;\r\n                            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))\r\n                                overlay.ranges.push({ from, to });\r\n                        }\r\n                }\r\n                enter = false;\r\n            }\r\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\r\n                enter = isCovered != 2 /* Full */;\r\n            }\r\n            else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\r\n                if (!cursor.tree)\r\n                    materialize(cursor);\r\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\r\n                if (typeof nest.overlay == \"function\") {\r\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\r\n                }\r\n                else {\r\n                    let ranges = punchRanges(this.ranges, nest.overlay || [new _tree_js__WEBPACK_IMPORTED_MODULE_0__.Range(cursor.from, cursor.to)]);\r\n                    if (ranges.length)\r\n                        this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new _tree_js__WEBPACK_IMPORTED_MODULE_0__.Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\r\n                    if (!nest.overlay)\r\n                        enter = false;\r\n                    else if (ranges.length)\r\n                        covered = { ranges, depth: 0, prev: covered };\r\n                }\r\n            }\r\n            else if (overlay && (range = overlay.predicate(cursor))) {\r\n                if (range === true)\r\n                    range = new _tree_js__WEBPACK_IMPORTED_MODULE_0__.Range(cursor.from, cursor.to);\r\n                if (range.from < range.to)\r\n                    overlay.ranges.push(range);\r\n            }\r\n            if (enter && cursor.firstChild()) {\r\n                if (overlay)\r\n                    overlay.depth++;\r\n                if (covered)\r\n                    covered.depth++;\r\n            }\r\n            else {\r\n                for (;;) {\r\n                    if (cursor.nextSibling())\r\n                        break;\r\n                    if (!cursor.parent())\r\n                        break scan;\r\n                    if (overlay && !--overlay.depth) {\r\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\r\n                        if (ranges.length)\r\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new _tree_js__WEBPACK_IMPORTED_MODULE_0__.Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\r\n                        overlay = overlay.prev;\r\n                    }\r\n                    if (covered && !--covered.depth)\r\n                        covered = covered.prev;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction checkCover(covered, from, to) {\r\n    for (let range of covered) {\r\n        if (range.from >= to)\r\n            break;\r\n        if (range.to > from)\r\n            return range.from <= from && range.to >= to ? 2 /* Full */ : 1 /* Partial */;\r\n    }\r\n    return 0 /* None */;\r\n}\r\n// Take a piece of buffer and convert it into a stand-alone\r\n// TreeBuffer.\r\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\r\n    if (startI < endI) {\r\n        let from = buf.buffer[startI + 1], to = buf.buffer[endI - 2];\r\n        nodes.push(buf.slice(startI, endI, from, to));\r\n        positions.push(from - off);\r\n    }\r\n}\r\n// This function takes a node that's in a buffer, and converts it, and\r\n// its parent buffer nodes, into a Tree. This is again acting on the\r\n// assumption that the trees and buffers have been constructed by the\r\n// parse that was ran via the mix parser, and thus aren't shared with\r\n// any other code, making violations of the immutability safe.\r\nfunction materialize(cursor) {\r\n    let { node } = cursor, depth = 0;\r\n    // Scan up to the nearest tree\r\n    do {\r\n        cursor.parent();\r\n        depth++;\r\n    } while (!cursor.tree);\r\n    // Find the index of the buffer in that tree\r\n    let i = 0, base = cursor.tree, off = 0;\r\n    for (;; i++) {\r\n        off = base.positions[i] + cursor.from;\r\n        if (off <= node.from && off + base.children[i].length >= node.to)\r\n            break;\r\n    }\r\n    let buf = base.children[i], b = buf.buffer;\r\n    // Split a level in the buffer, putting the nodes before and after\r\n    // the child that contains `node` into new buffers.\r\n    function split(startI, endI, type, innerOffset, length) {\r\n        let i = startI;\r\n        while (b[i + 2] + off <= node.from)\r\n            i = b[i + 3];\r\n        let children = [], positions = [];\r\n        sliceBuf(buf, startI, i, children, positions, innerOffset);\r\n        let from = b[i + 1], to = b[i + 2];\r\n        let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\r\n        children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\r\n        positions.push(from - innerOffset);\r\n        sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\r\n        return new _tree_js__WEBPACK_IMPORTED_MODULE_0__.Tree(type, children, positions, length);\r\n    }\r\n    // Overwrite (!) the child at the buffer's index with the split-up tree\r\n    ;\r\n    base.children[i] = split(0, b.length, _tree_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.none, 0, buf.length);\r\n    // Move the cursor back to the target node\r\n    for (let d = 0; d <= depth; d++)\r\n        cursor.childAfter(node.from);\r\n}\r\nclass StructureCursor {\r\n    constructor(root, offset) {\r\n        this.offset = offset;\r\n        this.done = false;\r\n        this.cursor = root.cursor(_tree_js__WEBPACK_IMPORTED_MODULE_0__.IterMode.IncludeAnonymous | _tree_js__WEBPACK_IMPORTED_MODULE_0__.IterMode.IgnoreMounts);\r\n    }\r\n    // Move to the first node (in pre-order) that starts at or after `pos`.\r\n    moveTo(pos) {\r\n        let { cursor } = this, p = pos - this.offset;\r\n        while (!this.done && cursor.from < p) {\r\n            if (cursor.to >= pos && cursor.enter(p, 1, _tree_js__WEBPACK_IMPORTED_MODULE_0__.IterMode.IgnoreOverlays | _tree_js__WEBPACK_IMPORTED_MODULE_0__.IterMode.ExcludeBuffers)) { }\r\n            else if (!cursor.next(false))\r\n                this.done = true;\r\n        }\r\n    }\r\n    hasNode(cursor) {\r\n        this.moveTo(cursor.from);\r\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\r\n            for (let tree = this.cursor.tree;;) {\r\n                if (tree == cursor.tree)\r\n                    return true;\r\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof _tree_js__WEBPACK_IMPORTED_MODULE_0__.Tree)\r\n                    tree = tree.children[0];\r\n                else\r\n                    break;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nclass FragmentCursor {\r\n    constructor(fragments) {\r\n        var _a;\r\n        this.fragments = fragments;\r\n        this.curTo = 0;\r\n        this.fragI = 0;\r\n        if (fragments.length) {\r\n            let first = this.curFrag = fragments[0];\r\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\r\n            this.inner = new StructureCursor(first.tree, -first.offset);\r\n        }\r\n        else {\r\n            this.curFrag = this.inner = null;\r\n        }\r\n    }\r\n    hasNode(node) {\r\n        while (this.curFrag && node.from >= this.curTo)\r\n            this.nextFrag();\r\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\r\n    }\r\n    nextFrag() {\r\n        var _a;\r\n        this.fragI++;\r\n        if (this.fragI == this.fragments.length) {\r\n            this.curFrag = this.inner = null;\r\n        }\r\n        else {\r\n            let frag = this.curFrag = this.fragments[this.fragI];\r\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\r\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\r\n        }\r\n    }\r\n    findMounts(pos, parser) {\r\n        var _a;\r\n        let result = [];\r\n        if (this.inner) {\r\n            this.inner.cursor.moveTo(pos, 1);\r\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\r\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(_tree_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp.mounted);\r\n                if (mount && mount.parser == parser) {\r\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\r\n                        let frag = this.fragments[i];\r\n                        if (frag.from >= pos.to)\r\n                            break;\r\n                        if (frag.tree == this.curFrag.tree)\r\n                            result.push({\r\n                                frag,\r\n                                pos: pos.from - frag.offset,\r\n                                mount\r\n                            });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\nfunction punchRanges(outer, ranges) {\r\n    let copy = null, current = ranges;\r\n    for (let i = 1, j = 0; i < outer.length; i++) {\r\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\r\n        for (; j < current.length; j++) {\r\n            let r = current[j];\r\n            if (r.from >= gapTo)\r\n                break;\r\n            if (r.to <= gapFrom)\r\n                continue;\r\n            if (!copy)\r\n                current = copy = ranges.slice();\r\n            if (r.from < gapFrom) {\r\n                copy[j] = new _tree_js__WEBPACK_IMPORTED_MODULE_0__.Range(r.from, gapFrom);\r\n                if (r.to > gapTo)\r\n                    copy.splice(j + 1, 0, new _tree_js__WEBPACK_IMPORTED_MODULE_0__.Range(gapTo, r.to));\r\n            }\r\n            else if (r.to > gapTo) {\r\n                copy[j--] = new _tree_js__WEBPACK_IMPORTED_MODULE_0__.Range(gapTo, r.to);\r\n            }\r\n            else {\r\n                copy.splice(j--, 1);\r\n            }\r\n        }\r\n    }\r\n    return current;\r\n}\r\nfunction findCoverChanges(a, b, from, to) {\r\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\r\n    let result = [];\r\n    for (;;) {\r\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\r\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\r\n        if (inA != inB) {\r\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\r\n            if (start < end)\r\n                result.push(new _tree_js__WEBPACK_IMPORTED_MODULE_0__.Range(start, end));\r\n        }\r\n        pos = Math.min(nextA, nextB);\r\n        if (pos == 1e9)\r\n            break;\r\n        if (nextA == pos) {\r\n            if (!inA)\r\n                inA = true;\r\n            else {\r\n                inA = false;\r\n                iA++;\r\n            }\r\n        }\r\n        if (nextB == pos) {\r\n            if (!inB)\r\n                inB = true;\r\n            else {\r\n                inB = false;\r\n                iB++;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n// Given a number of fragments for the outer tree, and a set of ranges\r\n// to parse, find fragments for inner trees mounted around those\r\n// ranges, if any.\r\nfunction enterFragments(mounts, ranges) {\r\n    let result = [];\r\n    for (let { pos, mount, frag } of mounts) {\r\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\r\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\r\n        if (mount.overlay) {\r\n            let overlay = mount.overlay.map(r => new _tree_js__WEBPACK_IMPORTED_MODULE_0__.Range(r.from + pos, r.to + pos));\r\n            let changes = findCoverChanges(ranges, overlay, from, to);\r\n            for (let i = 0, pos = from;; i++) {\r\n                let last = i == changes.length, end = last ? to : changes[i].from;\r\n                if (end > pos)\r\n                    result.push(new _parse_js__WEBPACK_IMPORTED_MODULE_1__.TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos, frag.to <= end));\r\n                if (last)\r\n                    break;\r\n                pos = changes[i].to;\r\n            }\r\n        }\r\n        else {\r\n            result.push(new _parse_js__WEBPACK_IMPORTED_MODULE_1__.TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos, frag.to <= endPos));\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/lezer/common/mix.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/lezer/common/parse.js":
/*!*********************************************************!*\
  !*** ./sys/public/js/editor/dist/lezer/common/parse.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Parser\": () => (/* binding */ Parser),\n/* harmony export */   \"TreeFragment\": () => (/* binding */ TreeFragment)\n/* harmony export */ });\n/* harmony import */ var _tree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tree.js */ \"./sys/public/js/editor/dist/lezer/common/tree.js\");\n\r\nclass TreeFragment {\r\n    constructor(from, to, tree, offset, openStart = false, openEnd = false) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.tree = tree;\r\n        this.offset = offset;\r\n        this.open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);\r\n    }\r\n    get openStart() { return (this.open & 1 /* Start */) > 0; }\r\n    get openEnd() { return (this.open & 2 /* End */) > 0; }\r\n    static addTree(tree, fragments = [], partial = false) {\r\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\r\n        for (let f of fragments)\r\n            if (f.to > tree.length)\r\n                result.push(f);\r\n        return result;\r\n    }\r\n    static applyChanges(fragments, changes, minGap = 128) {\r\n        if (!changes.length)\r\n            return fragments;\r\n        let result = [];\r\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\r\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\r\n            let nextC = cI < changes.length ? changes[cI] : null;\r\n            let nextPos = nextC ? nextC.fromA : 1e9;\r\n            if (nextPos - pos >= minGap)\r\n                while (nextF && nextF.from < nextPos) {\r\n                    let cut = nextF;\r\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\r\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\r\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\r\n                    }\r\n                    if (cut)\r\n                        result.push(cut);\r\n                    if (nextF.to > nextPos)\r\n                        break;\r\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\r\n                }\r\n            if (!nextC)\r\n                break;\r\n            pos = nextC.toA;\r\n            off = nextC.toA - nextC.toB;\r\n        }\r\n        return result;\r\n    }\r\n}\r\nclass Parser {\r\n    startParse(input, fragments, ranges) {\r\n        if (typeof input == \"string\")\r\n            input = new StringInput(input);\r\n        ranges = !ranges ? [new _tree_js__WEBPACK_IMPORTED_MODULE_0__.Range(0, input.length)] : ranges.length ? ranges.map(r => new _tree_js__WEBPACK_IMPORTED_MODULE_0__.Range(r.from, r.to)) : [new _tree_js__WEBPACK_IMPORTED_MODULE_0__.Range(0, 0)];\r\n        return this.createParse(input, fragments || [], ranges);\r\n    }\r\n    parse(input, fragments, ranges) {\r\n        let parse = this.startParse(input, fragments, ranges);\r\n        for (;;) {\r\n            let done = parse.advance();\r\n            if (done)\r\n                return done;\r\n        }\r\n    }\r\n}\r\nclass StringInput {\r\n    constructor(string) {\r\n        this.string = string;\r\n    }\r\n    get length() { return this.string.length; }\r\n    chunk(from) { return this.string.slice(from); }\r\n    get lineChunks() { return false; }\r\n    read(from, to) { return this.string.slice(from, to); }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/lezer/common/parse.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/lezer/common/tree.js":
/*!********************************************************!*\
  !*** ./sys/public/js/editor/dist/lezer/common/tree.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DefaultBufferLength\": () => (/* binding */ DefaultBufferLength),\n/* harmony export */   \"IterMode\": () => (/* binding */ IterMode),\n/* harmony export */   \"MountedTree\": () => (/* binding */ MountedTree),\n/* harmony export */   \"NodeProp\": () => (/* binding */ NodeProp),\n/* harmony export */   \"NodeSet\": () => (/* binding */ NodeSet),\n/* harmony export */   \"NodeType\": () => (/* binding */ NodeType),\n/* harmony export */   \"NodeWeakMap\": () => (/* binding */ NodeWeakMap),\n/* harmony export */   \"Range\": () => (/* binding */ Range),\n/* harmony export */   \"Tree\": () => (/* binding */ Tree),\n/* harmony export */   \"TreeBuffer\": () => (/* binding */ TreeBuffer),\n/* harmony export */   \"TreeCursor\": () => (/* binding */ TreeCursor),\n/* harmony export */   \"TreeNode\": () => (/* binding */ TreeNode)\n/* harmony export */ });\nconst DefaultBufferLength = 1024;\r\nlet nextPropID = 0;\r\nclass Range {\r\n    constructor(from, to) {\r\n        this.from = from;\r\n        this.to = to;\r\n    }\r\n}\r\nclass NodeProp {\r\n    constructor(config = {}) {\r\n        this.id = nextPropID++;\r\n        this.perNode = !!config.perNode;\r\n        this.deserialize = config.deserialize || (() => {\r\n            throw new Error(\"This node type doesn't define a deserialize function\");\r\n        });\r\n    }\r\n    add(match) {\r\n        if (this.perNode)\r\n            throw new RangeError(\"Can't add per-node props to node types\");\r\n        if (typeof match != \"function\")\r\n            match = NodeType.match(match);\r\n        return (type) => {\r\n            let result = match(type);\r\n            return result === undefined ? null : [this, result];\r\n        };\r\n    }\r\n}\r\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\r\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\r\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\r\nNodeProp.contextHash = new NodeProp({ perNode: true });\r\nNodeProp.lookAhead = new NodeProp({ perNode: true });\r\nNodeProp.mounted = new NodeProp({ perNode: true });\r\nclass MountedTree {\r\n    constructor(tree, overlay, parser) {\r\n        this.tree = tree;\r\n        this.overlay = overlay;\r\n        this.parser = parser;\r\n    }\r\n}\r\nconst noProps = Object.create(null);\r\nclass NodeType {\r\n    // @internal\r\n    constructor(name, \r\n    // @internal\r\n    props, id, \r\n    // @internal\r\n    flags = 0) {\r\n        this.name = name;\r\n        this.props = props;\r\n        this.id = id;\r\n        this.flags = flags;\r\n    }\r\n    static define(spec) {\r\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\r\n        let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |\r\n            (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);\r\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\r\n        if (spec.props)\r\n            for (let src of spec.props) {\r\n                if (!Array.isArray(src))\r\n                    src = src(type);\r\n                if (src) {\r\n                    if (src[0].perNode)\r\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\r\n                    props[src[0].id] = src[1];\r\n                }\r\n            }\r\n        return type;\r\n    }\r\n    prop(prop) { return this.props[prop.id]; }\r\n    get isTop() { return (this.flags & 1 /* Top */) > 0; }\r\n    get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }\r\n    get isError() { return (this.flags & 4 /* Error */) > 0; }\r\n    get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }\r\n    is(name) {\r\n        if (typeof name == 'string') {\r\n            if (this.name == name)\r\n                return true;\r\n            let group = this.prop(NodeProp.group);\r\n            return group ? group.indexOf(name) > -1 : false;\r\n        }\r\n        return this.id == name;\r\n    }\r\n    static match(map) {\r\n        let direct = Object.create(null);\r\n        for (let prop in map)\r\n            for (let name of prop.split(\" \"))\r\n                direct[name] = map[prop];\r\n        return (node) => {\r\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\r\n                let found = direct[i < 0 ? node.name : groups[i]];\r\n                if (found)\r\n                    return found;\r\n            }\r\n        };\r\n    }\r\n}\r\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* Anonymous */);\r\nclass NodeSet {\r\n    constructor(types) {\r\n        this.types = types;\r\n        for (let i = 0; i < types.length; i++)\r\n            if (types[i].id != i)\r\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\r\n    }\r\n    extend(...props) {\r\n        let newTypes = [];\r\n        for (let type of this.types) {\r\n            let newProps = null;\r\n            for (let source of props) {\r\n                let add = source(type);\r\n                if (add) {\r\n                    if (!newProps)\r\n                        newProps = Object.assign({}, type.props);\r\n                    newProps[add[0].id] = add[1];\r\n                }\r\n            }\r\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\r\n        }\r\n        return new NodeSet(newTypes);\r\n    }\r\n}\r\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\r\nvar IterMode;\r\n(function (IterMode) {\r\n    IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\r\n    IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\r\n    IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\r\n    IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\r\n})(IterMode || (IterMode = {}));\r\nclass Tree {\r\n    constructor(type, children, positions, length, props) {\r\n        this.type = type;\r\n        this.children = children;\r\n        this.positions = positions;\r\n        this.length = length;\r\n        // @internal\r\n        this.props = null;\r\n        if (props && props.length) {\r\n            this.props = Object.create(null);\r\n            for (let [prop, value] of props)\r\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\r\n        }\r\n    }\r\n    // @internal\r\n    toString() {\r\n        let mounted = this.prop(NodeProp.mounted);\r\n        if (mounted && !mounted.overlay)\r\n            return mounted.tree.toString();\r\n        let children = \"\";\r\n        for (let ch of this.children) {\r\n            let str = ch.toString();\r\n            if (str) {\r\n                if (children)\r\n                    children += \",\";\r\n                children += str;\r\n            }\r\n        }\r\n        return !this.type.name ? children :\r\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\r\n                (children.length ? \"(\" + children + \")\" : \"\");\r\n    }\r\n    cursor(mode = 0) {\r\n        return new TreeCursor(this.topNode, mode);\r\n    }\r\n    cursorAt(pos, side = 0, mode = 0) {\r\n        let scope = CachedNode.get(this) || this.topNode;\r\n        let cursor = new TreeCursor(scope);\r\n        cursor.moveTo(pos, side);\r\n        CachedNode.set(this, cursor._tree);\r\n        return cursor;\r\n    }\r\n    get topNode() {\r\n        return new TreeNode(this, 0, 0, null);\r\n    }\r\n    resolve(pos, side = 0) {\r\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\r\n        CachedNode.set(this, node);\r\n        return node;\r\n    }\r\n    resolveInner(pos, side = 0) {\r\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\r\n        CachedInnerNode.set(this, node);\r\n        return node;\r\n    }\r\n    iterate(spec) {\r\n        let { enter, leave, from = 0, to = this.length } = spec;\r\n        for (let c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {\r\n            let entered = false;\r\n            if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {\r\n                if (c.firstChild())\r\n                    continue;\r\n                entered = true;\r\n            }\r\n            for (;;) {\r\n                if (entered && leave && !c.type.isAnonymous)\r\n                    leave(c);\r\n                if (c.nextSibling())\r\n                    break;\r\n                if (!c.parent())\r\n                    return;\r\n                entered = true;\r\n            }\r\n        }\r\n    }\r\n    prop(prop) {\r\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\r\n    }\r\n    get propValues() {\r\n        let result = [];\r\n        if (this.props)\r\n            for (let id in this.props)\r\n                result.push([+id, this.props[id]]);\r\n        return result;\r\n    }\r\n    balance(config = {}) {\r\n        return this.children.length <= 8 /* BranchFactor */ ? this :\r\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\r\n    }\r\n    static build(data) { return buildTree(data); }\r\n}\r\nTree.empty = new Tree(NodeType.none, [], [], 0);\r\nclass FlatBufferCursor {\r\n    constructor(buffer, index) {\r\n        this.buffer = buffer;\r\n        this.index = index;\r\n    }\r\n    get id() { return this.buffer[this.index - 4]; }\r\n    get start() { return this.buffer[this.index - 3]; }\r\n    get end() { return this.buffer[this.index - 2]; }\r\n    get size() { return this.buffer[this.index - 1]; }\r\n    get pos() { return this.index; }\r\n    next() { this.index -= 4; }\r\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\r\n}\r\nclass TreeBuffer {\r\n    constructor(buffer, length, set) {\r\n        this.buffer = buffer;\r\n        this.length = length;\r\n        this.set = set;\r\n    }\r\n    // @internal\r\n    get type() { return NodeType.none; }\r\n    // @internal\r\n    toString() {\r\n        let result = [];\r\n        for (let index = 0; index < this.buffer.length;) {\r\n            result.push(this.childString(index));\r\n            index = this.buffer[index + 3];\r\n        }\r\n        return result.join(\",\");\r\n    }\r\n    // @internal\r\n    childString(index) {\r\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\r\n        let type = this.set.types[id], result = type.name;\r\n        if (/\\W/.test(result) && !type.isError)\r\n            result = JSON.stringify(result);\r\n        index += 4;\r\n        if (endIndex == index)\r\n            return result;\r\n        let children = [];\r\n        while (index < endIndex) {\r\n            children.push(this.childString(index));\r\n            index = this.buffer[index + 3];\r\n        }\r\n        return result + \"(\" + children.join(\",\") + \")\";\r\n    }\r\n    // @internal\r\n    findChild(startIndex, endIndex, dir, pos, side) {\r\n        let { buffer } = this, pick = -1;\r\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\r\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\r\n                pick = i;\r\n                if (dir > 0)\r\n                    break;\r\n            }\r\n        }\r\n        return pick;\r\n    }\r\n    // @internal\r\n    slice(startI, endI, from, to) {\r\n        let b = this.buffer;\r\n        let copy = new Uint16Array(endI - startI);\r\n        for (let i = startI, j = 0; i < endI;) {\r\n            copy[j++] = b[i++];\r\n            copy[j++] = b[i++] - from;\r\n            copy[j++] = b[i++] - from;\r\n            copy[j++] = b[i++] - startI;\r\n        }\r\n        return new TreeBuffer(copy, to - from, this.set);\r\n    }\r\n}\r\nfunction checkSide(side, pos, from, to) {\r\n    switch (side) {\r\n        case -2 /* Before */: return from < pos;\r\n        case -1 /* AtOrBefore */: return to >= pos && from < pos;\r\n        case 0 /* Around */: return from < pos && to > pos;\r\n        case 1 /* AtOrAfter */: return from <= pos && to > pos;\r\n        case 2 /* After */: return to > pos;\r\n        case 4 /* DontCare */: return true;\r\n    }\r\n}\r\nfunction enterUnfinishedNodesBefore(node, pos) {\r\n    let scan = node.childBefore(pos);\r\n    while (scan) {\r\n        let last = scan.lastChild;\r\n        if (!last || last.to != scan.to)\r\n            break;\r\n        if (last.type.isError && last.from == last.to) {\r\n            node = scan;\r\n            scan = last.prevSibling;\r\n        }\r\n        else {\r\n            scan = last;\r\n        }\r\n    }\r\n    return node;\r\n}\r\nfunction resolveNode(node, pos, side, overlays) {\r\n    var _a;\r\n    // Move up to a node that actually holds the position, if possible\r\n    while (node.from == node.to ||\r\n        (side < 1 ? node.from >= pos : node.from > pos) ||\r\n        (side > -1 ? node.to <= pos : node.to < pos)) {\r\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\r\n        if (!parent)\r\n            return node;\r\n        node = parent;\r\n    }\r\n    let mode = overlays ? 0 : IterMode.IgnoreOverlays;\r\n    // Must go up out of overlays when those do not overlap with pos\r\n    if (overlays)\r\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\r\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\r\n                node = parent;\r\n        }\r\n    for (;;) {\r\n        let inner = node.enter(pos, side, mode);\r\n        if (!inner)\r\n            return node;\r\n        node = inner;\r\n    }\r\n}\r\nclass TreeNode {\r\n    constructor(_tree, from, \r\n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\r\n    index, _parent) {\r\n        this._tree = _tree;\r\n        this.from = from;\r\n        this.index = index;\r\n        this._parent = _parent;\r\n    }\r\n    get type() { return this._tree.type; }\r\n    get name() { return this._tree.type.name; }\r\n    get to() { return this.from + this._tree.length; }\r\n    nextChild(i, dir, pos, side, mode = 0) {\r\n        for (let parent = this;;) {\r\n            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\r\n                let next = children[i], start = positions[i] + parent.from;\r\n                if (!checkSide(side, pos, start, start + next.length))\r\n                    continue;\r\n                if (next instanceof TreeBuffer) {\r\n                    if (mode & IterMode.ExcludeBuffers)\r\n                        continue;\r\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\r\n                    if (index > -1)\r\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\r\n                }\r\n                else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {\r\n                    let mounted;\r\n                    if (!(mode & IterMode.IgnoreMounts) &&\r\n                        next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)\r\n                        return new TreeNode(mounted.tree, start, i, parent);\r\n                    let inner = new TreeNode(next, start, i, parent);\r\n                    return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner\r\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\r\n                }\r\n            }\r\n            if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)\r\n                return null;\r\n            if (parent.index >= 0)\r\n                i = parent.index + dir;\r\n            else\r\n                i = dir < 0 ? -1 : parent._parent._tree.children.length;\r\n            parent = parent._parent;\r\n            if (!parent)\r\n                return null;\r\n        }\r\n    }\r\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* DontCare */); }\r\n    get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* DontCare */); }\r\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* After */); }\r\n    childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Before */); }\r\n    enter(pos, side, mode = 0) {\r\n        let mounted;\r\n        if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {\r\n            let rPos = pos - this.from;\r\n            for (let { from, to } of mounted.overlay) {\r\n                if ((side > 0 ? from <= rPos : from < rPos) &&\r\n                    (side < 0 ? to >= rPos : to > rPos))\r\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\r\n            }\r\n        }\r\n        return this.nextChild(0, 1, pos, side, mode);\r\n    }\r\n    nextSignificantParent() {\r\n        let val = this;\r\n        while (val.type.isAnonymous && val._parent)\r\n            val = val._parent;\r\n        return val;\r\n    }\r\n    get parent() {\r\n        return this._parent ? this._parent.nextSignificantParent() : null;\r\n    }\r\n    get nextSibling() {\r\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* DontCare */) : null;\r\n    }\r\n    get prevSibling() {\r\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* DontCare */) : null;\r\n    }\r\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\r\n    get tree() { return this._tree; }\r\n    toTree() { return this._tree; }\r\n    resolve(pos, side = 0) {\r\n        return resolveNode(this, pos, side, false);\r\n    }\r\n    resolveInner(pos, side = 0) {\r\n        return resolveNode(this, pos, side, true);\r\n    }\r\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\r\n    getChild(type, before = null, after = null) {\r\n        let r = getChildren(this, type, before, after);\r\n        return r.length ? r[0] : null;\r\n    }\r\n    getChildren(type, before = null, after = null) {\r\n        return getChildren(this, type, before, after);\r\n    }\r\n    // @internal\r\n    toString() { return this._tree.toString(); }\r\n    get node() { return this; }\r\n    matchContext(context) { return matchNodeContext(this, context); }\r\n}\r\nfunction getChildren(node, type, before, after) {\r\n    let cur = node.cursor(), result = [];\r\n    if (!cur.firstChild())\r\n        return result;\r\n    if (before != null)\r\n        while (!cur.type.is(before))\r\n            if (!cur.nextSibling())\r\n                return result;\r\n    for (;;) {\r\n        if (after != null && cur.type.is(after))\r\n            return result;\r\n        if (cur.type.is(type))\r\n            result.push(cur.node);\r\n        if (!cur.nextSibling())\r\n            return after == null ? result : [];\r\n    }\r\n}\r\nfunction matchNodeContext(node, context, i = context.length - 1) {\r\n    for (let p = node.parent; i >= 0; p = p.parent) {\r\n        if (!p)\r\n            return false;\r\n        if (!p.type.isAnonymous) {\r\n            if (context[i] && context[i] != p.name)\r\n                return false;\r\n            i--;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nclass BufferContext {\r\n    constructor(parent, buffer, index, start) {\r\n        this.parent = parent;\r\n        this.buffer = buffer;\r\n        this.index = index;\r\n        this.start = start;\r\n    }\r\n}\r\nclass BufferNode {\r\n    constructor(context, _parent, index) {\r\n        this.context = context;\r\n        this._parent = _parent;\r\n        this.index = index;\r\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\r\n    }\r\n    get name() { return this.type.name; }\r\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\r\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\r\n    child(dir, pos, side) {\r\n        let { buffer } = this.context;\r\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\r\n        return index < 0 ? null : new BufferNode(this.context, this, index);\r\n    }\r\n    get firstChild() { return this.child(1, 0, 4 /* DontCare */); }\r\n    get lastChild() { return this.child(-1, 0, 4 /* DontCare */); }\r\n    childAfter(pos) { return this.child(1, pos, 2 /* After */); }\r\n    childBefore(pos) { return this.child(-1, pos, -2 /* Before */); }\r\n    enter(pos, side, mode = 0) {\r\n        if (mode & IterMode.ExcludeBuffers)\r\n            return null;\r\n        let { buffer } = this.context;\r\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\r\n        return index < 0 ? null : new BufferNode(this.context, this, index);\r\n    }\r\n    get parent() {\r\n        return this._parent || this.context.parent.nextSignificantParent();\r\n    }\r\n    externalSibling(dir) {\r\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* DontCare */);\r\n    }\r\n    get nextSibling() {\r\n        let { buffer } = this.context;\r\n        let after = buffer.buffer[this.index + 3];\r\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\r\n            return new BufferNode(this.context, this._parent, after);\r\n        return this.externalSibling(1);\r\n    }\r\n    get prevSibling() {\r\n        let { buffer } = this.context;\r\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\r\n        if (this.index == parentStart)\r\n            return this.externalSibling(-1);\r\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\r\n    }\r\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\r\n    get tree() { return null; }\r\n    toTree() {\r\n        let children = [], positions = [];\r\n        let { buffer } = this.context;\r\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\r\n        if (endI > startI) {\r\n            let from = buffer.buffer[this.index + 1], to = buffer.buffer[this.index + 2];\r\n            children.push(buffer.slice(startI, endI, from, to));\r\n            positions.push(0);\r\n        }\r\n        return new Tree(this.type, children, positions, this.to - this.from);\r\n    }\r\n    resolve(pos, side = 0) {\r\n        return resolveNode(this, pos, side, false);\r\n    }\r\n    resolveInner(pos, side = 0) {\r\n        return resolveNode(this, pos, side, true);\r\n    }\r\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\r\n    // @internal\r\n    toString() { return this.context.buffer.childString(this.index); }\r\n    getChild(type, before = null, after = null) {\r\n        let r = getChildren(this, type, before, after);\r\n        return r.length ? r[0] : null;\r\n    }\r\n    getChildren(type, before = null, after = null) {\r\n        return getChildren(this, type, before, after);\r\n    }\r\n    get node() { return this; }\r\n    matchContext(context) { return matchNodeContext(this, context); }\r\n}\r\nclass TreeCursor {\r\n    // @internal\r\n    constructor(node, \r\n    // @internal\r\n    mode = 0) {\r\n        this.mode = mode;\r\n        // @internal\r\n        this.buffer = null;\r\n        this.stack = [];\r\n        // @internal\r\n        this.index = 0;\r\n        this.bufferNode = null;\r\n        if (node instanceof TreeNode) {\r\n            this.yieldNode(node);\r\n        }\r\n        else {\r\n            this._tree = node.context.parent;\r\n            this.buffer = node.context;\r\n            for (let n = node._parent; n; n = n._parent)\r\n                this.stack.unshift(n.index);\r\n            this.bufferNode = node;\r\n            this.yieldBuf(node.index);\r\n        }\r\n    }\r\n    get name() { return this.type.name; }\r\n    yieldNode(node) {\r\n        if (!node)\r\n            return false;\r\n        this._tree = node;\r\n        this.type = node.type;\r\n        this.from = node.from;\r\n        this.to = node.to;\r\n        return true;\r\n    }\r\n    yieldBuf(index, type) {\r\n        this.index = index;\r\n        let { start, buffer } = this.buffer;\r\n        this.type = type || buffer.set.types[buffer.buffer[index]];\r\n        this.from = start + buffer.buffer[index + 1];\r\n        this.to = start + buffer.buffer[index + 2];\r\n        return true;\r\n    }\r\n    yield(node) {\r\n        if (!node)\r\n            return false;\r\n        if (node instanceof TreeNode) {\r\n            this.buffer = null;\r\n            return this.yieldNode(node);\r\n        }\r\n        this.buffer = node.context;\r\n        return this.yieldBuf(node.index, node.type);\r\n    }\r\n    // @internal\r\n    toString() {\r\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\r\n    }\r\n    // @internal\r\n    enterChild(dir, pos, side) {\r\n        if (!this.buffer)\r\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\r\n        let { buffer } = this.buffer;\r\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\r\n        if (index < 0)\r\n            return false;\r\n        this.stack.push(this.index);\r\n        return this.yieldBuf(index);\r\n    }\r\n    firstChild() { return this.enterChild(1, 0, 4 /* DontCare */); }\r\n    lastChild() { return this.enterChild(-1, 0, 4 /* DontCare */); }\r\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* After */); }\r\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Before */); }\r\n    enter(pos, side, mode = this.mode) {\r\n        if (!this.buffer)\r\n            return this.yield(this._tree.enter(pos, side, mode));\r\n        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\r\n    }\r\n    parent() {\r\n        if (!this.buffer)\r\n            return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);\r\n        if (this.stack.length)\r\n            return this.yieldBuf(this.stack.pop());\r\n        let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\r\n        this.buffer = null;\r\n        return this.yieldNode(parent);\r\n    }\r\n    // @internal\r\n    sibling(dir) {\r\n        if (!this.buffer)\r\n            return !this._tree._parent ? false\r\n                : this.yield(this._tree.index < 0 ? null\r\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* DontCare */, this.mode));\r\n        let { buffer } = this.buffer, d = this.stack.length - 1;\r\n        if (dir < 0) {\r\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\r\n            if (this.index != parentStart)\r\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\r\n        }\r\n        else {\r\n            let after = buffer.buffer[this.index + 3];\r\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\r\n                return this.yieldBuf(after);\r\n        }\r\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* DontCare */, this.mode)) : false;\r\n    }\r\n    nextSibling() { return this.sibling(1); }\r\n    prevSibling() { return this.sibling(-1); }\r\n    atLastNode(dir) {\r\n        let index, parent, { buffer } = this;\r\n        if (buffer) {\r\n            if (dir > 0) {\r\n                if (this.index < buffer.buffer.buffer.length)\r\n                    return false;\r\n            }\r\n            else {\r\n                for (let i = 0; i < this.index; i++)\r\n                    if (buffer.buffer.buffer[i + 3] < this.index)\r\n                        return false;\r\n            }\r\n            ;\r\n            ({ index, parent } = buffer);\r\n        }\r\n        else {\r\n            ({ index, _parent: parent } = this._tree);\r\n        }\r\n        for (; parent; { index, _parent: parent } = parent) {\r\n            if (index > -1)\r\n                for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\r\n                    let child = parent._tree.children[i];\r\n                    if ((this.mode & IterMode.IncludeAnonymous) ||\r\n                        child instanceof TreeBuffer ||\r\n                        !child.type.isAnonymous ||\r\n                        hasChild(child))\r\n                        return false;\r\n                }\r\n        }\r\n        return true;\r\n    }\r\n    move(dir, enter) {\r\n        if (enter && this.enterChild(dir, 0, 4 /* DontCare */))\r\n            return true;\r\n        for (;;) {\r\n            if (this.sibling(dir))\r\n                return true;\r\n            if (this.atLastNode(dir) || !this.parent())\r\n                return false;\r\n        }\r\n    }\r\n    next(enter = true) { return this.move(1, enter); }\r\n    prev(enter = true) { return this.move(-1, enter); }\r\n    moveTo(pos, side = 0) {\r\n        // Move up to a node that actually holds the position, if possible\r\n        while (this.from == this.to ||\r\n            (side < 1 ? this.from >= pos : this.from > pos) ||\r\n            (side > -1 ? this.to <= pos : this.to < pos))\r\n            if (!this.parent())\r\n                break;\r\n        // Then scan down into child nodes as far as possible\r\n        while (this.enterChild(1, pos, side)) { }\r\n        return this;\r\n    }\r\n    get node() {\r\n        if (!this.buffer)\r\n            return this._tree;\r\n        let cache = this.bufferNode, result = null, depth = 0;\r\n        if (cache && cache.context == this.buffer) {\r\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\r\n                for (let c = cache; c; c = c._parent)\r\n                    if (c.index == index) {\r\n                        if (index == this.index)\r\n                            return c;\r\n                        result = c;\r\n                        depth = d + 1;\r\n                        break scan;\r\n                    }\r\n                index = this.stack[--d];\r\n            }\r\n        }\r\n        for (let i = depth; i < this.stack.length; i++)\r\n            result = new BufferNode(this.buffer, result, this.stack[i]);\r\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\r\n    }\r\n    get tree() {\r\n        return this.buffer ? null : this._tree._tree;\r\n    }\r\n    iterate(enter, leave) {\r\n        for (let depth = 0;;) {\r\n            let mustLeave = false;\r\n            if (this.type.isAnonymous || enter(this) !== false) {\r\n                if (this.firstChild()) {\r\n                    depth++;\r\n                    continue;\r\n                }\r\n                if (!this.type.isAnonymous)\r\n                    mustLeave = true;\r\n            }\r\n            for (;;) {\r\n                if (mustLeave && leave)\r\n                    leave(this);\r\n                mustLeave = this.type.isAnonymous;\r\n                if (this.nextSibling())\r\n                    break;\r\n                if (!depth)\r\n                    return;\r\n                this.parent();\r\n                depth--;\r\n                mustLeave = true;\r\n            }\r\n        }\r\n    }\r\n    matchContext(context) {\r\n        if (!this.buffer)\r\n            return matchNodeContext(this.node, context);\r\n        let { buffer } = this.buffer, { types } = buffer.set;\r\n        for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\r\n            if (d < 0)\r\n                return matchNodeContext(this.node, context, i);\r\n            let type = types[buffer.buffer[this.stack[d]]];\r\n            if (!type.isAnonymous) {\r\n                if (context[i] && context[i] != type.name)\r\n                    return false;\r\n                i--;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction hasChild(tree) {\r\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\r\n}\r\nfunction buildTree(data) {\r\n    var _a;\r\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\r\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\r\n    let types = nodeSet.types;\r\n    let contextHash = 0, lookAhead = 0;\r\n    function takeNode(parentStart, minPos, children, positions, inRepeat) {\r\n        let { id, start, end, size } = cursor;\r\n        let lookAheadAtStart = lookAhead;\r\n        while (size < 0) {\r\n            cursor.next();\r\n            if (size == -1 /* Reuse */) {\r\n                let node = reused[id];\r\n                children.push(node);\r\n                positions.push(start - parentStart);\r\n                return;\r\n            }\r\n            else if (size == -3 /* ContextChange */) { // Context change\r\n                contextHash = id;\r\n                return;\r\n            }\r\n            else if (size == -4 /* LookAhead */) {\r\n                lookAhead = id;\r\n                return;\r\n            }\r\n            else {\r\n                throw new RangeError(`Unrecognized record size: ${size}`);\r\n            }\r\n            ;\r\n            ({ id, start, end, size } = cursor);\r\n        }\r\n        let type = types[id], node, buffer;\r\n        let startPos = start - parentStart;\r\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\r\n            // Small enough for a buffer, and no reused nodes inside\r\n            let data = new Uint16Array(buffer.size - buffer.skip);\r\n            let endPos = cursor.pos - buffer.size, index = data.length;\r\n            while (cursor.pos > endPos)\r\n                index = copyToBuffer(buffer.start, data, index);\r\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\r\n            startPos = buffer.start - parentStart;\r\n        }\r\n        else { // Make it a node\r\n            let endPos = cursor.pos - size;\r\n            cursor.next();\r\n            let localChildren = [], localPositions = [];\r\n            let localInRepeat = id >= minRepeatType ? id : -1;\r\n            let lastGroup = 0, lastEnd = end;\r\n            while (cursor.pos > endPos) {\r\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\r\n                    if (cursor.end <= lastEnd - maxBufferLength) {\r\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\r\n                        lastGroup = localChildren.length;\r\n                        lastEnd = cursor.end;\r\n                    }\r\n                    cursor.next();\r\n                }\r\n                else {\r\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);\r\n                }\r\n            }\r\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\r\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\r\n            localChildren.reverse();\r\n            localPositions.reverse();\r\n            if (localInRepeat > -1 && lastGroup > 0) {\r\n                let make = makeBalanced(type);\r\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\r\n            }\r\n            else {\r\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\r\n            }\r\n        }\r\n        children.push(node);\r\n        positions.push(startPos);\r\n    }\r\n    function makeBalanced(type) {\r\n        return (children, positions, length) => {\r\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\r\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\r\n                if (!lastI && last.type == type && last.length == length)\r\n                    return last;\r\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\r\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\r\n            }\r\n            return makeTree(type, children, positions, length, lookAhead);\r\n        };\r\n    }\r\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\r\n        let localChildren = [], localPositions = [];\r\n        while (children.length > i) {\r\n            localChildren.push(children.pop());\r\n            localPositions.push(positions.pop() + base - from);\r\n        }\r\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\r\n        positions.push(from - base);\r\n    }\r\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\r\n        if (contextHash) {\r\n            let pair = [NodeProp.contextHash, contextHash];\r\n            props = props ? [pair].concat(props) : [pair];\r\n        }\r\n        if (lookAhead > 25) {\r\n            let pair = [NodeProp.lookAhead, lookAhead];\r\n            props = props ? [pair].concat(props) : [pair];\r\n        }\r\n        return new Tree(type, children, positions, length, props);\r\n    }\r\n    function findBufferSize(maxSize, inRepeat) {\r\n        // Scan through the buffer to find previous siblings that fit\r\n        // together in a TreeBuffer, and don't contain any reused nodes\r\n        // (which can't be stored in a buffer).\r\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\r\n        // nesting, but make sure the end falls either at the start\r\n        // (`maxSize`) or before such a node.\r\n        let fork = cursor.fork();\r\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\r\n        let result = { size: 0, start: 0, skip: 0 };\r\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\r\n            let nodeSize = fork.size;\r\n            // Pretend nested repeat nodes of the same type don't exist\r\n            if (fork.id == inRepeat && nodeSize >= 0) {\r\n                // Except that we store the current state as a valid return\r\n                // value.\r\n                result.size = size;\r\n                result.start = start;\r\n                result.skip = skip;\r\n                skip += 4;\r\n                size += 4;\r\n                fork.next();\r\n                continue;\r\n            }\r\n            let startPos = fork.pos - nodeSize;\r\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\r\n                break;\r\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\r\n            let nodeStart = fork.start;\r\n            fork.next();\r\n            while (fork.pos > startPos) {\r\n                if (fork.size < 0) {\r\n                    if (fork.size == -3 /* ContextChange */)\r\n                        localSkipped += 4;\r\n                    else\r\n                        break scan;\r\n                }\r\n                else if (fork.id >= minRepeatType) {\r\n                    localSkipped += 4;\r\n                }\r\n                fork.next();\r\n            }\r\n            start = nodeStart;\r\n            size += nodeSize;\r\n            skip += localSkipped;\r\n        }\r\n        if (inRepeat < 0 || size == maxSize) {\r\n            result.size = size;\r\n            result.start = start;\r\n            result.skip = skip;\r\n        }\r\n        return result.size > 4 ? result : undefined;\r\n    }\r\n    function copyToBuffer(bufferStart, buffer, index) {\r\n        let { id, start, end, size } = cursor;\r\n        cursor.next();\r\n        if (size >= 0 && id < minRepeatType) {\r\n            let startIndex = index;\r\n            if (size > 4) {\r\n                let endPos = cursor.pos - (size - 4);\r\n                while (cursor.pos > endPos)\r\n                    index = copyToBuffer(bufferStart, buffer, index);\r\n            }\r\n            buffer[--index] = startIndex;\r\n            buffer[--index] = end - bufferStart;\r\n            buffer[--index] = start - bufferStart;\r\n            buffer[--index] = id;\r\n        }\r\n        else if (size == -3 /* ContextChange */) {\r\n            contextHash = id;\r\n        }\r\n        else if (size == -4 /* LookAhead */) {\r\n            lookAhead = id;\r\n        }\r\n        return index;\r\n    }\r\n    let children = [], positions = [];\r\n    while (cursor.pos > 0)\r\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\r\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\r\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\r\n}\r\nconst nodeSizeCache = new WeakMap;\r\nfunction nodeSize(balanceType, node) {\r\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\r\n        return 1;\r\n    let size = nodeSizeCache.get(node);\r\n    if (size == null) {\r\n        size = 1;\r\n        for (let child of node.children) {\r\n            if (child.type != balanceType || !(child instanceof Tree)) {\r\n                size = 1;\r\n                break;\r\n            }\r\n            size += nodeSize(balanceType, child);\r\n        }\r\n        nodeSizeCache.set(node, size);\r\n    }\r\n    return size;\r\n}\r\nfunction balanceRange(\r\n// The type the balanced tree's inner nodes.\r\nbalanceType, \r\n// The direct children and their positions\r\nchildren, positions, \r\n// The index range in children/positions to use\r\nfrom, to, \r\n// The start position of the nodes, relative to their parent.\r\nstart, \r\n// Length of the outer node\r\nlength, \r\n// Function to build the top node of the balanced tree\r\nmkTop, \r\n// Function to build internal nodes for the balanced tree\r\nmkTree) {\r\n    let total = 0;\r\n    for (let i = from; i < to; i++)\r\n        total += nodeSize(balanceType, children[i]);\r\n    let maxChild = Math.ceil((total * 1.5) / 8 /* BranchFactor */);\r\n    let localChildren = [], localPositions = [];\r\n    function divide(children, positions, from, to, offset) {\r\n        for (let i = from; i < to;) {\r\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\r\n            i++;\r\n            for (; i < to; i++) {\r\n                let nextSize = nodeSize(balanceType, children[i]);\r\n                if (groupSize + nextSize >= maxChild)\r\n                    break;\r\n                groupSize += nextSize;\r\n            }\r\n            if (i == groupFrom + 1) {\r\n                if (groupSize > maxChild) {\r\n                    let only = children[groupFrom]; // Only trees can have a size > 1\r\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\r\n                    continue;\r\n                }\r\n                localChildren.push(children[groupFrom]);\r\n            }\r\n            else {\r\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\r\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\r\n            }\r\n            localPositions.push(groupStart + offset - start);\r\n        }\r\n    }\r\n    divide(children, positions, from, to, 0);\r\n    return (mkTop || mkTree)(localChildren, localPositions, length);\r\n}\r\nclass NodeWeakMap {\r\n    constructor() {\r\n        this.map = new WeakMap();\r\n    }\r\n    setBuffer(buffer, index, value) {\r\n        let inner = this.map.get(buffer);\r\n        if (!inner)\r\n            this.map.set(buffer, inner = new Map);\r\n        inner.set(index, value);\r\n    }\r\n    getBuffer(buffer, index) {\r\n        let inner = this.map.get(buffer);\r\n        return inner && inner.get(index);\r\n    }\r\n    set(node, value) {\r\n        if (node instanceof BufferNode)\r\n            this.setBuffer(node.context.buffer, node.index, value);\r\n        else if (node instanceof TreeNode)\r\n            this.map.set(node.tree, value);\r\n    }\r\n    get(node) {\r\n        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)\r\n            : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\r\n    }\r\n    cursorSet(cursor, value) {\r\n        if (cursor.buffer)\r\n            this.setBuffer(cursor.buffer.buffer, cursor.index, value);\r\n        else\r\n            this.map.set(cursor.tree, value);\r\n    }\r\n    cursorGet(cursor) {\r\n        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/lezer/common/tree.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/lezer/highlight/highlight.js":
/*!****************************************************************!*\
  !*** ./sys/public/js/editor/dist/lezer/highlight/highlight.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Tag\": () => (/* binding */ Tag),\n/* harmony export */   \"classHighlighter\": () => (/* binding */ classHighlighter),\n/* harmony export */   \"highlightTags\": () => (/* binding */ highlightTags),\n/* harmony export */   \"highlightTree\": () => (/* binding */ highlightTree),\n/* harmony export */   \"styleTags\": () => (/* binding */ styleTags),\n/* harmony export */   \"tagHighlighter\": () => (/* binding */ tagHighlighter),\n/* harmony export */   \"tags\": () => (/* binding */ tags)\n/* harmony export */ });\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index.js */ \"./sys/public/js/editor/dist/lezer/common/index.js\");\n\r\nlet nextTagID = 0;\r\nclass Tag {\r\n    // @internal\r\n    constructor(set, base, modified) {\r\n        this.set = set;\r\n        this.base = base;\r\n        this.modified = modified;\r\n        // @internal\r\n        this.id = nextTagID++;\r\n    }\r\n    static define(parent) {\r\n        if (parent === null || parent === void 0 ? void 0 : parent.base)\r\n            throw new Error(\"Can not derive from a modified tag\");\r\n        let tag = new Tag([], null, []);\r\n        tag.set.push(tag);\r\n        if (parent)\r\n            for (let t of parent.set)\r\n                tag.set.push(t);\r\n        return tag;\r\n    }\r\n    static defineModifier() {\r\n        let mod = new Modifier;\r\n        return (tag) => {\r\n            if (tag.modified.indexOf(mod) > -1)\r\n                return tag;\r\n            return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));\r\n        };\r\n    }\r\n}\r\nlet nextModifierID = 0;\r\nclass Modifier {\r\n    constructor() {\r\n        this.instances = [];\r\n        this.id = nextModifierID++;\r\n    }\r\n    static get(base, mods) {\r\n        if (!mods.length)\r\n            return base;\r\n        let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));\r\n        if (exists)\r\n            return exists;\r\n        let set = [], tag = new Tag(set, base, mods);\r\n        for (let m of mods)\r\n            m.instances.push(tag);\r\n        let configs = permute(mods);\r\n        for (let parent of base.set)\r\n            for (let config of configs)\r\n                set.push(Modifier.get(parent, config));\r\n        return tag;\r\n    }\r\n}\r\nfunction sameArray(a, b) {\r\n    return a.length == b.length && a.every((x, i) => x == b[i]);\r\n}\r\nfunction permute(array) {\r\n    let result = [array];\r\n    for (let i = 0; i < array.length; i++) {\r\n        for (let a of permute(array.slice(0, i).concat(array.slice(i + 1))))\r\n            result.push(a);\r\n    }\r\n    return result;\r\n}\r\nfunction styleTags(spec) {\r\n    let byName = Object.create(null);\r\n    for (let prop in spec) {\r\n        let tags = spec[prop];\r\n        if (!Array.isArray(tags))\r\n            tags = [tags];\r\n        for (let part of prop.split(\" \"))\r\n            if (part) {\r\n                let pieces = [], mode = 2 /* Normal */, rest = part;\r\n                for (let pos = 0;;) {\r\n                    if (rest == \"...\" && pos > 0 && pos + 3 == part.length) {\r\n                        mode = 1 /* Inherit */;\r\n                        break;\r\n                    }\r\n                    let m = /^\"(?:[^\"\\\\]|\\\\.)*?\"|[^\\/!]+/.exec(rest);\r\n                    if (!m)\r\n                        throw new RangeError(\"Invalid path: \" + part);\r\n                    pieces.push(m[0] == \"*\" ? \"\" : m[0][0] == '\"' ? JSON.parse(m[0]) : m[0]);\r\n                    pos += m[0].length;\r\n                    if (pos == part.length)\r\n                        break;\r\n                    let next = part[pos++];\r\n                    if (pos == part.length && next == \"!\") {\r\n                        mode = 0 /* Opaque */;\r\n                        break;\r\n                    }\r\n                    if (next != \"/\")\r\n                        throw new RangeError(\"Invalid path: \" + part);\r\n                    rest = part.slice(pos);\r\n                }\r\n                let last = pieces.length - 1, inner = pieces[last];\r\n                if (!inner)\r\n                    throw new RangeError(\"Invalid path: \" + part);\r\n                let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);\r\n                byName[inner] = rule.sort(byName[inner]);\r\n            }\r\n    }\r\n    return ruleNodeProp.add(byName);\r\n}\r\nconst ruleNodeProp = new _common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp();\r\nclass Rule {\r\n    constructor(tags, mode, context, next) {\r\n        this.tags = tags;\r\n        this.mode = mode;\r\n        this.context = context;\r\n        this.next = next;\r\n    }\r\n    sort(other) {\r\n        if (!other || other.depth < this.depth) {\r\n            this.next = other;\r\n            return this;\r\n        }\r\n        other.next = this.sort(other.next);\r\n        return other;\r\n    }\r\n    get depth() { return this.context ? this.context.length : 0; }\r\n}\r\nfunction tagHighlighter(tags, options) {\r\n    let map = Object.create(null);\r\n    for (let style of tags) {\r\n        if (!Array.isArray(style.tag))\r\n            map[style.tag.id] = style.class;\r\n        else\r\n            for (let tag of style.tag)\r\n                map[tag.id] = style.class;\r\n    }\r\n    let { scope, all = null } = options || {};\r\n    return {\r\n        style: (tags) => {\r\n            let cls = all;\r\n            for (let tag of tags) {\r\n                for (let sub of tag.set) {\r\n                    let tagClass = map[sub.id];\r\n                    if (tagClass) {\r\n                        cls = cls ? cls + \" \" + tagClass : tagClass;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return cls;\r\n        },\r\n        scope: scope\r\n    };\r\n}\r\nfunction highlightTags(highlighters, tags) {\r\n    let result = null;\r\n    for (let highlighter of highlighters) {\r\n        let value = highlighter.style(tags);\r\n        if (value)\r\n            result = result ? result + \" \" + value : value;\r\n    }\r\n    return result;\r\n}\r\nfunction highlightTree(tree, highlighter, putStyle, from = 0, to = tree.length) {\r\n    let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);\r\n    builder.highlightRange(tree.cursor(), from, to, \"\", builder.highlighters);\r\n    builder.flush(to);\r\n}\r\nclass HighlightBuilder {\r\n    constructor(at, highlighters, span) {\r\n        this.at = at;\r\n        this.highlighters = highlighters;\r\n        this.span = span;\r\n        this.class = \"\";\r\n    }\r\n    startSpan(at, cls) {\r\n        if (cls != this.class) {\r\n            this.flush(at);\r\n            if (at > this.at)\r\n                this.at = at;\r\n            this.class = cls;\r\n        }\r\n    }\r\n    flush(to) {\r\n        if (to > this.at && this.class)\r\n            this.span(this.at, to, this.class);\r\n    }\r\n    highlightRange(cursor, from, to, inheritedClass, highlighters) {\r\n        let { type, from: start, to: end } = cursor;\r\n        if (start >= to || end <= from)\r\n            return;\r\n        if (type.isTop)\r\n            highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));\r\n        let cls = inheritedClass;\r\n        let rule = type.prop(ruleNodeProp), opaque = false;\r\n        while (rule) {\r\n            if (!rule.context || cursor.matchContext(rule.context)) {\r\n                let tagCls = highlightTags(highlighters, rule.tags);\r\n                if (tagCls) {\r\n                    if (cls)\r\n                        cls += \" \";\r\n                    cls += tagCls;\r\n                    if (rule.mode == 1 /* Inherit */)\r\n                        inheritedClass += (inheritedClass ? \" \" : \"\") + tagCls;\r\n                    else if (rule.mode == 0 /* Opaque */)\r\n                        opaque = true;\r\n                }\r\n                break;\r\n            }\r\n            rule = rule.next;\r\n        }\r\n        this.startSpan(cursor.from, cls);\r\n        if (opaque)\r\n            return;\r\n        let mounted = cursor.tree && cursor.tree.prop(_common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp.mounted);\r\n        if (mounted && mounted.overlay) {\r\n            let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);\r\n            let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));\r\n            let hasChild = cursor.firstChild();\r\n            for (let i = 0, pos = start;; i++) {\r\n                let next = i < mounted.overlay.length ? mounted.overlay[i] : null;\r\n                let nextPos = next ? next.from + start : end;\r\n                let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);\r\n                if (rangeFrom < rangeTo && hasChild) {\r\n                    while (cursor.from < rangeTo) {\r\n                        this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);\r\n                        this.startSpan(Math.min(to, cursor.to), cls);\r\n                        if (cursor.to >= nextPos || !cursor.nextSibling())\r\n                            break;\r\n                    }\r\n                }\r\n                if (!next || nextPos > to)\r\n                    break;\r\n                pos = next.to + start;\r\n                if (pos > from) {\r\n                    this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), inheritedClass, innerHighlighters);\r\n                    this.startSpan(pos, cls);\r\n                }\r\n            }\r\n            if (hasChild)\r\n                cursor.parent();\r\n        }\r\n        else if (cursor.firstChild()) {\r\n            do {\r\n                if (cursor.to <= from)\r\n                    continue;\r\n                if (cursor.from >= to)\r\n                    break;\r\n                this.highlightRange(cursor, from, to, inheritedClass, highlighters);\r\n                this.startSpan(Math.min(to, cursor.to), cls);\r\n            } while (cursor.nextSibling());\r\n            cursor.parent();\r\n        }\r\n    }\r\n}\r\nconst t = Tag.define;\r\nconst comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();\r\nconst tags = {\r\n    comment,\r\n    lineComment: t(comment),\r\n    blockComment: t(comment),\r\n    docComment: t(comment),\r\n    name,\r\n    variableName: t(name),\r\n    typeName: typeName,\r\n    tagName: t(typeName),\r\n    propertyName: propertyName,\r\n    attributeName: t(propertyName),\r\n    className: t(name),\r\n    labelName: t(name),\r\n    namespace: t(name),\r\n    macroName: t(name),\r\n    literal,\r\n    string,\r\n    docString: t(string),\r\n    character: t(string),\r\n    attributeValue: t(string),\r\n    number,\r\n    integer: t(number),\r\n    float: t(number),\r\n    bool: t(literal),\r\n    regexp: t(literal),\r\n    escape: t(literal),\r\n    color: t(literal),\r\n    url: t(literal),\r\n    keyword,\r\n    self: t(keyword),\r\n    null: t(keyword),\r\n    atom: t(keyword),\r\n    unit: t(keyword),\r\n    modifier: t(keyword),\r\n    operatorKeyword: t(keyword),\r\n    controlKeyword: t(keyword),\r\n    definitionKeyword: t(keyword),\r\n    moduleKeyword: t(keyword),\r\n    operator,\r\n    derefOperator: t(operator),\r\n    arithmeticOperator: t(operator),\r\n    logicOperator: t(operator),\r\n    bitwiseOperator: t(operator),\r\n    compareOperator: t(operator),\r\n    updateOperator: t(operator),\r\n    definitionOperator: t(operator),\r\n    typeOperator: t(operator),\r\n    controlOperator: t(operator),\r\n    punctuation,\r\n    separator: t(punctuation),\r\n    bracket,\r\n    angleBracket: t(bracket),\r\n    squareBracket: t(bracket),\r\n    paren: t(bracket),\r\n    brace: t(bracket),\r\n    content,\r\n    heading,\r\n    heading1: t(heading),\r\n    heading2: t(heading),\r\n    heading3: t(heading),\r\n    heading4: t(heading),\r\n    heading5: t(heading),\r\n    heading6: t(heading),\r\n    contentSeparator: t(content),\r\n    list: t(content),\r\n    quote: t(content),\r\n    emphasis: t(content),\r\n    strong: t(content),\r\n    link: t(content),\r\n    monospace: t(content),\r\n    strikethrough: t(content),\r\n    inserted: t(),\r\n    deleted: t(),\r\n    changed: t(),\r\n    invalid: t(),\r\n    meta,\r\n    documentMeta: t(meta),\r\n    annotation: t(meta),\r\n    processingInstruction: t(meta),\r\n    definition: Tag.defineModifier(),\r\n    constant: Tag.defineModifier(),\r\n    function: Tag.defineModifier(),\r\n    standard: Tag.defineModifier(),\r\n    local: Tag.defineModifier(),\r\n    special: Tag.defineModifier()\r\n};\r\nconst classHighlighter = tagHighlighter([\r\n    { tag: tags.link, class: \"tok-link\" },\r\n    { tag: tags.heading, class: \"tok-heading\" },\r\n    { tag: tags.emphasis, class: \"tok-emphasis\" },\r\n    { tag: tags.strong, class: \"tok-strong\" },\r\n    { tag: tags.keyword, class: \"tok-keyword\" },\r\n    { tag: tags.atom, class: \"tok-atom\" },\r\n    { tag: tags.bool, class: \"tok-bool\" },\r\n    { tag: tags.url, class: \"tok-url\" },\r\n    { tag: tags.labelName, class: \"tok-labelName\" },\r\n    { tag: tags.inserted, class: \"tok-inserted\" },\r\n    { tag: tags.deleted, class: \"tok-deleted\" },\r\n    { tag: tags.literal, class: \"tok-literal\" },\r\n    { tag: tags.string, class: \"tok-string\" },\r\n    { tag: tags.number, class: \"tok-number\" },\r\n    { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: \"tok-string2\" },\r\n    { tag: tags.variableName, class: \"tok-variableName\" },\r\n    { tag: tags.local(tags.variableName), class: \"tok-variableName tok-local\" },\r\n    { tag: tags.definition(tags.variableName), class: \"tok-variableName tok-definition\" },\r\n    { tag: tags.special(tags.variableName), class: \"tok-variableName2\" },\r\n    { tag: tags.definition(tags.propertyName), class: \"tok-propertyName tok-definition\" },\r\n    { tag: tags.typeName, class: \"tok-typeName\" },\r\n    { tag: tags.namespace, class: \"tok-namespace\" },\r\n    { tag: tags.className, class: \"tok-className\" },\r\n    { tag: tags.macroName, class: \"tok-macroName\" },\r\n    { tag: tags.propertyName, class: \"tok-propertyName\" },\r\n    { tag: tags.operator, class: \"tok-operator\" },\r\n    { tag: tags.comment, class: \"tok-comment\" },\r\n    { tag: tags.meta, class: \"tok-meta\" },\r\n    { tag: tags.invalid, class: \"tok-invalid\" },\r\n    { tag: tags.punctuation, class: \"tok-punctuation\" }\r\n]);\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/lezer/highlight/highlight.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/lezer/highlight/index.js":
/*!************************************************************!*\
  !*** ./sys/public/js/editor/dist/lezer/highlight/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Tag\": () => (/* reexport safe */ _highlight_js__WEBPACK_IMPORTED_MODULE_0__.Tag),\n/* harmony export */   \"classHighlighter\": () => (/* reexport safe */ _highlight_js__WEBPACK_IMPORTED_MODULE_0__.classHighlighter),\n/* harmony export */   \"highlightTags\": () => (/* reexport safe */ _highlight_js__WEBPACK_IMPORTED_MODULE_0__.highlightTags),\n/* harmony export */   \"highlightTree\": () => (/* reexport safe */ _highlight_js__WEBPACK_IMPORTED_MODULE_0__.highlightTree),\n/* harmony export */   \"styleTags\": () => (/* reexport safe */ _highlight_js__WEBPACK_IMPORTED_MODULE_0__.styleTags),\n/* harmony export */   \"tagHighlighter\": () => (/* reexport safe */ _highlight_js__WEBPACK_IMPORTED_MODULE_0__.tagHighlighter),\n/* harmony export */   \"tags\": () => (/* reexport safe */ _highlight_js__WEBPACK_IMPORTED_MODULE_0__.tags)\n/* harmony export */ });\n/* harmony import */ var _highlight_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./highlight.js */ \"./sys/public/js/editor/dist/lezer/highlight/highlight.js\");\n\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/lezer/highlight/index.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/lezer/lr/decode.js":
/*!******************************************************!*\
  !*** ./sys/public/js/editor/dist/lezer/lr/decode.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"decodeArray\": () => (/* binding */ decodeArray)\n/* harmony export */ });\nfunction decodeArray(input, Type = Uint16Array) {\r\n    if (typeof input != \"string\")\r\n        return input;\r\n    let array = null;\r\n    for (let pos = 0, out = 0; pos < input.length;) {\r\n        let value = 0;\r\n        for (;;) {\r\n            let next = input.charCodeAt(pos++), stop = false;\r\n            if (next == 126 /* BigValCode */) {\r\n                value = 65535 /* BigVal */;\r\n                break;\r\n            }\r\n            if (next >= 92 /* Gap2 */)\r\n                next--;\r\n            if (next >= 34 /* Gap1 */)\r\n                next--;\r\n            let digit = next - 32 /* Start */;\r\n            if (digit >= 46 /* Base */) {\r\n                digit -= 46 /* Base */;\r\n                stop = true;\r\n            }\r\n            value += digit;\r\n            if (stop)\r\n                break;\r\n            value *= 46 /* Base */;\r\n        }\r\n        if (array)\r\n            array[out++] = value;\r\n        else\r\n            array = new Type(value);\r\n    }\r\n    return array;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/lezer/lr/decode.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/lezer/lr/index.js":
/*!*****************************************************!*\
  !*** ./sys/public/js/editor/dist/lezer/lr/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ContextTracker\": () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_0__.ContextTracker),\n/* harmony export */   \"ExternalTokenizer\": () => (/* reexport safe */ _token_js__WEBPACK_IMPORTED_MODULE_1__.ExternalTokenizer),\n/* harmony export */   \"InputStream\": () => (/* reexport safe */ _token_js__WEBPACK_IMPORTED_MODULE_1__.InputStream),\n/* harmony export */   \"LRParser\": () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_0__.LRParser),\n/* harmony export */   \"Stack\": () => (/* reexport safe */ _stack_js__WEBPACK_IMPORTED_MODULE_2__.Stack)\n/* harmony export */ });\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"./sys/public/js/editor/dist/lezer/lr/parse.js\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./token.js */ \"./sys/public/js/editor/dist/lezer/lr/token.js\");\n/* harmony import */ var _stack_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stack.js */ \"./sys/public/js/editor/dist/lezer/lr/stack.js\");\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/lezer/lr/index.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/lezer/lr/parse.js":
/*!*****************************************************!*\
  !*** ./sys/public/js/editor/dist/lezer/lr/parse.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ContextTracker\": () => (/* binding */ ContextTracker),\n/* harmony export */   \"Dialect\": () => (/* binding */ Dialect),\n/* harmony export */   \"LRParser\": () => (/* binding */ LRParser),\n/* harmony export */   \"Parse\": () => (/* binding */ Parse)\n/* harmony export */ });\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index.js */ \"./sys/public/js/editor/dist/lezer/common/index.js\");\n/* harmony import */ var _stack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stack.js */ \"./sys/public/js/editor/dist/lezer/lr/stack.js\");\n/* harmony import */ var _token_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./token.js */ \"./sys/public/js/editor/dist/lezer/lr/token.js\");\n/* harmony import */ var _decode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./decode.js */ \"./sys/public/js/editor/dist/lezer/lr/decode.js\");\n\r\n\r\n\r\n\r\n// Environment variable used to control console output\r\n// @ts-ignore\r\nconst verbose = typeof process != \"undefined\" && /\\bparse\\b/.test(process.env.LOG);\r\nlet stackIDs = null;\r\nfunction cutAt(tree, pos, side) {\r\n    let cursor = tree.cursor(_common_index_js__WEBPACK_IMPORTED_MODULE_0__.IterMode.IncludeAnonymous);\r\n    cursor.moveTo(pos);\r\n    for (;;) {\r\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\r\n            for (;;) {\r\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\r\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Margin */))\r\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Margin */));\r\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\r\n                    break;\r\n                if (!cursor.parent())\r\n                    return side < 0 ? 0 : tree.length;\r\n            }\r\n    }\r\n}\r\nclass FragmentCursor {\r\n    constructor(fragments, nodeSet) {\r\n        this.fragments = fragments;\r\n        this.nodeSet = nodeSet;\r\n        this.i = 0;\r\n        this.fragment = null;\r\n        this.safeFrom = -1;\r\n        this.safeTo = -1;\r\n        this.trees = [];\r\n        this.start = [];\r\n        this.index = [];\r\n        this.nextFragment();\r\n    }\r\n    nextFragment() {\r\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\r\n        if (fr) {\r\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\r\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\r\n            while (this.trees.length) {\r\n                this.trees.pop();\r\n                this.start.pop();\r\n                this.index.pop();\r\n            }\r\n            this.trees.push(fr.tree);\r\n            this.start.push(-fr.offset);\r\n            this.index.push(0);\r\n            this.nextStart = this.safeFrom;\r\n        }\r\n        else {\r\n            this.nextStart = 1e9;\r\n        }\r\n    }\r\n    // `pos` must be >= any previously given `pos` for this cursor\r\n    nodeAt(pos) {\r\n        if (pos < this.nextStart)\r\n            return null;\r\n        while (this.fragment && this.safeTo <= pos)\r\n            this.nextFragment();\r\n        if (!this.fragment)\r\n            return null;\r\n        for (;;) {\r\n            let last = this.trees.length - 1;\r\n            if (last < 0) { // End of tree\r\n                this.nextFragment();\r\n                return null;\r\n            }\r\n            let top = this.trees[last], index = this.index[last];\r\n            if (index == top.children.length) {\r\n                this.trees.pop();\r\n                this.start.pop();\r\n                this.index.pop();\r\n                continue;\r\n            }\r\n            let next = top.children[index];\r\n            let start = this.start[last] + top.positions[index];\r\n            if (start > pos) {\r\n                this.nextStart = start;\r\n                return null;\r\n            }\r\n            if (next instanceof _common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree) {\r\n                if (start == pos) {\r\n                    if (start < this.safeFrom)\r\n                        return null;\r\n                    let end = start + next.length;\r\n                    if (end <= this.safeTo) {\r\n                        let lookAhead = next.prop(_common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp.lookAhead);\r\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\r\n                            return next;\r\n                    }\r\n                }\r\n                this.index[last]++;\r\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\r\n                    this.trees.push(next);\r\n                    this.start.push(start);\r\n                    this.index.push(0);\r\n                }\r\n            }\r\n            else {\r\n                this.index[last]++;\r\n                this.nextStart = start + next.length;\r\n            }\r\n        }\r\n    }\r\n}\r\nclass TokenCache {\r\n    constructor(parser, stream) {\r\n        this.stream = stream;\r\n        this.tokens = [];\r\n        this.mainToken = null;\r\n        this.actions = [];\r\n        this.tokens = parser.tokenizers.map(_ => new _token_js__WEBPACK_IMPORTED_MODULE_2__.CachedToken);\r\n    }\r\n    getActions(stack) {\r\n        let actionIndex = 0;\r\n        let main = null;\r\n        let { parser } = stack.p, { tokenizers } = parser;\r\n        let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);\r\n        let context = stack.curContext ? stack.curContext.hash : 0;\r\n        let lookAhead = 0;\r\n        for (let i = 0; i < tokenizers.length; i++) {\r\n            if (((1 << i) & mask) == 0)\r\n                continue;\r\n            let tokenizer = tokenizers[i], token = this.tokens[i];\r\n            if (main && !tokenizer.fallback)\r\n                continue;\r\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\r\n                this.updateCachedToken(token, tokenizer, stack);\r\n                token.mask = mask;\r\n                token.context = context;\r\n            }\r\n            if (token.lookAhead > token.end + 25 /* Margin */)\r\n                lookAhead = Math.max(token.lookAhead, lookAhead);\r\n            if (token.value != 0 /* Err */) {\r\n                let startIndex = actionIndex;\r\n                if (token.extended > -1)\r\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\r\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\r\n                if (!tokenizer.extend) {\r\n                    main = token;\r\n                    if (actionIndex > startIndex)\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        while (this.actions.length > actionIndex)\r\n            this.actions.pop();\r\n        if (lookAhead)\r\n            stack.setLookAhead(lookAhead);\r\n        if (!main && stack.pos == this.stream.end) {\r\n            main = new _token_js__WEBPACK_IMPORTED_MODULE_2__.CachedToken;\r\n            main.value = stack.p.parser.eofTerm;\r\n            main.start = main.end = stack.pos;\r\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\r\n        }\r\n        this.mainToken = main;\r\n        return this.actions;\r\n    }\r\n    getMainToken(stack) {\r\n        if (this.mainToken)\r\n            return this.mainToken;\r\n        let main = new _token_js__WEBPACK_IMPORTED_MODULE_2__.CachedToken, { pos, p } = stack;\r\n        main.start = pos;\r\n        main.end = Math.min(pos + 1, p.stream.end);\r\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Err */;\r\n        return main;\r\n    }\r\n    updateCachedToken(token, tokenizer, stack) {\r\n        tokenizer.token(this.stream.reset(stack.pos, token), stack);\r\n        if (token.value > -1) {\r\n            let { parser } = stack.p;\r\n            for (let i = 0; i < parser.specialized.length; i++)\r\n                if (parser.specialized[i] == token.value) {\r\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\r\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\r\n                        if ((result & 1) == 0 /* Specialize */)\r\n                            token.value = result >> 1;\r\n                        else\r\n                            token.extended = result >> 1;\r\n                        break;\r\n                    }\r\n                }\r\n        }\r\n        else {\r\n            token.value = 0 /* Err */;\r\n            token.end = Math.min(stack.p.stream.end, stack.pos + 1);\r\n        }\r\n    }\r\n    putAction(action, token, end, index) {\r\n        // Don't add duplicate actions\r\n        for (let i = 0; i < index; i += 3)\r\n            if (this.actions[i] == action)\r\n                return index;\r\n        this.actions[index++] = action;\r\n        this.actions[index++] = token;\r\n        this.actions[index++] = end;\r\n        return index;\r\n    }\r\n    addActions(stack, token, end, index) {\r\n        let { state } = stack, { parser } = stack.p, { data } = parser;\r\n        for (let set = 0; set < 2; set++) {\r\n            for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {\r\n                if (data[i] == 65535 /* End */) {\r\n                    if (data[i + 1] == 1 /* Next */) {\r\n                        i = pair(data, i + 2);\r\n                    }\r\n                    else {\r\n                        if (index == 0 && data[i + 1] == 2 /* Other */)\r\n                            index = this.putAction(pair(data, i + 2), token, end, index);\r\n                        break;\r\n                    }\r\n                }\r\n                if (data[i] == token)\r\n                    index = this.putAction(pair(data, i + 1), token, end, index);\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n}\r\nclass Parse {\r\n    constructor(parser, input, fragments, ranges) {\r\n        this.parser = parser;\r\n        this.input = input;\r\n        this.ranges = ranges;\r\n        this.recovering = 0;\r\n        this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧\r\n        this.minStackPos = 0;\r\n        this.reused = [];\r\n        this.stoppedAt = null;\r\n        this.stream = new _token_js__WEBPACK_IMPORTED_MODULE_2__.InputStream(input, ranges);\r\n        this.tokens = new TokenCache(parser, this.stream);\r\n        this.topTerm = parser.top[1];\r\n        let { from } = ranges[0];\r\n        this.stacks = [_stack_js__WEBPACK_IMPORTED_MODULE_1__.Stack.start(this, parser.top[0], from)];\r\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\r\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\r\n    }\r\n    get parsedPos() {\r\n        return this.minStackPos;\r\n    }\r\n    // Move the parser forward. This will process all parse stacks at\r\n    // `this.pos` and try to advance them to a further position. If no\r\n    // stack for such a position is found, it'll start error-recovery.\r\n    //\r\n    // When the parse is finished, this will return a syntax tree. When\r\n    // not, it returns `null`.\r\n    advance() {\r\n        let stacks = this.stacks, pos = this.minStackPos;\r\n        // This will hold stacks beyond `pos`.\r\n        let newStacks = this.stacks = [];\r\n        let stopped, stoppedTokens;\r\n        // Keep advancing any stacks at `pos` until they either move\r\n        // forward or can't be advanced. Gather stacks that can't be\r\n        // advanced further in `stopped`.\r\n        for (let i = 0; i < stacks.length; i++) {\r\n            let stack = stacks[i];\r\n            for (;;) {\r\n                this.tokens.mainToken = null;\r\n                if (stack.pos > pos) {\r\n                    newStacks.push(stack);\r\n                }\r\n                else if (this.advanceStack(stack, newStacks, stacks)) {\r\n                    continue;\r\n                }\r\n                else {\r\n                    if (!stopped) {\r\n                        stopped = [];\r\n                        stoppedTokens = [];\r\n                    }\r\n                    stopped.push(stack);\r\n                    let tok = this.tokens.getMainToken(stack);\r\n                    stoppedTokens.push(tok.value, tok.end);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if (!newStacks.length) {\r\n            let finished = stopped && findFinished(stopped);\r\n            if (finished)\r\n                return this.stackToTree(finished);\r\n            if (this.parser.strict) {\r\n                if (verbose && stopped)\r\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\r\n                throw new SyntaxError(\"No parse at \" + pos);\r\n            }\r\n            if (!this.recovering)\r\n                this.recovering = 5 /* Distance */;\r\n        }\r\n        if (this.recovering && stopped) {\r\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\r\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\r\n            if (finished)\r\n                return this.stackToTree(finished.forceAll());\r\n        }\r\n        if (this.recovering) {\r\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;\r\n            if (newStacks.length > maxRemaining) {\r\n                newStacks.sort((a, b) => b.score - a.score);\r\n                while (newStacks.length > maxRemaining)\r\n                    newStacks.pop();\r\n            }\r\n            if (newStacks.some(s => s.reducePos > pos))\r\n                this.recovering--;\r\n        }\r\n        else if (newStacks.length > 1) {\r\n            // Prune stacks that are in the same state, or that have been\r\n            // running without splitting for a while, to avoid getting stuck\r\n            // with multiple successful stacks running endlessly on.\r\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\r\n                let stack = newStacks[i];\r\n                for (let j = i + 1; j < newStacks.length; j++) {\r\n                    let other = newStacks[j];\r\n                    if (stack.sameState(other) ||\r\n                        stack.buffer.length > 500 /* MinBufferLengthPrune */ && other.buffer.length > 500 /* MinBufferLengthPrune */) {\r\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\r\n                            newStacks.splice(j--, 1);\r\n                        }\r\n                        else {\r\n                            newStacks.splice(i--, 1);\r\n                            continue outer;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.minStackPos = newStacks[0].pos;\r\n        for (let i = 1; i < newStacks.length; i++)\r\n            if (newStacks[i].pos < this.minStackPos)\r\n                this.minStackPos = newStacks[i].pos;\r\n        return null;\r\n    }\r\n    stopAt(pos) {\r\n        if (this.stoppedAt != null && this.stoppedAt < pos)\r\n            throw new RangeError(\"Can't move stoppedAt forward\");\r\n        this.stoppedAt = pos;\r\n    }\r\n    // Returns an updated version of the given stack, or null if the\r\n    // stack can't advance normally. When `split` and `stacks` are\r\n    // given, stacks split off by ambiguous operations will be pushed to\r\n    // `split`, or added to `stacks` if they move `pos` forward.\r\n    advanceStack(stack, stacks, split) {\r\n        let start = stack.pos, { parser } = this;\r\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\r\n        if (this.stoppedAt != null && start > this.stoppedAt)\r\n            return stack.forceReduce() ? stack : null;\r\n        if (this.fragments) {\r\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\r\n            for (let cached = this.fragments.nodeAt(start); cached;) {\r\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\r\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(_common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp.contextHash) || 0) == cxHash)) {\r\n                    stack.useNode(cached, match);\r\n                    if (verbose)\r\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\r\n                    return true;\r\n                }\r\n                if (!(cached instanceof _common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree) || cached.children.length == 0 || cached.positions[0] > 0)\r\n                    break;\r\n                let inner = cached.children[0];\r\n                if (inner instanceof _common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree && cached.positions[0] == 0)\r\n                    cached = inner;\r\n                else\r\n                    break;\r\n            }\r\n        }\r\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);\r\n        if (defaultReduce > 0) {\r\n            stack.reduce(defaultReduce);\r\n            if (verbose)\r\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);\r\n            return true;\r\n        }\r\n        if (stack.stack.length >= 15000 /* CutDepth */) {\r\n            while (stack.stack.length > 9000 /* CutTo */ && stack.forceReduce()) { }\r\n        }\r\n        let actions = this.tokens.getActions(stack);\r\n        for (let i = 0; i < actions.length;) {\r\n            let action = actions[i++], term = actions[i++], end = actions[i++];\r\n            let last = i == actions.length || !split;\r\n            let localStack = last ? stack : stack.split();\r\n            localStack.apply(action, term, end);\r\n            if (verbose)\r\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? \"shift\"\r\n                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\r\n            if (last)\r\n                return true;\r\n            else if (localStack.pos > start)\r\n                stacks.push(localStack);\r\n            else\r\n                split.push(localStack);\r\n        }\r\n        return false;\r\n    }\r\n    // Advance a given stack forward as far as it will go. Returns the\r\n    // (possibly updated) stack if it got stuck, or null if it moved\r\n    // forward and was given to `pushStackDedup`.\r\n    advanceFully(stack, newStacks) {\r\n        let pos = stack.pos;\r\n        for (;;) {\r\n            if (!this.advanceStack(stack, null, null))\r\n                return false;\r\n            if (stack.pos > pos) {\r\n                pushStackDedup(stack, newStacks);\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    runRecovery(stacks, tokens, newStacks) {\r\n        let finished = null, restarted = false;\r\n        for (let i = 0; i < stacks.length; i++) {\r\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\r\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\r\n            if (stack.deadEnd) {\r\n                if (restarted)\r\n                    continue;\r\n                restarted = true;\r\n                stack.restart();\r\n                if (verbose)\r\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\r\n                let done = this.advanceFully(stack, newStacks);\r\n                if (done)\r\n                    continue;\r\n            }\r\n            let force = stack.split(), forceBase = base;\r\n            for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {\r\n                if (verbose)\r\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\r\n                let done = this.advanceFully(force, newStacks);\r\n                if (done)\r\n                    break;\r\n                if (verbose)\r\n                    forceBase = this.stackID(force) + \" -> \";\r\n            }\r\n            for (let insert of stack.recoverByInsert(token)) {\r\n                if (verbose)\r\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\r\n                this.advanceFully(insert, newStacks);\r\n            }\r\n            if (this.stream.end > stack.pos) {\r\n                if (tokenEnd == stack.pos) {\r\n                    tokenEnd++;\r\n                    token = 0 /* Err */;\r\n                }\r\n                stack.recoverByDelete(token, tokenEnd);\r\n                if (verbose)\r\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\r\n                pushStackDedup(stack, newStacks);\r\n            }\r\n            else if (!finished || finished.score < stack.score) {\r\n                finished = stack;\r\n            }\r\n        }\r\n        return finished;\r\n    }\r\n    // Convert the stack's buffer to a syntax tree.\r\n    stackToTree(stack) {\r\n        stack.close();\r\n        return _common_index_js__WEBPACK_IMPORTED_MODULE_0__.Tree.build({ buffer: _stack_js__WEBPACK_IMPORTED_MODULE_1__.StackBufferCursor.create(stack),\r\n            nodeSet: this.parser.nodeSet,\r\n            topID: this.topTerm,\r\n            maxBufferLength: this.parser.bufferLength,\r\n            reused: this.reused,\r\n            start: this.ranges[0].from,\r\n            length: stack.pos - this.ranges[0].from,\r\n            minRepeatType: this.parser.minRepeatTerm });\r\n    }\r\n    stackID(stack) {\r\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\r\n        if (!id)\r\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\r\n        return id + stack;\r\n    }\r\n}\r\nfunction pushStackDedup(stack, newStacks) {\r\n    for (let i = 0; i < newStacks.length; i++) {\r\n        let other = newStacks[i];\r\n        if (other.pos == stack.pos && other.sameState(stack)) {\r\n            if (newStacks[i].score < stack.score)\r\n                newStacks[i] = stack;\r\n            return;\r\n        }\r\n    }\r\n    newStacks.push(stack);\r\n}\r\nclass Dialect {\r\n    constructor(source, flags, disabled) {\r\n        this.source = source;\r\n        this.flags = flags;\r\n        this.disabled = disabled;\r\n    }\r\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\r\n}\r\nconst id = x => x;\r\nclass ContextTracker {\r\n    constructor(spec) {\r\n        this.start = spec.start;\r\n        this.shift = spec.shift || id;\r\n        this.reduce = spec.reduce || id;\r\n        this.reuse = spec.reuse || id;\r\n        this.hash = spec.hash || (() => 0);\r\n        this.strict = spec.strict !== false;\r\n    }\r\n}\r\nclass LRParser extends _common_index_js__WEBPACK_IMPORTED_MODULE_0__.Parser {\r\n    // @internal\r\n    constructor(spec) {\r\n        super();\r\n        // @internal\r\n        this.wrappers = [];\r\n        if (spec.version != 14 /* Version */)\r\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* Version */})`);\r\n        let nodeNames = spec.nodeNames.split(\" \");\r\n        this.minRepeatTerm = nodeNames.length;\r\n        for (let i = 0; i < spec.repeatNodeCount; i++)\r\n            nodeNames.push(\"\");\r\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\r\n        let nodeProps = [];\r\n        for (let i = 0; i < nodeNames.length; i++)\r\n            nodeProps.push([]);\r\n        function setProp(nodeID, prop, value) {\r\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\r\n        }\r\n        if (spec.nodeProps)\r\n            for (let propSpec of spec.nodeProps) {\r\n                let prop = propSpec[0];\r\n                if (typeof prop == \"string\")\r\n                    prop = _common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeProp[prop];\r\n                for (let i = 1; i < propSpec.length;) {\r\n                    let next = propSpec[i++];\r\n                    if (next >= 0) {\r\n                        setProp(next, prop, propSpec[i++]);\r\n                    }\r\n                    else {\r\n                        let value = propSpec[i + -next];\r\n                        for (let j = -next; j > 0; j--)\r\n                            setProp(propSpec[i++], prop, value);\r\n                        i++;\r\n                    }\r\n                }\r\n            }\r\n        this.nodeSet = new _common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeSet(nodeNames.map((name, i) => _common_index_js__WEBPACK_IMPORTED_MODULE_0__.NodeType.define({\r\n            name: i >= this.minRepeatTerm ? undefined : name,\r\n            id: i,\r\n            props: nodeProps[i],\r\n            top: topTerms.indexOf(i) > -1,\r\n            error: i == 0,\r\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\r\n        })));\r\n        if (spec.propSources)\r\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\r\n        this.strict = false;\r\n        this.bufferLength = _common_index_js__WEBPACK_IMPORTED_MODULE_0__.DefaultBufferLength;\r\n        let tokenArray = (0,_decode_js__WEBPACK_IMPORTED_MODULE_3__.decodeArray)(spec.tokenData);\r\n        this.context = spec.context;\r\n        this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);\r\n        this.specializers = [];\r\n        if (spec.specialized)\r\n            for (let i = 0; i < spec.specialized.length; i++) {\r\n                this.specialized[i] = spec.specialized[i].term;\r\n                this.specializers[i] = spec.specialized[i].get;\r\n            }\r\n        this.states = (0,_decode_js__WEBPACK_IMPORTED_MODULE_3__.decodeArray)(spec.states, Uint32Array);\r\n        this.data = (0,_decode_js__WEBPACK_IMPORTED_MODULE_3__.decodeArray)(spec.stateData);\r\n        this.goto = (0,_decode_js__WEBPACK_IMPORTED_MODULE_3__.decodeArray)(spec.goto);\r\n        this.maxTerm = spec.maxTerm;\r\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new _token_js__WEBPACK_IMPORTED_MODULE_2__.TokenGroup(tokenArray, value) : value);\r\n        this.topRules = spec.topRules;\r\n        this.dialects = spec.dialects || {};\r\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\r\n        this.tokenPrecTable = spec.tokenPrec;\r\n        this.termNames = spec.termNames || null;\r\n        this.maxNode = this.nodeSet.types.length - 1;\r\n        this.dialect = this.parseDialect();\r\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\r\n    }\r\n    createParse(input, fragments, ranges) {\r\n        let parse = new Parse(this, input, fragments, ranges);\r\n        for (let w of this.wrappers)\r\n            parse = w(parse, input, fragments, ranges);\r\n        return parse;\r\n    }\r\n    getGoto(state, term, loose = false) {\r\n        let table = this.goto;\r\n        if (term >= table[0])\r\n            return -1;\r\n        for (let pos = table[term + 1];;) {\r\n            let groupTag = table[pos++], last = groupTag & 1;\r\n            let target = table[pos++];\r\n            if (last && loose)\r\n                return target;\r\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\r\n                if (table[pos] == state)\r\n                    return target;\r\n            if (last)\r\n                return -1;\r\n        }\r\n    }\r\n    hasAction(state, terminal) {\r\n        let data = this.data;\r\n        for (let set = 0; set < 2; set++) {\r\n            for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {\r\n                if ((next = data[i]) == 65535 /* End */) {\r\n                    if (data[i + 1] == 1 /* Next */)\r\n                        next = data[i = pair(data, i + 2)];\r\n                    else if (data[i + 1] == 2 /* Other */)\r\n                        return pair(data, i + 2);\r\n                    else\r\n                        break;\r\n                }\r\n                if (next == terminal || next == 0 /* Err */)\r\n                    return pair(data, i + 1);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    // @internal\r\n    stateSlot(state, slot) {\r\n        return this.states[(state * 6 /* Size */) + slot];\r\n    }\r\n    // @internal\r\n    stateFlag(state, flag) {\r\n        return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;\r\n    }\r\n    // @internal\r\n    validAction(state, action) {\r\n        if (action == this.stateSlot(state, 4 /* DefaultReduce */))\r\n            return true;\r\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\r\n            if (this.data[i] == 65535 /* End */) {\r\n                if (this.data[i + 1] == 1 /* Next */)\r\n                    i = pair(this.data, i + 2);\r\n                else\r\n                    return false;\r\n            }\r\n            if (action == pair(this.data, i + 1))\r\n                return true;\r\n        }\r\n    }\r\n    nextStates(state) {\r\n        let result = [];\r\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\r\n            if (this.data[i] == 65535 /* End */) {\r\n                if (this.data[i + 1] == 1 /* Next */)\r\n                    i = pair(this.data, i + 2);\r\n                else\r\n                    break;\r\n            }\r\n            if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {\r\n                let value = this.data[i + 1];\r\n                if (!result.some((v, i) => (i & 1) && v == value))\r\n                    result.push(this.data[i], value);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    // @internal\r\n    overrides(token, prev) {\r\n        let iPrev = findOffset(this.data, this.tokenPrecTable, prev);\r\n        return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;\r\n    }\r\n    configure(config) {\r\n        // Hideous reflection-based kludge to make it easy to create a\r\n        // slightly modified copy of a parser.\r\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\r\n        if (config.props)\r\n            copy.nodeSet = this.nodeSet.extend(...config.props);\r\n        if (config.top) {\r\n            let info = this.topRules[config.top];\r\n            if (!info)\r\n                throw new RangeError(`Invalid top rule name ${config.top}`);\r\n            copy.top = info;\r\n        }\r\n        if (config.tokenizers)\r\n            copy.tokenizers = this.tokenizers.map(t => {\r\n                let found = config.tokenizers.find(r => r.from == t);\r\n                return found ? found.to : t;\r\n            });\r\n        if (config.contextTracker)\r\n            copy.context = config.contextTracker;\r\n        if (config.dialect)\r\n            copy.dialect = this.parseDialect(config.dialect);\r\n        if (config.strict != null)\r\n            copy.strict = config.strict;\r\n        if (config.wrap)\r\n            copy.wrappers = copy.wrappers.concat(config.wrap);\r\n        if (config.bufferLength != null)\r\n            copy.bufferLength = config.bufferLength;\r\n        return copy;\r\n    }\r\n    hasWrappers() {\r\n        return this.wrappers.length > 0;\r\n    }\r\n    getName(term) {\r\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\r\n    }\r\n    get eofTerm() { return this.maxNode + 1; }\r\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\r\n    // @internal\r\n    dynamicPrecedence(term) {\r\n        let prec = this.dynamicPrecedences;\r\n        return prec == null ? 0 : prec[term] || 0;\r\n    }\r\n    // @internal\r\n    parseDialect(dialect) {\r\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\r\n        if (dialect)\r\n            for (let part of dialect.split(\" \")) {\r\n                let id = values.indexOf(part);\r\n                if (id >= 0)\r\n                    flags[id] = true;\r\n            }\r\n        let disabled = null;\r\n        for (let i = 0; i < values.length; i++)\r\n            if (!flags[i]) {\r\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)\r\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\r\n            }\r\n        return new Dialect(dialect, flags, disabled);\r\n    }\r\n    static deserialize(spec) {\r\n        return new LRParser(spec);\r\n    }\r\n}\r\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\r\nfunction findOffset(data, start, term) {\r\n    for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)\r\n        if (next == term)\r\n            return i - start;\r\n    return -1;\r\n}\r\nfunction findFinished(stacks) {\r\n    let best = null;\r\n    for (let stack of stacks) {\r\n        let stopped = stack.p.stoppedAt;\r\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\r\n            stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&\r\n            (!best || best.score < stack.score))\r\n            best = stack;\r\n    }\r\n    return best;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/lezer/lr/parse.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/lezer/lr/stack.js":
/*!*****************************************************!*\
  !*** ./sys/public/js/editor/dist/lezer/lr/stack.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Stack\": () => (/* binding */ Stack),\n/* harmony export */   \"StackBufferCursor\": () => (/* binding */ StackBufferCursor)\n/* harmony export */ });\nclass Stack {\r\n    // @internal\r\n    constructor(p, stack, state, \r\n    // The position at which the next reduce should take place. This\r\n    // can be less than `this.pos` when skipped expressions have been\r\n    // added to the stack (which should be moved outside of the next\r\n    // reduction)\r\n    // @internal\r\n    reducePos, pos, \r\n    // @internal\r\n    score, \r\n    // The output buffer. Holds (type, start, end, size) quads\r\n    // representing nodes created by the parser, where `size` is\r\n    // amount of buffer array entries covered by this node.\r\n    // @internal\r\n    buffer, \r\n    // The base offset of the buffer. When stacks are split, the split\r\n    // instance shared the buffer history with its parent up to\r\n    // `bufferBase`, which is the absolute offset (including the\r\n    // offset of previous splits) into the buffer at which this stack\r\n    // starts writing.\r\n    // @internal\r\n    bufferBase, \r\n    // @internal\r\n    curContext, \r\n    // @internal\r\n    lookAhead = 0, \r\n    // A parent stack from which this was split off, if any. This is\r\n    // set up so that it always points to a stack that has some\r\n    // additional buffer content, never to a stack with an equal\r\n    // `bufferBase`.\r\n    // @internal\r\n    parent) {\r\n        this.p = p;\r\n        this.stack = stack;\r\n        this.state = state;\r\n        this.reducePos = reducePos;\r\n        this.pos = pos;\r\n        this.score = score;\r\n        this.buffer = buffer;\r\n        this.bufferBase = bufferBase;\r\n        this.curContext = curContext;\r\n        this.lookAhead = lookAhead;\r\n        this.parent = parent;\r\n    }\r\n    // @internal\r\n    toString() {\r\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\r\n    }\r\n    // Start an empty stack\r\n    // @internal\r\n    static start(p, state, pos = 0) {\r\n        let cx = p.parser.context;\r\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\r\n    }\r\n    get context() { return this.curContext ? this.curContext.context : null; }\r\n    // Push a state onto the stack, tracking its start position as well\r\n    // as the buffer base at that point.\r\n    // @internal\r\n    pushState(state, start) {\r\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\r\n        this.state = state;\r\n    }\r\n    // Apply a reduce action\r\n    // @internal\r\n    reduce(action) {\r\n        let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;\r\n        let { parser } = this.p;\r\n        let dPrec = parser.dynamicPrecedence(type);\r\n        if (dPrec)\r\n            this.score += dPrec;\r\n        if (depth == 0) {\r\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\r\n            // Zero-depth reductions are a special case—they add stuff to\r\n            // the stack without popping anything off.\r\n            if (type < parser.minRepeatTerm)\r\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\r\n            this.reduceContext(type, this.reducePos);\r\n            return;\r\n        }\r\n        // Find the base index into `this.stack`, content after which will\r\n        // be dropped. Note that with `StayFlag` reductions we need to\r\n        // consume two extra frames (the dummy parent node for the skipped\r\n        // expression and the state that we'll be staying in, which should\r\n        // be moved to `this.state`).\r\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);\r\n        let start = this.stack[base - 2];\r\n        let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;\r\n        // Store normal terms or `R -> R R` repeat reductions\r\n        if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {\r\n            let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;\r\n            this.storeNode(type, start, pos, count + 4, true);\r\n        }\r\n        if (action & 262144 /* StayFlag */) {\r\n            this.state = this.stack[base];\r\n        }\r\n        else {\r\n            let baseStateID = this.stack[base - 3];\r\n            this.state = parser.getGoto(baseStateID, type, true);\r\n        }\r\n        while (this.stack.length > base)\r\n            this.stack.pop();\r\n        this.reduceContext(type, start);\r\n    }\r\n    // Shift a value into the buffer\r\n    // @internal\r\n    storeNode(term, start, end, size = 4, isReduce = false) {\r\n        if (term == 0 /* Err */ &&\r\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\r\n            // Try to omit/merge adjacent error nodes\r\n            let cur = this, top = this.buffer.length;\r\n            if (top == 0 && cur.parent) {\r\n                top = cur.bufferBase - cur.parent.bufferBase;\r\n                cur = cur.parent;\r\n            }\r\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {\r\n                if (start == end)\r\n                    return;\r\n                if (cur.buffer[top - 2] >= start) {\r\n                    cur.buffer[top - 2] = end;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        if (!isReduce || this.pos == end) { // Simple case, just append\r\n            this.buffer.push(term, start, end, size);\r\n        }\r\n        else { // There may be skipped nodes that have to be moved forward\r\n            let index = this.buffer.length;\r\n            if (index > 0 && this.buffer[index - 4] != 0 /* Err */)\r\n                while (index > 0 && this.buffer[index - 2] > end) {\r\n                    // Move this record forward\r\n                    this.buffer[index] = this.buffer[index - 4];\r\n                    this.buffer[index + 1] = this.buffer[index - 3];\r\n                    this.buffer[index + 2] = this.buffer[index - 2];\r\n                    this.buffer[index + 3] = this.buffer[index - 1];\r\n                    index -= 4;\r\n                    if (size > 4)\r\n                        size -= 4;\r\n                }\r\n            this.buffer[index] = term;\r\n            this.buffer[index + 1] = start;\r\n            this.buffer[index + 2] = end;\r\n            this.buffer[index + 3] = size;\r\n        }\r\n    }\r\n    // Apply a shift action\r\n    // @internal\r\n    shift(action, next, nextEnd) {\r\n        let start = this.pos;\r\n        if (action & 131072 /* GotoFlag */) {\r\n            this.pushState(action & 65535 /* ValueMask */, this.pos);\r\n        }\r\n        else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift\r\n            let nextState = action, { parser } = this.p;\r\n            if (nextEnd > this.pos || next <= parser.maxNode) {\r\n                this.pos = nextEnd;\r\n                if (!parser.stateFlag(nextState, 1 /* Skipped */))\r\n                    this.reducePos = nextEnd;\r\n            }\r\n            this.pushState(nextState, start);\r\n            this.shiftContext(next, start);\r\n            if (next <= parser.maxNode)\r\n                this.buffer.push(next, start, nextEnd, 4);\r\n        }\r\n        else { // Shift-and-stay, which means this is a skipped token\r\n            this.pos = nextEnd;\r\n            this.shiftContext(next, start);\r\n            if (next <= this.p.parser.maxNode)\r\n                this.buffer.push(next, start, nextEnd, 4);\r\n        }\r\n    }\r\n    // Apply an action\r\n    // @internal\r\n    apply(action, next, nextEnd) {\r\n        if (action & 65536 /* ReduceFlag */)\r\n            this.reduce(action);\r\n        else\r\n            this.shift(action, next, nextEnd);\r\n    }\r\n    // Add a prebuilt (reused) node into the buffer.\r\n    // @internal\r\n    useNode(value, next) {\r\n        let index = this.p.reused.length - 1;\r\n        if (index < 0 || this.p.reused[index] != value) {\r\n            this.p.reused.push(value);\r\n            index++;\r\n        }\r\n        let start = this.pos;\r\n        this.reducePos = this.pos = start + value.length;\r\n        this.pushState(next, start);\r\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\r\n        if (this.curContext)\r\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\r\n    }\r\n    // Split the stack. Due to the buffer sharing and the fact\r\n    // that `this.stack` tends to stay quite shallow, this isn't very\r\n    // expensive.\r\n    // @internal\r\n    split() {\r\n        let parent = this;\r\n        let off = parent.buffer.length;\r\n        // Because the top of the buffer (after this.pos) may be mutated\r\n        // to reorder reductions and skipped tokens, and shared buffers\r\n        // should be immutable, this copies any outstanding skipped tokens\r\n        // to the new buffer, and puts the base pointer before them.\r\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\r\n            off -= 4;\r\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\r\n        // Make sure parent points to an actual parent with content, if there is such a parent.\r\n        while (parent && base == parent.bufferBase)\r\n            parent = parent.parent;\r\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\r\n    }\r\n    // Try to recover from an error by 'deleting' (ignoring) one token.\r\n    // @internal\r\n    recoverByDelete(next, nextEnd) {\r\n        let isNode = next <= this.p.parser.maxNode;\r\n        if (isNode)\r\n            this.storeNode(next, this.pos, nextEnd, 4);\r\n        this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);\r\n        this.pos = this.reducePos = nextEnd;\r\n        this.score -= 190 /* Delete */;\r\n    }\r\n    canShift(term) {\r\n        for (let sim = new SimulatedStack(this);;) {\r\n            let action = this.p.parser.stateSlot(sim.state, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\r\n            if ((action & 65536 /* ReduceFlag */) == 0)\r\n                return true;\r\n            if (action == 0)\r\n                return false;\r\n            sim.reduce(action);\r\n        }\r\n    }\r\n    // Apply up to Recover.MaxNext recovery actions that conceptually\r\n    // inserts some missing token or rule.\r\n    // @internal\r\n    recoverByInsert(next) {\r\n        if (this.stack.length >= 300 /* MaxInsertStackDepth */)\r\n            return [];\r\n        let nextStates = this.p.parser.nextStates(this.state);\r\n        if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {\r\n            let best = [];\r\n            for (let i = 0, s; i < nextStates.length; i += 2) {\r\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\r\n                    best.push(nextStates[i], s);\r\n            }\r\n            if (this.stack.length < 120 /* DampenInsertStackDepth */)\r\n                for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {\r\n                    let s = nextStates[i + 1];\r\n                    if (!best.some((v, i) => (i & 1) && v == s))\r\n                        best.push(nextStates[i], s);\r\n                }\r\n            nextStates = best;\r\n        }\r\n        let result = [];\r\n        for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {\r\n            let s = nextStates[i + 1];\r\n            if (s == this.state)\r\n                continue;\r\n            let stack = this.split();\r\n            stack.pushState(s, this.pos);\r\n            stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);\r\n            stack.shiftContext(nextStates[i], this.pos);\r\n            stack.score -= 200 /* Insert */;\r\n            result.push(stack);\r\n        }\r\n        return result;\r\n    }\r\n    // Force a reduce, if possible. Return false if that can't\r\n    // be done.\r\n    // @internal\r\n    forceReduce() {\r\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);\r\n        if ((reduce & 65536 /* ReduceFlag */) == 0)\r\n            return false;\r\n        let { parser } = this.p;\r\n        if (!parser.validAction(this.state, reduce)) {\r\n            let depth = reduce >> 19 /* ReduceDepthShift */, term = reduce & 65535 /* ValueMask */;\r\n            let target = this.stack.length - depth * 3;\r\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)\r\n                return false;\r\n            this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);\r\n            this.score -= 100 /* Reduce */;\r\n        }\r\n        this.reduce(reduce);\r\n        return true;\r\n    }\r\n    // @internal\r\n    forceAll() {\r\n        while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */)) {\r\n            if (!this.forceReduce()) {\r\n                this.storeNode(0 /* Err */, this.pos, this.pos, 4, true);\r\n                break;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    get deadEnd() {\r\n        if (this.stack.length != 3)\r\n            return false;\r\n        let { parser } = this.p;\r\n        return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&\r\n            !parser.stateSlot(this.state, 4 /* DefaultReduce */);\r\n    }\r\n    restart() {\r\n        this.state = this.stack[0];\r\n        this.stack.length = 0;\r\n    }\r\n    // @internal\r\n    sameState(other) {\r\n        if (this.state != other.state || this.stack.length != other.stack.length)\r\n            return false;\r\n        for (let i = 0; i < this.stack.length; i += 3)\r\n            if (this.stack[i] != other.stack[i])\r\n                return false;\r\n        return true;\r\n    }\r\n    get parser() { return this.p.parser; }\r\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\r\n    shiftContext(term, start) {\r\n        if (this.curContext)\r\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\r\n    }\r\n    reduceContext(term, start) {\r\n        if (this.curContext)\r\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\r\n    }\r\n    // @internal\r\n    emitContext() {\r\n        let last = this.buffer.length - 1;\r\n        if (last < 0 || this.buffer[last] != -3)\r\n            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\r\n    }\r\n    // @internal\r\n    emitLookAhead() {\r\n        let last = this.buffer.length - 1;\r\n        if (last < 0 || this.buffer[last] != -4)\r\n            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\r\n    }\r\n    updateContext(context) {\r\n        if (context != this.curContext.context) {\r\n            let newCx = new StackContext(this.curContext.tracker, context);\r\n            if (newCx.hash != this.curContext.hash)\r\n                this.emitContext();\r\n            this.curContext = newCx;\r\n        }\r\n    }\r\n    // @internal\r\n    setLookAhead(lookAhead) {\r\n        if (lookAhead > this.lookAhead) {\r\n            this.emitLookAhead();\r\n            this.lookAhead = lookAhead;\r\n        }\r\n    }\r\n    // @internal\r\n    close() {\r\n        if (this.curContext && this.curContext.tracker.strict)\r\n            this.emitContext();\r\n        if (this.lookAhead > 0)\r\n            this.emitLookAhead();\r\n    }\r\n}\r\nclass StackContext {\r\n    constructor(tracker, context) {\r\n        this.tracker = tracker;\r\n        this.context = context;\r\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\r\n    }\r\n}\r\n// Used to cheaply run some reductions to scan ahead without mutating\r\n// an entire stack\r\nclass SimulatedStack {\r\n    constructor(start) {\r\n        this.start = start;\r\n        this.state = start.state;\r\n        this.stack = start.stack;\r\n        this.base = this.stack.length;\r\n    }\r\n    reduce(action) {\r\n        let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;\r\n        if (depth == 0) {\r\n            if (this.stack == this.start.stack)\r\n                this.stack = this.stack.slice();\r\n            this.stack.push(this.state, 0, 0);\r\n            this.base += 3;\r\n        }\r\n        else {\r\n            this.base -= (depth - 1) * 3;\r\n        }\r\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\r\n        this.state = goto;\r\n    }\r\n}\r\n// This is given to `Tree.build` to build a buffer, and encapsulates\r\n// the parent-stack-walking necessary to read the nodes.\r\nclass StackBufferCursor {\r\n    constructor(stack, pos, index) {\r\n        this.stack = stack;\r\n        this.pos = pos;\r\n        this.index = index;\r\n        this.buffer = stack.buffer;\r\n        if (this.index == 0)\r\n            this.maybeNext();\r\n    }\r\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\r\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\r\n    }\r\n    maybeNext() {\r\n        let next = this.stack.parent;\r\n        if (next != null) {\r\n            this.index = this.stack.bufferBase - next.bufferBase;\r\n            this.stack = next;\r\n            this.buffer = next.buffer;\r\n        }\r\n    }\r\n    get id() { return this.buffer[this.index - 4]; }\r\n    get start() { return this.buffer[this.index - 3]; }\r\n    get end() { return this.buffer[this.index - 2]; }\r\n    get size() { return this.buffer[this.index - 1]; }\r\n    next() {\r\n        this.index -= 4;\r\n        this.pos -= 4;\r\n        if (this.index == 0)\r\n            this.maybeNext();\r\n    }\r\n    fork() {\r\n        return new StackBufferCursor(this.stack, this.pos, this.index);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/lezer/lr/stack.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/lezer/lr/token.js":
/*!*****************************************************!*\
  !*** ./sys/public/js/editor/dist/lezer/lr/token.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CachedToken\": () => (/* binding */ CachedToken),\n/* harmony export */   \"ExternalTokenizer\": () => (/* binding */ ExternalTokenizer),\n/* harmony export */   \"InputStream\": () => (/* binding */ InputStream),\n/* harmony export */   \"TokenGroup\": () => (/* binding */ TokenGroup)\n/* harmony export */ });\nclass CachedToken {\r\n    constructor() {\r\n        this.start = -1;\r\n        this.value = -1;\r\n        this.end = -1;\r\n        this.extended = -1;\r\n        this.lookAhead = 0;\r\n        this.mask = 0;\r\n        this.context = 0;\r\n    }\r\n}\r\nconst nullToken = new CachedToken;\r\nclass InputStream {\r\n    // @internal\r\n    constructor(\r\n    // @internal\r\n    input, \r\n    // @internal\r\n    ranges) {\r\n        this.input = input;\r\n        this.ranges = ranges;\r\n        // @internal\r\n        this.chunk = \"\";\r\n        // @internal\r\n        this.chunkOff = 0;\r\n        this.chunk2 = \"\";\r\n        this.chunk2Pos = 0;\r\n        this.next = -1;\r\n        // @internal\r\n        this.token = nullToken;\r\n        this.rangeIndex = 0;\r\n        this.pos = this.chunkPos = ranges[0].from;\r\n        this.range = ranges[0];\r\n        this.end = ranges[ranges.length - 1].to;\r\n        this.readNext();\r\n    }\r\n    resolveOffset(offset, assoc) {\r\n        let range = this.range, index = this.rangeIndex;\r\n        let pos = this.pos + offset;\r\n        while (pos < range.from) {\r\n            if (!index)\r\n                return null;\r\n            let next = this.ranges[--index];\r\n            pos -= range.from - next.to;\r\n            range = next;\r\n        }\r\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\r\n            if (index == this.ranges.length - 1)\r\n                return null;\r\n            let next = this.ranges[++index];\r\n            pos += next.from - range.to;\r\n            range = next;\r\n        }\r\n        return pos;\r\n    }\r\n    peek(offset) {\r\n        let idx = this.chunkOff + offset, pos, result;\r\n        if (idx >= 0 && idx < this.chunk.length) {\r\n            pos = this.pos + offset;\r\n            result = this.chunk.charCodeAt(idx);\r\n        }\r\n        else {\r\n            let resolved = this.resolveOffset(offset, 1);\r\n            if (resolved == null)\r\n                return -1;\r\n            pos = resolved;\r\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\r\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\r\n            }\r\n            else {\r\n                let i = this.rangeIndex, range = this.range;\r\n                while (range.to <= pos)\r\n                    range = this.ranges[++i];\r\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\r\n                if (pos + this.chunk2.length > range.to)\r\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\r\n                result = this.chunk2.charCodeAt(0);\r\n            }\r\n        }\r\n        if (pos >= this.token.lookAhead)\r\n            this.token.lookAhead = pos + 1;\r\n        return result;\r\n    }\r\n    acceptToken(token, endOffset = 0) {\r\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\r\n        if (end == null || end < this.token.start)\r\n            throw new RangeError(\"Token end out of bounds\");\r\n        this.token.value = token;\r\n        this.token.end = end;\r\n    }\r\n    getChunk() {\r\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\r\n            let { chunk, chunkPos } = this;\r\n            this.chunk = this.chunk2;\r\n            this.chunkPos = this.chunk2Pos;\r\n            this.chunk2 = chunk;\r\n            this.chunk2Pos = chunkPos;\r\n            this.chunkOff = this.pos - this.chunkPos;\r\n        }\r\n        else {\r\n            this.chunk2 = this.chunk;\r\n            this.chunk2Pos = this.chunkPos;\r\n            let nextChunk = this.input.chunk(this.pos);\r\n            let end = this.pos + nextChunk.length;\r\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\r\n            this.chunkPos = this.pos;\r\n            this.chunkOff = 0;\r\n        }\r\n    }\r\n    readNext() {\r\n        if (this.chunkOff >= this.chunk.length) {\r\n            this.getChunk();\r\n            if (this.chunkOff == this.chunk.length)\r\n                return this.next = -1;\r\n        }\r\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\r\n    }\r\n    advance(n = 1) {\r\n        this.chunkOff += n;\r\n        while (this.pos + n >= this.range.to) {\r\n            if (this.rangeIndex == this.ranges.length - 1)\r\n                return this.setDone();\r\n            n -= this.range.to - this.pos;\r\n            this.range = this.ranges[++this.rangeIndex];\r\n            this.pos = this.range.from;\r\n        }\r\n        this.pos += n;\r\n        if (this.pos >= this.token.lookAhead)\r\n            this.token.lookAhead = this.pos + 1;\r\n        return this.readNext();\r\n    }\r\n    setDone() {\r\n        this.pos = this.chunkPos = this.end;\r\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\r\n        this.chunk = \"\";\r\n        return this.next = -1;\r\n    }\r\n    // @internal\r\n    reset(pos, token) {\r\n        if (token) {\r\n            this.token = token;\r\n            token.start = pos;\r\n            token.lookAhead = pos + 1;\r\n            token.value = token.extended = -1;\r\n        }\r\n        else {\r\n            this.token = nullToken;\r\n        }\r\n        if (this.pos != pos) {\r\n            this.pos = pos;\r\n            if (pos == this.end) {\r\n                this.setDone();\r\n                return this;\r\n            }\r\n            while (pos < this.range.from)\r\n                this.range = this.ranges[--this.rangeIndex];\r\n            while (pos >= this.range.to)\r\n                this.range = this.ranges[++this.rangeIndex];\r\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\r\n                this.chunkOff = pos - this.chunkPos;\r\n            }\r\n            else {\r\n                this.chunk = \"\";\r\n                this.chunkOff = 0;\r\n            }\r\n            this.readNext();\r\n        }\r\n        return this;\r\n    }\r\n    // @internal\r\n    read(from, to) {\r\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\r\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\r\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\r\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\r\n        if (from >= this.range.from && to <= this.range.to)\r\n            return this.input.read(from, to);\r\n        let result = \"\";\r\n        for (let r of this.ranges) {\r\n            if (r.from >= to)\r\n                break;\r\n            if (r.to > from)\r\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\r\n        }\r\n        return result;\r\n    }\r\n}\r\n// @internal\r\nclass TokenGroup {\r\n    constructor(data, id) {\r\n        this.data = data;\r\n        this.id = id;\r\n    }\r\n    token(input, stack) { readToken(this.data, input, stack, this.id); }\r\n}\r\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\r\nclass ExternalTokenizer {\r\n    constructor(\r\n    // @internal\r\n    token, options = {}) {\r\n        this.token = token;\r\n        this.contextual = !!options.contextual;\r\n        this.fallback = !!options.fallback;\r\n        this.extend = !!options.extend;\r\n    }\r\n}\r\n// Tokenizer data is stored a big uint16 array containing, for each\r\n// state:\r\n//\r\n//  - A group bitmask, indicating what token groups are reachable from\r\n//    this state, so that paths that can only lead to tokens not in\r\n//    any of the current groups can be cut off early.\r\n//\r\n//  - The position of the end of the state's sequence of accepting\r\n//    tokens\r\n//\r\n//  - The number of outgoing edges for the state\r\n//\r\n//  - The accepting tokens, as (token id, group mask) pairs\r\n//\r\n//  - The outgoing edges, as (start character, end character, state\r\n//    index) triples, with end character being exclusive\r\n//\r\n// This function interprets that data, running through a stream as\r\n// long as new states with the a matching group mask can be reached,\r\n// and updating `token` when it matches a token.\r\nfunction readToken(data, input, stack, group) {\r\n    let state = 0, groupMask = (1 << group), { parser } = stack.p, { dialect } = parser;\r\n    scan: for (;;) {\r\n        if ((groupMask & data[state]) == 0)\r\n            break;\r\n        let accEnd = data[state + 1];\r\n        // Check whether this state can lead to a token in the current group\r\n        // Accept tokens in this state, possibly overwriting\r\n        // lower-precedence / shorter tokens\r\n        for (let i = state + 3; i < accEnd; i += 2)\r\n            if ((data[i + 1] & groupMask) > 0) {\r\n                let term = data[i];\r\n                if (dialect.allows(term) &&\r\n                    (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {\r\n                    input.acceptToken(term);\r\n                    break;\r\n                }\r\n            }\r\n        // Do a binary search on the state's edges\r\n        for (let next = input.next, low = 0, high = data[state + 2]; low < high;) {\r\n            let mid = (low + high) >> 1;\r\n            let index = accEnd + mid + (mid << 1);\r\n            let from = data[index], to = data[index + 1];\r\n            if (next < from)\r\n                high = mid;\r\n            else if (next >= to)\r\n                low = mid + 1;\r\n            else {\r\n                state = data[index + 2];\r\n                input.advance();\r\n                continue scan;\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/lezer/lr/token.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/lint/index.js":
/*!*************************************************!*\
  !*** ./sys/public/js/editor/dist/lint/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"closeLintPanel\": () => (/* reexport safe */ _lint_js__WEBPACK_IMPORTED_MODULE_0__.closeLintPanel),\n/* harmony export */   \"diagnosticCount\": () => (/* reexport safe */ _lint_js__WEBPACK_IMPORTED_MODULE_0__.diagnosticCount),\n/* harmony export */   \"forceLinting\": () => (/* reexport safe */ _lint_js__WEBPACK_IMPORTED_MODULE_0__.forceLinting),\n/* harmony export */   \"lintGutter\": () => (/* reexport safe */ _lint_js__WEBPACK_IMPORTED_MODULE_0__.lintGutter),\n/* harmony export */   \"lintKeymap\": () => (/* reexport safe */ _lint_js__WEBPACK_IMPORTED_MODULE_0__.lintKeymap),\n/* harmony export */   \"linter\": () => (/* reexport safe */ _lint_js__WEBPACK_IMPORTED_MODULE_0__.linter),\n/* harmony export */   \"nextDiagnostic\": () => (/* reexport safe */ _lint_js__WEBPACK_IMPORTED_MODULE_0__.nextDiagnostic),\n/* harmony export */   \"openLintPanel\": () => (/* reexport safe */ _lint_js__WEBPACK_IMPORTED_MODULE_0__.openLintPanel),\n/* harmony export */   \"setDiagnostics\": () => (/* reexport safe */ _lint_js__WEBPACK_IMPORTED_MODULE_0__.setDiagnostics),\n/* harmony export */   \"setDiagnosticsEffect\": () => (/* reexport safe */ _lint_js__WEBPACK_IMPORTED_MODULE_0__.setDiagnosticsEffect)\n/* harmony export */ });\n/* harmony import */ var _lint_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lint.js */ \"./sys/public/js/editor/dist/lint/lint.js\");\n\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/lint/index.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/lint/lint.js":
/*!************************************************!*\
  !*** ./sys/public/js/editor/dist/lint/lint.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"closeLintPanel\": () => (/* binding */ closeLintPanel),\n/* harmony export */   \"diagnosticCount\": () => (/* binding */ diagnosticCount),\n/* harmony export */   \"forceLinting\": () => (/* binding */ forceLinting),\n/* harmony export */   \"lintGutter\": () => (/* binding */ lintGutter),\n/* harmony export */   \"lintKeymap\": () => (/* binding */ lintKeymap),\n/* harmony export */   \"linter\": () => (/* binding */ linter),\n/* harmony export */   \"nextDiagnostic\": () => (/* binding */ nextDiagnostic),\n/* harmony export */   \"openLintPanel\": () => (/* binding */ openLintPanel),\n/* harmony export */   \"setDiagnostics\": () => (/* binding */ setDiagnostics),\n/* harmony export */   \"setDiagnosticsEffect\": () => (/* binding */ setDiagnosticsEffect)\n/* harmony export */ });\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/crelt.js */ \"./sys/public/js/editor/dist/utils/crelt.js\");\n\r\n\r\n\r\nclass SelectedDiagnostic {\r\n    constructor(from, to, diagnostic) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.diagnostic = diagnostic;\r\n    }\r\n}\r\nclass LintState {\r\n    constructor(diagnostics, panel, selected) {\r\n        this.diagnostics = diagnostics;\r\n        this.panel = panel;\r\n        this.selected = selected;\r\n    }\r\n    static init(diagnostics, panel, state) {\r\n        let ranges = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.set(diagnostics.map((d) => {\r\n            // For zero-length ranges or ranges covering only a line break, create a widget\r\n            return d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from)\r\n                ? _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.widget({\r\n                    widget: new DiagnosticWidget(d),\r\n                    diagnostic: d\r\n                }).range(d.from)\r\n                : _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.mark({\r\n                    attributes: { class: \"cm-lintRange cm-lintRange-\" + d.severity },\r\n                    diagnostic: d\r\n                }).range(d.from, d.to);\r\n        }), true);\r\n        return new LintState(ranges, panel, findDiagnostic(ranges));\r\n    }\r\n}\r\nfunction findDiagnostic(diagnostics, diagnostic = null, after = 0) {\r\n    let found = null;\r\n    diagnostics.between(after, 1e9, (from, to, { spec }) => {\r\n        if (diagnostic && spec.diagnostic != diagnostic)\r\n            return;\r\n        found = new SelectedDiagnostic(from, to, spec.diagnostic);\r\n        return false;\r\n    });\r\n    return found;\r\n}\r\nfunction hideTooltip(tr, tooltip) {\r\n    return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(tooltip.pos));\r\n}\r\nfunction maybeEnableLint(state, effects) {\r\n    return state.field(lintState, false) ? effects : effects.concat(_state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.appendConfig.of([\r\n        lintState,\r\n        _view_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.decorations.compute([lintState], state => {\r\n            let { selected, panel } = state.field(lintState);\r\n            return !selected || !panel || selected.from == selected.to ? _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.none : _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.set([\r\n                activeMark.range(selected.from, selected.to)\r\n            ]);\r\n        }),\r\n        (0,_view_index_js__WEBPACK_IMPORTED_MODULE_0__.hoverTooltip)(lintTooltip, { hideOn: hideTooltip }),\r\n        baseTheme\r\n    ]));\r\n}\r\n/** Returns a transaction spec which updates the current set of diagnostics, and enables the lint extension if if wasn't already active. */\r\nfunction setDiagnostics(state, diagnostics) {\r\n    return {\r\n        effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])\r\n    };\r\n}\r\n/**\r\n * The state effect that updates the set of active diagnostics. Can\r\n * be useful when writing an extension that needs to track these.\r\n */\r\nconst setDiagnosticsEffect = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst togglePanel = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst movePanelSelection = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst lintState = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create() {\r\n        return new LintState(_view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.none, null, null);\r\n    },\r\n    update(value, tr) {\r\n        if (tr.docChanged) {\r\n            let mapped = value.diagnostics.map(tr.changes), selected = null;\r\n            if (value.selected) {\r\n                let selPos = tr.changes.mapPos(value.selected.from, 1);\r\n                selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);\r\n            }\r\n            value = new LintState(mapped, value.panel, selected);\r\n        }\r\n        for (let effect of tr.effects) {\r\n            if (effect.is(setDiagnosticsEffect)) {\r\n                value = LintState.init(effect.value, value.panel, tr.state);\r\n            }\r\n            else if (effect.is(togglePanel)) {\r\n                value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);\r\n            }\r\n            else if (effect.is(movePanelSelection)) {\r\n                value = new LintState(value.diagnostics, value.panel, effect.value);\r\n            }\r\n        }\r\n        return value;\r\n    },\r\n    provide: f => [_view_index_js__WEBPACK_IMPORTED_MODULE_0__.showPanel.from(f, val => val.panel),\r\n        _view_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.decorations.from(f, s => s.diagnostics)]\r\n});\r\n/** Returns the number of active lint diagnostics in the given state. */\r\nfunction diagnosticCount(state) {\r\n    let lint = state.field(lintState, false);\r\n    return lint ? lint.diagnostics.size : 0;\r\n}\r\nconst activeMark = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.mark({ class: \"cm-lintRange cm-lintRange-active\" });\r\nfunction lintTooltip(view, pos, side) {\r\n    let { diagnostics } = view.state.field(lintState);\r\n    let found = [], stackStart = 2e8, stackEnd = 0;\r\n    diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {\r\n        if (pos >= from && pos <= to &&\r\n            (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {\r\n            found.push(spec.diagnostic);\r\n            stackStart = Math.min(from, stackStart);\r\n            stackEnd = Math.max(to, stackEnd);\r\n        }\r\n    });\r\n    if (!found.length)\r\n        return null;\r\n    return {\r\n        pos: stackStart,\r\n        end: stackEnd,\r\n        above: view.state.doc.lineAt(stackStart).to < stackEnd,\r\n        create() {\r\n            return { dom: diagnosticsTooltip(view, found) };\r\n        }\r\n    };\r\n}\r\nfunction diagnosticsTooltip(view, diagnostics) {\r\n    return (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"ul\", { class: \"cm-tooltip-lint\" }, diagnostics.map(d => renderDiagnostic(view, d, false)));\r\n}\r\n/** Command to open and focus the lint panel. */\r\nconst openLintPanel = (view) => {\r\n    let field = view.state.field(lintState, false);\r\n    if (!field || !field.panel)\r\n        view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel.of(true)]) });\r\n    let panel = (0,_view_index_js__WEBPACK_IMPORTED_MODULE_0__.getPanel)(view, LintPanel.open);\r\n    if (panel)\r\n        panel.dom.querySelector(\".cm-panel-lint ul\").focus();\r\n    return true;\r\n};\r\n/** Command to close the lint panel, when open. */\r\nconst closeLintPanel = (view) => {\r\n    let field = view.state.field(lintState, false);\r\n    if (!field || !field.panel)\r\n        return false;\r\n    view.dispatch({ effects: togglePanel.of(false) });\r\n    return true;\r\n};\r\n/** Move the selection to the next diagnostic. */\r\nconst nextDiagnostic = (view) => {\r\n    let field = view.state.field(lintState, false);\r\n    if (!field)\r\n        return false;\r\n    let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);\r\n    if (!next.value) {\r\n        next = field.diagnostics.iter(0);\r\n        if (!next.value || next.from == sel.from && next.to == sel.to)\r\n            return false;\r\n    }\r\n    view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });\r\n    return true;\r\n};\r\n/**\r\n *  A set of default key bindings for the lint functionality.\r\n *\r\n * - Ctrl-Shift-m (Cmd-Shift-m on macOS): {@link openLintPanel}\r\n * - F8: {@link nextDiagnostic}\r\n */\r\nconst lintKeymap = [\r\n    { key: \"Mod-Shift-m\", run: openLintPanel },\r\n    { key: \"F8\", run: nextDiagnostic }\r\n];\r\nconst lintPlugin = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.timeout = -1;\r\n        this.set = true;\r\n        let { delay } = view.state.facet(lintSource);\r\n        this.lintTime = Date.now() + delay;\r\n        this.run = this.run.bind(this);\r\n        this.timeout = setTimeout(this.run, delay);\r\n    }\r\n    run() {\r\n        let now = Date.now();\r\n        if (now < this.lintTime - 10) {\r\n            setTimeout(this.run, this.lintTime - now);\r\n        }\r\n        else {\r\n            this.set = false;\r\n            let { state } = this.view, { sources } = state.facet(lintSource);\r\n            Promise.all(sources.map(source => Promise.resolve(source(this.view)))).then(annotations => {\r\n                let all = annotations.reduce((a, b) => a.concat(b));\r\n                if (this.view.state.doc == state.doc)\r\n                    this.view.dispatch(setDiagnostics(this.view.state, all));\r\n            }, error => { (0,_view_index_js__WEBPACK_IMPORTED_MODULE_0__.logException)(this.view.state, error); });\r\n        }\r\n    }\r\n    update(update) {\r\n        let source = update.state.facet(lintSource);\r\n        if (update.docChanged || source != update.startState.facet(lintSource)) {\r\n            this.lintTime = Date.now() + source.delay;\r\n            if (!this.set) {\r\n                this.set = true;\r\n                this.timeout = setTimeout(this.run, source.delay);\r\n            }\r\n        }\r\n    }\r\n    force() {\r\n        if (this.set) {\r\n            this.lintTime = Date.now();\r\n            this.run();\r\n        }\r\n    }\r\n    destroy() {\r\n        clearTimeout(this.timeout);\r\n    }\r\n});\r\nconst lintSource = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\r\n    combine(input) {\r\n        return { sources: input.map(i => i.source), delay: input.length ? Math.max(...input.map(i => i.delay)) : 750 };\r\n    },\r\n    enables: lintPlugin\r\n});\r\n/**\r\n *  Given a diagnostic source, this function returns an extension that\r\n *  enables linting with that source. It will be called whenever the\r\n *  editor is idle (after its content changed).\r\n */\r\nfunction linter(source, config = {}) {\r\n    var _a;\r\n    return lintSource.of({ source, delay: (_a = config.delay) !== null && _a !== void 0 ? _a : 750 });\r\n}\r\n/** Forces any linters [configured]{@link linter} to run when the editor is idle to run right away. */\r\nfunction forceLinting(view) {\r\n    let plugin = view.plugin(lintPlugin);\r\n    if (plugin)\r\n        plugin.force();\r\n}\r\nfunction assignKeys(actions) {\r\n    let assigned = [];\r\n    if (actions)\r\n        actions: for (let { name } of actions) {\r\n            for (let i = 0; i < name.length; i++) {\r\n                let ch = name[i];\r\n                if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {\r\n                    assigned.push(ch);\r\n                    continue actions;\r\n                }\r\n            }\r\n            assigned.push(\"\");\r\n        }\r\n    return assigned;\r\n}\r\nfunction renderDiagnostic(view, diagnostic, inPanel) {\r\n    var _a;\r\n    let keys = inPanel ? assignKeys(diagnostic.actions) : [];\r\n    return (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"li\", { class: \"cm-diagnostic cm-diagnostic-\" + diagnostic.severity }, (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"span\", { class: \"cm-diagnosticText\" }, diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {\r\n        let click = (e) => {\r\n            e.preventDefault();\r\n            let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);\r\n            if (found)\r\n                action.apply(view, found.from, found.to);\r\n        };\r\n        let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;\r\n        let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),\r\n            (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"u\", name.slice(keyIndex, keyIndex + 1)),\r\n            name.slice(keyIndex + 1)];\r\n        return (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"button\", {\r\n            type: \"button\",\r\n            class: \"cm-diagnosticAction\",\r\n            onclick: click,\r\n            onmousedown: click,\r\n            \"aria-label\": ` Action: ${name}${keyIndex < 0 ? \"\" : ` (access key \"${keys[i]})\"`}.`\r\n        }, nameElt);\r\n    }), diagnostic.source && (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"div\", { class: \"cm-diagnosticSource\" }, diagnostic.source));\r\n}\r\nclass DiagnosticWidget extends _view_index_js__WEBPACK_IMPORTED_MODULE_0__.WidgetType {\r\n    constructor(diagnostic) {\r\n        super();\r\n        this.diagnostic = diagnostic;\r\n    }\r\n    eq(other) { return other.diagnostic == this.diagnostic; }\r\n    toDOM() {\r\n        return (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"span\", { class: \"cm-lintPoint cm-lintPoint-\" + this.diagnostic.severity });\r\n    }\r\n}\r\nclass PanelItem {\r\n    constructor(view, diagnostic) {\r\n        this.diagnostic = diagnostic;\r\n        this.id = \"item_\" + Math.floor(Math.random() * 0xffffffff).toString(16);\r\n        this.dom = renderDiagnostic(view, diagnostic, true);\r\n        this.dom.id = this.id;\r\n        this.dom.setAttribute(\"role\", \"option\");\r\n    }\r\n}\r\nclass LintPanel {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.items = [];\r\n        let onkeydown = (event) => {\r\n            if (event.keyCode == 27) { // Escape\r\n                closeLintPanel(this.view);\r\n                this.view.focus();\r\n            }\r\n            else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp\r\n                this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);\r\n            }\r\n            else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown\r\n                this.moveSelection((this.selectedIndex + 1) % this.items.length);\r\n            }\r\n            else if (event.keyCode == 36) { // Home\r\n                this.moveSelection(0);\r\n            }\r\n            else if (event.keyCode == 35) { // End\r\n                this.moveSelection(this.items.length - 1);\r\n            }\r\n            else if (event.keyCode == 13) { // Enter\r\n                this.view.focus();\r\n            }\r\n            else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z\r\n                let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);\r\n                for (let i = 0; i < keys.length; i++)\r\n                    if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {\r\n                        let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);\r\n                        if (found)\r\n                            diagnostic.actions[i].apply(view, found.from, found.to);\r\n                    }\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n            event.preventDefault();\r\n        };\r\n        let onclick = (event) => {\r\n            for (let i = 0; i < this.items.length; i++) {\r\n                if (this.items[i].dom.contains(event.target))\r\n                    this.moveSelection(i);\r\n            }\r\n        };\r\n        this.list = (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"ul\", {\r\n            tabIndex: 0,\r\n            role: \"listbox\",\r\n            \"aria-label\": this.view.state.phrase(\"Diagnostics\"),\r\n            onkeydown,\r\n            onclick\r\n        });\r\n        this.dom = (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"div\", { class: \"cm-panel-lint\" }, this.list, (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"button\", {\r\n            type: \"button\",\r\n            name: \"close\",\r\n            \"aria-label\": this.view.state.phrase(\"close\"),\r\n            onclick: () => closeLintPanel(this.view)\r\n        }, \"×\"));\r\n        this.update();\r\n    }\r\n    get selectedIndex() {\r\n        let selected = this.view.state.field(lintState).selected;\r\n        if (!selected)\r\n            return -1;\r\n        for (let i = 0; i < this.items.length; i++)\r\n            if (this.items[i].diagnostic == selected.diagnostic)\r\n                return i;\r\n        return -1;\r\n    }\r\n    update() {\r\n        let { diagnostics, selected } = this.view.state.field(lintState);\r\n        let i = 0, needsSync = false, newSelectedItem = null;\r\n        diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {\r\n            let found = -1, item;\r\n            for (let j = i; j < this.items.length; j++)\r\n                if (this.items[j].diagnostic == spec.diagnostic) {\r\n                    found = j;\r\n                    break;\r\n                }\r\n            if (found < 0) {\r\n                item = new PanelItem(this.view, spec.diagnostic);\r\n                this.items.splice(i, 0, item);\r\n                needsSync = true;\r\n            }\r\n            else {\r\n                item = this.items[found];\r\n                if (found > i) {\r\n                    this.items.splice(i, found - i);\r\n                    needsSync = true;\r\n                }\r\n            }\r\n            if (selected && item.diagnostic == selected.diagnostic) {\r\n                if (!item.dom.hasAttribute(\"aria-selected\")) {\r\n                    item.dom.setAttribute(\"aria-selected\", \"true\");\r\n                    newSelectedItem = item;\r\n                }\r\n            }\r\n            else if (item.dom.hasAttribute(\"aria-selected\")) {\r\n                item.dom.removeAttribute(\"aria-selected\");\r\n            }\r\n            i++;\r\n        });\r\n        while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {\r\n            needsSync = true;\r\n            this.items.pop();\r\n        }\r\n        if (this.items.length == 0) {\r\n            this.items.push(new PanelItem(this.view, {\r\n                from: -1, to: -1,\r\n                severity: \"info\",\r\n                message: this.view.state.phrase(\"No diagnostics\")\r\n            }));\r\n            needsSync = true;\r\n        }\r\n        if (newSelectedItem) {\r\n            this.list.setAttribute(\"aria-activedescendant\", newSelectedItem.id);\r\n            this.view.requestMeasure({\r\n                key: this,\r\n                read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),\r\n                write: ({ sel, panel }) => {\r\n                    if (sel.top < panel.top)\r\n                        this.list.scrollTop -= panel.top - sel.top;\r\n                    else if (sel.bottom > panel.bottom)\r\n                        this.list.scrollTop += sel.bottom - panel.bottom;\r\n                }\r\n            });\r\n        }\r\n        else if (this.selectedIndex < 0) {\r\n            this.list.removeAttribute(\"aria-activedescendant\");\r\n        }\r\n        if (needsSync)\r\n            this.sync();\r\n    }\r\n    sync() {\r\n        let domPos = this.list.firstChild;\r\n        function rm() {\r\n            let prev = domPos;\r\n            domPos = prev.nextSibling;\r\n            prev.remove();\r\n        }\r\n        for (let item of this.items) {\r\n            if (item.dom.parentNode == this.list) {\r\n                while (domPos != item.dom)\r\n                    rm();\r\n                domPos = item.dom.nextSibling;\r\n            }\r\n            else {\r\n                this.list.insertBefore(item.dom, domPos);\r\n            }\r\n        }\r\n        while (domPos)\r\n            rm();\r\n    }\r\n    moveSelection(selectedIndex) {\r\n        if (this.selectedIndex < 0)\r\n            return;\r\n        let field = this.view.state.field(lintState);\r\n        let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);\r\n        if (!selection)\r\n            return;\r\n        this.view.dispatch({\r\n            selection: { anchor: selection.from, head: selection.to },\r\n            scrollIntoView: true,\r\n            effects: movePanelSelection.of(selection)\r\n        });\r\n    }\r\n    static open(view) { return new LintPanel(view); }\r\n}\r\nfunction svg(content, attrs = `viewBox=\"0 0 40 40\"`) {\r\n    return `url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" ${attrs}>${encodeURIComponent(content)}</svg>')`;\r\n}\r\nfunction underline(color) {\r\n    return svg(`<path d=\"m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0\" stroke=\"${color}\" fill=\"none\" stroke-width=\".7\"/>`, `width=\"6\" height=\"3\"`);\r\n}\r\nconst baseTheme = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.baseTheme({\r\n    \".cm-diagnostic\": {\r\n        padding: \"3px 6px 3px 8px\",\r\n        marginLeft: \"-1px\",\r\n        display: \"block\",\r\n        whiteSpace: \"pre-wrap\"\r\n    },\r\n    \".cm-diagnostic-error\": { borderLeft: \"5px solid #d11\" },\r\n    \".cm-diagnostic-warning\": { borderLeft: \"5px solid orange\" },\r\n    \".cm-diagnostic-info\": { borderLeft: \"5px solid #999\" },\r\n    \".cm-diagnosticAction\": {\r\n        font: \"inherit\",\r\n        border: \"none\",\r\n        padding: \"2px 4px\",\r\n        backgroundColor: \"#444\",\r\n        color: \"white\",\r\n        borderRadius: \"3px\",\r\n        marginLeft: \"8px\"\r\n    },\r\n    \".cm-diagnosticSource\": {\r\n        fontSize: \"70%\",\r\n        opacity: .7\r\n    },\r\n    \".cm-lintRange\": {\r\n        backgroundPosition: \"left bottom\",\r\n        backgroundRepeat: \"repeat-x\",\r\n        paddingBottom: \"0.7px\",\r\n    },\r\n    \".cm-lintRange-error\": { backgroundImage: underline(\"#d11\") },\r\n    \".cm-lintRange-warning\": { backgroundImage: underline(\"orange\") },\r\n    \".cm-lintRange-info\": { backgroundImage: underline(\"#999\") },\r\n    \".cm-lintRange-active\": { backgroundColor: \"#ffdd9980\" },\r\n    \".cm-tooltip-lint\": {\r\n        padding: 0,\r\n        margin: 0\r\n    },\r\n    \".cm-lintPoint\": {\r\n        position: \"relative\",\r\n        \"&:after\": {\r\n            content: '\"\"',\r\n            position: \"absolute\",\r\n            bottom: 0,\r\n            left: \"-2px\",\r\n            borderLeft: \"3px solid transparent\",\r\n            borderRight: \"3px solid transparent\",\r\n            borderBottom: \"4px solid #d11\"\r\n        }\r\n    },\r\n    \".cm-lintPoint-warning\": {\r\n        \"&:after\": { borderBottomColor: \"orange\" }\r\n    },\r\n    \".cm-lintPoint-info\": {\r\n        \"&:after\": { borderBottomColor: \"#999\" }\r\n    },\r\n    \".cm-panel.cm-panel-lint\": {\r\n        position: \"relative\",\r\n        \"& ul\": {\r\n            maxHeight: \"100px\",\r\n            overflowY: \"auto\",\r\n            \"& [aria-selected]\": {\r\n                backgroundColor: \"#ddd\",\r\n                \"& u\": { textDecoration: \"underline\" }\r\n            },\r\n            \"&:focus [aria-selected]\": {\r\n                background_fallback: \"#bdf\",\r\n                backgroundColor: \"Highlight\",\r\n                color_fallback: \"white\",\r\n                color: \"HighlightText\"\r\n            },\r\n            \"& u\": { textDecoration: \"none\" },\r\n            padding: 0,\r\n            margin: 0\r\n        },\r\n        \"& [name=close]\": {\r\n            position: \"absolute\",\r\n            top: \"0\",\r\n            right: \"2px\",\r\n            background: \"inherit\",\r\n            border: \"none\",\r\n            font: \"inherit\",\r\n            padding: 0,\r\n            margin: 0\r\n        }\r\n    }\r\n});\r\nclass LintGutterMarker extends _view_index_js__WEBPACK_IMPORTED_MODULE_0__.GutterMarker {\r\n    constructor(diagnostics) {\r\n        super();\r\n        this.diagnostics = diagnostics;\r\n        this.severity = diagnostics.reduce((max, d) => {\r\n            let s = d.severity;\r\n            return s == \"error\" || s == \"warning\" && max == \"info\" ? s : max;\r\n        }, \"info\");\r\n    }\r\n    toDOM(view) {\r\n        let elt = document.createElement(\"div\");\r\n        elt.className = \"cm-lint-marker cm-lint-marker-\" + this.severity;\r\n        elt.onmouseover = () => gutterMarkerMouseOver(view, elt, this.diagnostics);\r\n        return elt;\r\n    }\r\n}\r\nfunction trackHoverOn(view, marker) {\r\n    let mousemove = (event) => {\r\n        let rect = marker.getBoundingClientRect();\r\n        if (event.clientX > rect.left - 10 /* Margin */ && event.clientX < rect.right + 10 /* Margin */ &&\r\n            event.clientY > rect.top - 10 /* Margin */ && event.clientY < rect.bottom + 10 /* Margin */)\r\n            return;\r\n        for (let target = event.target; target; target = target.parentNode) {\r\n            if (target.nodeType == 1 && target.classList.contains(\"cm-tooltip-lint\"))\r\n                return;\r\n        }\r\n        window.removeEventListener(\"mousemove\", mousemove);\r\n        if (view.state.field(lintGutterTooltip))\r\n            view.dispatch({ effects: setLintGutterTooltip.of(null) });\r\n    };\r\n    window.addEventListener(\"mousemove\", mousemove);\r\n}\r\nfunction gutterMarkerMouseOver(view, marker, diagnostics) {\r\n    function hovered() {\r\n        let line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);\r\n        const linePos = view.coordsAtPos(line.from);\r\n        if (linePos) {\r\n            view.dispatch({ effects: setLintGutterTooltip.of({\r\n                    pos: line.from,\r\n                    above: false,\r\n                    create() {\r\n                        return {\r\n                            dom: diagnosticsTooltip(view, diagnostics),\r\n                            getCoords: () => marker.getBoundingClientRect()\r\n                        };\r\n                    }\r\n                }) });\r\n        }\r\n        marker.onmouseout = marker.onmousemove = null;\r\n        trackHoverOn(view, marker);\r\n    }\r\n    let { hoverTime } = view.state.facet(lintGutterConfig);\r\n    let hoverTimeout = setTimeout(hovered, hoverTime);\r\n    marker.onmouseout = () => {\r\n        clearTimeout(hoverTimeout);\r\n        marker.onmouseout = marker.onmousemove = null;\r\n    };\r\n    marker.onmousemove = () => {\r\n        clearTimeout(hoverTimeout);\r\n        hoverTimeout = setTimeout(hovered, hoverTime);\r\n    };\r\n}\r\nfunction markersForDiagnostics(doc, diagnostics) {\r\n    let byLine = Object.create(null);\r\n    for (let diagnostic of diagnostics) {\r\n        let line = doc.lineAt(diagnostic.from);\r\n        (byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);\r\n    }\r\n    let markers = [];\r\n    for (let line in byLine) {\r\n        markers.push(new LintGutterMarker(byLine[line]).range(+line));\r\n    }\r\n    return _state_index_js__WEBPACK_IMPORTED_MODULE_1__.RangeSet.of(markers, true);\r\n}\r\nconst lintGutterExtension = (0,_view_index_js__WEBPACK_IMPORTED_MODULE_0__.gutter)({\r\n    class: \"cm-gutter-lint\",\r\n    markers: view => view.state.field(lintGutterMarkers),\r\n});\r\nconst lintGutterMarkers = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create() {\r\n        return _state_index_js__WEBPACK_IMPORTED_MODULE_1__.RangeSet.empty;\r\n    },\r\n    update(markers, tr) {\r\n        markers = markers.map(tr.changes);\r\n        for (let effect of tr.effects)\r\n            if (effect.is(setDiagnosticsEffect)) {\r\n                markers = markersForDiagnostics(tr.state.doc, effect.value);\r\n            }\r\n        return markers;\r\n    }\r\n});\r\nconst setLintGutterTooltip = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst lintGutterTooltip = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create() { return null; },\r\n    update(tooltip, tr) {\r\n        if (tooltip && tr.docChanged)\r\n            tooltip = hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), { pos: tr.changes.mapPos(tooltip.pos) });\r\n        return tr.effects.reduce((t, e) => e.is(setLintGutterTooltip) ? e.value : t, tooltip);\r\n    },\r\n    provide: field => _view_index_js__WEBPACK_IMPORTED_MODULE_0__.showTooltip.from(field)\r\n});\r\nconst lintGutterTheme = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.baseTheme({\r\n    \".cm-gutter-lint\": {\r\n        width: \"1.4em\",\r\n        \"& .cm-gutterElement\": {\r\n            padding: \".2em\"\r\n        }\r\n    },\r\n    \".cm-lint-marker\": {\r\n        width: \"1em\",\r\n        height: \"1em\"\r\n    },\r\n    \".cm-lint-marker-info\": {\r\n        content: svg(`<path fill=\"#aaf\" stroke=\"#77e\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M5 5L35 5L35 35L5 35Z\"/>`)\r\n    },\r\n    \".cm-lint-marker-warning\": {\r\n        content: svg(`<path fill=\"#fe8\" stroke=\"#fd7\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M20 6L37 35L3 35Z\"/>`),\r\n    },\r\n    \".cm-lint-marker-error:before\": {\r\n        content: svg(`<circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"#f87\" stroke=\"#f43\" stroke-width=\"6\"/>`)\r\n    },\r\n});\r\nconst lintGutterConfig = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\r\n    combine(configs) {\r\n        return (0,_state_index_js__WEBPACK_IMPORTED_MODULE_1__.combineConfig)(configs, {\r\n            hoverTime: 300 /* Time */,\r\n        });\r\n    }\r\n});\r\n/** Returns an extension that installs a gutter showing markers for each line that has diagnostics, which can be hovered over to see the diagnostics. */\r\nfunction lintGutter(config = {}) {\r\n    return [lintGutterConfig.of(config), lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/lint/lint.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/search/cursor.js":
/*!****************************************************!*\
  !*** ./sys/public/js/editor/dist/search/cursor.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SearchCursor\": () => (/* binding */ SearchCursor)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n\r\nconst basicNormalize = typeof String.prototype.normalize == \"function\"\r\n    ? x => x.normalize(\"NFKD\") : x => x;\r\n/** A search cursor provides an iterator over text matches in a document. */\r\nclass SearchCursor {\r\n    /**\r\n     * Create a text cursor. The query is the search string, `from` to `to` provides the region to search.\r\n     *\r\n     * When `normalize` is given, it will be called, on both the query string and the content it is matched against, before comparing.\r\n     * You can, for example, create a case-insensitive search by passing `s => s.toLowerCase()`.\r\n     *\r\n     * Text is always normalized with [`.normalize(\"NFKD\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize) (when supported).\r\n     */\r\n    constructor(text, query, from = 0, to = text.length, normalize) {\r\n        /** The current match (only holds a meaningful value after [`next`]{@link SearchCursor.next} has been called and when `done` is false). */\r\n        this.value = { from: 0, to: 0 };\r\n        /** Whether the end of the iterated region has been reached. */\r\n        this.done = false;\r\n        this.matches = [];\r\n        this.buffer = \"\";\r\n        this.bufferPos = 0;\r\n        this.iter = text.iterRange(from, to);\r\n        this.bufferStart = from;\r\n        this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;\r\n        this.query = this.normalize(query);\r\n    }\r\n    peek() {\r\n        if (this.bufferPos == this.buffer.length) {\r\n            this.bufferStart += this.buffer.length;\r\n            this.iter.next();\r\n            if (this.iter.done)\r\n                return -1;\r\n            this.bufferPos = 0;\r\n            this.buffer = this.iter.value;\r\n        }\r\n        return (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.codePointAt)(this.buffer, this.bufferPos);\r\n    }\r\n    /**\r\n     * Look for the next match. Updates the iterator's [`value`]{@link SearchCursor.value} and [`done`]{@link SearchCursor.done}\r\n     * properties. Should be called at least once before using the cursor.\r\n     */\r\n    next() {\r\n        while (this.matches.length)\r\n            this.matches.pop();\r\n        return this.nextOverlapping();\r\n    }\r\n    /** The `next` method will ignore matches that partially overlap a previous match. This method behaves like `next`, but includes such matches. */\r\n    nextOverlapping() {\r\n        for (;;) {\r\n            let next = this.peek();\r\n            if (next < 0) {\r\n                this.done = true;\r\n                return this;\r\n            }\r\n            let str = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.fromCodePoint)(next), start = this.bufferStart + this.bufferPos;\r\n            this.bufferPos += (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.codePointSize)(next);\r\n            let norm = this.normalize(str);\r\n            for (let i = 0, pos = start;; i++) {\r\n                let code = norm.charCodeAt(i);\r\n                let match = this.match(code, pos);\r\n                if (match) {\r\n                    this.value = match;\r\n                    return this;\r\n                }\r\n                if (i == norm.length - 1)\r\n                    break;\r\n                if (pos == start && i < str.length && str.charCodeAt(i) == code)\r\n                    pos++;\r\n            }\r\n        }\r\n    }\r\n    match(code, pos) {\r\n        let match = null;\r\n        for (let i = 0; i < this.matches.length; i += 2) {\r\n            let index = this.matches[i], keep = false;\r\n            if (this.query.charCodeAt(index) == code) {\r\n                if (index == this.query.length - 1) {\r\n                    match = { from: this.matches[i + 1], to: pos + 1 };\r\n                }\r\n                else {\r\n                    this.matches[i]++;\r\n                    keep = true;\r\n                }\r\n            }\r\n            if (!keep) {\r\n                this.matches.splice(i, 2);\r\n                i -= 2;\r\n            }\r\n        }\r\n        if (this.query.charCodeAt(0) == code) {\r\n            if (this.query.length == 1)\r\n                match = { from: pos, to: pos + 1 };\r\n            else\r\n                this.matches.push(1, pos);\r\n        }\r\n        return match;\r\n    }\r\n}\r\nSymbol.iterator;\r\nif (typeof Symbol != \"undefined\")\r\n    SearchCursor.prototype[Symbol.iterator] = function () { return this; };\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/search/cursor.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/search/goto-line.js":
/*!*******************************************************!*\
  !*** ./sys/public/js/editor/dist/search/goto-line.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gotoLine\": () => (/* binding */ gotoLine)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/crelt.js */ \"./sys/public/js/editor/dist/utils/crelt.js\");\n\r\n\r\n\r\nfunction createLineDialog(view) {\r\n    let input = (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"input\", { class: \"cm-textfield\", name: \"line\" });\r\n    let dom = (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"form\", {\r\n        class: \"cm-gotoLine\",\r\n        onkeydown: (event) => {\r\n            if (event.keyCode == 27) { // Escape\r\n                event.preventDefault();\r\n                view.dispatch({ effects: dialogEffect.of(false) });\r\n                view.focus();\r\n            }\r\n            else if (event.keyCode == 13) { // Enter\r\n                event.preventDefault();\r\n                go();\r\n            }\r\n        },\r\n        onsubmit: (event) => {\r\n            event.preventDefault();\r\n            go();\r\n        }\r\n    }, (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"label\", view.state.phrase(\"Go to line\"), \": \", input), \" \", (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"button\", { class: \"cm-button\", type: \"submit\" }, view.state.phrase(\"go\")));\r\n    function go() {\r\n        let match = /^([+-])?(\\d+)?(:\\d+)?(%)?$/.exec(input.value);\r\n        if (!match)\r\n            return;\r\n        let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);\r\n        let [, sign, ln, cl, percent] = match;\r\n        let col = cl ? +cl.slice(1) : 0;\r\n        let line = ln ? +ln : startLine.number;\r\n        if (ln && percent) {\r\n            let pc = line / 100;\r\n            if (sign)\r\n                pc = pc * (sign == \"-\" ? -1 : 1) + (startLine.number / state.doc.lines);\r\n            line = Math.round(state.doc.lines * pc);\r\n        }\r\n        else if (ln && sign) {\r\n            line = line * (sign == \"-\" ? -1 : 1) + startLine.number;\r\n        }\r\n        let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));\r\n        view.dispatch({\r\n            effects: dialogEffect.of(false),\r\n            selection: _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),\r\n            scrollIntoView: true\r\n        });\r\n        view.focus();\r\n    }\r\n    return { dom };\r\n}\r\nconst dialogEffect = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.StateEffect.define();\r\nconst dialogField = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.StateField.define({\r\n    create() { return true; },\r\n    update(value, tr) {\r\n        for (let e of tr.effects)\r\n            if (e.is(dialogEffect))\r\n                value = e.value;\r\n        return value;\r\n    },\r\n    provide: f => _view_index_js__WEBPACK_IMPORTED_MODULE_1__.showPanel.from(f, val => val ? createLineDialog : null)\r\n});\r\n/**\r\n * Command that shows a dialog asking the user for a line number, and when a valid position is provided, moves the cursor to that line.\r\n *\r\n * Supports line numbers, relative line offsets prefixed with `+` or `-`, document percentages suffixed with `%`, and an optional\r\n * column position by adding `:` and a second number after the line number.\r\n *\r\n * The dialog can be styled with the `panel.gotoLine` theme selector.\r\n */\r\nconst gotoLine = view => {\r\n    let panel = (0,_view_index_js__WEBPACK_IMPORTED_MODULE_1__.getPanel)(view, createLineDialog);\r\n    if (!panel) {\r\n        let effects = [dialogEffect.of(true)];\r\n        if (view.state.field(dialogField, false) == null)\r\n            effects.push(_state_index_js__WEBPACK_IMPORTED_MODULE_0__.StateEffect.appendConfig.of([dialogField, baseTheme]));\r\n        view.dispatch({ effects });\r\n        panel = (0,_view_index_js__WEBPACK_IMPORTED_MODULE_1__.getPanel)(view, createLineDialog);\r\n    }\r\n    if (panel)\r\n        panel.dom.querySelector(\"input\").focus();\r\n    return true;\r\n};\r\nconst baseTheme = _view_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorView.baseTheme({\r\n    \".cm-panel.cm-gotoLine\": {\r\n        padding: \"2px 6px 4px\",\r\n        \"& label\": { fontSize: \"80%\" }\r\n    }\r\n});\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/search/goto-line.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/search/index.js":
/*!***************************************************!*\
  !*** ./sys/public/js/editor/dist/search/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RegExpCursor\": () => (/* reexport safe */ _regexp_js__WEBPACK_IMPORTED_MODULE_2__.RegExpCursor),\n/* harmony export */   \"SearchCursor\": () => (/* reexport safe */ _cursor_js__WEBPACK_IMPORTED_MODULE_1__.SearchCursor),\n/* harmony export */   \"SearchQuery\": () => (/* reexport safe */ _search_js__WEBPACK_IMPORTED_MODULE_4__.SearchQuery),\n/* harmony export */   \"closeSearchPanel\": () => (/* reexport safe */ _search_js__WEBPACK_IMPORTED_MODULE_4__.closeSearchPanel),\n/* harmony export */   \"findNext\": () => (/* reexport safe */ _search_js__WEBPACK_IMPORTED_MODULE_4__.findNext),\n/* harmony export */   \"findPrevious\": () => (/* reexport safe */ _search_js__WEBPACK_IMPORTED_MODULE_4__.findPrevious),\n/* harmony export */   \"getSearchQuery\": () => (/* reexport safe */ _search_js__WEBPACK_IMPORTED_MODULE_4__.getSearchQuery),\n/* harmony export */   \"gotoLine\": () => (/* reexport safe */ _goto_line_js__WEBPACK_IMPORTED_MODULE_3__.gotoLine),\n/* harmony export */   \"highlightSelectionMatches\": () => (/* reexport safe */ _selection_match_js__WEBPACK_IMPORTED_MODULE_0__.highlightSelectionMatches),\n/* harmony export */   \"openSearchPanel\": () => (/* reexport safe */ _search_js__WEBPACK_IMPORTED_MODULE_4__.openSearchPanel),\n/* harmony export */   \"replaceAll\": () => (/* reexport safe */ _search_js__WEBPACK_IMPORTED_MODULE_4__.replaceAll),\n/* harmony export */   \"replaceNext\": () => (/* reexport safe */ _search_js__WEBPACK_IMPORTED_MODULE_4__.replaceNext),\n/* harmony export */   \"search\": () => (/* reexport safe */ _search_js__WEBPACK_IMPORTED_MODULE_4__.search),\n/* harmony export */   \"searchKeymap\": () => (/* reexport safe */ _search_js__WEBPACK_IMPORTED_MODULE_4__.searchKeymap),\n/* harmony export */   \"selectMatches\": () => (/* reexport safe */ _search_js__WEBPACK_IMPORTED_MODULE_4__.selectMatches),\n/* harmony export */   \"selectNextOccurrence\": () => (/* reexport safe */ _selection_match_js__WEBPACK_IMPORTED_MODULE_0__.selectNextOccurrence),\n/* harmony export */   \"selectSelectionMatches\": () => (/* reexport safe */ _search_js__WEBPACK_IMPORTED_MODULE_4__.selectSelectionMatches),\n/* harmony export */   \"setSearchQuery\": () => (/* reexport safe */ _search_js__WEBPACK_IMPORTED_MODULE_4__.setSearchQuery)\n/* harmony export */ });\n/* harmony import */ var _selection_match_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selection-match.js */ \"./sys/public/js/editor/dist/search/selection-match.js\");\n/* harmony import */ var _cursor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cursor.js */ \"./sys/public/js/editor/dist/search/cursor.js\");\n/* harmony import */ var _regexp_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./regexp.js */ \"./sys/public/js/editor/dist/search/regexp.js\");\n/* harmony import */ var _goto_line_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./goto-line.js */ \"./sys/public/js/editor/dist/search/goto-line.js\");\n/* harmony import */ var _search_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./search.js */ \"./sys/public/js/editor/dist/search/search.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/search/index.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/search/regexp.js":
/*!****************************************************!*\
  !*** ./sys/public/js/editor/dist/search/regexp.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RegExpCursor\": () => (/* binding */ RegExpCursor),\n/* harmony export */   \"validRegExp\": () => (/* binding */ validRegExp)\n/* harmony export */ });\nconst empty = { from: -1, to: -1, match: /.*/.exec(\"\") };\r\nconst baseFlags = \"gm\" + (/x/.unicode == null ? \"\" : \"u\");\r\n/** This class is similar to {@link SearchCursor} but searches for a regular expression pattern instead of a plain string. */\r\nclass RegExpCursor {\r\n    /** Create a cursor that will search the given range in the given document. */\r\n    constructor(text, query, options, from = 0, to = text.length) {\r\n        this.to = to;\r\n        this.curLine = \"\";\r\n        /** Set to `true` when the cursor has reached the end of the search range. */\r\n        this.done = false;\r\n        /** Will contain an object with the extent of the match and the match object when {@link next} sucessfully finds a match. */\r\n        this.value = empty;\r\n        if (/\\\\[sWDnr]|\\n|\\r|\\[\\^/.test(query))\r\n            return new MultilineRegExpCursor(text, query, options, from, to);\r\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\r\n        this.iter = text.iter();\r\n        let startLine = text.lineAt(from);\r\n        this.curLineStart = startLine.from;\r\n        this.matchPos = from;\r\n        this.getLine(this.curLineStart);\r\n    }\r\n    getLine(skip) {\r\n        this.iter.next(skip);\r\n        if (this.iter.lineBreak) {\r\n            this.curLine = \"\";\r\n        }\r\n        else {\r\n            this.curLine = this.iter.value;\r\n            if (this.curLineStart + this.curLine.length > this.to)\r\n                this.curLine = this.curLine.slice(0, this.to - this.curLineStart);\r\n            this.iter.next();\r\n        }\r\n    }\r\n    nextLine() {\r\n        this.curLineStart = this.curLineStart + this.curLine.length + 1;\r\n        if (this.curLineStart > this.to)\r\n            this.curLine = \"\";\r\n        else\r\n            this.getLine(0);\r\n    }\r\n    /** Move to the next match, if there is one. */\r\n    next() {\r\n        for (let off = this.matchPos - this.curLineStart;;) {\r\n            this.re.lastIndex = off;\r\n            let match = this.matchPos <= this.to && this.re.exec(this.curLine);\r\n            if (match) {\r\n                let from = this.curLineStart + match.index, to = from + match[0].length;\r\n                this.matchPos = to + (from == to ? 1 : 0);\r\n                if (from == this.curLine.length)\r\n                    this.nextLine();\r\n                if (from < to || from > this.value.to) {\r\n                    this.value = { from, to, match };\r\n                    return this;\r\n                }\r\n                off = this.matchPos - this.curLineStart;\r\n            }\r\n            else if (this.curLineStart + this.curLine.length < this.to) {\r\n                this.nextLine();\r\n                off = 0;\r\n            }\r\n            else {\r\n                this.done = true;\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n}\r\nSymbol.iterator;\r\nconst flattened = new WeakMap();\r\n/** Reusable (partially) flattened document strings */\r\nclass FlattenedDoc {\r\n    constructor(from, text) {\r\n        this.from = from;\r\n        this.text = text;\r\n    }\r\n    get to() { return this.from + this.text.length; }\r\n    static get(doc, from, to) {\r\n        let cached = flattened.get(doc);\r\n        if (!cached || cached.from >= to || cached.to <= from) {\r\n            let flat = new FlattenedDoc(from, doc.sliceString(from, to));\r\n            flattened.set(doc, flat);\r\n            return flat;\r\n        }\r\n        if (cached.from == from && cached.to == to)\r\n            return cached;\r\n        let { text, from: cachedFrom } = cached;\r\n        if (cachedFrom > from) {\r\n            text = doc.sliceString(from, cachedFrom) + text;\r\n            cachedFrom = from;\r\n        }\r\n        if (cached.to < to)\r\n            text += doc.sliceString(cached.to, to);\r\n        flattened.set(doc, new FlattenedDoc(cachedFrom, text));\r\n        return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));\r\n    }\r\n}\r\nclass MultilineRegExpCursor {\r\n    constructor(text, query, options, from, to) {\r\n        this.text = text;\r\n        this.to = to;\r\n        this.done = false;\r\n        this.value = empty;\r\n        this.matchPos = from;\r\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\r\n        this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Base */));\r\n    }\r\n    chunkEnd(pos) {\r\n        return pos >= this.to ? this.to : this.text.lineAt(pos).to;\r\n    }\r\n    next() {\r\n        for (;;) {\r\n            let off = this.re.lastIndex = this.matchPos - this.flat.from;\r\n            let match = this.re.exec(this.flat.text);\r\n            // Skip empty matches directly after the last match\r\n            if (match && !match[0] && match.index == off) {\r\n                this.re.lastIndex = off + 1;\r\n                match = this.re.exec(this.flat.text);\r\n            }\r\n            // If a match goes almost to the end of a noncomplete chunk, try\r\n            // again, since it'll likely be able to match more\r\n            if (match && this.flat.to < this.to && match.index + match[0].length > this.flat.text.length - 10)\r\n                match = null;\r\n            if (match) {\r\n                let from = this.flat.from + match.index, to = from + match[0].length;\r\n                this.value = { from, to, match };\r\n                this.matchPos = to + (from == to ? 1 : 0);\r\n                return this;\r\n            }\r\n            else {\r\n                if (this.flat.to == this.to) {\r\n                    this.done = true;\r\n                    return this;\r\n                }\r\n                // Grow the flattened doc\r\n                this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));\r\n            }\r\n        }\r\n    }\r\n}\r\nSymbol.iterator;\r\nif (typeof Symbol != \"undefined\") {\r\n    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =\r\n        function () { return this; };\r\n}\r\nfunction validRegExp(source) {\r\n    try {\r\n        new RegExp(source, baseFlags);\r\n        return true;\r\n    }\r\n    catch (_a) {\r\n        return false;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/search/regexp.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/search/search.js":
/*!****************************************************!*\
  !*** ./sys/public/js/editor/dist/search/search.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SearchQuery\": () => (/* binding */ SearchQuery),\n/* harmony export */   \"closeSearchPanel\": () => (/* binding */ closeSearchPanel),\n/* harmony export */   \"findNext\": () => (/* binding */ findNext),\n/* harmony export */   \"findPrevious\": () => (/* binding */ findPrevious),\n/* harmony export */   \"getSearchQuery\": () => (/* binding */ getSearchQuery),\n/* harmony export */   \"openSearchPanel\": () => (/* binding */ openSearchPanel),\n/* harmony export */   \"replaceAll\": () => (/* binding */ replaceAll),\n/* harmony export */   \"replaceNext\": () => (/* binding */ replaceNext),\n/* harmony export */   \"search\": () => (/* binding */ search),\n/* harmony export */   \"searchKeymap\": () => (/* binding */ searchKeymap),\n/* harmony export */   \"selectMatches\": () => (/* binding */ selectMatches),\n/* harmony export */   \"selectSelectionMatches\": () => (/* binding */ selectSelectionMatches),\n/* harmony export */   \"setSearchQuery\": () => (/* binding */ setSearchQuery)\n/* harmony export */ });\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/crelt.js */ \"./sys/public/js/editor/dist/utils/crelt.js\");\n/* harmony import */ var _cursor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cursor.js */ \"./sys/public/js/editor/dist/search/cursor.js\");\n/* harmony import */ var _regexp_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./regexp.js */ \"./sys/public/js/editor/dist/search/regexp.js\");\n/* harmony import */ var _goto_line_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./goto-line.js */ \"./sys/public/js/editor/dist/search/goto-line.js\");\n/* harmony import */ var _selection_match_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./selection-match.js */ \"./sys/public/js/editor/dist/search/selection-match.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst searchConfigFacet = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\r\n    combine(configs) {\r\n        var _a;\r\n        return {\r\n            top: configs.reduce((val, conf) => val !== null && val !== void 0 ? val : conf.top, undefined) || false,\r\n            caseSensitive: configs.reduce((val, conf) => val !== null && val !== void 0 ? val : conf.caseSensitive, undefined) || false,\r\n            createPanel: ((_a = configs.find(c => c.createPanel)) === null || _a === void 0 ? void 0 : _a.createPanel) || (view => new SearchPanel(view))\r\n        };\r\n    }\r\n});\r\n/**\r\n * Add search state to the editor configuration, and optionally configure the search extension.\r\n * ({@link openSearchPanel} will automatically enable this if it isn't already on).\r\n */\r\nfunction search(config) {\r\n    return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;\r\n}\r\n/** A search query. Part of the editor's search state. */\r\nclass SearchQuery {\r\n    /**\r\n     * Create a query object.\r\n     * @param config.search The search string.\r\n     * @param [config.cassSensitive] Controls whether the search should be case-sensitive.\r\n     * @param [config.literal] When true, interpret the search string as a literal sequence of characters.\r\n     * @param [config.regexp] When true, interpret the search string as a regular expression.\r\n     * @param [config.replace] The replace text.\r\n     */\r\n    constructor(config) {\r\n        this.search = config.search;\r\n        this.caseSensitive = !!config.caseSensitive;\r\n        this.regexp = !!config.regexp;\r\n        this.replace = config.replace || \"\";\r\n        this.valid = !!this.search && (!this.regexp || (0,_regexp_js__WEBPACK_IMPORTED_MODULE_4__.validRegExp)(this.search));\r\n        this.unquoted = config.literal ? this.search : this.search.replace(/\\\\([nrt\\\\])/g, (_, ch) => ch == \"n\" ? \"\\n\" : ch == \"r\" ? \"\\r\" : ch == \"t\" ? \"\\t\" : \"\\\\\");\r\n    }\r\n    /** Compare this query to another query. */\r\n    eq(other) {\r\n        return this.search == other.search && this.replace == other.replace &&\r\n            this.caseSensitive == other.caseSensitive && this.regexp == other.regexp;\r\n    }\r\n    // @internal\r\n    create() {\r\n        return this.regexp ? new RegExpQuery(this) : new StringQuery(this);\r\n    }\r\n    /** Get a search cursor for this query, searching through the given range in the given document. */\r\n    getCursor(doc, from = 0, to = doc.length) {\r\n        return this.regexp ? regexpCursor(this, doc, from, to) : stringCursor(this, doc, from, to);\r\n    }\r\n}\r\nclass QueryType {\r\n    constructor(spec) {\r\n        this.spec = spec;\r\n    }\r\n}\r\nfunction stringCursor(spec, doc, from, to) {\r\n    return new _cursor_js__WEBPACK_IMPORTED_MODULE_3__.SearchCursor(doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase());\r\n}\r\nclass StringQuery extends QueryType {\r\n    constructor(spec) {\r\n        super(spec);\r\n    }\r\n    nextMatch(doc, curFrom, curTo) {\r\n        let cursor = stringCursor(this.spec, doc, curTo, doc.length).nextOverlapping();\r\n        if (cursor.done)\r\n            cursor = stringCursor(this.spec, doc, 0, curFrom).nextOverlapping();\r\n        return cursor.done ? null : cursor.value;\r\n    }\r\n    // Searching in reverse is, rather than implementing inverted search cursor, done by scanning chunk after chunk forward.\r\n    prevMatchInRange(doc, from, to) {\r\n        for (let pos = to;;) {\r\n            let start = Math.max(from, pos - 10000 /* ChunkSize */ - this.spec.unquoted.length);\r\n            let cursor = stringCursor(this.spec, doc, start, pos), range = null;\r\n            while (!cursor.nextOverlapping().done)\r\n                range = cursor.value;\r\n            if (range)\r\n                return range;\r\n            if (start == from)\r\n                return null;\r\n            pos -= 10000 /* ChunkSize */;\r\n        }\r\n    }\r\n    prevMatch(doc, curFrom, curTo) {\r\n        return this.prevMatchInRange(doc, 0, curFrom) ||\r\n            this.prevMatchInRange(doc, curTo, doc.length);\r\n    }\r\n    getReplacement(_result) { return this.spec.replace; }\r\n    matchAll(doc, limit) {\r\n        let cursor = stringCursor(this.spec, doc, 0, doc.length), ranges = [];\r\n        while (!cursor.next().done) {\r\n            if (ranges.length >= limit)\r\n                return null;\r\n            ranges.push(cursor.value);\r\n        }\r\n        return ranges;\r\n    }\r\n    highlight(doc, from, to, add) {\r\n        let cursor = stringCursor(this.spec, doc, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, doc.length));\r\n        while (!cursor.next().done)\r\n            add(cursor.value.from, cursor.value.to);\r\n    }\r\n}\r\nfunction regexpCursor(spec, doc, from, to) {\r\n    return new _regexp_js__WEBPACK_IMPORTED_MODULE_4__.RegExpCursor(doc, spec.search, spec.caseSensitive ? undefined : { ignoreCase: true }, from, to);\r\n}\r\nclass RegExpQuery extends QueryType {\r\n    nextMatch(doc, curFrom, curTo) {\r\n        let cursor = regexpCursor(this.spec, doc, curTo, doc.length).next();\r\n        if (cursor.done)\r\n            cursor = regexpCursor(this.spec, doc, 0, curFrom).next();\r\n        return cursor.done ? null : cursor.value;\r\n    }\r\n    prevMatchInRange(doc, from, to) {\r\n        for (let size = 1;; size++) {\r\n            let start = Math.max(from, to - size * 10000 /* ChunkSize */);\r\n            let cursor = regexpCursor(this.spec, doc, start, to), range = null;\r\n            while (!cursor.next().done)\r\n                range = cursor.value;\r\n            if (range && (start == from || range.from > start + 10))\r\n                return range;\r\n            if (start == from)\r\n                return null;\r\n        }\r\n    }\r\n    prevMatch(doc, curFrom, curTo) {\r\n        return this.prevMatchInRange(doc, 0, curFrom) ||\r\n            this.prevMatchInRange(doc, curTo, doc.length);\r\n    }\r\n    getReplacement(result) {\r\n        return this.spec.replace.replace(/\\$([$&\\d+])/g, (m, i) => i == \"$\" ? \"$\"\r\n            : i == \"&\" ? result.match[0]\r\n                : i != \"0\" && +i < result.match.length ? result.match[i]\r\n                    : m);\r\n    }\r\n    matchAll(doc, limit) {\r\n        let cursor = regexpCursor(this.spec, doc, 0, doc.length), ranges = [];\r\n        while (!cursor.next().done) {\r\n            if (ranges.length >= limit)\r\n                return null;\r\n            ranges.push(cursor.value);\r\n        }\r\n        return ranges;\r\n    }\r\n    highlight(doc, from, to, add) {\r\n        let cursor = regexpCursor(this.spec, doc, Math.max(0, from - 250 /* HighlightMargin */), Math.min(to + 250 /* HighlightMargin */, doc.length));\r\n        while (!cursor.next().done)\r\n            add(cursor.value.from, cursor.value.to);\r\n    }\r\n}\r\n/**\r\n * A state effect that updates the current search query. Note that this only has an effect if the search\r\n * state has been initialized (by including {@link search} in your configuration or by running\r\n * {@link openSearchPanel} at least once).\r\n */\r\nconst setSearchQuery = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst togglePanel = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();\r\nconst searchState = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateField.define({\r\n    create(state) {\r\n        return new SearchState(defaultQuery(state).create(), null);\r\n    },\r\n    update(value, tr) {\r\n        for (let effect of tr.effects) {\r\n            if (effect.is(setSearchQuery))\r\n                value = new SearchState(effect.value.create(), value.panel);\r\n            else if (effect.is(togglePanel))\r\n                value = new SearchState(value.query, effect.value ? createSearchPanel : null);\r\n        }\r\n        return value;\r\n    },\r\n    provide: f => _view_index_js__WEBPACK_IMPORTED_MODULE_0__.showPanel.from(f, val => val.panel)\r\n});\r\n/** Get the current search query from an editor state. */\r\nfunction getSearchQuery(state) {\r\n    let curState = state.field(searchState, false);\r\n    return curState ? curState.query.spec : defaultQuery(state);\r\n}\r\nclass SearchState {\r\n    constructor(query, panel) {\r\n        this.query = query;\r\n        this.panel = panel;\r\n    }\r\n}\r\nconst matchMark = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.mark({ class: \"cm-searchMatch\" }), selectedMatchMark = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.mark({ class: \"cm-searchMatch cm-searchMatch-selected\" });\r\nconst searchHighlighter = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.decorations = this.highlight(view.state.field(searchState));\r\n    }\r\n    update(update) {\r\n        let state = update.state.field(searchState);\r\n        if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)\r\n            this.decorations = this.highlight(state);\r\n    }\r\n    highlight({ query, panel }) {\r\n        if (!panel || !query.spec.valid)\r\n            return _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.none;\r\n        let { view } = this;\r\n        let builder = new _state_index_js__WEBPACK_IMPORTED_MODULE_1__.RangeSetBuilder();\r\n        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {\r\n            let { from, to } = ranges[i];\r\n            while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* HighlightMargin */)\r\n                to = ranges[++i].to;\r\n            query.highlight(view.state.doc, from, to, (from, to) => {\r\n                let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);\r\n                builder.add(from, to, selected ? selectedMatchMark : matchMark);\r\n            });\r\n        }\r\n        return builder.finish();\r\n    }\r\n}, {\r\n    decorations: v => v.decorations\r\n});\r\nfunction searchCommand(f) {\r\n    return view => {\r\n        let state = view.state.field(searchState, false);\r\n        return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);\r\n    };\r\n}\r\n/**\r\n * Open the search panel if it isn't already open, and move the selection to the first match\r\n * after the current main selection. Will wrap around to the start of the document when it\r\n * reaches the end.\r\n */\r\nconst findNext = searchCommand((view, { query }) => {\r\n    let { from, to } = view.state.selection.main;\r\n    let next = query.nextMatch(view.state.doc, from, to);\r\n    if (!next || next.from == from && next.to == to)\r\n        return false;\r\n    view.dispatch({\r\n        selection: { anchor: next.from, head: next.to },\r\n        scrollIntoView: true,\r\n        effects: announceMatch(view, next),\r\n        userEvent: \"select.search\"\r\n    });\r\n    return true;\r\n});\r\n/**\r\n * Move the selection to the previous instance of the search query, before the current main selection.\r\n * Will wrap past the start of the document to start searching at the end again.\r\n */\r\nconst findPrevious = searchCommand((view, { query }) => {\r\n    let { state } = view, { from, to } = state.selection.main;\r\n    let range = query.prevMatch(state.doc, from, to);\r\n    if (!range)\r\n        return false;\r\n    view.dispatch({\r\n        selection: { anchor: range.from, head: range.to },\r\n        scrollIntoView: true,\r\n        effects: announceMatch(view, range),\r\n        userEvent: \"select.search\"\r\n    });\r\n    return true;\r\n});\r\n/** Select all instances of the search query. */\r\nconst selectMatches = searchCommand((view, { query }) => {\r\n    let ranges = query.matchAll(view.state.doc, 1000);\r\n    if (!ranges || !ranges.length)\r\n        return false;\r\n    view.dispatch({\r\n        selection: _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(ranges.map(r => _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(r.from, r.to))),\r\n        userEvent: \"select.search.matches\"\r\n    });\r\n    return true;\r\n});\r\n/** Select all instances of the currently selected text. */\r\nconst selectSelectionMatches = ({ state, dispatch }) => {\r\n    let sel = state.selection;\r\n    if (sel.ranges.length > 1 || sel.main.empty)\r\n        return false;\r\n    let { from, to } = sel.main;\r\n    let ranges = [], main = 0;\r\n    for (let cur = new _cursor_js__WEBPACK_IMPORTED_MODULE_3__.SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {\r\n        if (ranges.length > 1000)\r\n            return false;\r\n        if (cur.value.from == from)\r\n            main = ranges.length;\r\n        ranges.push(_state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(cur.value.from, cur.value.to));\r\n    }\r\n    dispatch(state.update({\r\n        selection: _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(ranges, main),\r\n        userEvent: \"select.search.matches\"\r\n    }));\r\n    return true;\r\n};\r\n/** Replace the current match of the search query. */\r\nconst replaceNext = searchCommand((view, { query }) => {\r\n    let { state } = view, { from, to } = state.selection.main;\r\n    if (state.readOnly)\r\n        return false;\r\n    let next = query.nextMatch(state.doc, from, from);\r\n    if (!next)\r\n        return false;\r\n    let changes = [], selection, replacement;\r\n    if (next.from == from && next.to == to) {\r\n        replacement = state.toText(query.getReplacement(next));\r\n        changes.push({ from: next.from, to: next.to, insert: replacement });\r\n        next = query.nextMatch(state.doc, next.from, next.to);\r\n    }\r\n    if (next) {\r\n        let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;\r\n        selection = { anchor: next.from - off, head: next.to - off };\r\n    }\r\n    view.dispatch({\r\n        changes, selection,\r\n        scrollIntoView: !!selection,\r\n        effects: next ? announceMatch(view, next) : undefined,\r\n        userEvent: \"input.replace\"\r\n    });\r\n    return true;\r\n});\r\n/** Replace all instances of the search query with the given replacement. */\r\nconst replaceAll = searchCommand((view, { query }) => {\r\n    if (view.state.readOnly)\r\n        return false;\r\n    let changes = query.matchAll(view.state.doc, 1e9).map(match => {\r\n        let { from, to } = match;\r\n        return { from, to, insert: query.getReplacement(match) };\r\n    });\r\n    if (!changes.length)\r\n        return false;\r\n    view.dispatch({\r\n        changes,\r\n        userEvent: \"input.replace.all\"\r\n    });\r\n    return true;\r\n});\r\nfunction createSearchPanel(view) {\r\n    return view.state.facet(searchConfigFacet).createPanel(view);\r\n}\r\nfunction defaultQuery(state, fallback) {\r\n    var _a;\r\n    let sel = state.selection.main;\r\n    let selText = sel.empty || sel.to > sel.from + 100 ? \"\" : state.sliceDoc(sel.from, sel.to);\r\n    let caseSensitive = (_a = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _a !== void 0 ? _a : state.facet(searchConfigFacet).caseSensitive;\r\n    return fallback && !selText ? fallback : new SearchQuery({ search: selText.replace(/\\n/g, \"\\\\n\"), caseSensitive });\r\n}\r\n/** Make sure the search panel is open and focused. */\r\nconst openSearchPanel = view => {\r\n    let state = view.state.field(searchState, false);\r\n    if (state && state.panel) {\r\n        let panel = (0,_view_index_js__WEBPACK_IMPORTED_MODULE_0__.getPanel)(view, createSearchPanel);\r\n        if (!panel)\r\n            return false;\r\n        let searchInput = panel.dom.querySelector(\"[name=search]\");\r\n        if (searchInput != view.root.activeElement) {\r\n            let query = defaultQuery(view.state, state.query.spec);\r\n            if (query.valid)\r\n                view.dispatch({ effects: setSearchQuery.of(query) });\r\n            searchInput.focus();\r\n            searchInput.select();\r\n        }\r\n    }\r\n    else {\r\n        view.dispatch({ effects: [\r\n                togglePanel.of(true),\r\n                state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : _state_index_js__WEBPACK_IMPORTED_MODULE_1__.StateEffect.appendConfig.of(searchExtensions)\r\n            ] });\r\n    }\r\n    return true;\r\n};\r\n/** Close the search panel. */\r\nconst closeSearchPanel = view => {\r\n    let state = view.state.field(searchState, false);\r\n    if (!state || !state.panel)\r\n        return false;\r\n    let panel = (0,_view_index_js__WEBPACK_IMPORTED_MODULE_0__.getPanel)(view, createSearchPanel);\r\n    if (panel && panel.dom.contains(view.root.activeElement))\r\n        view.focus();\r\n    view.dispatch({ effects: togglePanel.of(false) });\r\n    return true;\r\n};\r\n/**\r\n * Default search-related key bindings.\r\n *\r\n *  - Mod-f: {@link openSearchPanel}\r\n *  - F3, Mod-g: {@link findNext}\r\n *  - Shift-F3, Shift-Mod-g: {@link findPrevious}\r\n *  - Alt-g: {@link gotoLine}\r\n *  - Mod-d: {@link selectNextOccurrence}\r\n */\r\nconst searchKeymap = [\r\n    { key: \"Mod-f\", run: openSearchPanel, scope: \"editor search-panel\" },\r\n    { key: \"F3\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\r\n    { key: \"Mod-g\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\r\n    { key: \"Escape\", run: closeSearchPanel, scope: \"editor search-panel\" },\r\n    { key: \"Mod-Shift-l\", run: selectSelectionMatches },\r\n    { key: \"Alt-g\", run: _goto_line_js__WEBPACK_IMPORTED_MODULE_5__.gotoLine },\r\n    { key: \"Mod-d\", run: _selection_match_js__WEBPACK_IMPORTED_MODULE_6__.selectNextOccurrence, preventDefault: true },\r\n];\r\nclass SearchPanel {\r\n    constructor(view) {\r\n        this.view = view;\r\n        let query = this.query = view.state.field(searchState).query.spec;\r\n        this.commit = this.commit.bind(this);\r\n        this.searchField = (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"input\", {\r\n            value: query.search,\r\n            placeholder: phrase(view, \"Find\"),\r\n            \"aria-label\": phrase(view, \"Find\"),\r\n            class: \"cm-textfield\",\r\n            name: \"search\",\r\n            onchange: this.commit,\r\n            onkeyup: this.commit\r\n        });\r\n        this.replaceField = (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"input\", {\r\n            value: query.replace,\r\n            placeholder: phrase(view, \"Replace\"),\r\n            \"aria-label\": phrase(view, \"Replace\"),\r\n            class: \"cm-textfield\",\r\n            name: \"replace\",\r\n            onchange: this.commit,\r\n            onkeyup: this.commit\r\n        });\r\n        this.caseField = (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"input\", {\r\n            type: \"checkbox\",\r\n            name: \"case\",\r\n            checked: query.caseSensitive,\r\n            onchange: this.commit\r\n        });\r\n        this.reField = (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"input\", {\r\n            type: \"checkbox\",\r\n            name: \"re\",\r\n            checked: query.regexp,\r\n            onchange: this.commit\r\n        });\r\n        function button(name, onclick, content) {\r\n            return (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"button\", { class: \"cm-button\", name, onclick, type: \"button\" }, content);\r\n        }\r\n        this.dom = (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"div\", { onkeydown: (e) => this.keydown(e), class: \"cm-search\" }, [\r\n            this.searchField,\r\n            button(\"next\", () => findNext(view), [phrase(view, \"next\")]),\r\n            button(\"prev\", () => findPrevious(view), [phrase(view, \"previous\")]),\r\n            button(\"select\", () => selectMatches(view), [phrase(view, \"all\")]),\r\n            (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"label\", null, [this.caseField, phrase(view, \"match case\")]),\r\n            (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"label\", null, [this.reField, phrase(view, \"regexp\")]),\r\n            ...view.state.readOnly ? [] : [\r\n                (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"br\"),\r\n                this.replaceField,\r\n                button(\"replace\", () => replaceNext(view), [phrase(view, \"replace\")]),\r\n                button(\"replaceAll\", () => replaceAll(view), [phrase(view, \"replace all\")]),\r\n                (0,_utils_crelt_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"button\", {\r\n                    name: \"close\",\r\n                    onclick: () => closeSearchPanel(view),\r\n                    \"aria-label\": phrase(view, \"close\"),\r\n                    type: \"button\"\r\n                }, [\"×\"])\r\n            ]\r\n        ]);\r\n    }\r\n    commit() {\r\n        let query = new SearchQuery({\r\n            search: this.searchField.value,\r\n            caseSensitive: this.caseField.checked,\r\n            regexp: this.reField.checked,\r\n            replace: this.replaceField.value\r\n        });\r\n        if (!query.eq(this.query)) {\r\n            this.query = query;\r\n            this.view.dispatch({ effects: setSearchQuery.of(query) });\r\n        }\r\n    }\r\n    keydown(e) {\r\n        if ((0,_view_index_js__WEBPACK_IMPORTED_MODULE_0__.runScopeHandlers)(this.view, e, \"search-panel\")) {\r\n            e.preventDefault();\r\n        }\r\n        else if (e.keyCode == 13 && e.target == this.searchField) {\r\n            e.preventDefault();\r\n            (e.shiftKey ? findPrevious : findNext)(this.view);\r\n        }\r\n        else if (e.keyCode == 13 && e.target == this.replaceField) {\r\n            e.preventDefault();\r\n            replaceNext(this.view);\r\n        }\r\n    }\r\n    update(update) {\r\n        for (let tr of update.transactions)\r\n            for (let effect of tr.effects) {\r\n                if (effect.is(setSearchQuery) && !effect.value.eq(this.query))\r\n                    this.setQuery(effect.value);\r\n            }\r\n    }\r\n    setQuery(query) {\r\n        this.query = query;\r\n        this.searchField.value = query.search;\r\n        this.replaceField.value = query.replace;\r\n        this.caseField.checked = query.caseSensitive;\r\n        this.reField.checked = query.regexp;\r\n    }\r\n    mount() {\r\n        this.searchField.select();\r\n    }\r\n    get pos() { return 80; }\r\n    get top() { return this.view.state.facet(searchConfigFacet).top; }\r\n}\r\nfunction phrase(view, phrase) { return view.state.phrase(phrase); }\r\nconst AnnounceMargin = 30;\r\nconst Break = /[\\s\\.,:;?!]/;\r\nfunction announceMatch(view, { from, to }) {\r\n    let lineStart = view.state.doc.lineAt(from).from, lineEnd = view.state.doc.lineAt(to).to;\r\n    let start = Math.max(lineStart, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);\r\n    let text = view.state.sliceDoc(start, end);\r\n    if (start != lineStart) {\r\n        for (let i = 0; i < AnnounceMargin; i++)\r\n            if (!Break.test(text[i + 1]) && Break.test(text[i])) {\r\n                text = text.slice(i);\r\n                break;\r\n            }\r\n    }\r\n    if (end != lineEnd) {\r\n        for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)\r\n            if (!Break.test(text[i - 1]) && Break.test(text[i])) {\r\n                text = text.slice(0, i);\r\n                break;\r\n            }\r\n    }\r\n    return _view_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.announce.of(`${view.state.phrase(\"current match\")}. ${text} ${view.state.phrase(\"on line\")} ${view.state.doc.lineAt(from).number}`);\r\n}\r\nconst baseTheme = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.baseTheme({\r\n    \".cm-panel.cm-search\": {\r\n        padding: \"2px 6px 4px\",\r\n        position: \"relative\",\r\n        \"& [name=close]\": {\r\n            position: \"absolute\",\r\n            top: \"0\",\r\n            right: \"4px\",\r\n            backgroundColor: \"inherit\",\r\n            border: \"none\",\r\n            font: \"inherit\",\r\n            padding: 0,\r\n            margin: 0\r\n        },\r\n        \"& input, & button, & label\": {\r\n            margin: \".2em .6em .2em 0\"\r\n        },\r\n        \"& input[type=checkbox]\": {\r\n            marginRight: \".2em\"\r\n        },\r\n        \"& label\": {\r\n            fontSize: \"80%\",\r\n            whiteSpace: \"pre\"\r\n        }\r\n    },\r\n    \"&light .cm-searchMatch\": { backgroundColor: \"#ffff0054\" },\r\n    \"&dark .cm-searchMatch\": { backgroundColor: \"#00ffff8a\" },\r\n    \"&light .cm-searchMatch-selected\": { backgroundColor: \"#ff6a0054\" },\r\n    \"&dark .cm-searchMatch-selected\": { backgroundColor: \"#ff00ff8a\" }\r\n});\r\nconst searchExtensions = [\r\n    searchState,\r\n    _state_index_js__WEBPACK_IMPORTED_MODULE_1__.Prec.lowest(searchHighlighter),\r\n    baseTheme\r\n];\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/search/search.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/search/selection-match.js":
/*!*************************************************************!*\
  !*** ./sys/public/js/editor/dist/search/selection-match.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"highlightSelectionMatches\": () => (/* binding */ highlightSelectionMatches),\n/* harmony export */   \"selectNextOccurrence\": () => (/* binding */ selectNextOccurrence)\n/* harmony export */ });\n/* harmony import */ var _view_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _cursor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cursor.js */ \"./sys/public/js/editor/dist/search/cursor.js\");\n\r\n\r\n\r\nconst defaultHighlightOptions = {\r\n    highlightWordAroundCursor: false,\r\n    minSelectionLength: 1,\r\n    maxMatches: 100,\r\n    wholeWords: false\r\n};\r\nconst highlightConfig = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.Facet.define({\r\n    combine(options) {\r\n        return (0,_state_index_js__WEBPACK_IMPORTED_MODULE_1__.combineConfig)(options, defaultHighlightOptions, {\r\n            highlightWordAroundCursor: (a, b) => a || b,\r\n            minSelectionLength: Math.min,\r\n            maxMatches: Math.min\r\n        });\r\n    }\r\n});\r\n/**\r\n * This extension highlights text that matches the selection. It uses the `\"cm-selectionMatch\"` class for the highlighting.\r\n * When `highlightWordAroundCursor` is enabled, the word at the cursor itself will be highlighted with `\"cm-selectionMatch-main\"`.\r\n */\r\nfunction highlightSelectionMatches(options) {\r\n    let ext = [defaultTheme, matchHighlighter];\r\n    if (options)\r\n        ext.push(highlightConfig.of(options));\r\n    return ext;\r\n}\r\nconst matchDeco = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.mark({ class: \"cm-selectionMatch\" });\r\nconst mainMatchDeco = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.mark({ class: \"cm-selectionMatch cm-selectionMatch-main\" });\r\n// Whether the characters directly outside the given positions are non-word characters\r\nfunction insideWordBoundaries(check, state, from, to) {\r\n    return (from == 0 || check(state.sliceDoc(from - 1, from)) != _state_index_js__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word) &&\r\n        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != _state_index_js__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word);\r\n}\r\n// Whether the characters directly at the given positions are word characters\r\nfunction insideWord(check, state, from, to) {\r\n    return check(state.sliceDoc(from, from + 1)) == _state_index_js__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word\r\n        && check(state.sliceDoc(to - 1, to)) == _state_index_js__WEBPACK_IMPORTED_MODULE_1__.CharCategory.Word;\r\n}\r\nconst matchHighlighter = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.decorations = this.getDeco(view);\r\n    }\r\n    update(update) {\r\n        if (update.selectionSet || update.docChanged || update.viewportChanged)\r\n            this.decorations = this.getDeco(update.view);\r\n    }\r\n    getDeco(view) {\r\n        let conf = view.state.facet(highlightConfig);\r\n        let { state } = view, sel = state.selection;\r\n        if (sel.ranges.length > 1)\r\n            return _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.none;\r\n        let range = sel.main, query, check = null;\r\n        if (range.empty) {\r\n            if (!conf.highlightWordAroundCursor)\r\n                return _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.none;\r\n            let word = state.wordAt(range.head);\r\n            if (!word)\r\n                return _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.none;\r\n            check = state.charCategorizer(range.head);\r\n            query = state.sliceDoc(word.from, word.to);\r\n        }\r\n        else {\r\n            let len = range.to - range.from;\r\n            if (len < conf.minSelectionLength || len > 200)\r\n                return _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.none;\r\n            if (conf.wholeWords) {\r\n                query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?\r\n                check = state.charCategorizer(range.head);\r\n                if (!(insideWordBoundaries(check, state, range.from, range.to)\r\n                    && insideWord(check, state, range.from, range.to)))\r\n                    return _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.none;\r\n            }\r\n            else {\r\n                query = state.sliceDoc(range.from, range.to).trim();\r\n                if (!query)\r\n                    return _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.none;\r\n            }\r\n        }\r\n        let deco = [];\r\n        for (let part of view.visibleRanges) {\r\n            let cursor = new _cursor_js__WEBPACK_IMPORTED_MODULE_2__.SearchCursor(state.doc, query, part.from, part.to);\r\n            while (!cursor.next().done) {\r\n                let { from, to } = cursor.value;\r\n                if (!check || insideWordBoundaries(check, state, from, to)) {\r\n                    if (range.empty && from <= range.from && to >= range.to)\r\n                        deco.push(mainMatchDeco.range(from, to));\r\n                    else if (from >= range.to || to <= range.from)\r\n                        deco.push(matchDeco.range(from, to));\r\n                    if (deco.length > conf.maxMatches)\r\n                        return _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.none;\r\n                }\r\n            }\r\n        }\r\n        return _view_index_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.set(deco);\r\n    }\r\n}, {\r\n    decorations: v => v.decorations\r\n});\r\nconst defaultTheme = _view_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.baseTheme({\r\n    \".cm-selectionMatch\": { backgroundColor: \"#99ff7780\" },\r\n    \".cm-searchMatch .cm-selectionMatch\": { backgroundColor: \"transparent\" }\r\n});\r\n// Select the words around the cursors.\r\nconst selectWord = ({ state, dispatch }) => {\r\n    let { selection } = state;\r\n    let newSel = _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || _state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.head)), selection.mainIndex);\r\n    if (newSel.eq(selection))\r\n        return false;\r\n    dispatch(state.update({ selection: newSel }));\r\n    return true;\r\n};\r\n// Find next occurrence of query relative to last cursor. Wrap around\r\n// the document if there are no more matches.\r\nfunction findNextOccurrence(state, query) {\r\n    let { main, ranges } = state.selection;\r\n    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;\r\n    for (let cycled = false, cursor = new _cursor_js__WEBPACK_IMPORTED_MODULE_2__.SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {\r\n        cursor.next();\r\n        if (cursor.done) {\r\n            if (cycled)\r\n                return null;\r\n            cursor = new _cursor_js__WEBPACK_IMPORTED_MODULE_2__.SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));\r\n            cycled = true;\r\n        }\r\n        else {\r\n            if (cycled && ranges.some(r => r.from == cursor.value.from))\r\n                continue;\r\n            if (fullWord) {\r\n                let word = state.wordAt(cursor.value.from);\r\n                if (!word || word.from != cursor.value.from || word.to != cursor.value.to)\r\n                    continue;\r\n            }\r\n            return cursor.value;\r\n        }\r\n    }\r\n}\r\n/** Select next occurrence of the current selection. Expand selection to the surrounding word when the selection is empty. */\r\nconst selectNextOccurrence = ({ state, dispatch }) => {\r\n    let { ranges } = state.selection;\r\n    if (ranges.some(sel => sel.from === sel.to))\r\n        return selectWord({ state, dispatch });\r\n    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);\r\n    if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))\r\n        return false;\r\n    let range = findNextOccurrence(state, searchedText);\r\n    if (!range)\r\n        return false;\r\n    dispatch(state.update({\r\n        selection: state.selection.addRange(_state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(range.from, range.to), false),\r\n        effects: _view_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.scrollIntoView(range.to)\r\n    }));\r\n    return true;\r\n};\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/search/selection-match.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/state/change.js":
/*!***************************************************!*\
  !*** ./sys/public/js/editor/dist/state/change.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ChangeDesc\": () => (/* binding */ ChangeDesc),\n/* harmony export */   \"ChangeSet\": () => (/* binding */ ChangeSet),\n/* harmony export */   \"DefaultSplit\": () => (/* binding */ DefaultSplit),\n/* harmony export */   \"MapMode\": () => (/* binding */ MapMode)\n/* harmony export */ });\n/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text.js */ \"./sys/public/js/editor/dist/state/text.js\");\n\r\nconst DefaultSplit = /\\r\\n?|\\n/;\r\n/** Distinguishes different ways in which positions can be mapped. */\r\nvar MapMode;\r\n(function (MapMode) {\r\n    // Map a position to a valid new position, even when its context was deleted.\r\n    MapMode[MapMode[\"Simple\"] = 0] = \"Simple\";\r\n    // Return null if deletion happens across the position.\r\n    MapMode[MapMode[\"TrackDel\"] = 1] = \"TrackDel\";\r\n    // Return null if the character _before_ the position is deleted.\r\n    MapMode[MapMode[\"TrackBefore\"] = 2] = \"TrackBefore\";\r\n    // Return null if the character _after_ the position is deleted.\r\n    MapMode[MapMode[\"TrackAfter\"] = 3] = \"TrackAfter\";\r\n})(MapMode || (MapMode = {}));\r\n/** A change description is a variant of [change set]{@link ChangeSet} that doesn't store the inserted text. As such, it can't be applied, but is cheaper to store and manipulate. */\r\nclass ChangeDesc {\r\n    // @internal\r\n    constructor(\r\n    // @internal\r\n    sections) {\r\n        this.sections = sections;\r\n    }\r\n    /** The length of the document before the change. */\r\n    get length() {\r\n        let result = 0;\r\n        for (let i = 0; i < this.sections.length; i += 2)\r\n            result += this.sections[i];\r\n        return result;\r\n    }\r\n    /** The length of the document after the change. */\r\n    get newLength() {\r\n        let result = 0;\r\n        for (let i = 0; i < this.sections.length; i += 2) {\r\n            let ins = this.sections[i + 1];\r\n            result += ins < 0 ? this.sections[i] : ins;\r\n        }\r\n        return result;\r\n    }\r\n    /** False when there are actual changes in this set. */\r\n    get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }\r\n    /**\r\n     * Iterate over the unchanged parts left by these changes.\r\n     * @param func.posA the position of the range in the old document.\r\n     * @param func.posB the new position in the changed document.\r\n     */\r\n    iterGaps(func) {\r\n        for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {\r\n            let len = this.sections[i++], ins = this.sections[i++];\r\n            if (ins < 0) {\r\n                func(posA, posB, len);\r\n                posB += len;\r\n            }\r\n            else {\r\n                posB += ins;\r\n            }\r\n            posA += len;\r\n        }\r\n    }\r\n    /** Iterate over the ranges changed by these changes. Addition of {@link iterChanges} */\r\n    iterChangedRanges(f, individual = false) {\r\n        iterChanges(this, f, individual);\r\n    }\r\n    /** Get a description of the inverted form of these changes. */\r\n    get invertedDesc() {\r\n        let sections = [];\r\n        for (let i = 0; i < this.sections.length;) {\r\n            let len = this.sections[i++], ins = this.sections[i++];\r\n            if (ins < 0)\r\n                sections.push(len, ins);\r\n            else\r\n                sections.push(ins, len);\r\n        }\r\n        return new ChangeDesc(sections);\r\n    }\r\n    /** Compute the combined effect of applying another set of changes after this one. The length of the document after this set should match the length before `other`. */\r\n    composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }\r\n    /**\r\n     * Map this description, which should start with the same document\r\n     * as `other`, over another set of changes, so that it can be\r\n     * applied after it.\r\n     * @param other\r\n     * @param before When `before` is true, map as if the changes in `other` happened before the ones in `this`.\r\n     */\r\n    mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }\r\n    mapPos(pos, assoc = -1, mode = MapMode.Simple) {\r\n        let posA = 0, posB = 0;\r\n        for (let i = 0; i < this.sections.length;) {\r\n            let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;\r\n            if (ins < 0) {\r\n                if (endA > pos)\r\n                    return posB + (pos - posA);\r\n                posB += len;\r\n            }\r\n            else {\r\n                if (mode != MapMode.Simple && endA >= pos &&\r\n                    (mode == MapMode.TrackDel && posA < pos && endA > pos ||\r\n                        mode == MapMode.TrackBefore && posA < pos ||\r\n                        mode == MapMode.TrackAfter && endA > pos))\r\n                    return null;\r\n                if (endA > pos || endA == pos && assoc < 0 && !len)\r\n                    return pos == posA || assoc < 0 ? posB : posB + ins;\r\n                posB += ins;\r\n            }\r\n            posA = endA;\r\n        }\r\n        if (pos > posA)\r\n            throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);\r\n        return posB;\r\n    }\r\n    /** Check whether these changes touch a given range. When one of the changes entirely covers the range, the string `\"cover\"` is returned. */\r\n    touchesRange(from, to = from) {\r\n        for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {\r\n            let len = this.sections[i++], ins = this.sections[i++], end = pos + len;\r\n            if (ins >= 0 && pos <= to && end >= from)\r\n                return pos < from && end > to ? \"cover\" : true;\r\n            pos = end;\r\n        }\r\n        return false;\r\n    }\r\n    // @internal\r\n    toString() {\r\n        let result = \"\";\r\n        for (let i = 0; i < this.sections.length;) {\r\n            let len = this.sections[i++], ins = this.sections[i++];\r\n            result += (result ? \" \" : \"\") + len + (ins >= 0 ? \":\" + ins : \"\");\r\n        }\r\n        return result;\r\n    }\r\n    /** Serialize this change desc to a JSON-representable value. */\r\n    toJSON() { return this.sections; }\r\n    /** Create a change desc from its JSON representation (as produced by {@link toJSON}. */\r\n    static fromJSON(json) {\r\n        if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != \"number\"))\r\n            throw new RangeError(\"Invalid JSON representation of ChangeDesc\");\r\n        return new ChangeDesc(json);\r\n    }\r\n    // @internal\r\n    static create(sections) { return new ChangeDesc(sections); }\r\n}\r\n/** A change set represents a group of modifications to a document. It stores the document length, and can only be applied to documents with exactly that length. */\r\nclass ChangeSet extends ChangeDesc {\r\n    constructor(sections, \r\n    // @internal\r\n    inserted) {\r\n        super(sections);\r\n        this.inserted = inserted;\r\n    }\r\n    /** Apply the changes to a document, returning the modified document. */\r\n    apply(doc) {\r\n        if (this.length != doc.length)\r\n            throw new RangeError(\"Applying change set to a document with the wrong length\");\r\n        iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);\r\n        return doc;\r\n    }\r\n    mapDesc(other, before = false) { return mapSet(this, other, before, true); }\r\n    /**\r\n     * Given the document as it existed _before_ the changes, return a change set that represents the inverse\r\n     * of this set, which could be used to go from the document created by the changes back to the document as\r\n     * it existed before the changes.\r\n     */\r\n    invert(doc) {\r\n        let sections = this.sections.slice(), inserted = [];\r\n        for (let i = 0, pos = 0; i < sections.length; i += 2) {\r\n            let len = sections[i], ins = sections[i + 1];\r\n            if (ins >= 0) {\r\n                sections[i] = ins;\r\n                sections[i + 1] = len;\r\n                let index = i >> 1;\r\n                while (inserted.length < index)\r\n                    inserted.push(_text_js__WEBPACK_IMPORTED_MODULE_0__.Text.empty);\r\n                inserted.push(len ? doc.slice(pos, pos + len) : _text_js__WEBPACK_IMPORTED_MODULE_0__.Text.empty);\r\n            }\r\n            pos += len;\r\n        }\r\n        return new ChangeSet(sections, inserted);\r\n    }\r\n    /**\r\n     * Combine two subsequent change sets into a single set. `other` must start in the document produced by `this`.\r\n     * If `this` goes `docA` → `docB` and `other` represents `docB` → `docC`, the returned value will represent\r\n     * the change `docA` → `docC`.\r\n     */\r\n    compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }\r\n    /**\r\n     * Given another change set starting in the same document, maps this change set over the other, producing a\r\n     * new change set that can be applied to the document produced by applying `other`. When `before` is `true`,\r\n     * order changes as if `this` comes before `other`, otherwise (the default) treat `other` as coming first.\r\n     *\r\n     * Given two changes `A` and `B`, `A.compose(B.map(A))` and `B.compose(A.map(B, true))` will produce the same\r\n     * document. This provides a basic form of [operational transformation]\r\n     * (https://en.wikipedia.org/wiki/Operational_transformation),\r\n     * and can be used for collaborative editing.\r\n     */\r\n    map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }\r\n    /** Iterate over the changed ranges in the document, calling `func` for each */\r\n    iterChanges(f, individual = false) {\r\n        iterChanges(this, f, individual);\r\n    }\r\n    /** Get a [change description](#state.ChangeDesc) for this change set. */\r\n    get desc() { return ChangeDesc.create(this.sections); }\r\n    // @internal\r\n    filter(ranges) {\r\n        let resultSections = [], resultInserted = [], filteredSections = [];\r\n        let iter = new SectionIter(this);\r\n        done: for (let i = 0, pos = 0;;) {\r\n            let next = i == ranges.length ? 1e9 : ranges[i++];\r\n            while (pos < next || pos == next && iter.len == 0) {\r\n                if (iter.done)\r\n                    break done;\r\n                let len = Math.min(iter.len, next - pos);\r\n                addSection(filteredSections, len, -1);\r\n                let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;\r\n                addSection(resultSections, len, ins);\r\n                if (ins > 0)\r\n                    addInsert(resultInserted, resultSections, iter.text);\r\n                iter.forward(len);\r\n                pos += len;\r\n            }\r\n            let end = ranges[i++];\r\n            while (pos < end) {\r\n                if (iter.done)\r\n                    break done;\r\n                let len = Math.min(iter.len, end - pos);\r\n                addSection(resultSections, len, -1);\r\n                addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);\r\n                iter.forward(len);\r\n                pos += len;\r\n            }\r\n        }\r\n        return { changes: new ChangeSet(resultSections, resultInserted),\r\n            filtered: ChangeDesc.create(filteredSections) };\r\n    }\r\n    /** Serialize this change set to a JSON-representable value. */\r\n    toJSON() {\r\n        let parts = [];\r\n        for (let i = 0; i < this.sections.length; i += 2) {\r\n            let len = this.sections[i], ins = this.sections[i + 1];\r\n            if (ins < 0)\r\n                parts.push(len);\r\n            else if (ins == 0)\r\n                parts.push([len]);\r\n            else\r\n                parts.push([len].concat(this.inserted[i >> 1].toJSON()));\r\n        }\r\n        return parts;\r\n    }\r\n    /** Create a change set for the given changes, for a document of the given length, using `lineSep` as line separator. */\r\n    static of(changes, length, lineSep) {\r\n        let sections = [], inserted = [], pos = 0;\r\n        let total = null;\r\n        function flush(force = false) {\r\n            if (!force && !sections.length)\r\n                return;\r\n            if (pos < length)\r\n                addSection(sections, length - pos, -1);\r\n            let set = new ChangeSet(sections, inserted);\r\n            total = total ? total.compose(set.map(total)) : set;\r\n            sections = [];\r\n            inserted = [];\r\n            pos = 0;\r\n        }\r\n        function process(spec) {\r\n            if (Array.isArray(spec)) {\r\n                for (let sub of spec)\r\n                    process(sub);\r\n            }\r\n            else if (spec instanceof ChangeSet) {\r\n                if (spec.length != length)\r\n                    throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);\r\n                flush();\r\n                total = total ? total.compose(spec.map(total)) : spec;\r\n            }\r\n            else {\r\n                let { from, to = from, insert } = spec;\r\n                if (from > to || from < 0 || to > length)\r\n                    throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);\r\n                let insText = !insert ? _text_js__WEBPACK_IMPORTED_MODULE_0__.Text.empty : typeof insert == \"string\" ? _text_js__WEBPACK_IMPORTED_MODULE_0__.Text.of(insert.split(lineSep || DefaultSplit)) : insert;\r\n                let insLen = insText.length;\r\n                if (from == to && insLen == 0)\r\n                    return;\r\n                if (from < pos)\r\n                    flush();\r\n                if (from > pos)\r\n                    addSection(sections, from - pos, -1);\r\n                addSection(sections, to - from, insLen);\r\n                addInsert(inserted, sections, insText);\r\n                pos = to;\r\n            }\r\n        }\r\n        process(changes);\r\n        flush(!total);\r\n        return total;\r\n    }\r\n    /** Create an empty changeset of the given length. */\r\n    static empty(length) {\r\n        return new ChangeSet(length ? [length, -1] : [], []);\r\n    }\r\n    /** Create a changeset from its JSON representation (as produced by [`toJSON`]{@link ChangeSet.toJSON}. */\r\n    static fromJSON(json) {\r\n        if (!Array.isArray(json))\r\n            throw new RangeError(\"Invalid JSON representation of ChangeSet\");\r\n        let sections = [], inserted = [];\r\n        for (let i = 0; i < json.length; i++) {\r\n            let part = json[i];\r\n            if (typeof part == \"number\") {\r\n                sections.push(part, -1);\r\n            }\r\n            else if (!Array.isArray(part) || typeof part[0] != \"number\" || part.some((e, i) => i && typeof e != \"string\")) {\r\n                throw new RangeError(\"Invalid JSON representation of ChangeSet\");\r\n            }\r\n            else if (part.length == 1) {\r\n                sections.push(part[0], 0);\r\n            }\r\n            else {\r\n                while (inserted.length < i)\r\n                    inserted.push(_text_js__WEBPACK_IMPORTED_MODULE_0__.Text.empty);\r\n                inserted[i] = _text_js__WEBPACK_IMPORTED_MODULE_0__.Text.of(part.slice(1));\r\n                sections.push(part[0], inserted[i].length);\r\n            }\r\n        }\r\n        return new ChangeSet(sections, inserted);\r\n    }\r\n    // @internal\r\n    static createSet(sections, inserted) {\r\n        return new ChangeSet(sections, inserted);\r\n    }\r\n}\r\nfunction addSection(sections, len, ins, forceJoin = false) {\r\n    if (len == 0 && ins <= 0)\r\n        return;\r\n    let last = sections.length - 2;\r\n    if (last >= 0 && ins <= 0 && ins == sections[last + 1])\r\n        sections[last] += len;\r\n    else if (len == 0 && sections[last] == 0)\r\n        sections[last + 1] += ins;\r\n    else if (forceJoin) {\r\n        sections[last] += len;\r\n        sections[last + 1] += ins;\r\n    }\r\n    else\r\n        sections.push(len, ins);\r\n}\r\nfunction addInsert(values, sections, value) {\r\n    if (value.length == 0)\r\n        return;\r\n    let index = (sections.length - 2) >> 1;\r\n    if (index < values.length) {\r\n        values[values.length - 1] = values[values.length - 1].append(value);\r\n    }\r\n    else {\r\n        while (values.length < index)\r\n            values.push(_text_js__WEBPACK_IMPORTED_MODULE_0__.Text.empty);\r\n        values.push(value);\r\n    }\r\n}\r\nfunction iterChanges(desc, f, individual) {\r\n    let inserted = desc.inserted;\r\n    for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {\r\n        let len = desc.sections[i++], ins = desc.sections[i++];\r\n        if (ins < 0) {\r\n            posA += len;\r\n            posB += len;\r\n        }\r\n        else {\r\n            let endA = posA, endB = posB, text = _text_js__WEBPACK_IMPORTED_MODULE_0__.Text.empty;\r\n            for (;;) {\r\n                endA += len;\r\n                endB += ins;\r\n                if (ins && inserted)\r\n                    text = text.append(inserted[(i - 2) >> 1]);\r\n                if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)\r\n                    break;\r\n                len = desc.sections[i++];\r\n                ins = desc.sections[i++];\r\n            }\r\n            f(posA, endA, posB, endB, text);\r\n            posA = endA;\r\n            posB = endB;\r\n        }\r\n    }\r\n}\r\nfunction mapSet(setA, setB, before, mkSet = false) {\r\n    let sections = [], insert = mkSet ? [] : null;\r\n    let a = new SectionIter(setA), b = new SectionIter(setB);\r\n    for (let posA = 0, posB = 0;;) {\r\n        if (a.ins == -1) {\r\n            posA += a.len;\r\n            a.next();\r\n        }\r\n        else if (b.ins == -1 && posB < posA) {\r\n            let skip = Math.min(b.len, posA - posB);\r\n            b.forward(skip);\r\n            addSection(sections, skip, -1);\r\n            posB += skip;\r\n        }\r\n        else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {\r\n            addSection(sections, b.ins, -1);\r\n            while (posA > posB && !a.done && posA + a.len < posB + b.len) {\r\n                posA += a.len;\r\n                a.next();\r\n            }\r\n            posB += b.len;\r\n            b.next();\r\n        }\r\n        else if (a.ins >= 0) {\r\n            let len = 0, end = posA + a.len;\r\n            for (;;) {\r\n                if (b.ins >= 0 && posB > posA && posB + b.len < end) {\r\n                    len += b.ins;\r\n                    posB += b.len;\r\n                    b.next();\r\n                }\r\n                else if (b.ins == -1 && posB < end) {\r\n                    let skip = Math.min(b.len, end - posB);\r\n                    len += skip;\r\n                    b.forward(skip);\r\n                    posB += skip;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            addSection(sections, len, a.ins);\r\n            if (insert)\r\n                addInsert(insert, sections, a.text);\r\n            posA = end;\r\n            a.next();\r\n        }\r\n        else if (a.done && b.done) {\r\n            return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);\r\n        }\r\n        else {\r\n            throw new Error(\"Mismatched change set lengths\");\r\n        }\r\n    }\r\n}\r\nfunction composeSets(setA, setB, mkSet = false) {\r\n    let sections = [];\r\n    let insert = mkSet ? [] : null;\r\n    let a = new SectionIter(setA), b = new SectionIter(setB);\r\n    for (let open = false;;) {\r\n        if (a.done && b.done) {\r\n            return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);\r\n        }\r\n        else if (a.ins == 0) { // Deletion in A\r\n            addSection(sections, a.len, 0, open);\r\n            a.next();\r\n        }\r\n        else if (b.len == 0 && !b.done) { // Insertion in B\r\n            addSection(sections, 0, b.ins, open);\r\n            if (insert)\r\n                addInsert(insert, sections, b.text);\r\n            b.next();\r\n        }\r\n        else if (a.done || b.done) {\r\n            throw new Error(\"Mismatched change set lengths\");\r\n        }\r\n        else {\r\n            let len = Math.min(a.len2, b.len), sectionLen = sections.length;\r\n            if (a.ins == -1) {\r\n                let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;\r\n                addSection(sections, len, insB, open);\r\n                if (insert && insB)\r\n                    addInsert(insert, sections, b.text);\r\n            }\r\n            else if (b.ins == -1) {\r\n                addSection(sections, a.off ? 0 : a.len, len, open);\r\n                if (insert)\r\n                    addInsert(insert, sections, a.textBit(len));\r\n            }\r\n            else {\r\n                addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);\r\n                if (insert && !b.off)\r\n                    addInsert(insert, sections, b.text);\r\n            }\r\n            open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);\r\n            a.forward2(len);\r\n            b.forward(len);\r\n        }\r\n    }\r\n}\r\nclass SectionIter {\r\n    constructor(set) {\r\n        this.set = set;\r\n        this.i = 0;\r\n        this.next();\r\n    }\r\n    next() {\r\n        let { sections } = this.set;\r\n        if (this.i < sections.length) {\r\n            this.len = sections[this.i++];\r\n            this.ins = sections[this.i++];\r\n        }\r\n        else {\r\n            this.len = 0;\r\n            this.ins = -2;\r\n        }\r\n        this.off = 0;\r\n    }\r\n    get done() { return this.ins == -2; }\r\n    get len2() { return this.ins < 0 ? this.len : this.ins; }\r\n    get text() {\r\n        let { inserted } = this.set, index = (this.i - 2) >> 1;\r\n        return index >= inserted.length ? _text_js__WEBPACK_IMPORTED_MODULE_0__.Text.empty : inserted[index];\r\n    }\r\n    textBit(len) {\r\n        let { inserted } = this.set, index = (this.i - 2) >> 1;\r\n        return index >= inserted.length && !len ? _text_js__WEBPACK_IMPORTED_MODULE_0__.Text.empty\r\n            : inserted[index].slice(this.off, len == null ? undefined : this.off + len);\r\n    }\r\n    forward(len) {\r\n        if (len == this.len)\r\n            this.next();\r\n        else {\r\n            this.len -= len;\r\n            this.off += len;\r\n        }\r\n    }\r\n    forward2(len) {\r\n        if (this.ins == -1)\r\n            this.forward(len);\r\n        else if (len == this.ins)\r\n            this.next();\r\n        else {\r\n            this.ins -= len;\r\n            this.off += len;\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/state/change.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/state/char.js":
/*!*************************************************!*\
  !*** ./sys/public/js/editor/dist/state/char.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"codePointAt\": () => (/* binding */ codePointAt),\n/* harmony export */   \"codePointSize\": () => (/* binding */ codePointSize),\n/* harmony export */   \"findClusterBreak\": () => (/* binding */ findClusterBreak),\n/* harmony export */   \"fromCodePoint\": () => (/* binding */ fromCodePoint)\n/* harmony export */ });\n// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.\r\n// Each pair of elements represents a range, as an offet from the previous range and a length. Numbers are in base-36, with the empty string being a shorthand for 1.\r\nlet extend = \"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o\".split(\",\").map(s => s ? parseInt(s, 36) : 1);\r\n// Convert offsets into absolute values\r\nfor (let i = 1; i < extend.length; i++)\r\n    extend[i] += extend[i - 1];\r\nfunction isExtendingChar(code) {\r\n    for (let i = 1; i < extend.length; i += 2)\r\n        if (extend[i] > code)\r\n            return extend[i - 1] <= code;\r\n    return false;\r\n}\r\nfunction isRegionalIndicator(code) {\r\n    return code >= 0x1F1E6 && code <= 0x1F1FF;\r\n}\r\nconst ZWJ = 0x200d;\r\n/** Returns a next grapheme cluster break _after_ (not equal to) `pos` */\r\nfunction findClusterBreak(str, pos, forward = true, includeExtending = true) {\r\n    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);\r\n}\r\nfunction nextClusterBreak(str, pos, includeExtending) {\r\n    if (pos == str.length)\r\n        return pos;\r\n    // If pos is in the middle of a surrogate pair, move to its start\r\n    if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))\r\n        pos--;\r\n    let prev = codePointAt(str, pos);\r\n    pos += codePointSize(prev);\r\n    while (pos < str.length) {\r\n        let next = codePointAt(str, pos);\r\n        if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {\r\n            pos += codePointSize(next);\r\n            prev = next;\r\n        }\r\n        else if (isRegionalIndicator(next)) {\r\n            let countBefore = 0, i = pos - 2;\r\n            while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {\r\n                countBefore++;\r\n                i -= 2;\r\n            }\r\n            if (countBefore % 2 == 0)\r\n                break;\r\n            else\r\n                pos += 2;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return pos;\r\n}\r\nfunction prevClusterBreak(str, pos, includeExtending) {\r\n    while (pos > 0) {\r\n        let found = nextClusterBreak(str, pos - 2, includeExtending);\r\n        if (found < pos)\r\n            return found;\r\n        pos--;\r\n    }\r\n    return 0;\r\n}\r\nfunction surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }\r\nfunction surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }\r\n/** Find the code point at the given position in a string (like the [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt) string method). */\r\nfunction codePointAt(str, pos) {\r\n    let code0 = str.charCodeAt(pos);\r\n    if (!surrogateHigh(code0) || pos + 1 == str.length)\r\n        return code0;\r\n    let code1 = str.charCodeAt(pos + 1);\r\n    if (!surrogateLow(code1))\r\n        return code0;\r\n    return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;\r\n}\r\n/** Given a Unicode codepoint, return the JavaScript string that respresents it (like [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)). */\r\nfunction fromCodePoint(code) {\r\n    if (code <= 0xffff)\r\n        return String.fromCharCode(code);\r\n    code -= 0x10000;\r\n    return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);\r\n}\r\n/** figure out whether your character takes up 1 or 2 index positions. */\r\nfunction codePointSize(code) { return code < 0x10000 ? 1 : 2; }\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/state/char.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/state/charcategory.js":
/*!*********************************************************!*\
  !*** ./sys/public/js/editor/dist/state/charcategory.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CharCategory\": () => (/* binding */ CharCategory),\n/* harmony export */   \"makeCategorizer\": () => (/* binding */ makeCategorizer)\n/* harmony export */ });\nvar CharCategory;\r\n(function (CharCategory) {\r\n    // Word characters.\r\n    CharCategory[CharCategory[\"Word\"] = 0] = \"Word\";\r\n    // Whitespace.\r\n    CharCategory[CharCategory[\"Space\"] = 1] = \"Space\";\r\n    // Anything else.\r\n    CharCategory[CharCategory[\"Other\"] = 2] = \"Other\";\r\n})(CharCategory || (CharCategory = {}));\r\nconst nonASCIISingleCaseWordChar = /[\\u00df\\u0587\\u0590-\\u05f4\\u0600-\\u06ff\\u3040-\\u309f\\u30a0-\\u30ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\uac00-\\ud7af]/;\r\nlet wordChar;\r\ntry {\r\n    wordChar = new RegExp(\"[\\\\p{Alphabetic}\\\\p{Number}_]\", \"u\");\r\n}\r\ncatch (_) { }\r\nfunction hasWordChar(str) {\r\n    if (wordChar)\r\n        return wordChar.test(str);\r\n    for (let i = 0; i < str.length; i++) {\r\n        let ch = str[i];\r\n        if (/\\w/.test(ch) || ch > \"\\x80\" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\nfunction makeCategorizer(wordChars) {\r\n    return (char) => {\r\n        if (!/\\S/.test(char))\r\n            return CharCategory.Space;\r\n        if (hasWordChar(char))\r\n            return CharCategory.Word;\r\n        for (let i = 0; i < wordChars.length; i++)\r\n            if (char.indexOf(wordChars[i]) > -1)\r\n                return CharCategory.Word;\r\n        return CharCategory.Other;\r\n    };\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/state/charcategory.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/state/column.js":
/*!***************************************************!*\
  !*** ./sys/public/js/editor/dist/state/column.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"countColumn\": () => (/* binding */ countColumn),\n/* harmony export */   \"findColumn\": () => (/* binding */ findColumn)\n/* harmony export */ });\n/* harmony import */ var _char_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./char.js */ \"./sys/public/js/editor/dist/state/char.js\");\n\r\n/** Count the column position at the given offset into the string, taking extending characters and tab size into account. */\r\nfunction countColumn(string, tabSize, to = string.length) {\r\n    let n = 0;\r\n    for (let i = 0; i < to;) {\r\n        if (string.charCodeAt(i) == 9) {\r\n            n += tabSize - (n % tabSize);\r\n            i++;\r\n        }\r\n        else {\r\n            n++;\r\n            i = (0,_char_js__WEBPACK_IMPORTED_MODULE_0__.findClusterBreak)(string, i);\r\n        }\r\n    }\r\n    return n;\r\n}\r\n/**\r\n * Find the offset that corresponds to the given column position in a\r\n * string, taking extending characters and tab size into account. By\r\n * default, the string length is returned when it is too short to\r\n * reach the column. Pass `strict` true to make it return -1 in that\r\n * situation.\r\n */\r\nfunction findColumn(string, col, tabSize, strict) {\r\n    for (let i = 0, n = 0;;) {\r\n        if (n >= col)\r\n            return i;\r\n        if (i == string.length)\r\n            break;\r\n        n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;\r\n        i = (0,_char_js__WEBPACK_IMPORTED_MODULE_0__.findClusterBreak)(string, i);\r\n    }\r\n    return strict === true ? -1 : string.length;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/state/column.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/state/config.js":
/*!***************************************************!*\
  !*** ./sys/public/js/editor/dist/state/config.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"combineConfig\": () => (/* binding */ combineConfig)\n/* harmony export */ });\n/**\r\n * Utility function for combining behaviors to fill in a config object from an array of\r\n * provided configs. `defaults` should hold default values for all optional fields in `Config`.\r\n *\r\n * The function will, by default, error when a field gets two values that aren't `===`-equal,\r\n * but you can provide combine functions per field to do something else.\r\n */\r\nfunction combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that\r\ncombine = {}) {\r\n    let result = {};\r\n    for (let config of configs)\r\n        for (let key of Object.keys(config)) {\r\n            let value = config[key], current = result[key];\r\n            if (current === undefined)\r\n                result[key] = value;\r\n            else if (current === value || value === undefined) { } // No conflict\r\n            else if (Object.hasOwnProperty.call(combine, key))\r\n                result[key] = combine[key](current, value);\r\n            else\r\n                throw new Error(\"Config merge conflict for field \" + key);\r\n        }\r\n    for (let key in defaults)\r\n        if (result[key] === undefined)\r\n            result[key] = defaults[key];\r\n    return result;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/state/config.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/state/extension.js":
/*!******************************************************!*\
  !*** ./sys/public/js/editor/dist/state/extension.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"allowMultipleSelections\": () => (/* binding */ allowMultipleSelections),\n/* harmony export */   \"changeFilter\": () => (/* binding */ changeFilter),\n/* harmony export */   \"languageData\": () => (/* binding */ languageData),\n/* harmony export */   \"lineSeparator\": () => (/* binding */ lineSeparator),\n/* harmony export */   \"readOnly\": () => (/* binding */ readOnly),\n/* harmony export */   \"transactionExtender\": () => (/* binding */ transactionExtender),\n/* harmony export */   \"transactionFilter\": () => (/* binding */ transactionFilter)\n/* harmony export */ });\n/* harmony import */ var _facet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./facet.js */ \"./sys/public/js/editor/dist/state/facet.js\");\n\r\nconst languageData = _facet_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst allowMultipleSelections = _facet_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({\r\n    combine: values => values.some(v => v),\r\n    static: true\r\n});\r\nconst lineSeparator = _facet_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({\r\n    combine: values => values.length ? values[0] : undefined,\r\n    static: true\r\n});\r\nconst changeFilter = _facet_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst transactionFilter = _facet_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst transactionExtender = _facet_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst readOnly = _facet_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({\r\n    combine: values => values.length ? values[0] : false\r\n});\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/state/extension.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/state/facet.js":
/*!**************************************************!*\
  !*** ./sys/public/js/editor/dist/state/facet.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Compartment\": () => (/* binding */ Compartment),\n/* harmony export */   \"CompartmentInstance\": () => (/* binding */ CompartmentInstance),\n/* harmony export */   \"Configuration\": () => (/* binding */ Configuration),\n/* harmony export */   \"Facet\": () => (/* binding */ Facet),\n/* harmony export */   \"Prec\": () => (/* binding */ Prec),\n/* harmony export */   \"StateField\": () => (/* binding */ StateField),\n/* harmony export */   \"ensureAddr\": () => (/* binding */ ensureAddr),\n/* harmony export */   \"getAddr\": () => (/* binding */ getAddr)\n/* harmony export */ });\nlet nextID = 0;\r\nclass Facet {\r\n    constructor(\r\n    // @internal\r\n    combine, \r\n    // @internal\r\n    compareInput, \r\n    // @internal\r\n    compare, isStatic, \r\n    // @internal\r\n    extensions) {\r\n        this.combine = combine;\r\n        this.compareInput = compareInput;\r\n        this.compare = compare;\r\n        this.isStatic = isStatic;\r\n        this.extensions = extensions;\r\n        // @internal\r\n        this.id = nextID++;\r\n        this.default = combine([]);\r\n    }\r\n    /** Define a new facet. */\r\n    static define(config = {}) {\r\n        return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);\r\n    }\r\n    /** Returns an extension that adds the given value to this facet. */\r\n    of(value) {\r\n        return new FacetProvider([], this, 0 /* Static */, value);\r\n    }\r\n    /**\r\n     * Create an extension that computes a value for the facet from a state. You must take care to\r\n     * declare the parts of the state that this value depends on, since your function is only called\r\n     * again for a new state when one of those parts changed.\r\n     *\r\n     * In cases where your value depends only on a single field, you'll want to use the\r\n     * [`from`]{@link Facet.from} method instead.\r\n     */\r\n    compute(deps, get) {\r\n        if (this.isStatic)\r\n            throw new Error(\"Can't compute a static facet\");\r\n        return new FacetProvider(deps, this, 1 /* Single */, get);\r\n    }\r\n    /** Create an extension that computes zero or more values for this facet from a state. */\r\n    computeN(deps, get) {\r\n        if (this.isStatic)\r\n            throw new Error(\"Can't compute a static facet\");\r\n        return new FacetProvider(deps, this, 2 /* Multi */, get);\r\n    }\r\n    from(field, get) {\r\n        if (!get)\r\n            get = x => x;\r\n        return this.compute([field], state => get(state.field(field)));\r\n    }\r\n}\r\nfunction sameArray(a, b) {\r\n    return a == b || a.length == b.length && a.every((e, i) => e === b[i]);\r\n}\r\nclass FacetProvider {\r\n    constructor(dependencies, facet, type, value) {\r\n        this.dependencies = dependencies;\r\n        this.facet = facet;\r\n        this.type = type;\r\n        this.value = value;\r\n        this.id = nextID++;\r\n    }\r\n    dynamicSlot(addresses) {\r\n        var _a;\r\n        let getter = this.value;\r\n        let compare = this.facet.compareInput;\r\n        let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Multi */;\r\n        let depDoc = false, depSel = false, depAddrs = [];\r\n        for (let dep of this.dependencies) {\r\n            if (dep == \"doc\")\r\n                depDoc = true;\r\n            else if (dep == \"selection\")\r\n                depSel = true;\r\n            else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)\r\n                depAddrs.push(addresses[dep.id]);\r\n        }\r\n        return {\r\n            create(state) {\r\n                state.values[idx] = getter(state);\r\n                return 1 /* Changed */;\r\n            },\r\n            update(state, tr) {\r\n                if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {\r\n                    let newVal = getter(state);\r\n                    if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {\r\n                        state.values[idx] = newVal;\r\n                        return 1 /* Changed */;\r\n                    }\r\n                }\r\n                return 0;\r\n            },\r\n            reconfigure: (state, oldState) => {\r\n                let newVal = getter(state);\r\n                let oldAddr = oldState.config.address[id];\r\n                if (oldAddr != null) {\r\n                    let oldVal = getAddr(oldState, oldAddr);\r\n                    if (this.dependencies.every(dep => {\r\n                        return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :\r\n                            dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;\r\n                    }) || (multi ? compareArray(newVal, oldVal, compare) : compare(newVal, oldVal))) {\r\n                        state.values[idx] = oldVal;\r\n                        return 0;\r\n                    }\r\n                }\r\n                state.values[idx] = newVal;\r\n                return 1 /* Changed */;\r\n            }\r\n        };\r\n    }\r\n}\r\nfunction compareArray(a, b, compare) {\r\n    if (a.length != b.length)\r\n        return false;\r\n    for (let i = 0; i < a.length; i++)\r\n        if (!compare(a[i], b[i]))\r\n            return false;\r\n    return true;\r\n}\r\nfunction ensureAll(state, addrs) {\r\n    let changed = false;\r\n    for (let addr of addrs)\r\n        if (ensureAddr(state, addr) & 1 /* Changed */)\r\n            changed = true;\r\n    return changed;\r\n}\r\nfunction dynamicFacetSlot(addresses, facet, providers) {\r\n    let providerAddrs = providers.map(p => addresses[p.id]);\r\n    let providerTypes = providers.map(p => p.type);\r\n    let dynamic = providerAddrs.filter(p => !(p & 1));\r\n    let idx = addresses[facet.id] >> 1;\r\n    function get(state) {\r\n        let values = [];\r\n        for (let i = 0; i < providerAddrs.length; i++) {\r\n            let value = getAddr(state, providerAddrs[i]);\r\n            if (providerTypes[i] == 2 /* Multi */)\r\n                for (let val of value)\r\n                    values.push(val);\r\n            else\r\n                values.push(value);\r\n        }\r\n        return facet.combine(values);\r\n    }\r\n    return {\r\n        create(state) {\r\n            for (let addr of providerAddrs)\r\n                ensureAddr(state, addr);\r\n            state.values[idx] = get(state);\r\n            return 1 /* Changed */;\r\n        },\r\n        update(state, tr) {\r\n            if (!ensureAll(state, dynamic))\r\n                return 0;\r\n            let value = get(state);\r\n            if (facet.compare(value, state.values[idx]))\r\n                return 0;\r\n            state.values[idx] = value;\r\n            return 1 /* Changed */;\r\n        },\r\n        reconfigure(state, oldState) {\r\n            let depChanged = ensureAll(state, providerAddrs);\r\n            let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);\r\n            if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {\r\n                state.values[idx] = oldValue;\r\n                return 0;\r\n            }\r\n            let value = get(state);\r\n            if (facet.compare(value, oldValue)) {\r\n                state.values[idx] = oldValue;\r\n                return 0;\r\n            }\r\n            state.values[idx] = value;\r\n            return 1 /* Changed */;\r\n        }\r\n    };\r\n}\r\nconst initField = Facet.define({ static: true });\r\n/** Fields can store additional information in an editor state, and keep it in sync with the rest of the state. */\r\nclass StateField {\r\n    constructor(\r\n    // @internal\r\n    id, createF, updateF, compareF, \r\n    // @internal\r\n    spec) {\r\n        this.id = id;\r\n        this.createF = createF;\r\n        this.updateF = updateF;\r\n        this.compareF = compareF;\r\n        this.spec = spec;\r\n        // @internal\r\n        this.provides = undefined;\r\n    }\r\n    /** Define a state field. */\r\n    static define(config) {\r\n        let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);\r\n        if (config.provide)\r\n            field.provides = config.provide(field);\r\n        return field;\r\n    }\r\n    create(state) {\r\n        let init = state.facet(initField).find(i => i.field == this);\r\n        return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);\r\n    }\r\n    // @internal\r\n    slot(addresses) {\r\n        let idx = addresses[this.id] >> 1;\r\n        return {\r\n            create: (state) => {\r\n                state.values[idx] = this.create(state);\r\n                return 1 /* Changed */;\r\n            },\r\n            update: (state, tr) => {\r\n                let oldVal = state.values[idx];\r\n                let value = this.updateF(oldVal, tr);\r\n                if (this.compareF(oldVal, value))\r\n                    return 0;\r\n                state.values[idx] = value;\r\n                return 1 /* Changed */;\r\n            },\r\n            reconfigure: (state, oldState) => {\r\n                if (oldState.config.address[this.id] != null) {\r\n                    state.values[idx] = oldState.field(this);\r\n                    return 0;\r\n                }\r\n                state.values[idx] = this.create(state);\r\n                return 1 /* Changed */;\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * Returns an extension that enables this field and overrides the way it is initialized.\r\n     * Can be useful when you need to provide a non-default starting value for the field.\r\n     */\r\n    init(create) {\r\n        return [this, initField.of({ field: this, create })];\r\n    }\r\n    /** State field instances can be used as {@link Extension} values to enable the field in a given state. */\r\n    get extension() { return this; }\r\n}\r\nconst Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };\r\nfunction prec(value) {\r\n    return (ext) => new PrecExtension(ext, value);\r\n}\r\n/**\r\n * By default extensions are registered in the order they are found in the flattened form of\r\n * nested array that was provided. Individual extension values can be assigned a precedence to\r\n * override this. Extensions that do not have a precedence set get the precedence of the nearest\r\n * parent with a precedence, or [`default`]{@link Prec.default} if there is no such parent. The\r\n * final ordering of extensions is determined by first sorting by precedence and then by order\r\n * within each precedence.\r\n */\r\nconst Prec = {\r\n    /** The highest precedence level, for extensions that should end up near the start of the precedence ordering. */\r\n    highest: prec(Prec_.highest),\r\n    /** A higher-than-default precedence, for extensions that should come before those with default precedence. */\r\n    high: prec(Prec_.high),\r\n    /** The default precedence, which is also used for extensions without an explicit precedence. */\r\n    default: prec(Prec_.default),\r\n    /** A lower-than-default precedence. */\r\n    low: prec(Prec_.low),\r\n    /** The lowest precedence level. Meant for things that should end up near the end of the extension order. */\r\n    lowest: prec(Prec_.lowest)\r\n};\r\nclass PrecExtension {\r\n    constructor(inner, prec) {\r\n        this.inner = inner;\r\n        this.prec = prec;\r\n    }\r\n}\r\n/**\r\n * Extension compartments can be used to make a configuration dynamic. By [wrapping]{@link Compartment.of}\r\n * part of your configuration in a compartment, you can later [replace]{@link Compartment.reconfigure} that\r\n * part through a transaction.\r\n */\r\nclass Compartment {\r\n    /** Create an instance of this compartment to add to your [state configuration]{@link EditorStateConfig.extensions}. */\r\n    of(ext) { return new CompartmentInstance(this, ext); }\r\n    /** Create an [effect](#state.TransactionSpec.effects) that reconfigures this compartment. */\r\n    reconfigure(content) {\r\n        return Compartment.reconfigure.of({ compartment: this, extension: content });\r\n    }\r\n    /** Get the current content of the compartment in the state, or `undefined` if it isn't present. */\r\n    get(state) {\r\n        return state.config.compartments.get(this);\r\n    }\r\n}\r\nclass CompartmentInstance {\r\n    constructor(compartment, inner) {\r\n        this.compartment = compartment;\r\n        this.inner = inner;\r\n    }\r\n}\r\nclass Configuration {\r\n    constructor(base, compartments, dynamicSlots, address, staticValues, facets) {\r\n        this.base = base;\r\n        this.compartments = compartments;\r\n        this.dynamicSlots = dynamicSlots;\r\n        this.address = address;\r\n        this.staticValues = staticValues;\r\n        this.facets = facets;\r\n        this.statusTemplate = [];\r\n        while (this.statusTemplate.length < dynamicSlots.length)\r\n            this.statusTemplate.push(0 /* Unresolved */);\r\n    }\r\n    staticFacet(facet) {\r\n        let addr = this.address[facet.id];\r\n        return addr == null ? facet.default : this.staticValues[addr >> 1];\r\n    }\r\n    static resolve(base, compartments, oldState) {\r\n        let fields = [];\r\n        let facets = Object.create(null);\r\n        let newCompartments = new Map();\r\n        for (let ext of flatten(base, compartments, newCompartments)) {\r\n            if (ext instanceof StateField)\r\n                fields.push(ext);\r\n            else\r\n                (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);\r\n        }\r\n        let address = Object.create(null);\r\n        let staticValues = [];\r\n        let dynamicSlots = [];\r\n        for (let field of fields) {\r\n            address[field.id] = dynamicSlots.length << 1;\r\n            dynamicSlots.push(a => field.slot(a));\r\n        }\r\n        let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;\r\n        for (let id in facets) {\r\n            let providers = facets[id], facet = providers[0].facet;\r\n            let oldProviders = oldFacets && oldFacets[id] || [];\r\n            if (providers.every(p => p.type == 0 /* Static */)) {\r\n                address[facet.id] = (staticValues.length << 1) | 1;\r\n                if (sameArray(oldProviders, providers)) {\r\n                    staticValues.push(oldState.facet(facet));\r\n                }\r\n                else {\r\n                    let value = facet.combine(providers.map(p => p.value));\r\n                    staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);\r\n                }\r\n            }\r\n            else {\r\n                for (let p of providers) {\r\n                    if (p.type == 0 /* Static */) {\r\n                        address[p.id] = (staticValues.length << 1) | 1;\r\n                        staticValues.push(p.value);\r\n                    }\r\n                    else {\r\n                        address[p.id] = dynamicSlots.length << 1;\r\n                        dynamicSlots.push(a => p.dynamicSlot(a));\r\n                    }\r\n                }\r\n                address[facet.id] = dynamicSlots.length << 1;\r\n                dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));\r\n            }\r\n        }\r\n        let dynamic = dynamicSlots.map(f => f(address));\r\n        return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);\r\n    }\r\n}\r\nfunction flatten(extension, compartments, newCompartments) {\r\n    let result = [[], [], [], [], []];\r\n    let seen = new Map();\r\n    function inner(ext, prec) {\r\n        let known = seen.get(ext);\r\n        if (known != null) {\r\n            if (known <= prec)\r\n                return;\r\n            let found = result[known].indexOf(ext);\r\n            if (found > -1)\r\n                result[known].splice(found, 1);\r\n            if (ext instanceof CompartmentInstance)\r\n                newCompartments.delete(ext.compartment);\r\n        }\r\n        seen.set(ext, prec);\r\n        if (Array.isArray(ext)) {\r\n            for (let e of ext)\r\n                inner(e, prec);\r\n        }\r\n        else if (ext instanceof CompartmentInstance) {\r\n            if (newCompartments.has(ext.compartment))\r\n                throw new RangeError(`Duplicate use of compartment in extensions`);\r\n            let content = compartments.get(ext.compartment) || ext.inner;\r\n            newCompartments.set(ext.compartment, content);\r\n            inner(content, prec);\r\n        }\r\n        else if (ext instanceof PrecExtension) {\r\n            inner(ext.inner, ext.prec);\r\n        }\r\n        else if (ext instanceof StateField) {\r\n            result[prec].push(ext);\r\n            if (ext.provides)\r\n                inner(ext.provides, prec);\r\n        }\r\n        else if (ext instanceof FacetProvider) {\r\n            result[prec].push(ext);\r\n            if (ext.facet.extensions)\r\n                inner(ext.facet.extensions, prec);\r\n        }\r\n        else {\r\n            let content = ext.extension;\r\n            if (!content)\r\n                throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of state module are loaded, breaking instanceof checks.`);\r\n            inner(content, prec);\r\n        }\r\n    }\r\n    inner(extension, Prec_.default);\r\n    return result.reduce((a, b) => a.concat(b));\r\n}\r\nfunction ensureAddr(state, addr) {\r\n    if (addr & 1)\r\n        return 2 /* Computed */;\r\n    let idx = addr >> 1;\r\n    let status = state.status[idx];\r\n    if (status == 4 /* Computing */)\r\n        throw new Error(\"Cyclic dependency between fields and/or facets\");\r\n    if (status & 2 /* Computed */)\r\n        return status;\r\n    state.status[idx] = 4 /* Computing */;\r\n    let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);\r\n    return state.status[idx] = 2 /* Computed */ | changed;\r\n}\r\nfunction getAddr(state, addr) {\r\n    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/state/facet.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/state/index.js":
/*!**************************************************!*\
  !*** ./sys/public/js/editor/dist/state/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Annotation\": () => (/* reexport safe */ _transaction_js__WEBPACK_IMPORTED_MODULE_3__.Annotation),\n/* harmony export */   \"AnnotationType\": () => (/* reexport safe */ _transaction_js__WEBPACK_IMPORTED_MODULE_3__.AnnotationType),\n/* harmony export */   \"ChangeDesc\": () => (/* reexport safe */ _change_js__WEBPACK_IMPORTED_MODULE_5__.ChangeDesc),\n/* harmony export */   \"ChangeSet\": () => (/* reexport safe */ _change_js__WEBPACK_IMPORTED_MODULE_5__.ChangeSet),\n/* harmony export */   \"CharCategory\": () => (/* reexport safe */ _charcategory_js__WEBPACK_IMPORTED_MODULE_6__.CharCategory),\n/* harmony export */   \"Compartment\": () => (/* reexport safe */ _facet_js__WEBPACK_IMPORTED_MODULE_1__.Compartment),\n/* harmony export */   \"EditorSelection\": () => (/* reexport safe */ _selection_js__WEBPACK_IMPORTED_MODULE_2__.EditorSelection),\n/* harmony export */   \"EditorState\": () => (/* reexport safe */ _state_js__WEBPACK_IMPORTED_MODULE_0__.EditorState),\n/* harmony export */   \"Facet\": () => (/* reexport safe */ _facet_js__WEBPACK_IMPORTED_MODULE_1__.Facet),\n/* harmony export */   \"Line\": () => (/* reexport safe */ _text_js__WEBPACK_IMPORTED_MODULE_10__.Line),\n/* harmony export */   \"MapMode\": () => (/* reexport safe */ _change_js__WEBPACK_IMPORTED_MODULE_5__.MapMode),\n/* harmony export */   \"Prec\": () => (/* reexport safe */ _facet_js__WEBPACK_IMPORTED_MODULE_1__.Prec),\n/* harmony export */   \"Range\": () => (/* reexport safe */ _rangeset_js__WEBPACK_IMPORTED_MODULE_7__.Range),\n/* harmony export */   \"RangeSet\": () => (/* reexport safe */ _rangeset_js__WEBPACK_IMPORTED_MODULE_7__.RangeSet),\n/* harmony export */   \"RangeSetBuilder\": () => (/* reexport safe */ _rangeset_js__WEBPACK_IMPORTED_MODULE_7__.RangeSetBuilder),\n/* harmony export */   \"RangeValue\": () => (/* reexport safe */ _rangeset_js__WEBPACK_IMPORTED_MODULE_7__.RangeValue),\n/* harmony export */   \"SelectionRange\": () => (/* reexport safe */ _selection_js__WEBPACK_IMPORTED_MODULE_2__.SelectionRange),\n/* harmony export */   \"StateEffect\": () => (/* reexport safe */ _transaction_js__WEBPACK_IMPORTED_MODULE_3__.StateEffect),\n/* harmony export */   \"StateEffectType\": () => (/* reexport safe */ _transaction_js__WEBPACK_IMPORTED_MODULE_3__.StateEffectType),\n/* harmony export */   \"StateField\": () => (/* reexport safe */ _facet_js__WEBPACK_IMPORTED_MODULE_1__.StateField),\n/* harmony export */   \"Text\": () => (/* reexport safe */ _text_js__WEBPACK_IMPORTED_MODULE_10__.Text),\n/* harmony export */   \"Transaction\": () => (/* reexport safe */ _transaction_js__WEBPACK_IMPORTED_MODULE_3__.Transaction),\n/* harmony export */   \"codePointAt\": () => (/* reexport safe */ _char_js__WEBPACK_IMPORTED_MODULE_8__.codePointAt),\n/* harmony export */   \"codePointSize\": () => (/* reexport safe */ _char_js__WEBPACK_IMPORTED_MODULE_8__.codePointSize),\n/* harmony export */   \"combineConfig\": () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_4__.combineConfig),\n/* harmony export */   \"countColumn\": () => (/* reexport safe */ _column_js__WEBPACK_IMPORTED_MODULE_9__.countColumn),\n/* harmony export */   \"findClusterBreak\": () => (/* reexport safe */ _char_js__WEBPACK_IMPORTED_MODULE_8__.findClusterBreak),\n/* harmony export */   \"findColumn\": () => (/* reexport safe */ _column_js__WEBPACK_IMPORTED_MODULE_9__.findColumn),\n/* harmony export */   \"fromCodePoint\": () => (/* reexport safe */ _char_js__WEBPACK_IMPORTED_MODULE_8__.fromCodePoint)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"./sys/public/js/editor/dist/state/state.js\");\n/* harmony import */ var _facet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./facet.js */ \"./sys/public/js/editor/dist/state/facet.js\");\n/* harmony import */ var _selection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selection.js */ \"./sys/public/js/editor/dist/state/selection.js\");\n/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transaction.js */ \"./sys/public/js/editor/dist/state/transaction.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config.js */ \"./sys/public/js/editor/dist/state/config.js\");\n/* harmony import */ var _change_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./change.js */ \"./sys/public/js/editor/dist/state/change.js\");\n/* harmony import */ var _charcategory_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./charcategory.js */ \"./sys/public/js/editor/dist/state/charcategory.js\");\n/* harmony import */ var _rangeset_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./rangeset.js */ \"./sys/public/js/editor/dist/state/rangeset.js\");\n/* harmony import */ var _char_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./char.js */ \"./sys/public/js/editor/dist/state/char.js\");\n/* harmony import */ var _column_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./column.js */ \"./sys/public/js/editor/dist/state/column.js\");\n/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./text.js */ \"./sys/public/js/editor/dist/state/text.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/state/index.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/state/rangeset.js":
/*!*****************************************************!*\
  !*** ./sys/public/js/editor/dist/state/rangeset.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Range\": () => (/* binding */ Range),\n/* harmony export */   \"RangeSet\": () => (/* binding */ RangeSet),\n/* harmony export */   \"RangeSetBuilder\": () => (/* binding */ RangeSetBuilder),\n/* harmony export */   \"RangeValue\": () => (/* binding */ RangeValue)\n/* harmony export */ });\n/* harmony import */ var _change_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./change.js */ \"./sys/public/js/editor/dist/state/change.js\");\n\r\n/** Each range is associated with a value, which must inherit from this class. */\r\nclass RangeValue {\r\n    /**\r\n     * Compare this value with another value. Used when comparing rangesets. The default\r\n     * implementation compares by identity. Unless you are only creating a fixed number of\r\n     * unique instances of your value type, it is a good idea to implement this properly.\r\n     */\r\n    eq(other) { return this == other; }\r\n    /** Create a [range](#state.Range) with this value. */\r\n    range(from, to = from) { return Range.create(from, to, this); }\r\n}\r\nRangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;\r\nRangeValue.prototype.point = false;\r\nRangeValue.prototype.mapMode = _change_js__WEBPACK_IMPORTED_MODULE_0__.MapMode.TrackDel;\r\n/** A range associates a value with a range of positions. */\r\nclass Range {\r\n    constructor(\r\n    /** The range's start position. */\r\n    from, \r\n    /** Its end position. */\r\n    to, \r\n    /** The value associated with this range. */\r\n    value) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.value = value;\r\n    }\r\n    // @internal\r\n    static create(from, to, value) {\r\n        return new Range(from, to, value);\r\n    }\r\n}\r\nfunction cmpRange(a, b) {\r\n    return a.from - b.from || a.value.startSide - b.value.startSide;\r\n}\r\nclass Chunk {\r\n    constructor(from, to, value, \r\n    // Chunks are marked with the largest point that occurs\r\n    // in them (or -1 for no points), so that scans that are\r\n    // only interested in points (such as the\r\n    // heightmap-related logic) can skip range-only chunks.\r\n    maxPoint) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.value = value;\r\n        this.maxPoint = maxPoint;\r\n    }\r\n    get length() { return this.to[this.to.length - 1]; }\r\n    // Find the index of the given position and side. Use the ranges'\r\n    // `from` pos when `end == false`, `to` when `end == true`.\r\n    findIndex(pos, side, end, startAt = 0) {\r\n        let arr = end ? this.to : this.from;\r\n        for (let lo = startAt, hi = arr.length;;) {\r\n            if (lo == hi)\r\n                return lo;\r\n            let mid = (lo + hi) >> 1;\r\n            let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;\r\n            if (mid == lo)\r\n                return diff >= 0 ? lo : hi;\r\n            if (diff >= 0)\r\n                hi = mid;\r\n            else\r\n                lo = mid + 1;\r\n        }\r\n    }\r\n    between(offset, from, to, f) {\r\n        for (let i = this.findIndex(from, -1000000000 /* Far */, true), e = this.findIndex(to, 1000000000 /* Far */, false, i); i < e; i++)\r\n            if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)\r\n                return false;\r\n    }\r\n    map(offset, changes) {\r\n        let value = [], from = [], to = [], newPos = -1, maxPoint = -1;\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;\r\n            if (curFrom == curTo) {\r\n                let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);\r\n                if (mapped == null)\r\n                    continue;\r\n                newFrom = newTo = mapped;\r\n                if (val.startSide != val.endSide) {\r\n                    newTo = changes.mapPos(curFrom, val.endSide);\r\n                    if (newTo < newFrom)\r\n                        continue;\r\n                }\r\n            }\r\n            else {\r\n                newFrom = changes.mapPos(curFrom, val.startSide);\r\n                newTo = changes.mapPos(curTo, val.endSide);\r\n                if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)\r\n                    continue;\r\n            }\r\n            if ((newTo - newFrom || val.endSide - val.startSide) < 0)\r\n                continue;\r\n            if (newPos < 0)\r\n                newPos = newFrom;\r\n            if (val.point)\r\n                maxPoint = Math.max(maxPoint, newTo - newFrom);\r\n            value.push(val);\r\n            from.push(newFrom - newPos);\r\n            to.push(newTo - newPos);\r\n        }\r\n        return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };\r\n    }\r\n}\r\n/**\r\n * A range set stores a collection of [ranges]{@link Range} in a way that makes them efficient to\r\n * [map]{@link map} and [update]{@link update}. This is an immutable data structure.\r\n */\r\nclass RangeSet {\r\n    constructor(\r\n    // @internal\r\n    chunkPos, \r\n    // @internal\r\n    chunk, \r\n    // @internal\r\n    nextLayer, \r\n    // @internal\r\n    maxPoint) {\r\n        this.chunkPos = chunkPos;\r\n        this.chunk = chunk;\r\n        this.nextLayer = nextLayer;\r\n        this.maxPoint = maxPoint;\r\n    }\r\n    // @internal\r\n    static create(chunkPos, chunk, nextLayer, maxPoint) {\r\n        return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);\r\n    }\r\n    // @internal\r\n    get length() {\r\n        let last = this.chunk.length - 1;\r\n        return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);\r\n    }\r\n    /** The number of ranges in the set. */\r\n    get size() {\r\n        if (this.isEmpty)\r\n            return 0;\r\n        let size = this.nextLayer.size;\r\n        for (let chunk of this.chunk)\r\n            size += chunk.value.length;\r\n        return size;\r\n    }\r\n    // @internal\r\n    chunkEnd(index) {\r\n        return this.chunkPos[index] + this.chunk[index].length;\r\n    }\r\n    /** Update the range set, optionally adding new ranges or filtering out existing ones. */\r\n    update(updateSpec) {\r\n        let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;\r\n        let filter = updateSpec.filter;\r\n        if (add.length == 0 && !filter)\r\n            return this;\r\n        if (sort)\r\n            add = add.slice().sort(cmpRange);\r\n        if (this.isEmpty)\r\n            return add.length ? RangeSet.of(add) : this;\r\n        let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];\r\n        let builder = new RangeSetBuilder();\r\n        while (cur.value || i < add.length) {\r\n            if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {\r\n                let range = add[i++];\r\n                if (!builder.addInner(range.from, range.to, range.value))\r\n                    spill.push(range);\r\n            }\r\n            else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&\r\n                (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&\r\n                (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&\r\n                builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {\r\n                cur.nextChunk();\r\n            }\r\n            else {\r\n                if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {\r\n                    if (!builder.addInner(cur.from, cur.to, cur.value))\r\n                        spill.push(Range.create(cur.from, cur.to, cur.value));\r\n                }\r\n                cur.next();\r\n            }\r\n        }\r\n        return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty\r\n            : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));\r\n    }\r\n    /** Map this range set through a set of changes, return the new set. */\r\n    map(changes) {\r\n        if (changes.empty || this.isEmpty)\r\n            return this;\r\n        let chunks = [], chunkPos = [], maxPoint = -1;\r\n        for (let i = 0; i < this.chunk.length; i++) {\r\n            let start = this.chunkPos[i], chunk = this.chunk[i];\r\n            let touch = changes.touchesRange(start, start + chunk.length);\r\n            if (touch === false) {\r\n                maxPoint = Math.max(maxPoint, chunk.maxPoint);\r\n                chunks.push(chunk);\r\n                chunkPos.push(changes.mapPos(start));\r\n            }\r\n            else if (touch === true) {\r\n                let { mapped, pos } = chunk.map(start, changes);\r\n                if (mapped) {\r\n                    maxPoint = Math.max(maxPoint, mapped.maxPoint);\r\n                    chunks.push(mapped);\r\n                    chunkPos.push(pos);\r\n                }\r\n            }\r\n        }\r\n        let next = this.nextLayer.map(changes);\r\n        return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);\r\n    }\r\n    /**\r\n     * Iterate over the ranges that touch the region `from` to `to`, calling `f` for each. There\r\n     * is no guarantee that the ranges will be reported in any specific order. When the callback\r\n     * returns `false`, iteration stops.\r\n     */\r\n    between(from, to, f) {\r\n        if (this.isEmpty)\r\n            return;\r\n        for (let i = 0; i < this.chunk.length; i++) {\r\n            let start = this.chunkPos[i], chunk = this.chunk[i];\r\n            if (to >= start && from <= start + chunk.length &&\r\n                chunk.between(start, from - start, to - start, f) === false)\r\n                return;\r\n        }\r\n        this.nextLayer.between(from, to, f);\r\n    }\r\n    /** Iterate over the ranges in this set, in order, including all ranges that end at or after `from`. */\r\n    iter(from = 0) {\r\n        return HeapCursor.from([this]).goto(from);\r\n    }\r\n    // @internal\r\n    get isEmpty() { return this.nextLayer == this; }\r\n    /** Iterate over the ranges in a collection of sets, in order, starting from `from`. */\r\n    static iter(sets, from = 0) {\r\n        return HeapCursor.from(sets).goto(from);\r\n    }\r\n    /** Iterate over two groups of sets, calling methods on `comparator` to notify it of possible differences. */\r\n    static compare(oldSets, newSets, \r\n    // This indicates how the underlying data changed between these\r\n    // ranges, and is needed to synchronize the iteration. `from` and\r\n    // `to` are coordinates in the _new_ space, after these changes.\r\n    textDiff, comparator, \r\n    // Can be used to ignore all non-point ranges, and points below the given size. When -1, all ranges are compared.\r\n    minPointSize = -1) {\r\n        let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);\r\n        let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);\r\n        let sharedChunks = findSharedChunks(a, b, textDiff);\r\n        let sideA = new SpanCursor(a, sharedChunks, minPointSize);\r\n        let sideB = new SpanCursor(b, sharedChunks, minPointSize);\r\n        textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));\r\n        if (textDiff.empty && textDiff.length == 0)\r\n            compare(sideA, 0, sideB, 0, 0, comparator);\r\n    }\r\n    /** Compare the contents of two groups of range sets, returning true if they are equivalent in the given range. */\r\n    static eq(oldSets, newSets, from = 0, to) {\r\n        if (to == null)\r\n            to = 1000000000 /* Far */;\r\n        let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);\r\n        let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);\r\n        if (a.length != b.length)\r\n            return false;\r\n        if (!a.length)\r\n            return true;\r\n        let sharedChunks = findSharedChunks(a, b);\r\n        let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);\r\n        for (;;) {\r\n            if (sideA.to != sideB.to ||\r\n                !sameValues(sideA.active, sideB.active) ||\r\n                sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))\r\n                return false;\r\n            if (sideA.to > to)\r\n                return true;\r\n            sideA.next();\r\n            sideB.next();\r\n        }\r\n    }\r\n    /**\r\n     * Iterate over a group of range sets at the same time, notifying the iterator about the ranges\r\n     * covering every given piece of content. Returns the open count (see {@link SpanIterator.span})\r\n     * at the end of the iteration.\r\n     */\r\n    static spans(sets, from, to, iterator, \r\n    /** When given and greater than -1, only points of at least this size are taken into account. */\r\n    minPointSize = -1) {\r\n        let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;\r\n        let open = cursor.openStart;\r\n        for (;;) {\r\n            let curTo = Math.min(cursor.to, to);\r\n            if (cursor.point) {\r\n                iterator.point(pos, curTo, cursor.point, cursor.activeForPoint(cursor.to), open, cursor.pointRank);\r\n                open = cursor.openEnd(curTo) + (cursor.to > curTo ? 1 : 0);\r\n            }\r\n            else if (curTo > pos) {\r\n                iterator.span(pos, curTo, cursor.active, open);\r\n                open = cursor.openEnd(curTo);\r\n            }\r\n            if (cursor.to > to)\r\n                break;\r\n            pos = cursor.to;\r\n            cursor.next();\r\n        }\r\n        return open;\r\n    }\r\n    /**\r\n     * Create a range set for the given range or array of ranges. By default, this expects the\r\n     * ranges to be _sorted_ (by start position and, if two start at the same position,\r\n     * `value.startSide`). You can pass `true` as second argument to cause the method to sort them.\r\n     */\r\n    static of(ranges, sort = false) {\r\n        let build = new RangeSetBuilder();\r\n        for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)\r\n            build.add(range.from, range.to, range.value);\r\n        return build.finish();\r\n    }\r\n}\r\n/** The empty set of ranges. */\r\nRangeSet.empty = new RangeSet([], [], null, -1);\r\nfunction lazySort(ranges) {\r\n    if (ranges.length > 1)\r\n        for (let prev = ranges[0], i = 1; i < ranges.length; i++) {\r\n            let cur = ranges[i];\r\n            if (cmpRange(prev, cur) > 0)\r\n                return ranges.slice().sort(cmpRange);\r\n            prev = cur;\r\n        }\r\n    return ranges;\r\n}\r\n// Awkward patch-up to create a cyclic structure.\r\n;\r\nRangeSet.empty.nextLayer = RangeSet.empty;\r\n/**\r\n * A range set builder is a data structure that helps build up a [range set]{@link RangeSet}\r\n * directly, without first allocating an array of [`Range`]{@link Range} objects.\r\n */\r\nclass RangeSetBuilder {\r\n    /** Create an empty builder. */\r\n    constructor() {\r\n        this.chunks = [];\r\n        this.chunkPos = [];\r\n        this.chunkStart = -1;\r\n        this.last = null;\r\n        this.lastFrom = -1000000000 /* Far */;\r\n        this.lastTo = -1000000000 /* Far */;\r\n        this.from = [];\r\n        this.to = [];\r\n        this.value = [];\r\n        this.maxPoint = -1;\r\n        this.setMaxPoint = -1;\r\n        this.nextLayer = null;\r\n    }\r\n    finishChunk(newArrays) {\r\n        this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));\r\n        this.chunkPos.push(this.chunkStart);\r\n        this.chunkStart = -1;\r\n        this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);\r\n        this.maxPoint = -1;\r\n        if (newArrays) {\r\n            this.from = [];\r\n            this.to = [];\r\n            this.value = [];\r\n        }\r\n    }\r\n    /** Add a range. Ranges should be added in sorted (by `from` and `value.startSide`) order. */\r\n    add(from, to, value) {\r\n        if (!this.addInner(from, to, value))\r\n            (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);\r\n    }\r\n    // @internal\r\n    addInner(from, to, value) {\r\n        let diff = from - this.lastTo || value.startSide - this.last.endSide;\r\n        if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)\r\n            throw new Error(\"Ranges must be added sorted by `from` position and `startSide`\");\r\n        if (diff < 0)\r\n            return false;\r\n        if (this.from.length == 250 /* ChunkSize */)\r\n            this.finishChunk(true);\r\n        if (this.chunkStart < 0)\r\n            this.chunkStart = from;\r\n        this.from.push(from - this.chunkStart);\r\n        this.to.push(to - this.chunkStart);\r\n        this.last = value;\r\n        this.lastFrom = from;\r\n        this.lastTo = to;\r\n        this.value.push(value);\r\n        if (value.point)\r\n            this.maxPoint = Math.max(this.maxPoint, to - from);\r\n        return true;\r\n    }\r\n    // @internal\r\n    addChunk(from, chunk) {\r\n        if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)\r\n            return false;\r\n        if (this.from.length)\r\n            this.finishChunk(true);\r\n        this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);\r\n        this.chunks.push(chunk);\r\n        this.chunkPos.push(from);\r\n        let last = chunk.value.length - 1;\r\n        this.last = chunk.value[last];\r\n        this.lastFrom = chunk.from[last] + from;\r\n        this.lastTo = chunk.to[last] + from;\r\n        return true;\r\n    }\r\n    /** Finish the range set. Returns the new set. The builder can't be used anymore after this has been called. */\r\n    finish() { return this.finishInner(RangeSet.empty); }\r\n    // @internal\r\n    finishInner(next) {\r\n        if (this.from.length)\r\n            this.finishChunk(false);\r\n        if (this.chunks.length == 0)\r\n            return next;\r\n        let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);\r\n        this.from = null; // Make sure further `add` calls produce errors\r\n        return result;\r\n    }\r\n}\r\nfunction findSharedChunks(a, b, textDiff) {\r\n    let inA = new Map();\r\n    for (let set of a)\r\n        for (let i = 0; i < set.chunk.length; i++)\r\n            if (set.chunk[i].maxPoint <= 0)\r\n                inA.set(set.chunk[i], set.chunkPos[i]);\r\n    let shared = new Set();\r\n    for (let set of b)\r\n        for (let i = 0; i < set.chunk.length; i++) {\r\n            let known = inA.get(set.chunk[i]);\r\n            if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&\r\n                !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))\r\n                shared.add(set.chunk[i]);\r\n        }\r\n    return shared;\r\n}\r\nclass LayerCursor {\r\n    constructor(layer, skip, minPoint, rank = 0) {\r\n        this.layer = layer;\r\n        this.skip = skip;\r\n        this.minPoint = minPoint;\r\n        this.rank = rank;\r\n    }\r\n    get startSide() { return this.value ? this.value.startSide : 0; }\r\n    get endSide() { return this.value ? this.value.endSide : 0; }\r\n    goto(pos, side = -1000000000 /* Far */) {\r\n        this.chunkIndex = this.rangeIndex = 0;\r\n        this.gotoInner(pos, side, false);\r\n        return this;\r\n    }\r\n    gotoInner(pos, side, forward) {\r\n        while (this.chunkIndex < this.layer.chunk.length) {\r\n            let next = this.layer.chunk[this.chunkIndex];\r\n            if (!(this.skip && this.skip.has(next) ||\r\n                this.layer.chunkEnd(this.chunkIndex) < pos ||\r\n                next.maxPoint < this.minPoint))\r\n                break;\r\n            this.chunkIndex++;\r\n            forward = false;\r\n        }\r\n        if (this.chunkIndex < this.layer.chunk.length) {\r\n            let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);\r\n            if (!forward || this.rangeIndex < rangeIndex)\r\n                this.setRangeIndex(rangeIndex);\r\n        }\r\n        this.next();\r\n    }\r\n    forward(pos, side) {\r\n        if ((this.to - pos || this.endSide - side) < 0)\r\n            this.gotoInner(pos, side, true);\r\n    }\r\n    next() {\r\n        for (;;) {\r\n            if (this.chunkIndex == this.layer.chunk.length) {\r\n                this.from = this.to = 1000000000 /* Far */;\r\n                this.value = null;\r\n                break;\r\n            }\r\n            else {\r\n                let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];\r\n                let from = chunkPos + chunk.from[this.rangeIndex];\r\n                this.from = from;\r\n                this.to = chunkPos + chunk.to[this.rangeIndex];\r\n                this.value = chunk.value[this.rangeIndex];\r\n                this.setRangeIndex(this.rangeIndex + 1);\r\n                if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    setRangeIndex(index) {\r\n        if (index == this.layer.chunk[this.chunkIndex].value.length) {\r\n            this.chunkIndex++;\r\n            if (this.skip) {\r\n                while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))\r\n                    this.chunkIndex++;\r\n            }\r\n            this.rangeIndex = 0;\r\n        }\r\n        else {\r\n            this.rangeIndex = index;\r\n        }\r\n    }\r\n    nextChunk() {\r\n        this.chunkIndex++;\r\n        this.rangeIndex = 0;\r\n        this.next();\r\n    }\r\n    compare(other) {\r\n        return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||\r\n            this.to - other.to || this.endSide - other.endSide;\r\n    }\r\n}\r\nclass HeapCursor {\r\n    constructor(heap) {\r\n        this.heap = heap;\r\n    }\r\n    static from(sets, skip = null, minPoint = -1) {\r\n        let heap = [];\r\n        for (let i = 0; i < sets.length; i++) {\r\n            for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {\r\n                if (cur.maxPoint >= minPoint)\r\n                    heap.push(new LayerCursor(cur, skip, minPoint, i));\r\n            }\r\n        }\r\n        return heap.length == 1 ? heap[0] : new HeapCursor(heap);\r\n    }\r\n    get startSide() { return this.value ? this.value.startSide : 0; }\r\n    goto(pos, side = -1000000000 /* Far */) {\r\n        for (let cur of this.heap)\r\n            cur.goto(pos, side);\r\n        for (let i = this.heap.length >> 1; i >= 0; i--)\r\n            heapBubble(this.heap, i);\r\n        this.next();\r\n        return this;\r\n    }\r\n    forward(pos, side) {\r\n        for (let cur of this.heap)\r\n            cur.forward(pos, side);\r\n        for (let i = this.heap.length >> 1; i >= 0; i--)\r\n            heapBubble(this.heap, i);\r\n        if ((this.to - pos || this.value.endSide - side) < 0)\r\n            this.next();\r\n    }\r\n    next() {\r\n        if (this.heap.length == 0) {\r\n            this.from = this.to = 1000000000 /* Far */;\r\n            this.value = null;\r\n            this.rank = -1;\r\n        }\r\n        else {\r\n            let top = this.heap[0];\r\n            this.from = top.from;\r\n            this.to = top.to;\r\n            this.value = top.value;\r\n            this.rank = top.rank;\r\n            if (top.value)\r\n                top.next();\r\n            heapBubble(this.heap, 0);\r\n        }\r\n    }\r\n}\r\nfunction heapBubble(heap, index) {\r\n    for (let cur = heap[index];;) {\r\n        let childIndex = (index << 1) + 1;\r\n        if (childIndex >= heap.length)\r\n            break;\r\n        let child = heap[childIndex];\r\n        if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {\r\n            child = heap[childIndex + 1];\r\n            childIndex++;\r\n        }\r\n        if (cur.compare(child) < 0)\r\n            break;\r\n        heap[childIndex] = cur;\r\n        heap[index] = child;\r\n        index = childIndex;\r\n    }\r\n}\r\nclass SpanCursor {\r\n    constructor(sets, skip, minPoint) {\r\n        this.minPoint = minPoint;\r\n        this.active = [];\r\n        this.activeTo = [];\r\n        this.activeRank = [];\r\n        this.minActive = -1;\r\n        // A currently active point range, if any\r\n        this.point = null;\r\n        this.pointFrom = 0;\r\n        this.pointRank = 0;\r\n        this.to = -1000000000 /* Far */;\r\n        this.endSide = 0;\r\n        this.openStart = -1;\r\n        this.cursor = HeapCursor.from(sets, skip, minPoint);\r\n    }\r\n    goto(pos, side = -1000000000 /* Far */) {\r\n        this.cursor.goto(pos, side);\r\n        this.active.length = this.activeTo.length = this.activeRank.length = 0;\r\n        this.minActive = -1;\r\n        this.to = pos;\r\n        this.endSide = side;\r\n        this.openStart = -1;\r\n        this.next();\r\n        return this;\r\n    }\r\n    forward(pos, side) {\r\n        while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)\r\n            this.removeActive(this.minActive);\r\n        this.cursor.forward(pos, side);\r\n    }\r\n    removeActive(index) {\r\n        remove(this.active, index);\r\n        remove(this.activeTo, index);\r\n        remove(this.activeRank, index);\r\n        this.minActive = findMinIndex(this.active, this.activeTo);\r\n    }\r\n    addActive(trackOpen) {\r\n        let i = 0, { value, to, rank } = this.cursor;\r\n        while (i < this.activeRank.length && this.activeRank[i] <= rank)\r\n            i++;\r\n        insert(this.active, i, value);\r\n        insert(this.activeTo, i, to);\r\n        insert(this.activeRank, i, rank);\r\n        if (trackOpen)\r\n            insert(trackOpen, i, this.cursor.from);\r\n        this.minActive = findMinIndex(this.active, this.activeTo);\r\n    }\r\n    // After calling this, if `this.point` != null, the next range is a\r\n    // point. Otherwise, it's a regular range, covered by `this.active`.\r\n    next() {\r\n        let from = this.to, wasPoint = this.point;\r\n        this.point = null;\r\n        let trackOpen = this.openStart < 0 ? [] : null, trackExtra = 0;\r\n        for (;;) {\r\n            let a = this.minActive;\r\n            if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {\r\n                if (this.activeTo[a] > from) {\r\n                    this.to = this.activeTo[a];\r\n                    this.endSide = this.active[a].endSide;\r\n                    break;\r\n                }\r\n                this.removeActive(a);\r\n                if (trackOpen)\r\n                    remove(trackOpen, a);\r\n            }\r\n            else if (!this.cursor.value) {\r\n                this.to = this.endSide = 1000000000 /* Far */;\r\n                break;\r\n            }\r\n            else if (this.cursor.from > from) {\r\n                this.to = this.cursor.from;\r\n                this.endSide = this.cursor.startSide;\r\n                break;\r\n            }\r\n            else {\r\n                let nextVal = this.cursor.value;\r\n                if (!nextVal.point) { // Opening a range\r\n                    this.addActive(trackOpen);\r\n                    this.cursor.next();\r\n                }\r\n                else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {\r\n                    // Ignore any non-empty points that end precisely at the end of the prev point\r\n                    this.cursor.next();\r\n                }\r\n                else { // New point\r\n                    this.point = nextVal;\r\n                    this.pointFrom = this.cursor.from;\r\n                    this.pointRank = this.cursor.rank;\r\n                    this.to = this.cursor.to;\r\n                    this.endSide = nextVal.endSide;\r\n                    if (this.cursor.from < from)\r\n                        trackExtra = 1;\r\n                    this.cursor.next();\r\n                    this.forward(this.to, this.endSide);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (trackOpen) {\r\n            let openStart = 0;\r\n            while (openStart < trackOpen.length && trackOpen[openStart] < from)\r\n                openStart++;\r\n            this.openStart = openStart + trackExtra;\r\n        }\r\n    }\r\n    activeForPoint(to) {\r\n        if (!this.active.length)\r\n            return this.active;\r\n        let active = [];\r\n        for (let i = this.active.length - 1; i >= 0; i--) {\r\n            if (this.activeRank[i] < this.pointRank)\r\n                break;\r\n            if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)\r\n                active.push(this.active[i]);\r\n        }\r\n        return active.reverse();\r\n    }\r\n    openEnd(to) {\r\n        let open = 0;\r\n        for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)\r\n            open++;\r\n        return open;\r\n    }\r\n}\r\nfunction compare(a, startA, b, startB, length, comparator) {\r\n    a.goto(startA);\r\n    b.goto(startB);\r\n    let endB = startB + length;\r\n    let pos = startB, dPos = startB - startA;\r\n    for (;;) {\r\n        let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;\r\n        let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);\r\n        if (a.point || b.point) {\r\n            if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&\r\n                sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to))))\r\n                comparator.comparePoint(pos, clipEnd, a.point, b.point);\r\n        }\r\n        else {\r\n            if (clipEnd > pos && !sameValues(a.active, b.active))\r\n                comparator.compareRange(pos, clipEnd, a.active, b.active);\r\n        }\r\n        if (end > endB)\r\n            break;\r\n        pos = end;\r\n        if (diff <= 0)\r\n            a.next();\r\n        if (diff >= 0)\r\n            b.next();\r\n    }\r\n}\r\nfunction sameValues(a, b) {\r\n    if (a.length != b.length)\r\n        return false;\r\n    for (let i = 0; i < a.length; i++)\r\n        if (a[i] != b[i] && !a[i].eq(b[i]))\r\n            return false;\r\n    return true;\r\n}\r\nfunction remove(array, index) {\r\n    for (let i = index, e = array.length - 1; i < e; i++)\r\n        array[i] = array[i + 1];\r\n    array.pop();\r\n}\r\nfunction insert(array, index, value) {\r\n    for (let i = array.length - 1; i >= index; i--)\r\n        array[i + 1] = array[i];\r\n    array[index] = value;\r\n}\r\nfunction findMinIndex(value, array) {\r\n    let found = -1, foundPos = 1000000000 /* Far */;\r\n    for (let i = 0; i < array.length; i++)\r\n        if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {\r\n            found = i;\r\n            foundPos = array[i];\r\n        }\r\n    return found;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/state/rangeset.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/state/selection.js":
/*!******************************************************!*\
  !*** ./sys/public/js/editor/dist/state/selection.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EditorSelection\": () => (/* binding */ EditorSelection),\n/* harmony export */   \"SelectionRange\": () => (/* binding */ SelectionRange),\n/* harmony export */   \"checkSelection\": () => (/* binding */ checkSelection)\n/* harmony export */ });\n/**\r\n * A single selection range. When {@link allowMultipleSelections} is enabled, a [selection]{@link EditorSelection}\r\n * may hold multiple ranges. By default, selections hold exactly one range.\r\n */\r\nclass SelectionRange {\r\n    constructor(\r\n    /** The lower boundary of the range. */\r\n    from, \r\n    /** The upper boundary of the range. */\r\n    to, flags) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.flags = flags;\r\n    }\r\n    /** The anchor of the range—the side that doesn't move when you extend it. */\r\n    get anchor() { return this.flags & 16 /* Inverted */ ? this.to : this.from; }\r\n    /** The head of the range, which is moved when the range is [extended]{@link SelectionRange.extend}. */\r\n    get head() { return this.flags & 16 /* Inverted */ ? this.from : this.to; }\r\n    /** True when `anchor` and `head` are at the same position. */\r\n    get empty() { return this.from == this.to; }\r\n    /**\r\n     * If this is a cursor that is explicitly associated with the character on one of its sides, this\r\n     * returns the side. -1 means the character before its position, 1 the character after, and 0 means\r\n     * no association.\r\n     */\r\n    get assoc() { return this.flags & 4 /* AssocBefore */ ? -1 : this.flags & 8 /* AssocAfter */ ? 1 : 0; }\r\n    /** The bidirectional text level associated with this cursor, if any. */\r\n    get bidiLevel() {\r\n        let level = this.flags & 3 /* BidiLevelMask */;\r\n        return level == 3 ? null : level;\r\n    }\r\n    /**\r\n     * The goal column (stored vertical offset) associated with a cursor. This is used to preserve the\r\n     * vertical position when [moving]{@link EditorView.moveVertically} across lines of different length.\r\n     */\r\n    get goalColumn() {\r\n        let value = this.flags >> 5 /* GoalColumnOffset */;\r\n        return value == 33554431 /* NoGoalColumn */ ? undefined : value;\r\n    }\r\n    /** Map this range through a change, producing a valid range in the updated document. */\r\n    map(change, assoc = -1) {\r\n        let from, to;\r\n        if (this.empty) {\r\n            from = to = change.mapPos(this.from, assoc);\r\n        }\r\n        else {\r\n            from = change.mapPos(this.from, 1);\r\n            to = change.mapPos(this.to, -1);\r\n        }\r\n        return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);\r\n    }\r\n    /** Extend this range to cover at least `from` to `to`. */\r\n    extend(from, to = from) {\r\n        if (from <= this.anchor && to >= this.anchor)\r\n            return EditorSelection.range(from, to);\r\n        let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;\r\n        return EditorSelection.range(this.anchor, head);\r\n    }\r\n    /** Compare this range to another range. */\r\n    eq(other) {\r\n        return this.anchor == other.anchor && this.head == other.head;\r\n    }\r\n    /** Return a JSON-serializable object representing the range. */\r\n    toJSON() { return { anchor: this.anchor, head: this.head }; }\r\n    /** Convert a JSON representation of a range to a `SelectionRange` instance. */\r\n    static fromJSON(json) {\r\n        if (!json || typeof json.anchor != \"number\" || typeof json.head != \"number\")\r\n            throw new RangeError(\"Invalid JSON representation for SelectionRange\");\r\n        return EditorSelection.range(json.anchor, json.head);\r\n    }\r\n    // @internal\r\n    static create(from, to, flags) {\r\n        return new SelectionRange(from, to, flags);\r\n    }\r\n}\r\n/** An editor selection holds one or more selection ranges. */\r\nclass EditorSelection {\r\n    constructor(\r\n    /** The ranges in the selection, sorted by position. Ranges cannot overlap (but they may touch, if they aren't empty). */\r\n    ranges, \r\n    /** The index of the _main_ range in the selection (which is usually the range that was added last). */\r\n    mainIndex) {\r\n        this.ranges = ranges;\r\n        this.mainIndex = mainIndex;\r\n    }\r\n    /** Map a selection through a change. Used to adjust the selection position for changes. */\r\n    map(change, assoc = -1) {\r\n        if (change.empty)\r\n            return this;\r\n        return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);\r\n    }\r\n    /** Compare this selection to another selection. */\r\n    eq(other) {\r\n        if (this.ranges.length != other.ranges.length ||\r\n            this.mainIndex != other.mainIndex)\r\n            return false;\r\n        for (let i = 0; i < this.ranges.length; i++)\r\n            if (!this.ranges[i].eq(other.ranges[i]))\r\n                return false;\r\n        return true;\r\n    }\r\n    /**\r\n     * Get the primary selection range. Usually, you should make sure your code applies to _all_ ranges,\r\n     * by using methods like [`changeByRange`]{@link EditorState.changeByRange}.\r\n     */\r\n    get main() { return this.ranges[this.mainIndex]; }\r\n    /** Make sure the selection only has one range. Returns a selection holding only the main range from this selection. */\r\n    asSingle() {\r\n        return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);\r\n    }\r\n    /** Extend this selection with an extra range. */\r\n    addRange(range, main = true) {\r\n        return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);\r\n    }\r\n    /** Replace a given range with another range, and then normalize the selection to merge and sort ranges if necessary. */\r\n    replaceRange(range, which = this.mainIndex) {\r\n        let ranges = this.ranges.slice();\r\n        ranges[which] = range;\r\n        return EditorSelection.create(ranges, this.mainIndex);\r\n    }\r\n    /** Convert this selection to an object that can be serialized to JSON. */\r\n    toJSON() {\r\n        return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };\r\n    }\r\n    /** Create a selection from a JSON representation. */\r\n    static fromJSON(json) {\r\n        if (!json || !Array.isArray(json.ranges) || typeof json.main != \"number\" || json.main >= json.ranges.length)\r\n            throw new RangeError(\"Invalid JSON representation for EditorSelection\");\r\n        return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);\r\n    }\r\n    /** Create a selection holding a single range. */\r\n    static single(anchor, head = anchor) {\r\n        return new EditorSelection([EditorSelection.range(anchor, head)], 0);\r\n    }\r\n    /** Sort and merge the given set of ranges, creating a valid selection. */\r\n    static create(ranges, mainIndex = 0) {\r\n        if (ranges.length == 0)\r\n            throw new RangeError(\"A selection needs at least one range\");\r\n        for (let pos = 0, i = 0; i < ranges.length; i++) {\r\n            let range = ranges[i];\r\n            if (range.empty ? range.from <= pos : range.from < pos)\r\n                return EditorSelection.normalized(ranges.slice(), mainIndex);\r\n            pos = range.to;\r\n        }\r\n        return new EditorSelection(ranges, mainIndex);\r\n    }\r\n    /** Create a cursor selection range at the given position. You can safely ignore the optional arguments in most situations. */\r\n    static cursor(pos, assoc = 0, bidiLevel, goalColumn) {\r\n        return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* AssocBefore */ : 8 /* AssocAfter */) |\r\n            (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |\r\n            ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */));\r\n    }\r\n    /** Create a selection range. */\r\n    static range(anchor, head, goalColumn) {\r\n        let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */;\r\n        return head < anchor ? SelectionRange.create(head, anchor, 16 /* Inverted */ | goal | 8 /* AssocAfter */)\r\n            : SelectionRange.create(anchor, head, goal | (head > anchor ? 4 /* AssocBefore */ : 0));\r\n    }\r\n    // @internal\r\n    static normalized(ranges, mainIndex = 0) {\r\n        let main = ranges[mainIndex];\r\n        ranges.sort((a, b) => a.from - b.from);\r\n        mainIndex = ranges.indexOf(main);\r\n        for (let i = 1; i < ranges.length; i++) {\r\n            let range = ranges[i], prev = ranges[i - 1];\r\n            if (range.empty ? range.from <= prev.to : range.from < prev.to) {\r\n                let from = prev.from, to = Math.max(range.to, prev.to);\r\n                if (i <= mainIndex)\r\n                    mainIndex--;\r\n                ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));\r\n            }\r\n        }\r\n        return new EditorSelection(ranges, mainIndex);\r\n    }\r\n}\r\nfunction checkSelection(selection, docLength) {\r\n    for (let range of selection.ranges)\r\n        if (range.to > docLength)\r\n            throw new RangeError(\"Selection points outside of document\");\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/state/selection.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/state/state.js":
/*!**************************************************!*\
  !*** ./sys/public/js/editor/dist/state/state.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EditorState\": () => (/* binding */ EditorState)\n/* harmony export */ });\n/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text.js */ \"./sys/public/js/editor/dist/state/text.js\");\n/* harmony import */ var _char_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./char.js */ \"./sys/public/js/editor/dist/state/char.js\");\n/* harmony import */ var _change_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./change.js */ \"./sys/public/js/editor/dist/state/change.js\");\n/* harmony import */ var _selection_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selection.js */ \"./sys/public/js/editor/dist/state/selection.js\");\n/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transaction.js */ \"./sys/public/js/editor/dist/state/transaction.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/state/extension.js\");\n/* harmony import */ var _facet_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./facet.js */ \"./sys/public/js/editor/dist/state/facet.js\");\n/* harmony import */ var _charcategory_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./charcategory.js */ \"./sys/public/js/editor/dist/state/charcategory.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The editor state class is a persistent (immutable) data structure. To update a state,\r\n * you [create]{@link EditorState.update} a [transaction]{@link Transaction}, which\r\n * produces a _new_ state instance, without modifying the original object.\r\n *\r\n * As such, _never_ mutate properties of a state directly. That'll just break things.\r\n */\r\nclass EditorState {\r\n    constructor(\r\n    // @internal\r\n    config, \r\n    /** The current document. */\r\n    doc, \r\n    /** The current selection. */\r\n    selection, \r\n    // @internal\r\n    values, computeSlot, tr) {\r\n        this.config = config;\r\n        this.doc = doc;\r\n        this.selection = selection;\r\n        this.values = values;\r\n        this.status = config.statusTemplate.slice();\r\n        this.computeSlot = computeSlot;\r\n        // Fill in the computed state immediately, so that further queries\r\n        // for it made during the update return this state\r\n        if (tr)\r\n            tr._state = this;\r\n        for (let i = 0; i < this.config.dynamicSlots.length; i++)\r\n            (0,_facet_js__WEBPACK_IMPORTED_MODULE_6__.ensureAddr)(this, i << 1);\r\n        this.computeSlot = null;\r\n    }\r\n    field(field, require = true) {\r\n        let addr = this.config.address[field.id];\r\n        if (addr == null) {\r\n            if (require)\r\n                throw new RangeError(\"Field is not present in this state\");\r\n            return undefined;\r\n        }\r\n        (0,_facet_js__WEBPACK_IMPORTED_MODULE_6__.ensureAddr)(this, addr);\r\n        return (0,_facet_js__WEBPACK_IMPORTED_MODULE_6__.getAddr)(this, addr);\r\n    }\r\n    /**\r\n     * Create a [transaction]{@link Transaction} that updates this state. Any number of\r\n     * [transaction specs]{@link TransactionSpec} can be passed\r\n     */\r\n    update(...specs) {\r\n        return (0,_transaction_js__WEBPACK_IMPORTED_MODULE_4__.resolveTransaction)(this, specs, true);\r\n    }\r\n    // @internal\r\n    applyTransaction(tr) {\r\n        let conf = this.config, { base, compartments } = conf;\r\n        for (let effect of tr.effects) {\r\n            if (effect.is(_facet_js__WEBPACK_IMPORTED_MODULE_6__.Compartment.reconfigure)) {\r\n                if (conf) {\r\n                    compartments = new Map;\r\n                    conf.compartments.forEach((val, key) => compartments.set(key, val));\r\n                    conf = null;\r\n                }\r\n                compartments.set(effect.value.compartment, effect.value.extension);\r\n                this;\r\n            }\r\n            else if (effect.is(_transaction_js__WEBPACK_IMPORTED_MODULE_4__.StateEffect.reconfigure)) {\r\n                conf = null;\r\n                base = effect.value;\r\n            }\r\n            else if (effect.is(_transaction_js__WEBPACK_IMPORTED_MODULE_4__.StateEffect.appendConfig)) {\r\n                conf = null;\r\n                base = (0,_transaction_js__WEBPACK_IMPORTED_MODULE_4__.asArray)(base).concat(effect.value);\r\n            }\r\n        }\r\n        let startValues;\r\n        if (!conf) {\r\n            conf = _facet_js__WEBPACK_IMPORTED_MODULE_6__.Configuration.resolve(base, compartments, this);\r\n            let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);\r\n            startValues = intermediateState.values;\r\n        }\r\n        else {\r\n            startValues = tr.startState.values.slice();\r\n        }\r\n        new EditorState(conf, tr.newDoc, tr.newSelection, startValues, (state, slot) => slot.update(state, tr), tr);\r\n    }\r\n    /** Create a [transaction spec](#state.TransactionSpec) that replaces every selection range with the given content. */\r\n    replaceSelection(text) {\r\n        if (typeof text == \"string\")\r\n            text = this.toText(text);\r\n        return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },\r\n            range: _selection_js__WEBPACK_IMPORTED_MODULE_3__.EditorSelection.cursor(range.from + text.length) }));\r\n    }\r\n    /**\r\n     * Create a set of changes and a new selection by running the given function for each range\r\n     * in the active selection. The function can return an optional set of changes (in the\r\n     * coordinate space of the start document), plus an updated range (in the coordinate space of\r\n     * the document produced by the call's own changes). This method will merge all the changes\r\n     * and ranges into a single changeset and selection, and return it as a\r\n     * [transaction spec]{@link TransactionSpec}, which can be passed to {@link update}.\r\n     */\r\n    changeByRange(f) {\r\n        let sel = this.selection;\r\n        let result1 = f(sel.ranges[0]);\r\n        let changes = this.changes(result1.changes), ranges = [result1.range];\r\n        let effects = (0,_transaction_js__WEBPACK_IMPORTED_MODULE_4__.asArray)(result1.effects);\r\n        for (let i = 1; i < sel.ranges.length; i++) {\r\n            let result = f(sel.ranges[i]);\r\n            let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);\r\n            for (let j = 0; j < i; j++)\r\n                ranges[j] = ranges[j].map(newMapped);\r\n            let mapBy = changes.mapDesc(newChanges, true);\r\n            ranges.push(result.range.map(mapBy));\r\n            changes = changes.compose(newMapped);\r\n            effects = _transaction_js__WEBPACK_IMPORTED_MODULE_4__.StateEffect.mapEffects(effects, newMapped).concat(_transaction_js__WEBPACK_IMPORTED_MODULE_4__.StateEffect.mapEffects((0,_transaction_js__WEBPACK_IMPORTED_MODULE_4__.asArray)(result.effects), mapBy));\r\n        }\r\n        return {\r\n            changes,\r\n            selection: _selection_js__WEBPACK_IMPORTED_MODULE_3__.EditorSelection.create(ranges, sel.mainIndex),\r\n            effects\r\n        };\r\n    }\r\n    /**\r\n     * Create a [change set]{@link ChangeSet} from the given change description, taking the state's\r\n     * document length and line separator into account.\r\n     */\r\n    changes(spec = []) {\r\n        if (spec instanceof _change_js__WEBPACK_IMPORTED_MODULE_2__.ChangeSet)\r\n            return spec;\r\n        return _change_js__WEBPACK_IMPORTED_MODULE_2__.ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));\r\n    }\r\n    /** Using the state's [line separator]{@link EditorState.lineSeparator}, create a {@link Text} instance from the given string. */\r\n    toText(string) {\r\n        return _text_js__WEBPACK_IMPORTED_MODULE_0__.Text.of(string.split(this.facet(EditorState.lineSeparator) || _change_js__WEBPACK_IMPORTED_MODULE_2__.DefaultSplit));\r\n    }\r\n    /** Return the given range of the document as a string. */\r\n    sliceDoc(from = 0, to = this.doc.length) {\r\n        return this.doc.sliceString(from, to, this.lineBreak);\r\n    }\r\n    /** Get the value of a state [facet]{@link Facet}. */\r\n    facet(facet) {\r\n        let addr = this.config.address[facet.id];\r\n        if (addr == null)\r\n            return facet.default;\r\n        (0,_facet_js__WEBPACK_IMPORTED_MODULE_6__.ensureAddr)(this, addr);\r\n        return (0,_facet_js__WEBPACK_IMPORTED_MODULE_6__.getAddr)(this, addr);\r\n    }\r\n    /**\r\n     * Convert this state to a JSON-serializable object. When custom fields should be serialized,\r\n     * you can pass them in as an object mapping property names (in the resulting object, which should\r\n     * not use `doc` or `selection`) to fields.\r\n     */\r\n    toJSON(fields) {\r\n        let result = {\r\n            doc: this.sliceDoc(),\r\n            selection: this.selection.toJSON()\r\n        };\r\n        if (fields)\r\n            for (let prop in fields) {\r\n                let value = fields[prop];\r\n                if (value instanceof _facet_js__WEBPACK_IMPORTED_MODULE_6__.StateField)\r\n                    result[prop] = value.spec.toJSON(this.field(fields[prop]), this);\r\n            }\r\n        return result;\r\n    }\r\n    /**\r\n     * Deserialize a state from its JSON representation. When custom fields should be\r\n     * deserialized, pass the same object you passed to {@link toJSON} when serializing as\r\n     * third argument.\r\n     */\r\n    static fromJSON(json, config = {}, fields) {\r\n        if (!json || typeof json.doc != \"string\")\r\n            throw new RangeError(\"Invalid JSON representation for EditorState\");\r\n        let fieldInit = [];\r\n        if (fields)\r\n            for (let prop in fields) {\r\n                let field = fields[prop], value = json[prop];\r\n                fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));\r\n            }\r\n        return EditorState.create({\r\n            doc: json.doc,\r\n            selection: _selection_js__WEBPACK_IMPORTED_MODULE_3__.EditorSelection.fromJSON(json.selection),\r\n            extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit\r\n        });\r\n    }\r\n    /**\r\n     * Create a new state. You'll usually only need this when initializing an editor—updated states\r\n     * are created by applying transactions.\r\n     */\r\n    static create(config = {}) {\r\n        let configuration = _facet_js__WEBPACK_IMPORTED_MODULE_6__.Configuration.resolve(config.extensions || [], new Map);\r\n        let doc = config.doc instanceof _text_js__WEBPACK_IMPORTED_MODULE_0__.Text ? config.doc :\r\n            _text_js__WEBPACK_IMPORTED_MODULE_0__.Text.of((config.doc || \"\").split(configuration.staticFacet(EditorState.lineSeparator) || _change_js__WEBPACK_IMPORTED_MODULE_2__.DefaultSplit));\r\n        let selection = !config.selection ? _selection_js__WEBPACK_IMPORTED_MODULE_3__.EditorSelection.single(0) :\r\n            config.selection instanceof _selection_js__WEBPACK_IMPORTED_MODULE_3__.EditorSelection ? config.selection :\r\n                _selection_js__WEBPACK_IMPORTED_MODULE_3__.EditorSelection.single(config.selection.anchor, config.selection.head);\r\n        (0,_selection_js__WEBPACK_IMPORTED_MODULE_3__.checkSelection)(selection, doc.length);\r\n        if (!configuration.staticFacet(_extension_js__WEBPACK_IMPORTED_MODULE_5__.allowMultipleSelections))\r\n            selection = selection.asSingle();\r\n        return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);\r\n    }\r\n    /** The size (in columns) of a tab in the document, determined by the {@link tabSize} facet. */\r\n    get tabSize() { return this.facet(EditorState.tabSize); }\r\n    /** Get the proper [line-break]{@link lineSeparator} string for this state. */\r\n    get lineBreak() { return this.facet(EditorState.lineSeparator) || \"\\n\"; }\r\n    /** Returns true when the editor is [configured]{@link EditorState.readOnly} to be read-only. */\r\n    get readOnly() { return this.facet(_extension_js__WEBPACK_IMPORTED_MODULE_5__.readOnly); }\r\n    /**\r\n     * Look up a translation for the given phrase (via the {@link phrases} facet), or return the\r\n     * original string if no translation is found.\r\n     */\r\n    phrase(phrase) {\r\n        for (let map of this.facet(EditorState.phrases))\r\n            if (Object.prototype.hasOwnProperty.call(map, phrase))\r\n                return map[phrase];\r\n        return phrase;\r\n    }\r\n    /** Find the values for a given language data field, provided by the the [`languageData`](#state.EditorState^languageData) facet. */\r\n    languageDataAt(name, pos, side = -1) {\r\n        let values = [];\r\n        for (let provider of this.facet(_extension_js__WEBPACK_IMPORTED_MODULE_5__.languageData)) {\r\n            for (let result of provider(this, pos, side)) {\r\n                if (Object.prototype.hasOwnProperty.call(result, name))\r\n                    values.push(result[name]);\r\n            }\r\n        }\r\n        return values;\r\n    }\r\n    /**\r\n     * Return a function that can categorize strings (expected to represent a single\r\n     * [grapheme cluster]{@link findClusterBreak}) into one of:\r\n     *  - Word (contains an alphanumeric character or a character explicitly listed\r\n     *    in the local language's `\"wordChars\"` language data, which should be a string)\r\n     *  - Space (contains only whitespace)\r\n     *  - Other (anything else)\r\n     */\r\n    charCategorizer(at) {\r\n        return (0,_charcategory_js__WEBPACK_IMPORTED_MODULE_7__.makeCategorizer)(this.languageDataAt(\"wordChars\", at).join(\"\"));\r\n    }\r\n    /**\r\n     * Find the word at the given position, meaning the range containing all [word]{@link CharCategory.Word}\r\n     * characters around it. If no word characters are adjacent to the position, this returns null.\r\n     */\r\n    wordAt(pos) {\r\n        let { text, from, length } = this.doc.lineAt(pos);\r\n        let cat = this.charCategorizer(pos);\r\n        let start = pos - from, end = pos - from;\r\n        while (start > 0) {\r\n            let prev = (0,_char_js__WEBPACK_IMPORTED_MODULE_1__.findClusterBreak)(text, start, false);\r\n            if (cat(text.slice(prev, start)) != _charcategory_js__WEBPACK_IMPORTED_MODULE_7__.CharCategory.Word)\r\n                break;\r\n            start = prev;\r\n        }\r\n        while (end < length) {\r\n            let next = (0,_char_js__WEBPACK_IMPORTED_MODULE_1__.findClusterBreak)(text, end);\r\n            if (cat(text.slice(end, next)) != _charcategory_js__WEBPACK_IMPORTED_MODULE_7__.CharCategory.Word)\r\n                break;\r\n            end = next;\r\n        }\r\n        return start == end ? null : _selection_js__WEBPACK_IMPORTED_MODULE_3__.EditorSelection.range(start + from, end + from);\r\n    }\r\n}\r\n/**\r\n * A facet that, when enabled, causes the editor to allow multiple ranges to be selected.\r\n * Be careful though, because by default the editor relies on the native DOM selection,\r\n * which cannot handle multiple selections. An extension like {@link drawSelection} can\r\n * be used to make secondary selections visible to the user.\r\n */\r\nEditorState.allowMultipleSelections = _extension_js__WEBPACK_IMPORTED_MODULE_5__.allowMultipleSelections;\r\n/**\r\n * Configures the tab size to use in this state. The first (highest-precedence) value of\r\n * the facet is used. If no value is given, this defaults to 4.\r\n */\r\nEditorState.tabSize = _facet_js__WEBPACK_IMPORTED_MODULE_6__.Facet.define({\r\n    combine: values => values.length ? values[0] : 4\r\n});\r\n/**\r\n * The line separator to use. By default, any of `\"\\n\"`, `\"\\r\\n\"` and `\"\\r\"` is treated\r\n * as a separator when splitting lines, and lines are joined with `\"\\n\"`. When you\r\n * configure a value here, only that precise separator will be used, allowing you to\r\n * round-trip documents through the editor without normalizing line separators.\r\n */\r\nEditorState.lineSeparator = _extension_js__WEBPACK_IMPORTED_MODULE_5__.lineSeparator;\r\n/**\r\n * This facet controls the value of the {@link readOnly} getter, which is consulted by\r\n * commands and extensions that implement editing functionality to determine whether\r\n * they should apply. It defaults to false, but when its highest-precedence value is\r\n * `true`, such functionality disables itself.\r\n *\r\n * Not to be confused with {@link EditorView.editable}, which controls whether the editor's\r\n * DOM is set to be editable (and thus focusable).\r\n */\r\nEditorState.readOnly = _extension_js__WEBPACK_IMPORTED_MODULE_5__.readOnly;\r\n/**\r\n * Registers translation phrases. The {@link phrase} method will look through all objects\r\n * registered with this facet to find translations for its argument.\r\n */\r\nEditorState.phrases = _facet_js__WEBPACK_IMPORTED_MODULE_6__.Facet.define({\r\n    compare(a, b) {\r\n        let kA = Object.keys(a), kB = Object.keys(b);\r\n        return kA.length == kB.length && kA.every(k => a[k] == b[k]);\r\n    }\r\n});\r\n/** A facet used to register [language data]{@link languageDataAt} providers. */\r\nEditorState.languageData = _extension_js__WEBPACK_IMPORTED_MODULE_5__.languageData;\r\n/**\r\n * Facet used to register change filters, which are called for each transaction (unless explicitly\r\n * [disabled]{@link TransactionSpec.filter}), and can suppress part of the transaction's changes.\r\n *\r\n * Such a function can return `true` to indicate that it doesn't want to do anything, `false` to\r\n * completely stop the changes in the transaction, or a set of ranges in which changes should be\r\n * suppressed. Such ranges are represented as an array of numbers, with each pair of two numbers\r\n * indicating the start and end of a range. So for example `[10, 20, 100, 110]` suppresses changes\r\n * between 10 and 20, and between 100 and 110.\r\n */\r\nEditorState.changeFilter = _extension_js__WEBPACK_IMPORTED_MODULE_5__.changeFilter;\r\n/**\r\n * Facet used to register a hook that gets a chance to update or replace transaction specs\r\n * before they are applied. This will only be applied for transactions that don't have\r\n * [`filter`]{@link TransactionSpec.filter} set to `false`. You can either return a single\r\n * transaction spec (possibly the input transaction), or an array of specs (which will be\r\n * combined in the same way as the arguments to {@link EditorState.update}).\r\n *\r\n * When possible, it is recommended to avoid accessing {@link Transaction.state} in a filter,\r\n * since it will force creation of a state that will then be discarded again, if the\r\n * transaction is actually filtered.\r\n */\r\nEditorState.transactionFilter = _extension_js__WEBPACK_IMPORTED_MODULE_5__.transactionFilter;\r\n/**\r\n * This is a more limited form of {@link transactionFilter}, which can only add\r\n * [annotations]{@link TransactionSpec.annotations} and [effects]{@link TransactionSpec.effects}.\r\n * _But_, this type of filter runs even if the transaction has disabled regular\r\n * [filtering]{@link TransactionSpec.filter}, making it suitable for effects that don't need to\r\n * touch the changes or selection, but do want to process every transaction.\r\n *\r\n * Extenders run _after_ filters, when both are present.\r\n */\r\nEditorState.transactionExtender = _extension_js__WEBPACK_IMPORTED_MODULE_5__.transactionExtender;\r\n_facet_js__WEBPACK_IMPORTED_MODULE_6__.Compartment.reconfigure = _transaction_js__WEBPACK_IMPORTED_MODULE_4__.StateEffect.define();\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/state/state.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/state/text.js":
/*!*************************************************!*\
  !*** ./sys/public/js/editor/dist/state/text.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Line\": () => (/* binding */ Line),\n/* harmony export */   \"Text\": () => (/* binding */ Text)\n/* harmony export */ });\n/** The data structure for documents. */\r\nclass Text {\r\n    // @internal\r\n    constructor() { }\r\n    /** Get the line description around the given position. */\r\n    lineAt(pos) {\r\n        if (pos < 0 || pos > this.length)\r\n            throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);\r\n        return this.lineInner(pos, false, 1, 0);\r\n    }\r\n    /** Get the description for the given (1-based) line number. */\r\n    line(n) {\r\n        if (n < 1 || n > this.lines)\r\n            throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);\r\n        return this.lineInner(n, true, 1, 0);\r\n    }\r\n    /** Replace a range of the text with the given content. */\r\n    replace(from, to, text) {\r\n        let parts = [];\r\n        this.decompose(0, from, parts, 2 /* To */);\r\n        if (text.length)\r\n            text.decompose(0, text.length, parts, 1 /* From */ | 2 /* To */);\r\n        this.decompose(to, this.length, parts, 1 /* From */);\r\n        return TextNode.from(parts, this.length - (to - from) + text.length);\r\n    }\r\n    /** Append another document to this one. */\r\n    append(other) {\r\n        return this.replace(this.length, this.length, other);\r\n    }\r\n    /** Retrieve the text between the given points. */\r\n    slice(from, to = this.length) {\r\n        let parts = [];\r\n        this.decompose(from, to, parts, 0);\r\n        return TextNode.from(parts, to - from);\r\n    }\r\n    /** Test whether this text is equal to another instance. */\r\n    eq(other) {\r\n        if (other == this)\r\n            return true;\r\n        if (other.length != this.length || other.lines != this.lines)\r\n            return false;\r\n        let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);\r\n        let a = new RawTextCursor(this), b = new RawTextCursor(other);\r\n        for (let skip = start, pos = start;;) {\r\n            a.next(skip);\r\n            b.next(skip);\r\n            skip = 0;\r\n            if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)\r\n                return false;\r\n            pos += a.value.length;\r\n            if (a.done || pos >= end)\r\n                return true;\r\n        }\r\n    }\r\n    /** Iterate over the text. -1 from end to start */\r\n    iter(dir = 1) { return new RawTextCursor(this, dir); }\r\n    /** Iterate over a range of the text. When `from` > `to`, the iterator will run in reverse. */\r\n    iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }\r\n    /**\r\n     * Return a cursor that iterates over the given range of lines, _without_ returning the\r\n     * line breaks between, and yielding empty strings for empty lines.\r\n     * @param [from] line start\r\n     * @param [to] line end\r\n     */\r\n    iterLines(from, to) {\r\n        let inner;\r\n        if (from == null) {\r\n            inner = this.iter();\r\n        }\r\n        else {\r\n            if (to == null)\r\n                to = this.lines + 1;\r\n            let start = this.line(from).from;\r\n            inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));\r\n        }\r\n        return new LineCursor(inner);\r\n    }\r\n    // @internal\r\n    toString() { return this.sliceString(0); }\r\n    /** Convert the document to an array of lines (which can be deserialized again via {@link Text.of}). */\r\n    toJSON() {\r\n        let lines = [];\r\n        this.flatten(lines);\r\n        return lines;\r\n    }\r\n    /** Create a `Text` instance for the given array of lines. */\r\n    static of(text) {\r\n        if (text.length == 0)\r\n            throw new RangeError(\"A document must have at least one line\");\r\n        if (text.length == 1 && !text[0])\r\n            return Text.empty;\r\n        return text.length <= 32 /* Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));\r\n    }\r\n}\r\nSymbol.iterator;\r\n// Leaves store an array of line strings. There are always line breaks\r\n// between these strings. Leaves are limited in size and have to be\r\n// contained in TextNode instances for bigger documents.\r\nclass TextLeaf extends Text {\r\n    constructor(text, length = textLength(text)) {\r\n        super();\r\n        this.text = text;\r\n        this.length = length;\r\n    }\r\n    get lines() { return this.text.length; }\r\n    get children() { return null; }\r\n    lineInner(target, isLine, line, offset) {\r\n        for (let i = 0;; i++) {\r\n            let string = this.text[i], end = offset + string.length;\r\n            if ((isLine ? line : end) >= target)\r\n                return new Line(offset, end, line, string);\r\n            offset = end + 1;\r\n            line++;\r\n        }\r\n    }\r\n    decompose(from, to, target, open) {\r\n        let text = from <= 0 && to >= this.length ? this\r\n            : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));\r\n        if (open & 1 /* From */) {\r\n            let prev = target.pop();\r\n            let joined = appendText(text.text, prev.text.slice(), 0, text.length);\r\n            if (joined.length <= 32 /* Branch */) {\r\n                target.push(new TextLeaf(joined, prev.length + text.length));\r\n            }\r\n            else {\r\n                let mid = joined.length >> 1;\r\n                target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));\r\n            }\r\n        }\r\n        else {\r\n            target.push(text);\r\n        }\r\n    }\r\n    replace(from, to, text) {\r\n        if (!(text instanceof TextLeaf))\r\n            return super.replace(from, to, text);\r\n        let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);\r\n        let newLen = this.length + text.length - (to - from);\r\n        if (lines.length <= 32 /* Branch */)\r\n            return new TextLeaf(lines, newLen);\r\n        return TextNode.from(TextLeaf.split(lines, []), newLen);\r\n    }\r\n    sliceString(from, to = this.length, lineSep = \"\\n\") {\r\n        let result = \"\";\r\n        for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {\r\n            let line = this.text[i], end = pos + line.length;\r\n            if (pos > from && i)\r\n                result += lineSep;\r\n            if (from < end && to > pos)\r\n                result += line.slice(Math.max(0, from - pos), to - pos);\r\n            pos = end + 1;\r\n        }\r\n        return result;\r\n    }\r\n    flatten(target) {\r\n        for (let line of this.text)\r\n            target.push(line);\r\n    }\r\n    scanIdentical() { return 0; }\r\n    static split(text, target) {\r\n        let part = [], len = -1;\r\n        for (let line of text) {\r\n            part.push(line);\r\n            len += line.length + 1;\r\n            if (part.length == 32 /* Branch */) {\r\n                target.push(new TextLeaf(part, len));\r\n                part = [];\r\n                len = -1;\r\n            }\r\n        }\r\n        if (len > -1)\r\n            target.push(new TextLeaf(part, len));\r\n        return target;\r\n    }\r\n}\r\n// Nodes provide the tree structure of the `Text` type. They store a\r\n// number of other nodes or leaves, taking care to balance themselves\r\n// on changes. There are implied line breaks _between_ the children of\r\n// a node (but not before the first or after the last child).\r\nclass TextNode extends Text {\r\n    constructor(children, length) {\r\n        super();\r\n        this.children = children;\r\n        this.length = length;\r\n        this.lines = 0;\r\n        for (let child of children)\r\n            this.lines += child.lines;\r\n    }\r\n    lineInner(target, isLine, line, offset) {\r\n        for (let i = 0;; i++) {\r\n            let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;\r\n            if ((isLine ? endLine : end) >= target)\r\n                return child.lineInner(target, isLine, line, offset);\r\n            offset = end + 1;\r\n            line = endLine + 1;\r\n        }\r\n    }\r\n    decompose(from, to, target, open) {\r\n        for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {\r\n            let child = this.children[i], end = pos + child.length;\r\n            if (from <= end && to >= pos) {\r\n                let childOpen = open & ((pos <= from ? 1 /* From */ : 0) | (end >= to ? 2 /* To */ : 0));\r\n                if (pos >= from && end <= to && !childOpen)\r\n                    target.push(child);\r\n                else\r\n                    child.decompose(from - pos, to - pos, target, childOpen);\r\n            }\r\n            pos = end + 1;\r\n        }\r\n    }\r\n    replace(from, to, text) {\r\n        if (text.lines < this.lines)\r\n            for (let i = 0, pos = 0; i < this.children.length; i++) {\r\n                let child = this.children[i], end = pos + child.length;\r\n                // Fast path: if the change only affects one child and the\r\n                // child's size remains in the acceptable range, only update\r\n                // that child\r\n                if (from >= pos && to <= end) {\r\n                    let updated = child.replace(from - pos, to - pos, text);\r\n                    let totalLines = this.lines - child.lines + updated.lines;\r\n                    if (updated.lines < (totalLines >> (5 /* BranchShift */ - 1)) &&\r\n                        updated.lines > (totalLines >> (5 /* BranchShift */ + 1))) {\r\n                        let copy = this.children.slice();\r\n                        copy[i] = updated;\r\n                        return new TextNode(copy, this.length - (to - from) + text.length);\r\n                    }\r\n                    return super.replace(pos, end, updated);\r\n                }\r\n                pos = end + 1;\r\n            }\r\n        return super.replace(from, to, text);\r\n    }\r\n    sliceString(from, to = this.length, lineSep = \"\\n\") {\r\n        let result = \"\";\r\n        for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {\r\n            let child = this.children[i], end = pos + child.length;\r\n            if (pos > from && i)\r\n                result += lineSep;\r\n            if (from < end && to > pos)\r\n                result += child.sliceString(from - pos, to - pos, lineSep);\r\n            pos = end + 1;\r\n        }\r\n        return result;\r\n    }\r\n    flatten(target) {\r\n        for (let child of this.children)\r\n            child.flatten(target);\r\n    }\r\n    scanIdentical(other, dir) {\r\n        if (!(other instanceof TextNode))\r\n            return 0;\r\n        let length = 0;\r\n        let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]\r\n            : [this.children.length - 1, other.children.length - 1, -1, -1];\r\n        for (;; iA += dir, iB += dir) {\r\n            if (iA == eA || iB == eB)\r\n                return length;\r\n            let chA = this.children[iA], chB = other.children[iB];\r\n            if (chA != chB)\r\n                return length + chA.scanIdentical(chB, dir);\r\n            length += chA.length + 1;\r\n        }\r\n    }\r\n    static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {\r\n        let lines = 0;\r\n        for (let ch of children)\r\n            lines += ch.lines;\r\n        if (lines < 32 /* Branch */) {\r\n            let flat = [];\r\n            for (let ch of children)\r\n                ch.flatten(flat);\r\n            return new TextLeaf(flat, length);\r\n        }\r\n        let chunk = Math.max(32 /* Branch */, lines >> 5 /* BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;\r\n        let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];\r\n        function add(child) {\r\n            let last;\r\n            if (child.lines > maxChunk && child instanceof TextNode) {\r\n                for (let node of child.children)\r\n                    add(node);\r\n            }\r\n            else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {\r\n                flush();\r\n                chunked.push(child);\r\n            }\r\n            else if (child instanceof TextLeaf && currentLines &&\r\n                (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&\r\n                child.lines + last.lines <= 32 /* Branch */) {\r\n                currentLines += child.lines;\r\n                currentLen += child.length + 1;\r\n                currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);\r\n            }\r\n            else {\r\n                if (currentLines + child.lines > chunk)\r\n                    flush();\r\n                currentLines += child.lines;\r\n                currentLen += child.length + 1;\r\n                currentChunk.push(child);\r\n            }\r\n        }\r\n        function flush() {\r\n            if (currentLines == 0)\r\n                return;\r\n            chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));\r\n            currentLen = -1;\r\n            currentLines = currentChunk.length = 0;\r\n        }\r\n        for (let child of children)\r\n            add(child);\r\n        flush();\r\n        return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);\r\n    }\r\n}\r\nText.empty = new TextLeaf([\"\"], 0);\r\nfunction textLength(text) {\r\n    let length = -1;\r\n    for (let line of text)\r\n        length += line.length + 1;\r\n    return length;\r\n}\r\nfunction appendText(text, target, from = 0, to = 1e9) {\r\n    for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {\r\n        let line = text[i], end = pos + line.length;\r\n        if (end >= from) {\r\n            if (end > to)\r\n                line = line.slice(0, to - pos);\r\n            if (pos < from)\r\n                line = line.slice(from - pos);\r\n            if (first) {\r\n                target[target.length - 1] += line;\r\n                first = false;\r\n            }\r\n            else\r\n                target.push(line);\r\n        }\r\n        pos = end + 1;\r\n    }\r\n    return target;\r\n}\r\nfunction sliceText(text, from, to) {\r\n    return appendText(text, [\"\"], from, to);\r\n}\r\nclass RawTextCursor {\r\n    constructor(text, dir = 1) {\r\n        this.dir = dir;\r\n        this.done = false;\r\n        this.lineBreak = false;\r\n        this.value = \"\";\r\n        this.nodes = [text];\r\n        this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];\r\n    }\r\n    nextInner(skip, dir) {\r\n        this.done = this.lineBreak = false;\r\n        for (;;) {\r\n            let last = this.nodes.length - 1;\r\n            let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;\r\n            let size = top instanceof TextLeaf ? top.text.length : top.children.length;\r\n            if (offset == (dir > 0 ? size : 0)) {\r\n                if (last == 0) {\r\n                    this.done = true;\r\n                    this.value = \"\";\r\n                    return this;\r\n                }\r\n                if (dir > 0)\r\n                    this.offsets[last - 1]++;\r\n                this.nodes.pop();\r\n                this.offsets.pop();\r\n            }\r\n            else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {\r\n                this.offsets[last] += dir;\r\n                if (skip == 0) {\r\n                    this.lineBreak = true;\r\n                    this.value = \"\\n\";\r\n                    return this;\r\n                }\r\n                skip--;\r\n            }\r\n            else if (top instanceof TextLeaf) {\r\n                // Move to the next string\r\n                let next = top.text[offset + (dir < 0 ? -1 : 0)];\r\n                this.offsets[last] += dir;\r\n                if (next.length > Math.max(0, skip)) {\r\n                    this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);\r\n                    return this;\r\n                }\r\n                skip -= next.length;\r\n            }\r\n            else {\r\n                let next = top.children[offset + (dir < 0 ? -1 : 0)];\r\n                if (skip > next.length) {\r\n                    skip -= next.length;\r\n                    this.offsets[last] += dir;\r\n                }\r\n                else {\r\n                    if (dir < 0)\r\n                        this.offsets[last]--;\r\n                    this.nodes.push(next);\r\n                    this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    next(skip = 0) {\r\n        if (skip < 0) {\r\n            this.nextInner(-skip, (-this.dir));\r\n            skip = this.value.length;\r\n        }\r\n        return this.nextInner(skip, this.dir);\r\n    }\r\n}\r\nSymbol.iterator;\r\nclass PartialTextCursor {\r\n    constructor(text, start, end) {\r\n        this.value = \"\";\r\n        this.done = false;\r\n        this.cursor = new RawTextCursor(text, start > end ? -1 : 1);\r\n        this.pos = start > end ? text.length : 0;\r\n        this.from = Math.min(start, end);\r\n        this.to = Math.max(start, end);\r\n    }\r\n    nextInner(skip, dir) {\r\n        if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {\r\n            this.value = \"\";\r\n            this.done = true;\r\n            return this;\r\n        }\r\n        skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);\r\n        let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;\r\n        if (skip > limit)\r\n            skip = limit;\r\n        limit -= skip;\r\n        let { value } = this.cursor.next(skip);\r\n        this.pos += (value.length + skip) * dir;\r\n        this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);\r\n        this.done = !this.value;\r\n        return this;\r\n    }\r\n    next(skip = 0) {\r\n        if (skip < 0)\r\n            skip = Math.max(skip, this.from - this.pos);\r\n        else if (skip > 0)\r\n            skip = Math.min(skip, this.to - this.pos);\r\n        return this.nextInner(skip, this.cursor.dir);\r\n    }\r\n    get lineBreak() { return this.cursor.lineBreak && this.value != \"\"; }\r\n}\r\nSymbol.iterator;\r\nclass LineCursor {\r\n    constructor(inner) {\r\n        this.inner = inner;\r\n        this.afterBreak = true;\r\n        this.value = \"\";\r\n        this.done = false;\r\n    }\r\n    next(skip = 0) {\r\n        let { done, lineBreak, value } = this.inner.next(skip);\r\n        if (done) {\r\n            this.done = true;\r\n            this.value = \"\";\r\n        }\r\n        else if (lineBreak) {\r\n            if (this.afterBreak) {\r\n                this.value = \"\";\r\n            }\r\n            else {\r\n                this.afterBreak = true;\r\n                this.next();\r\n            }\r\n        }\r\n        else {\r\n            this.value = value;\r\n            this.afterBreak = false;\r\n        }\r\n        return this;\r\n    }\r\n    get lineBreak() { return false; }\r\n}\r\nSymbol.iterator;\r\nif (typeof Symbol != \"undefined\") {\r\n    Text.prototype[Symbol.iterator] = function () { return this.iter(); };\r\n    RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =\r\n        LineCursor.prototype[Symbol.iterator] = function () { return this; };\r\n}\r\n/** This type describes a line in the document. It is created on-demand when lines are [queried]{@link Text.lineAt}. */\r\nclass Line {\r\n    // @internal\r\n    constructor(\r\n    /** The position of the start of the line. */\r\n    from, \r\n    /** The position at the end of the line (_before_ the line break, or at the end of document for the last line). */\r\n    to, \r\n    /** This line's line number (1-based). */\r\n    number, \r\n    /** The line's content. */\r\n    text) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.number = number;\r\n        this.text = text;\r\n    }\r\n    /** The length of the line (not including any line break after it). */\r\n    get length() { return this.to - this.from; }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/state/text.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/state/transaction.js":
/*!********************************************************!*\
  !*** ./sys/public/js/editor/dist/state/transaction.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Annotation\": () => (/* binding */ Annotation),\n/* harmony export */   \"AnnotationType\": () => (/* binding */ AnnotationType),\n/* harmony export */   \"StateEffect\": () => (/* binding */ StateEffect),\n/* harmony export */   \"StateEffectType\": () => (/* binding */ StateEffectType),\n/* harmony export */   \"Transaction\": () => (/* binding */ Transaction),\n/* harmony export */   \"asArray\": () => (/* binding */ asArray),\n/* harmony export */   \"resolveTransaction\": () => (/* binding */ resolveTransaction)\n/* harmony export */ });\n/* harmony import */ var _change_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./change.js */ \"./sys/public/js/editor/dist/state/change.js\");\n/* harmony import */ var _selection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selection.js */ \"./sys/public/js/editor/dist/state/selection.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/state/extension.js\");\n\r\n\r\n\r\n/**\r\n * Annotations are tagged values that are used to add metadata to transactions in an\r\n * extensible way. They should be used to model things that effect the entire transaction\r\n * (such as its [time stamp]{@link Transaction.time} or information about its\r\n * [origin]{@link Transaction.userEvent}). For effects that happen _alongside_ the other\r\n * changes made by the transaction, [state effects]{@link StateEffect} are more appropriate.\r\n */\r\nclass Annotation {\r\n    // @internal\r\n    constructor(\r\n    /** The annotation type. */\r\n    type, \r\n    /** The value of this annotation. */\r\n    value) {\r\n        this.type = type;\r\n        this.value = value;\r\n    }\r\n    /** Define a new type of annotation. */\r\n    static define() { return new AnnotationType(); }\r\n}\r\n/** Marker that identifies a type of [annotation]{@link Annotation}. */\r\nclass AnnotationType {\r\n    /** Create an instance of this annotation. */\r\n    of(value) { return new Annotation(this, value); }\r\n}\r\n/** Representation of a type of state effect. Defined with {@link StateEffect.define}. */\r\nclass StateEffectType {\r\n    // @internal\r\n    constructor(\r\n    // The `any` types in these function types are there to work\r\n    // around TypeScript issue #37631, where the type guard on\r\n    // `StateEffect.is` mysteriously stops working when these properly\r\n    // have type `Value`.\r\n    // @internal\r\n    map) {\r\n        this.map = map;\r\n    }\r\n    /** Create a [state effect](#state.StateEffect) instance of this type. */\r\n    of(value) { return new StateEffect(this, value); }\r\n}\r\n/**\r\n * State effects can be used to represent additional effects associated with a\r\n * [transaction]{@link Transaction.effects}. They are often useful to model changes\r\n * to custom [state fields]{@link StateField}, when those changes aren't implicit\r\n * in document or selection changes.\r\n */\r\nclass StateEffect {\r\n    // @internal\r\n    constructor(\r\n    // @internal\r\n    type, \r\n    /** The value of this effect. */\r\n    value) {\r\n        this.type = type;\r\n        this.value = value;\r\n    }\r\n    /** Map this effect through a position mapping. Will return `undefined` when that ends up deleting the effect. */\r\n    map(mapping) {\r\n        let mapped = this.type.map(this.value, mapping);\r\n        return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);\r\n    }\r\n    /** Tells you whether this effect object is of a given [type]{@link StateEffectType}. */\r\n    is(type) { return this.type == type; }\r\n    /** Define a new effect type. The type parameter indicates the type of values that his effect holds. */\r\n    static define(spec = {}) {\r\n        return new StateEffectType(spec.map || (v => v));\r\n    }\r\n    /** Map an array of effects through a change set. */\r\n    static mapEffects(effects, mapping) {\r\n        if (!effects.length)\r\n            return effects;\r\n        let result = [];\r\n        for (let effect of effects) {\r\n            let mapped = effect.map(mapping);\r\n            if (mapped)\r\n                result.push(mapped);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * This effect can be used to reconfigure the root extensions of the editor. Doing\r\n * this will discard any extensions [appended]{@link StateEffect.appendConfig}, but\r\n * does not reset the content of [reconfigured]{@link Compartment.reconfigure}\r\n * compartments.\r\n */\r\nStateEffect.reconfigure = StateEffect.define();\r\n/** Append extensions to the top-level configuration of the editor. */\r\nStateEffect.appendConfig = StateEffect.define();\r\n/**\r\n * Changes to the editor state are grouped into transactions.\r\n * Typically, a user action creates a single transaction, which may\r\n * contain any number of document changes, may change the selection,\r\n * or have other effects. Create a transaction by calling\r\n * {@link EditorState.update}, or immediately dispatch one by calling\r\n * {@link EditorView.dispatch}.\r\n */\r\nclass Transaction {\r\n    /**\r\n     * @param startState The state from which the transaction starts.\r\n     * @param changes The document changes made by this transaction.\r\n     * @param selection The selection set by this transaction, or undefined if it doesn't explicitly set a selection.\r\n     * @param effects The effects added to the transaction.\r\n     * @param annotations\r\n     * @param scrollIntoView Whether the selection should be scrolled into view after this transaction is dispatched.\r\n     */\r\n    constructor(startState, changes, selection, effects, \r\n    // @internal\r\n    annotations, scrollIntoView) {\r\n        this.startState = startState;\r\n        this.changes = changes;\r\n        this.selection = selection;\r\n        this.effects = effects;\r\n        this.annotations = annotations;\r\n        this.scrollIntoView = scrollIntoView;\r\n        // @internal\r\n        this._doc = null;\r\n        // @internal\r\n        this._state = null;\r\n        if (selection)\r\n            (0,_selection_js__WEBPACK_IMPORTED_MODULE_1__.checkSelection)(selection, changes.newLength);\r\n        if (!annotations.some((a) => a.type == Transaction.time))\r\n            this.annotations = annotations.concat(Transaction.time.of(Date.now()));\r\n    }\r\n    // @internal\r\n    static create(startState, changes, selection, effects, annotations, scrollIntoView) {\r\n        return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);\r\n    }\r\n    /**\r\n     * The new document produced by the transaction. Contrary to [`.state`]{@link Transaction.state}`.doc`,\r\n     * accessing this won't force the entire new state to be computed right away, so it is recommended that\r\n     * [transaction filters]{@link EditorState.transactionFilter} use this getter when they need to look at\r\n     * the new document.\r\n     */\r\n    get newDoc() {\r\n        return this._doc || (this._doc = this.changes.apply(this.startState.doc));\r\n    }\r\n    /**\r\n     * The new selection produced by the transaction. If [`this.selection`]{@link Transaction.selection}\r\n     * is undefined, this will [map]{@link EditorSelection.map} the start state's current selection\r\n     * through the changes made by the transaction.\r\n     */\r\n    get newSelection() {\r\n        return this.selection || this.startState.selection.map(this.changes);\r\n    }\r\n    /**\r\n     * The new state created by the transaction. Computed on demand (but retained for subsequent\r\n     * access), so it is recommended not to access it in [transaction filters]{@link transactionFilter}\r\n     * when possible.\r\n     */\r\n    get state() {\r\n        if (!this._state)\r\n            this.startState.applyTransaction(this);\r\n        return this._state;\r\n    }\r\n    /** Get the value of the given annotation type, if any. */\r\n    annotation(type) {\r\n        for (let ann of this.annotations)\r\n            if (ann.type == type)\r\n                return ann.value;\r\n        return undefined;\r\n    }\r\n    /** Indicates whether the transaction changed the document. */\r\n    get docChanged() { return !this.changes.empty; }\r\n    /**\r\n     * Indicates whether this transaction reconfigures the state (through a\r\n     * [configuration compartment]{@link Compartment} or with a top-level configuration\r\n     * [effect]{@link StateEffect.reconfigure}.\r\n     */\r\n    get reconfigured() { return this.startState.config != this.state.config; }\r\n    /**\r\n     * Returns true if the transaction has a [user event]{@link Transaction.userEvent} annotation\r\n     * that is equal to or more specific than `event`. For example, if the transaction has\r\n     * `\"select.pointer\"` as user event, `\"select\"` and `\"select.pointer\"` will match it.\r\n     */\r\n    isUserEvent(event) {\r\n        let e = this.annotation(Transaction.userEvent);\r\n        return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == \".\"));\r\n    }\r\n}\r\n/** Annotation used to store transaction timestamps. Automatically added to every transaction, holding `Date.now()`. */\r\nTransaction.time = Annotation.define();\r\n/**\r\n * Annotation used to associate a transaction with a user interface event. Holds a string\r\n * identifying the event, using a dot-separated format to support attaching more specific\r\n * information. The events used by the core libraries are:\r\n *  - `\"input\"` when content is entered\r\n *    - `\"input.type\"` for typed input\r\n *      - `\"input.type.compose\"` for composition\r\n *    - `\"input.paste\"` for pasted input\r\n *    - `\"input.drop\"` when adding content with drag-and-drop\r\n *    - `\"input.complete\"` when autocompleting\r\n *  - `\"delete\"` when the user deletes content\r\n *    - `\"delete.selection\"` when deleting the selection\r\n *    - `\"delete.forward\"` when deleting forward from the selection\r\n *    - `\"delete.backward\"` when deleting backward from the selection\r\n *    - `\"delete.cut\"` when cutting to the clipboard\r\n *  - `\"move\"` when content is moved\r\n *    - `\"move.drop\"` when content is moved within the editor through drag-and-drop\r\n *  - `\"select\"` when explicitly changing the selection\r\n *    - `\"select.pointer\"` when selecting with a mouse or other pointing device\r\n *  - `\"undo\"` and `\"redo\"` for history actions\r\n * Use [`isUserEvent`](#state.Transaction.isUserEvent) to check whether the annotation\r\n * matches a given event.\r\n */\r\nTransaction.userEvent = Annotation.define();\r\n/** Annotation indicating whether a transaction should be added to the undo history or not. */\r\nTransaction.addToHistory = Annotation.define();\r\n/**\r\n * Annotation indicating (when present and true) that a transaction represents a change made\r\n * by some other actor, not the user. This is used, for example, to tag other people's changes\r\n * in collaborative editing.\r\n */\r\nTransaction.remote = Annotation.define();\r\nfunction joinRanges(a, b) {\r\n    let result = [];\r\n    for (let iA = 0, iB = 0;;) {\r\n        let from, to;\r\n        if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {\r\n            from = a[iA++];\r\n            to = a[iA++];\r\n        }\r\n        else if (iB < b.length) {\r\n            from = b[iB++];\r\n            to = b[iB++];\r\n        }\r\n        else\r\n            return result;\r\n        if (!result.length || result[result.length - 1] < from)\r\n            result.push(from, to);\r\n        else if (result[result.length - 1] < to)\r\n            result[result.length - 1] = to;\r\n    }\r\n}\r\nfunction mergeTransaction(a, b, sequential) {\r\n    var _a;\r\n    let mapForA, mapForB, changes;\r\n    if (sequential) {\r\n        mapForA = b.changes;\r\n        mapForB = _change_js__WEBPACK_IMPORTED_MODULE_0__.ChangeSet.empty(b.changes.length);\r\n        changes = a.changes.compose(b.changes);\r\n    }\r\n    else {\r\n        mapForA = b.changes.map(a.changes);\r\n        mapForB = a.changes.mapDesc(b.changes, true);\r\n        changes = a.changes.compose(mapForA);\r\n    }\r\n    return {\r\n        changes,\r\n        selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),\r\n        effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),\r\n        annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,\r\n        scrollIntoView: a.scrollIntoView || b.scrollIntoView\r\n    };\r\n}\r\nfunction resolveTransactionInner(state, spec, docSize) {\r\n    let sel = spec.selection, annotations = asArray(spec.annotations);\r\n    if (spec.userEvent)\r\n        annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));\r\n    return {\r\n        changes: spec.changes instanceof _change_js__WEBPACK_IMPORTED_MODULE_0__.ChangeSet ? spec.changes\r\n            : _change_js__WEBPACK_IMPORTED_MODULE_0__.ChangeSet.of(spec.changes || [], docSize, state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_2__.lineSeparator)),\r\n        selection: sel && (sel instanceof _selection_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection ? sel : _selection_js__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.single(sel.anchor, sel.head)),\r\n        effects: asArray(spec.effects),\r\n        annotations,\r\n        scrollIntoView: !!spec.scrollIntoView\r\n    };\r\n}\r\nfunction resolveTransaction(state, specs, filter) {\r\n    let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);\r\n    if (specs.length && specs[0].filter === false)\r\n        filter = false;\r\n    for (let i = 1; i < specs.length; i++) {\r\n        if (specs[i].filter === false)\r\n            filter = false;\r\n        let seq = !!specs[i].sequential;\r\n        s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);\r\n    }\r\n    let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);\r\n    return extendTransaction(filter ? filterTransaction(tr) : tr);\r\n}\r\n// Finish a transaction by applying filters if necessary.\r\nfunction filterTransaction(tr) {\r\n    let state = tr.startState;\r\n    // Change filters\r\n    let result = true;\r\n    for (let filter of state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_2__.changeFilter)) {\r\n        let value = filter(tr);\r\n        if (value === false) {\r\n            result = false;\r\n            break;\r\n        }\r\n        if (Array.isArray(value))\r\n            result = result === true ? value : joinRanges(result, value);\r\n    }\r\n    if (result !== true) {\r\n        let changes, back;\r\n        if (result === false) {\r\n            back = tr.changes.invertedDesc;\r\n            changes = _change_js__WEBPACK_IMPORTED_MODULE_0__.ChangeSet.empty(state.doc.length);\r\n        }\r\n        else {\r\n            let filtered = tr.changes.filter(result);\r\n            changes = filtered.changes;\r\n            back = filtered.filtered.invertedDesc;\r\n        }\r\n        tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);\r\n    }\r\n    // Transaction filters\r\n    let filters = state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_2__.transactionFilter);\r\n    for (let i = filters.length - 1; i >= 0; i--) {\r\n        let filtered = filters[i](tr);\r\n        if (filtered instanceof Transaction)\r\n            tr = filtered;\r\n        else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)\r\n            tr = filtered[0];\r\n        else\r\n            tr = resolveTransaction(state, asArray(filtered), false);\r\n    }\r\n    return tr;\r\n}\r\nfunction extendTransaction(tr) {\r\n    let state = tr.startState, extenders = state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_2__.transactionExtender), spec = tr;\r\n    for (let i = extenders.length - 1; i >= 0; i--) {\r\n        let extension = extenders[i](tr);\r\n        if (extension && Object.keys(extension).length)\r\n            spec = mergeTransaction(tr, resolveTransactionInner(state, extension, tr.changes.newLength), true);\r\n    }\r\n    return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);\r\n}\r\nconst none = [];\r\nfunction asArray(value) {\r\n    return value == null ? none : Array.isArray(value) ? value : [value];\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/state/transaction.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/utils/crelt.js":
/*!**************************************************!*\
  !*** ./sys/public/js/editor/dist/utils/crelt.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ crelt)\n/* harmony export */ });\nfunction crelt() {\r\n    let elt = arguments[0];\r\n    if (typeof elt == \"string\")\r\n        elt = document.createElement(elt);\r\n    let i = 1, next = arguments[1];\r\n    if (next && typeof next == \"object\" && next.nodeType == null && !Array.isArray(next)) {\r\n        for (let name in next)\r\n            if (Object.prototype.hasOwnProperty.call(next, name)) {\r\n                const value = next[name];\r\n                if (typeof value == \"string\")\r\n                    elt.setAttribute(name, value);\r\n                else if (value != null)\r\n                    elt[name] = value;\r\n            }\r\n        i++;\r\n    }\r\n    for (; i < arguments.length; i++)\r\n        add(elt, arguments[i]);\r\n    return elt;\r\n}\r\nfunction add(elt, child) {\r\n    if (typeof child == \"string\") {\r\n        elt.appendChild(document.createTextNode(child));\r\n    }\r\n    else if (child == null) {\r\n    }\r\n    else if (child.nodeType != null) {\r\n        elt.appendChild(child);\r\n    }\r\n    else if (Array.isArray(child)) {\r\n        for (let i = 0; i < child.length; i++)\r\n            add(elt, child[i]);\r\n    }\r\n    else {\r\n        throw new RangeError(\"Unsupported child node: \" + child);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/utils/crelt.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/utils/keyname.js":
/*!****************************************************!*\
  !*** ./sys/public/js/editor/dist/utils/keyname.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"base\": () => (/* binding */ base),\n/* harmony export */   \"keyName\": () => (/* binding */ keyName),\n/* harmony export */   \"shift\": () => (/* binding */ shift)\n/* harmony export */ });\nconst base = {\r\n    8: \"Backspace\",\r\n    9: \"Tab\",\r\n    10: \"Enter\",\r\n    12: \"NumLock\",\r\n    13: \"Enter\",\r\n    16: \"Shift\",\r\n    17: \"Control\",\r\n    18: \"Alt\",\r\n    20: \"CapsLock\",\r\n    27: \"Escape\",\r\n    32: \" \",\r\n    33: \"PageUp\",\r\n    34: \"PageDown\",\r\n    35: \"End\",\r\n    36: \"Home\",\r\n    37: \"ArrowLeft\",\r\n    38: \"ArrowUp\",\r\n    39: \"ArrowRight\",\r\n    40: \"ArrowDown\",\r\n    44: \"PrintScreen\",\r\n    45: \"Insert\",\r\n    46: \"Delete\",\r\n    59: \";\",\r\n    61: \"=\",\r\n    91: \"Meta\",\r\n    92: \"Meta\",\r\n    106: \"*\",\r\n    107: \"+\",\r\n    108: \",\",\r\n    109: \"-\",\r\n    110: \".\",\r\n    111: \"/\",\r\n    144: \"NumLock\",\r\n    145: \"ScrollLock\",\r\n    160: \"Shift\",\r\n    161: \"Shift\",\r\n    162: \"Control\",\r\n    163: \"Control\",\r\n    164: \"Alt\",\r\n    165: \"Alt\",\r\n    173: \"-\",\r\n    186: \";\",\r\n    187: \"=\",\r\n    188: \",\",\r\n    189: \"-\",\r\n    190: \".\",\r\n    191: \"/\",\r\n    192: \"`\",\r\n    219: \"[\",\r\n    220: \"\\\\\",\r\n    221: \"]\",\r\n    222: \"'\",\r\n    229: \"q\"\r\n};\r\nconst shift = {\r\n    48: \")\",\r\n    49: \"!\",\r\n    50: \"@\",\r\n    51: \"#\",\r\n    52: \"$\",\r\n    53: \"%\",\r\n    54: \"^\",\r\n    55: \"&\",\r\n    56: \"*\",\r\n    57: \"(\",\r\n    59: \":\",\r\n    61: \"+\",\r\n    173: \"_\",\r\n    186: \":\",\r\n    187: \"+\",\r\n    188: \"<\",\r\n    189: \"_\",\r\n    190: \">\",\r\n    191: \"?\",\r\n    192: \"~\",\r\n    219: \"{\",\r\n    220: \"|\",\r\n    221: \"}\",\r\n    222: \"\\\"\",\r\n    229: \"Q\"\r\n};\r\nconst chrome = typeof navigator != \"undefined\" && /Chrome\\/(\\d+)/.exec(navigator.userAgent);\r\nconst safari = typeof navigator != \"undefined\" && /Apple Computer/.test(navigator.vendor);\r\nconst gecko = typeof navigator != \"undefined\" && /Gecko\\/\\d+/.test(navigator.userAgent);\r\nconst mac = typeof navigator != \"undefined\" && /Mac/.test(navigator.platform);\r\nconst ie = typeof navigator != \"undefined\" && /MSIE \\d|Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent);\r\nconst brokenModifierNames = chrome && (mac || +chrome[1] < 57) || gecko && mac;\r\n// Fill in the digit keys\r\nfor (let i = 0; i < 10; i++)\r\n    base[48 + i] = base[96 + i] = String(i);\r\n// The function keys\r\nfor (let i = 1; i <= 24; i++)\r\n    base[i + 111] = \"F\" + i;\r\n// And the alphabetic keys\r\nfor (let i = 65; i <= 90; i++) {\r\n    base[i] = String.fromCharCode(i + 32);\r\n    shift[i] = String.fromCharCode(i);\r\n}\r\n// For each code that doesn't have a shift-equivalent, copy the base name\r\nfor (let code in base)\r\n    if (!shift.hasOwnProperty(code))\r\n        shift[code] = base[code];\r\nfunction keyName(event) {\r\n    // Don't trust event.key in Chrome when there are modifiers until they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838\r\n    let ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) || (safari || ie) && event.shiftKey && event.key && event.key.length == 1;\r\n    let name = (!ignoreKey && event.key) || (event.shiftKey ? shift : base)[event.keyCode] || event.key || \"Unidentified\";\r\n    // Edge sometimes produces wrong names (Issue #3)\r\n    if (name == \"Esc\")\r\n        name = \"Escape\";\r\n    if (name == \"Del\")\r\n        name = \"Delete\";\r\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\r\n    if (name == \"Left\")\r\n        name = \"ArrowLeft\";\r\n    if (name == \"Up\")\r\n        name = \"ArrowUp\";\r\n    if (name == \"Right\")\r\n        name = \"ArrowRight\";\r\n    if (name == \"Down\")\r\n        name = \"ArrowDown\";\r\n    return name;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/utils/keyname.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/utils/style-mod.js":
/*!******************************************************!*\
  !*** ./sys/public/js/editor/dist/utils/style-mod.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StyleModule\": () => (/* binding */ StyleModule)\n/* harmony export */ });\nconst C = \"\\u037c\";\r\nconst COUNT = typeof Symbol == \"undefined\" ? \"__\" + C : Symbol.for(C);\r\nconst SET = typeof Symbol == \"undefined\" ? \"__styleSet\" + Math.floor(Math.random() * 1e8) : Symbol(\"styleSet\");\r\nconst top = typeof globalThis != \"undefined\" ? globalThis : typeof window != \"undefined\" ? window : {};\r\nclass StyleModule {\r\n    constructor(spec, options) {\r\n        this.rules = [];\r\n        let { finish } = options || {};\r\n        function splitSelector(selector) {\r\n            return /^@/.test(selector) ? [selector] : selector.split(/,\\s*/);\r\n        }\r\n        function render(selectors, spec, target, isKeyframes) {\r\n            let local = [], isAt = /^@(\\w+)\\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == \"keyframes\";\r\n            if (isAt && spec == null)\r\n                return target.push(selectors[0] + \";\");\r\n            for (let prop in spec) {\r\n                let value = spec[prop];\r\n                if (/&/.test(prop)) {\r\n                    render(prop.split(/,\\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)), value, target);\r\n                }\r\n                else if (value && typeof value == \"object\") {\r\n                    if (!isAt)\r\n                        throw new RangeError(\"The value of a property (\" + prop + \") should be a primitive value.\");\r\n                    render(splitSelector(prop), value, local, keyframes);\r\n                }\r\n                else if (value != null) {\r\n                    local.push(prop.replace(/_.*/, \"\").replace(/[A-Z]/g, l => \"-\" + l.toLowerCase()) + \": \" + value + \";\");\r\n                }\r\n            }\r\n            if (local.length || keyframes) {\r\n                target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(\", \") + \" {\" + local.join(\" \") + \"}\");\r\n            }\r\n        }\r\n        for (let prop in spec)\r\n            render(splitSelector(prop), spec[prop], this.rules);\r\n    }\r\n    getRules() {\r\n        return this.rules.join(\"\\n\");\r\n    }\r\n    static mount(root, modules) {\r\n        (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);\r\n    }\r\n    static newName() {\r\n        let id = top[COUNT] || 1;\r\n        top[COUNT] = id + 1;\r\n        return C + id.toString(36);\r\n    }\r\n}\r\nlet adoptedSet = null;\r\nclass StyleSet {\r\n    constructor(root) {\r\n        if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != \"undefined\") {\r\n            if (adoptedSet) {\r\n                root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);\r\n                return root[SET] = adoptedSet;\r\n            }\r\n            this.sheet = new CSSStyleSheet;\r\n            root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);\r\n            adoptedSet = this;\r\n        }\r\n        else {\r\n            this.styleTag = (root.ownerDocument || root).createElement(\"style\");\r\n            let target = root.head || root;\r\n            target.insertBefore(this.styleTag, target.firstChild);\r\n        }\r\n        this.modules = [];\r\n        root[SET] = this;\r\n    }\r\n    mount(modules) {\r\n        let sheet = this.sheet;\r\n        let pos = 0 /* Current rule offset */, j = 0 /* Index into this.modules */;\r\n        for (let i = 0; i < modules.length; i++) {\r\n            let mod = modules[i], index = this.modules.indexOf(mod);\r\n            if (index < j && index > -1) { // Ordering conflict\r\n                this.modules.splice(index, 1);\r\n                j--;\r\n                index = -1;\r\n            }\r\n            if (index == -1) {\r\n                this.modules.splice(j++, 0, mod);\r\n                if (sheet)\r\n                    for (let k = 0; k < mod.rules.length; k++)\r\n                        sheet.insertRule(mod.rules[k], pos++);\r\n            }\r\n            else {\r\n                while (j < index)\r\n                    pos += this.modules[j++].rules.length;\r\n                pos += mod.rules.length;\r\n                j++;\r\n            }\r\n        }\r\n        if (!sheet) {\r\n            let text = \"\";\r\n            for (let i = 0; i < this.modules.length; i++)\r\n                text += this.modules[i].getRules() + \"\\n\";\r\n            this.styleTag.textContent = text;\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/utils/style-mod.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/active-line.js":
/*!*******************************************************!*\
  !*** ./sys/public/js/editor/dist/view/active-line.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"highlightActiveLine\": () => (/* binding */ highlightActiveLine)\n/* harmony export */ });\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n/* harmony import */ var _decoration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./decoration.js */ \"./sys/public/js/editor/dist/view/decoration.js\");\n\r\n\r\n/** Mark lines that have a cursor on them with the `\"cm-activeLine\"` DOM class. */\r\nfunction highlightActiveLine() {\r\n    return activeLineHighlighter;\r\n}\r\nconst lineDeco = _decoration_js__WEBPACK_IMPORTED_MODULE_1__.Decoration.line({ class: \"cm-activeLine\" });\r\nconst activeLineHighlighter = _extension_js__WEBPACK_IMPORTED_MODULE_0__.ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.decorations = this.getDeco(view);\r\n    }\r\n    update(update) {\r\n        if (update.docChanged || update.selectionSet)\r\n            this.decorations = this.getDeco(update.view);\r\n    }\r\n    getDeco(view) {\r\n        let lastLineStart = -1, deco = [];\r\n        for (let r of view.state.selection.ranges) {\r\n            if (!r.empty)\r\n                return _decoration_js__WEBPACK_IMPORTED_MODULE_1__.Decoration.none;\r\n            let line = view.lineBlockAt(r.head);\r\n            if (line.from > lastLineStart) {\r\n                deco.push(lineDeco.range(line.from));\r\n                lastLineStart = line.from;\r\n            }\r\n        }\r\n        return _decoration_js__WEBPACK_IMPORTED_MODULE_1__.Decoration.set(deco);\r\n    }\r\n}, {\r\n    decorations: v => v.decorations\r\n});\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/active-line.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/attributes.js":
/*!******************************************************!*\
  !*** ./sys/public/js/editor/dist/view/attributes.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"attrsEq\": () => (/* binding */ attrsEq),\n/* harmony export */   \"combineAttrs\": () => (/* binding */ combineAttrs),\n/* harmony export */   \"updateAttrs\": () => (/* binding */ updateAttrs)\n/* harmony export */ });\nfunction combineAttrs(source, target) {\r\n    for (let name in source) {\r\n        if (name == \"class\" && target.class)\r\n            target.class += \" \" + source.class;\r\n        else if (name == \"style\" && target.style)\r\n            target.style += \";\" + source.style;\r\n        else\r\n            target[name] = source[name];\r\n    }\r\n    return target;\r\n}\r\nfunction attrsEq(a, b) {\r\n    if (a == b)\r\n        return true;\r\n    if (!a || !b)\r\n        return false;\r\n    let keysA = Object.keys(a), keysB = Object.keys(b);\r\n    if (keysA.length != keysB.length)\r\n        return false;\r\n    for (let key of keysA) {\r\n        if (keysB.indexOf(key) == -1 || a[key] !== b[key])\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nfunction updateAttrs(dom, prev, attrs) {\r\n    if (prev)\r\n        for (let name in prev)\r\n            if (!(attrs && name in attrs))\r\n                dom.removeAttribute(name);\r\n    if (attrs)\r\n        for (let name in attrs)\r\n            if (!(prev && prev[name] == attrs[name]))\r\n                dom.setAttribute(name, attrs[name]);\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/attributes.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/bidi.js":
/*!************************************************!*\
  !*** ./sys/public/js/editor/dist/view/bidi.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BidiSpan\": () => (/* binding */ BidiSpan),\n/* harmony export */   \"Direction\": () => (/* binding */ Direction),\n/* harmony export */   \"computeOrder\": () => (/* binding */ computeOrder),\n/* harmony export */   \"moveVisually\": () => (/* binding */ moveVisually),\n/* harmony export */   \"movedOver\": () => (/* binding */ movedOver),\n/* harmony export */   \"trivialOrder\": () => (/* binding */ trivialOrder)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n\r\n/** Used to indicate [text direction]{@link EditorView.textDirection}. */\r\nvar Direction;\r\n(function (Direction) {\r\n    /** Left-to-right. */\r\n    Direction[Direction[\"LTR\"] = 0] = \"LTR\";\r\n    /** Right-to-left. */\r\n    Direction[Direction[\"RTL\"] = 1] = \"RTL\";\r\n})(Direction || (Direction = {}));\r\nconst LTR = Direction.LTR, RTL = Direction.RTL;\r\n/** Decode a string with each type encoded as log2(type) */\r\nfunction dec(str) {\r\n    let result = [];\r\n    for (let i = 0; i < str.length; i++)\r\n        result.push(1 << +str[i]);\r\n    return result;\r\n}\r\n// Character types for codepoints 0 to 0xf8\r\nconst LowTypes = dec(\"88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008\");\r\n// Character types for codepoints 0x600 to 0x6f9\r\nconst ArabicTypes = dec(\"4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333\");\r\nconst Brackets = Object.create(null), BracketStack = [];\r\n// There's a lot more in https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt\r\nfor (let p of [\"()\", \"[]\", \"{}\"]) {\r\n    let l = p.charCodeAt(0), r = p.charCodeAt(1);\r\n    Brackets[l] = r;\r\n    Brackets[r] = -l;\r\n}\r\nfunction charType(ch) {\r\n    return ch <= 0xf7 ? LowTypes[ch] :\r\n        0x590 <= ch && ch <= 0x5f4 ? 2 /* R */ :\r\n            0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :\r\n                0x6ee <= ch && ch <= 0x8ac ? 4 /* AL */ :\r\n                    0x2000 <= ch && ch <= 0x200b ? 256 /* NI */ :\r\n                        ch == 0x200c ? 256 /* NI */ : 1 /* L */;\r\n}\r\nconst BidiRE = /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac]/;\r\n/** Represents a contiguous range of text that has a single direction (as in left-to-right or right-to-left). */\r\nclass BidiSpan {\r\n    // @internal\r\n    constructor(\r\n    /** The start of the span (relative to the start of the line). */\r\n    from, \r\n    /** The end of the span. */\r\n    to, \r\n    /**\r\n     * The [\"bidi level\"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm) of the span\r\n     * (in this context, 0 means left-to-right, 1 means right-to-left, 2 means left-to-right\r\n     * number inside right-to-left text).\r\n     */\r\n    level) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.level = level;\r\n    }\r\n    /** The direction of this span. */\r\n    get dir() { return this.level % 2 ? RTL : LTR; }\r\n    // @internal\r\n    side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }\r\n    // @internal\r\n    static find(order, index, level, assoc) {\r\n        let maybe = -1;\r\n        for (let i = 0; i < order.length; i++) {\r\n            let span = order[i];\r\n            if (span.from <= index && span.to >= index) {\r\n                if (span.level == level)\r\n                    return i;\r\n                // When multiple spans match, if assoc != 0, take the one that covers that side, otherwise take the one with the minimum level.\r\n                if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))\r\n                    maybe = i;\r\n            }\r\n        }\r\n        if (maybe < 0)\r\n            throw new RangeError(\"Index out of range\");\r\n        return maybe;\r\n    }\r\n}\r\n// Reused array of character types\r\nconst types = [];\r\nfunction computeOrder(line, direction) {\r\n    let len = line.length, outerType = direction == LTR ? 1 /* L */ : 2 /* R */, oppositeType = direction == LTR ? 2 /* R */ : 1 /* L */;\r\n    if (!line || outerType == 1 /* L */ && !BidiRE.test(line))\r\n        return trivialOrder(len);\r\n    // W1. Examine each non-spacing mark (NSM) in the level run, and\r\n    // change the type of the NSM to the type of the previous\r\n    // character. If the NSM is at the start of the level run, it will\r\n    // get the type of sor.\r\n    // W2. Search backwards from each instance of a European number\r\n    // until the first strong type (R, L, AL, or sor) is found. If an\r\n    // AL is found, change the type of the European number to Arabic\r\n    // number.\r\n    // W3. Change all ALs to R.\r\n    // (Left after this: L, R, EN, AN, ET, CS, NI)\r\n    for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {\r\n        let type = charType(line.charCodeAt(i));\r\n        if (type == 512 /* NSM */)\r\n            type = prev;\r\n        else if (type == 8 /* EN */ && prevStrong == 4 /* AL */)\r\n            type = 16 /* AN */;\r\n        types[i] = type == 4 /* AL */ ? 2 /* R */ : type;\r\n        if (type & 7 /* Strong */)\r\n            prevStrong = type;\r\n        prev = type;\r\n    }\r\n    // W5. A sequence of European terminators adjacent to European\r\n    // numbers changes to all European numbers.\r\n    // W6. Otherwise, separators and terminators change to Other\r\n    // Neutral.\r\n    // W7. Search backwards from each instance of a European number\r\n    // until the first strong type (R, L, or sor) is found. If an L is\r\n    // found, then change the type of the European number to L.\r\n    // (Left after this: L, R, EN+AN, NI)\r\n    for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {\r\n        let type = types[i];\r\n        if (type == 128 /* CS */) {\r\n            if (i < len - 1 && prev == types[i + 1] && (prev & 24 /* Num */))\r\n                type = types[i] = prev;\r\n            else\r\n                types[i] = 256 /* NI */;\r\n        }\r\n        else if (type == 64 /* ET */) {\r\n            let end = i + 1;\r\n            while (end < len && types[end] == 64 /* ET */)\r\n                end++;\r\n            let replace = (i && prev == 8 /* EN */) || (end < len && types[end] == 8 /* EN */) ? (prevStrong == 1 /* L */ ? 1 /* L */ : 8 /* EN */) : 256 /* NI */;\r\n            for (let j = i; j < end; j++)\r\n                types[j] = replace;\r\n            i = end - 1;\r\n        }\r\n        else if (type == 8 /* EN */ && prevStrong == 1 /* L */) {\r\n            types[i] = 1 /* L */;\r\n        }\r\n        prev = type;\r\n        if (type & 7 /* Strong */)\r\n            prevStrong = type;\r\n    }\r\n    // N0. Process bracket pairs in an isolating run sequence\r\n    // sequentially in the logical order of the text positions of the\r\n    // opening paired brackets using the logic given below. Within this\r\n    // scope, bidirectional types EN and AN are treated as R.\r\n    for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {\r\n        // Keeps [startIndex, type, strongSeen] triples for each open bracket on BracketStack.\r\n        if (br = Brackets[ch = line.charCodeAt(i)]) {\r\n            if (br < 0) { // Closing bracket\r\n                for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {\r\n                    if (BracketStack[sJ + 1] == -br) {\r\n                        let flags = BracketStack[sJ + 2];\r\n                        let type = (flags & 2 /* EmbedInside */) ? outerType :\r\n                            !(flags & 4 /* OppositeInside */) ? 0 :\r\n                                (flags & 1 /* OppositeBefore */) ? oppositeType : outerType;\r\n                        if (type)\r\n                            types[i] = types[BracketStack[sJ]] = type;\r\n                        sI = sJ;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else if (BracketStack.length == 189 /* MaxDepth */) {\r\n                break;\r\n            }\r\n            else {\r\n                BracketStack[sI++] = i;\r\n                BracketStack[sI++] = ch;\r\n                BracketStack[sI++] = context;\r\n            }\r\n        }\r\n        else if ((type = types[i]) == 2 /* R */ || type == 1 /* L */) {\r\n            let embed = type == outerType;\r\n            context = embed ? 0 : 1 /* OppositeBefore */;\r\n            for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {\r\n                let cur = BracketStack[sJ + 2];\r\n                if (cur & 2 /* EmbedInside */)\r\n                    break;\r\n                if (embed) {\r\n                    BracketStack[sJ + 2] |= 2 /* EmbedInside */;\r\n                }\r\n                else {\r\n                    if (cur & 4 /* OppositeInside */)\r\n                        break;\r\n                    BracketStack[sJ + 2] |= 4 /* OppositeInside */;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // N1. A sequence of neutrals takes the direction of the\r\n    // surrounding strong text if the text on both sides has the same\r\n    // direction. European and Arabic numbers act as if they were R in\r\n    // terms of their influence on neutrals. Start-of-level-run (sor)\r\n    // and end-of-level-run (eor) are used at level run boundaries.\r\n    // N2. Any remaining neutrals take the embedding direction.\r\n    // (Left after this: L, R, EN+AN)\r\n    for (let i = 0; i < len; i++) {\r\n        if (types[i] == 256 /* NI */) {\r\n            let end = i + 1;\r\n            while (end < len && types[end] == 256 /* NI */)\r\n                end++;\r\n            let beforeL = (i ? types[i - 1] : outerType) == 1 /* L */;\r\n            let afterL = (end < len ? types[end] : outerType) == 1 /* L */;\r\n            let replace = beforeL == afterL ? (beforeL ? 1 /* L */ : 2 /* R */) : outerType;\r\n            for (let j = i; j < end; j++)\r\n                types[j] = replace;\r\n            i = end - 1;\r\n        }\r\n    }\r\n    // Here we depart from the documented algorithm, in order to avoid\r\n    // building up an actual levels array. Since there are only three\r\n    // levels (0, 1, 2) in an implementation that doesn't take\r\n    // explicit embedding into account, we can build up the order on\r\n    // the fly, without following the level-based algorithm.\r\n    let order = [];\r\n    if (outerType == 1 /* L */) {\r\n        for (let i = 0; i < len;) {\r\n            let start = i, rtl = types[i++] != 1 /* L */;\r\n            while (i < len && rtl == (types[i] != 1 /* L */))\r\n                i++;\r\n            if (rtl) {\r\n                for (let j = i; j > start;) {\r\n                    let end = j, l = types[--j] != 2 /* R */;\r\n                    while (j > start && l == (types[j - 1] != 2 /* R */))\r\n                        j--;\r\n                    order.push(new BidiSpan(j, end, l ? 2 : 1));\r\n                }\r\n            }\r\n            else {\r\n                order.push(new BidiSpan(start, i, 0));\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (let i = 0; i < len;) {\r\n            let start = i, rtl = types[i++] == 2 /* R */;\r\n            while (i < len && rtl == (types[i] == 2 /* R */))\r\n                i++;\r\n            order.push(new BidiSpan(start, i, rtl ? 1 : 2));\r\n        }\r\n    }\r\n    return order;\r\n}\r\nfunction trivialOrder(length) {\r\n    return [new BidiSpan(0, length, 0)];\r\n}\r\nlet movedOver = \"\";\r\nfunction moveVisually(line, order, dir, start, forward) {\r\n    var _a;\r\n    let startIndex = start.head - line.from, spanI = -1;\r\n    if (startIndex == 0) {\r\n        if (!forward || !line.length)\r\n            return null;\r\n        if (order[0].level != dir) {\r\n            startIndex = order[0].side(false, dir);\r\n            spanI = 0;\r\n        }\r\n    }\r\n    else if (startIndex == line.length) {\r\n        if (forward)\r\n            return null;\r\n        let last = order[order.length - 1];\r\n        if (last.level != dir) {\r\n            startIndex = last.side(true, dir);\r\n            spanI = order.length - 1;\r\n        }\r\n    }\r\n    if (spanI < 0)\r\n        spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);\r\n    let span = order[spanI];\r\n    // End of span. (But not end of line--that was checked for above.)\r\n    if (startIndex == span.side(forward, dir)) {\r\n        span = order[spanI += forward ? 1 : -1];\r\n        startIndex = span.side(!forward, dir);\r\n    }\r\n    let indexForward = forward == (span.dir == dir);\r\n    let nextIndex = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.findClusterBreak)(line.text, startIndex, indexForward);\r\n    movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));\r\n    if (nextIndex != span.side(forward, dir))\r\n        return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);\r\n    let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];\r\n    if (!nextSpan && span.level != dir)\r\n        return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);\r\n    if (nextSpan && nextSpan.level < span.level)\r\n        return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);\r\n    return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/bidi.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/blockview.js":
/*!*****************************************************!*\
  !*** ./sys/public/js/editor/dist/view/blockview.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BlockWidgetView\": () => (/* binding */ BlockWidgetView),\n/* harmony export */   \"LineView\": () => (/* binding */ LineView)\n/* harmony export */ });\n/* harmony import */ var _contentview_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contentview.js */ \"./sys/public/js/editor/dist/view/contentview.js\");\n/* harmony import */ var _inlineview_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./inlineview.js */ \"./sys/public/js/editor/dist/view/inlineview.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom.js */ \"./sys/public/js/editor/dist/view/dom.js\");\n/* harmony import */ var _decoration_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./decoration.js */ \"./sys/public/js/editor/dist/view/decoration.js\");\n/* harmony import */ var _attributes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./attributes.js */ \"./sys/public/js/editor/dist/view/attributes.js\");\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./browser.js */ \"./sys/public/js/editor/dist/view/browser.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass LineView extends _contentview_js__WEBPACK_IMPORTED_MODULE_0__.ContentView {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.children = [];\r\n        this.length = 0;\r\n        this.prevAttrs = undefined;\r\n        this.attrs = null;\r\n        this.breakAfter = 0;\r\n    }\r\n    // Consumes source\r\n    merge(from, to, source, hasStart, openStart, openEnd) {\r\n        if (source) {\r\n            if (!(source instanceof LineView))\r\n                return false;\r\n            if (!this.dom)\r\n                source.transferDOM(this); // Reuse source.dom when appropriate\r\n        }\r\n        if (hasStart)\r\n            this.setDeco(source ? source.attrs : null);\r\n        (0,_contentview_js__WEBPACK_IMPORTED_MODULE_0__.mergeChildrenInto)(this, from, to, source ? source.children : [], openStart, openEnd);\r\n        return true;\r\n    }\r\n    split(at) {\r\n        let end = new LineView;\r\n        end.breakAfter = this.breakAfter;\r\n        if (this.length == 0)\r\n            return end;\r\n        let { i, off } = this.childPos(at);\r\n        if (off) {\r\n            end.append(this.children[i].split(off), 0);\r\n            this.children[i].merge(off, this.children[i].length, null, false, 0, 0);\r\n            i++;\r\n        }\r\n        for (let j = i; j < this.children.length; j++)\r\n            end.append(this.children[j], 0);\r\n        while (i > 0 && this.children[i - 1].length == 0)\r\n            this.children[--i].destroy();\r\n        this.children.length = i;\r\n        this.markDirty();\r\n        this.length = at;\r\n        return end;\r\n    }\r\n    transferDOM(other) {\r\n        if (!this.dom)\r\n            return;\r\n        other.setDOM(this.dom);\r\n        other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;\r\n        this.prevAttrs = undefined;\r\n        this.dom = null;\r\n    }\r\n    setDeco(attrs) {\r\n        if (!(0,_attributes_js__WEBPACK_IMPORTED_MODULE_4__.attrsEq)(this.attrs, attrs)) {\r\n            if (this.dom) {\r\n                this.prevAttrs = this.attrs;\r\n                this.markDirty();\r\n            }\r\n            this.attrs = attrs;\r\n        }\r\n    }\r\n    append(child, openStart) {\r\n        (0,_inlineview_js__WEBPACK_IMPORTED_MODULE_1__.joinInlineInto)(this, child, openStart);\r\n    }\r\n    // Only called when building a line view in ContentBuilder\r\n    addLineDeco(deco) {\r\n        let attrs = deco.spec.attributes, cls = deco.spec.class;\r\n        if (attrs)\r\n            this.attrs = (0,_attributes_js__WEBPACK_IMPORTED_MODULE_4__.combineAttrs)(attrs, this.attrs || {});\r\n        if (cls)\r\n            this.attrs = (0,_attributes_js__WEBPACK_IMPORTED_MODULE_4__.combineAttrs)({ class: cls }, this.attrs || {});\r\n    }\r\n    domAtPos(pos) {\r\n        return (0,_inlineview_js__WEBPACK_IMPORTED_MODULE_1__.inlineDOMAtPos)(this.dom, this.children, pos);\r\n    }\r\n    reuseDOM(node) {\r\n        if (node.nodeName == \"DIV\") {\r\n            this.setDOM(node);\r\n            this.dirty |= 4 /* Attrs */ | 2 /* Node */;\r\n        }\r\n    }\r\n    sync(track) {\r\n        var _a;\r\n        if (!this.dom) {\r\n            this.setDOM(document.createElement(\"div\"));\r\n            this.dom.className = \"cm-line\";\r\n            this.prevAttrs = this.attrs ? null : undefined;\r\n        }\r\n        else if (this.dirty & 4 /* Attrs */) {\r\n            (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.clearAttributes)(this.dom);\r\n            this.dom.className = \"cm-line\";\r\n            this.prevAttrs = this.attrs ? null : undefined;\r\n        }\r\n        if (this.prevAttrs !== undefined) {\r\n            (0,_attributes_js__WEBPACK_IMPORTED_MODULE_4__.updateAttrs)(this.dom, this.prevAttrs, this.attrs);\r\n            this.dom.classList.add(\"cm-line\");\r\n            this.prevAttrs = undefined;\r\n        }\r\n        super.sync(track);\r\n        let last = this.dom.lastChild;\r\n        while (last && _contentview_js__WEBPACK_IMPORTED_MODULE_0__.ContentView.get(last) instanceof _inlineview_js__WEBPACK_IMPORTED_MODULE_1__.MarkView)\r\n            last = last.lastChild;\r\n        if (!last || !this.length ||\r\n            last.nodeName != \"BR\" && ((_a = _contentview_js__WEBPACK_IMPORTED_MODULE_0__.ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&\r\n                (!_browser_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].ios || !this.children.some(ch => ch instanceof _inlineview_js__WEBPACK_IMPORTED_MODULE_1__.TextView))) {\r\n            let hack = document.createElement(\"BR\");\r\n            hack.cmIgnore = true;\r\n            this.dom.appendChild(hack);\r\n        }\r\n    }\r\n    measureTextSize() {\r\n        if (this.children.length == 0 || this.length > 20)\r\n            return null;\r\n        let totalWidth = 0;\r\n        for (let child of this.children) {\r\n            if (!(child instanceof _inlineview_js__WEBPACK_IMPORTED_MODULE_1__.TextView))\r\n                return null;\r\n            let rects = (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.clientRectsFor)(child.dom);\r\n            if (rects.length != 1)\r\n                return null;\r\n            totalWidth += rects[0].width;\r\n        }\r\n        return { lineHeight: this.dom.getBoundingClientRect().height,\r\n            charWidth: totalWidth / this.length };\r\n    }\r\n    coordsAt(pos, side) {\r\n        return (0,_inlineview_js__WEBPACK_IMPORTED_MODULE_1__.coordsInChildren)(this, pos, side);\r\n    }\r\n    become(_other) { return false; }\r\n    get type() { return _decoration_js__WEBPACK_IMPORTED_MODULE_3__.BlockType.Text; }\r\n    static find(docView, pos) {\r\n        for (let i = 0, off = 0; i < docView.children.length; i++) {\r\n            let block = docView.children[i], end = off + block.length;\r\n            if (end >= pos) {\r\n                if (block instanceof LineView)\r\n                    return block;\r\n                if (end > pos)\r\n                    break;\r\n            }\r\n            off = end + block.breakAfter;\r\n        }\r\n        return null;\r\n    }\r\n}\r\nclass BlockWidgetView extends _contentview_js__WEBPACK_IMPORTED_MODULE_0__.ContentView {\r\n    constructor(widget, length, type) {\r\n        super();\r\n        this.widget = widget;\r\n        this.length = length;\r\n        this.type = type;\r\n        this.breakAfter = 0;\r\n        this.prevWidget = null;\r\n    }\r\n    merge(from, to, source, _takeDeco, openStart, openEnd) {\r\n        if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||\r\n            from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))\r\n            return false;\r\n        this.length = from + (source ? source.length : 0) + (this.length - to);\r\n        return true;\r\n    }\r\n    domAtPos(pos) {\r\n        return pos == 0 ? _contentview_js__WEBPACK_IMPORTED_MODULE_0__.DOMPos.before(this.dom) : _contentview_js__WEBPACK_IMPORTED_MODULE_0__.DOMPos.after(this.dom, pos == this.length);\r\n    }\r\n    split(at) {\r\n        let len = this.length - at;\r\n        this.length = at;\r\n        let end = new BlockWidgetView(this.widget, len, this.type);\r\n        end.breakAfter = this.breakAfter;\r\n        return end;\r\n    }\r\n    get children() { return _contentview_js__WEBPACK_IMPORTED_MODULE_0__.noChildren; }\r\n    sync() {\r\n        if (!this.dom || !this.widget.updateDOM(this.dom)) {\r\n            if (this.dom && this.prevWidget)\r\n                this.prevWidget.destroy(this.dom);\r\n            this.prevWidget = null;\r\n            this.setDOM(this.widget.toDOM(this.editorView));\r\n            this.dom.contentEditable = \"false\";\r\n        }\r\n    }\r\n    get overrideDOMText() {\r\n        return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : _state_index_js__WEBPACK_IMPORTED_MODULE_6__.Text.empty;\r\n    }\r\n    domBoundsAround() { return null; }\r\n    become(other) {\r\n        if (other instanceof BlockWidgetView && other.type == this.type &&\r\n            other.widget.constructor == this.widget.constructor) {\r\n            if (!other.widget.eq(this.widget))\r\n                this.markDirty(true);\r\n            if (this.dom && !this.prevWidget)\r\n                this.prevWidget = this.widget;\r\n            this.widget = other.widget;\r\n            this.length = other.length;\r\n            this.breakAfter = other.breakAfter;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    ignoreMutation() { return true; }\r\n    ignoreEvent(event) { return this.widget.ignoreEvent(event); }\r\n    destroy() {\r\n        super.destroy();\r\n        if (this.dom)\r\n            this.widget.destroy(this.dom);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/blockview.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/browser.js":
/*!***************************************************!*\
  !*** ./sys/public/js/editor/dist/view/browser.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nlet nav = typeof navigator != \"undefined\" ? navigator : { userAgent: \"\", vendor: \"\", platform: \"\" };\r\nlet doc = typeof document != \"undefined\" ? document : { documentElement: { style: {} } };\r\nconst ie_edge = /Edge\\/(\\d+)/.exec(nav.userAgent);\r\nconst ie_upto10 = /MSIE \\d/.test(nav.userAgent);\r\nconst ie_11up = /Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(nav.userAgent);\r\nconst ie = !!(ie_upto10 || ie_11up || ie_edge);\r\nconst gecko = !ie && /gecko\\/(\\d+)/i.test(nav.userAgent);\r\nconst chrome = !ie && /Chrome\\/(\\d+)/.exec(nav.userAgent);\r\nconst webkit = \"webkitFontSmoothing\" in doc.documentElement.style;\r\nconst safari = !ie && /Apple Computer/.test(nav.vendor);\r\nconst ios = safari && (/Mobile\\/\\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n    mac: ios || /Mac/.test(nav.platform),\r\n    windows: /Win/.test(nav.platform),\r\n    linux: /Linux|X11/.test(nav.platform),\r\n    ie,\r\n    ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,\r\n    gecko,\r\n    gecko_version: gecko ? +(/Firefox\\/(\\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,\r\n    chrome: !!chrome,\r\n    chrome_version: chrome ? +chrome[1] : 0,\r\n    ios,\r\n    android: /Android\\b/.test(nav.userAgent),\r\n    webkit,\r\n    safari,\r\n    webkit_version: webkit ? +(/\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,\r\n    tabSize: doc.documentElement.style.tabSize != null ? \"tab-size\" : \"-moz-tab-size\"\r\n});\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/browser.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/buildview.js":
/*!*****************************************************!*\
  !*** ./sys/public/js/editor/dist/view/buildview.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ContentBuilder\": () => (/* binding */ ContentBuilder)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _decoration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./decoration.js */ \"./sys/public/js/editor/dist/view/decoration.js\");\n/* harmony import */ var _blockview_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./blockview.js */ \"./sys/public/js/editor/dist/view/blockview.js\");\n/* harmony import */ var _inlineview_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./inlineview.js */ \"./sys/public/js/editor/dist/view/inlineview.js\");\n\r\n\r\n\r\n\r\nclass ContentBuilder {\r\n    constructor(doc, pos, end, disallowBlockEffectsFor) {\r\n        this.doc = doc;\r\n        this.pos = pos;\r\n        this.end = end;\r\n        this.disallowBlockEffectsFor = disallowBlockEffectsFor;\r\n        this.content = [];\r\n        this.curLine = null;\r\n        this.breakAtStart = 0;\r\n        this.pendingBuffer = 0 /* No */;\r\n        // Set to false directly after a widget that covers the position after it\r\n        this.atCursorPos = true;\r\n        this.openStart = -1;\r\n        this.openEnd = -1;\r\n        this.text = \"\";\r\n        this.textOff = 0;\r\n        this.cursor = doc.iter();\r\n        this.skip = pos;\r\n    }\r\n    posCovered() {\r\n        if (this.content.length == 0)\r\n            return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;\r\n        let last = this.content[this.content.length - 1];\r\n        return !last.breakAfter && !(last instanceof _blockview_js__WEBPACK_IMPORTED_MODULE_2__.BlockWidgetView && last.type == _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.WidgetBefore);\r\n    }\r\n    getLine() {\r\n        if (!this.curLine) {\r\n            this.content.push(this.curLine = new _blockview_js__WEBPACK_IMPORTED_MODULE_2__.LineView);\r\n            this.atCursorPos = true;\r\n        }\r\n        return this.curLine;\r\n    }\r\n    flushBuffer(active) {\r\n        if (this.pendingBuffer) {\r\n            this.curLine.append(wrapMarks(new _inlineview_js__WEBPACK_IMPORTED_MODULE_3__.WidgetBufferView(-1), active), active.length);\r\n            this.pendingBuffer = 0 /* No */;\r\n        }\r\n    }\r\n    addBlockWidget(view) {\r\n        this.flushBuffer([]);\r\n        this.curLine = null;\r\n        this.content.push(view);\r\n    }\r\n    finish(openEnd) {\r\n        if (!openEnd)\r\n            this.flushBuffer([]);\r\n        else\r\n            this.pendingBuffer = 0 /* No */;\r\n        if (!this.posCovered())\r\n            this.getLine();\r\n    }\r\n    buildText(length, active, openStart) {\r\n        while (length > 0) {\r\n            if (this.textOff == this.text.length) {\r\n                let { value, lineBreak, done } = this.cursor.next(this.skip);\r\n                this.skip = 0;\r\n                if (done)\r\n                    throw new Error(\"Ran out of text content when drawing inline views\");\r\n                if (lineBreak) {\r\n                    if (!this.posCovered())\r\n                        this.getLine();\r\n                    if (this.content.length)\r\n                        this.content[this.content.length - 1].breakAfter = 1;\r\n                    else\r\n                        this.breakAtStart = 1;\r\n                    this.flushBuffer([]);\r\n                    this.curLine = null;\r\n                    length--;\r\n                    continue;\r\n                }\r\n                else {\r\n                    this.text = value;\r\n                    this.textOff = 0;\r\n                }\r\n            }\r\n            let take = Math.min(this.text.length - this.textOff, length, 512 /* Chunk */);\r\n            this.flushBuffer(active.slice(0, openStart));\r\n            this.getLine().append(wrapMarks(new _inlineview_js__WEBPACK_IMPORTED_MODULE_3__.TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);\r\n            this.atCursorPos = true;\r\n            this.textOff += take;\r\n            length -= take;\r\n            openStart = 0;\r\n        }\r\n    }\r\n    span(from, to, active, openStart) {\r\n        this.buildText(to - from, active, openStart);\r\n        this.pos = to;\r\n        if (this.openStart < 0)\r\n            this.openStart = openStart;\r\n    }\r\n    point(from, to, deco, active, openStart, index) {\r\n        if (this.disallowBlockEffectsFor[index] && deco instanceof _decoration_js__WEBPACK_IMPORTED_MODULE_1__.PointDecoration) {\r\n            if (deco.block)\r\n                throw new RangeError(\"Block decorations may not be specified via plugins\");\r\n            if (to > this.doc.lineAt(this.pos).to)\r\n                throw new RangeError(\"Decorations that replace line breaks may not be specified via plugins\");\r\n        }\r\n        let len = to - from;\r\n        if (deco instanceof _decoration_js__WEBPACK_IMPORTED_MODULE_1__.PointDecoration) {\r\n            if (deco.block) {\r\n                let { type } = deco;\r\n                if (type == _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.WidgetAfter && !this.posCovered())\r\n                    this.getLine();\r\n                this.addBlockWidget(new _blockview_js__WEBPACK_IMPORTED_MODULE_2__.BlockWidgetView(deco.widget || new NullWidget(\"div\"), len, type));\r\n            }\r\n            else {\r\n                let view = _inlineview_js__WEBPACK_IMPORTED_MODULE_3__.WidgetView.create(deco.widget || new NullWidget(\"span\"), len, deco.startSide);\r\n                let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);\r\n                let cursorAfter = !view.isEditable && (from < to || deco.startSide <= 0);\r\n                let line = this.getLine();\r\n                if (this.pendingBuffer == 2 /* IfCursor */ && !cursorBefore)\r\n                    this.pendingBuffer = 0 /* No */;\r\n                this.flushBuffer(active);\r\n                if (cursorBefore) {\r\n                    line.append(wrapMarks(new _inlineview_js__WEBPACK_IMPORTED_MODULE_3__.WidgetBufferView(1), active), openStart);\r\n                    openStart = active.length + Math.max(0, openStart - active.length);\r\n                }\r\n                line.append(wrapMarks(view, active), openStart);\r\n                this.atCursorPos = cursorAfter;\r\n                this.pendingBuffer = !cursorAfter ? 0 /* No */ : from < to ? 1 /* Yes */ : 2 /* IfCursor */;\r\n            }\r\n        }\r\n        else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration\r\n            this.getLine().addLineDeco(deco);\r\n        }\r\n        if (len) {\r\n            // Advance the iterator past the replaced content\r\n            if (this.textOff + len <= this.text.length) {\r\n                this.textOff += len;\r\n            }\r\n            else {\r\n                this.skip += len - (this.text.length - this.textOff);\r\n                this.text = \"\";\r\n                this.textOff = 0;\r\n            }\r\n            this.pos = to;\r\n        }\r\n        if (this.openStart < 0)\r\n            this.openStart = openStart;\r\n    }\r\n    static build(text, from, to, decorations, dynamicDecorationMap) {\r\n        let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);\r\n        builder.openEnd = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSet.spans(decorations, from, to, builder);\r\n        if (builder.openStart < 0)\r\n            builder.openStart = builder.openEnd;\r\n        builder.finish(builder.openEnd);\r\n        return builder;\r\n    }\r\n}\r\nfunction wrapMarks(view, active) {\r\n    for (let mark of active)\r\n        view = new _inlineview_js__WEBPACK_IMPORTED_MODULE_3__.MarkView(mark, [view], view.length);\r\n    return view;\r\n}\r\nclass NullWidget extends _decoration_js__WEBPACK_IMPORTED_MODULE_1__.WidgetType {\r\n    constructor(tag) {\r\n        super();\r\n        this.tag = tag;\r\n    }\r\n    eq(other) { return other.tag == this.tag; }\r\n    toDOM() { return document.createElement(this.tag); }\r\n    updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/buildview.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/contentview.js":
/*!*******************************************************!*\
  !*** ./sys/public/js/editor/dist/view/contentview.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ChildCursor\": () => (/* binding */ ChildCursor),\n/* harmony export */   \"ContentView\": () => (/* binding */ ContentView),\n/* harmony export */   \"DOMPos\": () => (/* binding */ DOMPos),\n/* harmony export */   \"mergeChildrenInto\": () => (/* binding */ mergeChildrenInto),\n/* harmony export */   \"noChildren\": () => (/* binding */ noChildren),\n/* harmony export */   \"replaceRange\": () => (/* binding */ replaceRange)\n/* harmony export */ });\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom.js */ \"./sys/public/js/editor/dist/view/dom.js\");\n\r\nclass DOMPos {\r\n    constructor(node, offset, precise = true) {\r\n        this.node = node;\r\n        this.offset = offset;\r\n        this.precise = precise;\r\n    }\r\n    static before(dom, precise) { return new DOMPos(dom.parentNode, (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.domIndex)(dom), precise); }\r\n    static after(dom, precise) { return new DOMPos(dom.parentNode, (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.domIndex)(dom) + 1, precise); }\r\n}\r\nconst noChildren = [];\r\nclass ContentView {\r\n    constructor() {\r\n        this.parent = null;\r\n        this.dom = null;\r\n        this.dirty = 2 /* Node */;\r\n    }\r\n    get editorView() {\r\n        if (!this.parent)\r\n            throw new Error(\"Accessing view in orphan content view\");\r\n        return this.parent.editorView;\r\n    }\r\n    get overrideDOMText() { return null; }\r\n    get posAtStart() {\r\n        return this.parent ? this.parent.posBefore(this) : 0;\r\n    }\r\n    get posAtEnd() {\r\n        return this.posAtStart + this.length;\r\n    }\r\n    posBefore(view) {\r\n        let pos = this.posAtStart;\r\n        for (let child of this.children) {\r\n            if (child == view)\r\n                return pos;\r\n            pos += child.length + child.breakAfter;\r\n        }\r\n        throw new RangeError(\"Invalid child in posBefore\");\r\n    }\r\n    posAfter(view) {\r\n        return this.posBefore(view) + view.length;\r\n    }\r\n    // Will return a rectangle directly before (when side < 0), after (side > 0) or directly on (when\r\n    // the browser supports it) the given position.\r\n    coordsAt(_pos, _side) { return null; }\r\n    sync(track) {\r\n        if (this.dirty & 2 /* Node */) {\r\n            let parent = this.dom;\r\n            let prev = null, next;\r\n            for (let child of this.children) {\r\n                if (child.dirty) {\r\n                    if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {\r\n                        let contentView = ContentView.get(next);\r\n                        if (!contentView || !contentView.parent && contentView.constructor == child.constructor)\r\n                            child.reuseDOM(next);\r\n                    }\r\n                    child.sync(track);\r\n                    child.dirty = 0 /* Not */;\r\n                }\r\n                next = prev ? prev.nextSibling : parent.firstChild;\r\n                if (track && !track.written && track.node == parent && next != child.dom)\r\n                    track.written = true;\r\n                if (child.dom.parentNode == parent) {\r\n                    while (next && next != child.dom)\r\n                        next = rm(next);\r\n                }\r\n                else {\r\n                    parent.insertBefore(child.dom, next);\r\n                }\r\n                prev = child.dom;\r\n            }\r\n            next = prev ? prev.nextSibling : parent.firstChild;\r\n            if (next && track && track.node == parent)\r\n                track.written = true;\r\n            while (next)\r\n                next = rm(next);\r\n        }\r\n        else if (this.dirty & 1 /* Child */) {\r\n            for (let child of this.children)\r\n                if (child.dirty) {\r\n                    child.sync(track);\r\n                    child.dirty = 0 /* Not */;\r\n                }\r\n        }\r\n    }\r\n    reuseDOM(_dom) { }\r\n    localPosFromDOM(node, offset) {\r\n        let after;\r\n        if (node == this.dom) {\r\n            after = this.dom.childNodes[offset];\r\n        }\r\n        else {\r\n            let bias = (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.maxOffset)(node) == 0 ? 0 : offset == 0 ? -1 : 1;\r\n            for (;;) {\r\n                let parent = node.parentNode;\r\n                if (parent == this.dom)\r\n                    break;\r\n                if (bias == 0 && parent.firstChild != parent.lastChild) {\r\n                    if (node == parent.firstChild)\r\n                        bias = -1;\r\n                    else\r\n                        bias = 1;\r\n                }\r\n                node = parent;\r\n            }\r\n            if (bias < 0)\r\n                after = node;\r\n            else\r\n                after = node.nextSibling;\r\n        }\r\n        if (after == this.dom.firstChild)\r\n            return 0;\r\n        while (after && !ContentView.get(after))\r\n            after = after.nextSibling;\r\n        if (!after)\r\n            return this.length;\r\n        for (let i = 0, pos = 0;; i++) {\r\n            let child = this.children[i];\r\n            if (child.dom == after)\r\n                return pos;\r\n            pos += child.length + child.breakAfter;\r\n        }\r\n    }\r\n    domBoundsAround(from, to, offset = 0) {\r\n        let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;\r\n        for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {\r\n            let child = this.children[i], end = pos + child.length;\r\n            if (pos < from && end > to)\r\n                return child.domBoundsAround(from, to, pos);\r\n            if (end >= from && fromI == -1) {\r\n                fromI = i;\r\n                fromStart = pos;\r\n            }\r\n            if (pos > to && child.dom.parentNode == this.dom) {\r\n                toI = i;\r\n                toEnd = prevEnd;\r\n                break;\r\n            }\r\n            prevEnd = end;\r\n            pos = end + child.breakAfter;\r\n        }\r\n        return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,\r\n            startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,\r\n            endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };\r\n    }\r\n    markDirty(andParent = false) {\r\n        this.dirty |= 2 /* Node */;\r\n        this.markParentsDirty(andParent);\r\n    }\r\n    markParentsDirty(childList) {\r\n        for (let parent = this.parent; parent; parent = parent.parent) {\r\n            if (childList)\r\n                parent.dirty |= 2 /* Node */;\r\n            if (parent.dirty & 1 /* Child */)\r\n                return;\r\n            parent.dirty |= 1 /* Child */;\r\n            childList = false;\r\n        }\r\n    }\r\n    setParent(parent) {\r\n        if (this.parent != parent) {\r\n            this.parent = parent;\r\n            if (this.dirty)\r\n                this.markParentsDirty(true);\r\n        }\r\n    }\r\n    setDOM(dom) {\r\n        if (this.dom)\r\n            this.dom.cmView = null;\r\n        this.dom = dom;\r\n        dom.cmView = this;\r\n    }\r\n    get rootView() {\r\n        for (let v = this;;) {\r\n            let parent = v.parent;\r\n            if (!parent)\r\n                return v;\r\n            v = parent;\r\n        }\r\n    }\r\n    replaceChildren(from, to, children = noChildren) {\r\n        this.markDirty();\r\n        for (let i = from; i < to; i++) {\r\n            let child = this.children[i];\r\n            if (child.parent == this)\r\n                child.destroy();\r\n        }\r\n        this.children.splice(from, to - from, ...children);\r\n        for (let i = 0; i < children.length; i++)\r\n            children[i].setParent(this);\r\n    }\r\n    ignoreMutation(_rec) { return false; }\r\n    ignoreEvent(_event) { return false; }\r\n    childCursor(pos = this.length) {\r\n        return new ChildCursor(this.children, pos, this.children.length);\r\n    }\r\n    childPos(pos, bias = 1) {\r\n        return this.childCursor().findPos(pos, bias);\r\n    }\r\n    toString() {\r\n        let name = this.constructor.name.replace(\"View\", \"\");\r\n        return name + (this.children.length ? \"(\" + this.children.join() + \")\" :\r\n            this.length ? \"[\" + (name == \"Text\" ? this.text : this.length) + \"]\" : \"\") +\r\n            (this.breakAfter ? \"#\" : \"\");\r\n    }\r\n    static get(node) { return node.cmView; }\r\n    get isEditable() { return true; }\r\n    merge(from, to, source, hasStart, openStart, openEnd) {\r\n        return false;\r\n    }\r\n    become(other) { return false; }\r\n    // When this is a zero-length view with a side, this should return a\r\n    // number <= 0 to indicate it is before its position, or a\r\n    // number > 0 when after its position.\r\n    getSide() { return 0; }\r\n    destroy() {\r\n        this.parent = null;\r\n    }\r\n}\r\nContentView.prototype.breakAfter = 0;\r\n// Remove a DOM node and return its next sibling.\r\nfunction rm(dom) {\r\n    let next = dom.nextSibling;\r\n    dom.parentNode.removeChild(dom);\r\n    return next;\r\n}\r\nclass ChildCursor {\r\n    constructor(children, pos, i) {\r\n        this.children = children;\r\n        this.pos = pos;\r\n        this.i = i;\r\n        this.off = 0;\r\n    }\r\n    findPos(pos, bias = 1) {\r\n        for (;;) {\r\n            if (pos > this.pos || pos == this.pos &&\r\n                (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {\r\n                this.off = pos - this.pos;\r\n                return this;\r\n            }\r\n            let next = this.children[--this.i];\r\n            this.pos -= next.length + next.breakAfter;\r\n        }\r\n    }\r\n}\r\nfunction replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {\r\n    let { children } = parent;\r\n    let before = children.length ? children[fromI] : null;\r\n    let last = insert.length ? insert[insert.length - 1] : null;\r\n    let breakAtEnd = last ? last.breakAfter : breakAtStart;\r\n    // Change within a single child\r\n    if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&\r\n        before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))\r\n        return;\r\n    if (toI < children.length) {\r\n        let after = children[toI];\r\n        // Make sure the end of the child after the update is preserved in `after`\r\n        if (after && toOff < after.length) {\r\n            // If we're splitting a child, separate part of it to avoid that being mangled when updating the child before the update.\r\n            if (fromI == toI) {\r\n                after = after.split(toOff);\r\n                toOff = 0;\r\n            }\r\n            // If the element after the replacement should be merged with the last replacing element, update `content`\r\n            if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {\r\n                insert[insert.length - 1] = after;\r\n            }\r\n            else {\r\n                // Remove the start of the after element, if necessary, and add it to `content`.\r\n                if (toOff)\r\n                    after.merge(0, toOff, null, false, 0, openEnd);\r\n                insert.push(after);\r\n            }\r\n        }\r\n        else if (after === null || after === void 0 ? void 0 : after.breakAfter) {\r\n            // The element at `toI` is entirely covered by this range. Preserve its line break, if any.\r\n            if (last)\r\n                last.breakAfter = 1;\r\n            else\r\n                breakAtStart = 1;\r\n        }\r\n        // Since we've handled the next element from the current elements now, make sure `toI` points after that.\r\n        toI++;\r\n    }\r\n    if (before) {\r\n        before.breakAfter = breakAtStart;\r\n        if (fromOff > 0) {\r\n            if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {\r\n                before.breakAfter = insert.shift().breakAfter;\r\n            }\r\n            else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {\r\n                before.merge(fromOff, before.length, null, false, openStart, 0);\r\n            }\r\n            fromI++;\r\n        }\r\n    }\r\n    // Try to merge widgets on the boundaries of the replacement\r\n    while (fromI < toI && insert.length) {\r\n        if (children[toI - 1].become(insert[insert.length - 1])) {\r\n            toI--;\r\n            insert.pop();\r\n            openEnd = insert.length ? 0 : openStart;\r\n        }\r\n        else if (children[fromI].become(insert[0])) {\r\n            fromI++;\r\n            insert.shift();\r\n            openStart = insert.length ? 0 : openEnd;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&\r\n        children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))\r\n        fromI--;\r\n    if (fromI < toI || insert.length)\r\n        parent.replaceChildren(fromI, toI, insert);\r\n}\r\nfunction mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {\r\n    let cur = parent.childCursor();\r\n    let { i: toI, off: toOff } = cur.findPos(to, 1);\r\n    let { i: fromI, off: fromOff } = cur.findPos(from, -1);\r\n    let dLen = from - to;\r\n    for (let view of insert)\r\n        dLen += view.length;\r\n    parent.length += dLen;\r\n    replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/contentview.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/cursor.js":
/*!**************************************************!*\
  !*** ./sys/public/js/editor/dist/view/cursor.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"byGroup\": () => (/* binding */ byGroup),\n/* harmony export */   \"groupAt\": () => (/* binding */ groupAt),\n/* harmony export */   \"moveByChar\": () => (/* binding */ moveByChar),\n/* harmony export */   \"moveToLineBoundary\": () => (/* binding */ moveToLineBoundary),\n/* harmony export */   \"moveVertically\": () => (/* binding */ moveVertically),\n/* harmony export */   \"posAtCoords\": () => (/* binding */ posAtCoords),\n/* harmony export */   \"skipAtoms\": () => (/* binding */ skipAtoms)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _decoration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./decoration.js */ \"./sys/public/js/editor/dist/view/decoration.js\");\n/* harmony import */ var _blockview_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./blockview.js */ \"./sys/public/js/editor/dist/view/blockview.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom.js */ \"./sys/public/js/editor/dist/view/dom.js\");\n/* harmony import */ var _bidi_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bidi.js */ \"./sys/public/js/editor/dist/view/bidi.js\");\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./browser.js */ \"./sys/public/js/editor/dist/view/browser.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction groupAt(state, pos, bias = 1) {\r\n    let categorize = state.charCategorizer(pos);\r\n    let line = state.doc.lineAt(pos), linePos = pos - line.from;\r\n    if (line.length == 0)\r\n        return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(pos);\r\n    if (linePos == 0)\r\n        bias = 1;\r\n    else if (linePos == line.length)\r\n        bias = -1;\r\n    let from = linePos, to = linePos;\r\n    if (bias < 0)\r\n        from = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.findClusterBreak)(line.text, linePos, false);\r\n    else\r\n        to = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.findClusterBreak)(line.text, linePos);\r\n    let cat = categorize(line.text.slice(from, to));\r\n    while (from > 0) {\r\n        let prev = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.findClusterBreak)(line.text, from, false);\r\n        if (categorize(line.text.slice(prev, from)) != cat)\r\n            break;\r\n        from = prev;\r\n    }\r\n    while (to < line.length) {\r\n        let next = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.findClusterBreak)(line.text, to);\r\n        if (categorize(line.text.slice(to, next)) != cat)\r\n            break;\r\n        to = next;\r\n    }\r\n    return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(from + line.from, to + line.from);\r\n}\r\n// Search the DOM for the {node, offset} position closest to the given\r\n// coordinates. Very inefficient and crude, but can usually be avoided\r\n// by calling caret(Position|Range)FromPoint instead.\r\nfunction getdx(x, rect) {\r\n    return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);\r\n}\r\nfunction getdy(y, rect) {\r\n    return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);\r\n}\r\nfunction yOverlap(a, b) {\r\n    return a.top < b.bottom - 1 && a.bottom > b.top + 1;\r\n}\r\nfunction upTop(rect, top) {\r\n    return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;\r\n}\r\nfunction upBot(rect, bottom) {\r\n    return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;\r\n}\r\nfunction domPosAtCoords(parent, x, y) {\r\n    let closest, closestRect, closestX, closestY;\r\n    let above, below, aboveRect, belowRect;\r\n    for (let child = parent.firstChild; child; child = child.nextSibling) {\r\n        let rects = (0,_dom_js__WEBPACK_IMPORTED_MODULE_4__.clientRectsFor)(child);\r\n        for (let i = 0; i < rects.length; i++) {\r\n            let rect = rects[i];\r\n            if (closestRect && yOverlap(closestRect, rect))\r\n                rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);\r\n            let dx = getdx(x, rect), dy = getdy(y, rect);\r\n            if (dx == 0 && dy == 0)\r\n                return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);\r\n            if (!closest || closestY > dy || closestY == dy && closestX > dx) {\r\n                closest = child;\r\n                closestRect = rect;\r\n                closestX = dx;\r\n                closestY = dy;\r\n            }\r\n            if (dx == 0) {\r\n                if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {\r\n                    above = child;\r\n                    aboveRect = rect;\r\n                }\r\n                else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {\r\n                    below = child;\r\n                    belowRect = rect;\r\n                }\r\n            }\r\n            else if (aboveRect && yOverlap(aboveRect, rect)) {\r\n                aboveRect = upBot(aboveRect, rect.bottom);\r\n            }\r\n            else if (belowRect && yOverlap(belowRect, rect)) {\r\n                belowRect = upTop(belowRect, rect.top);\r\n            }\r\n        }\r\n    }\r\n    if (aboveRect && aboveRect.bottom >= y) {\r\n        closest = above;\r\n        closestRect = aboveRect;\r\n    }\r\n    else if (belowRect && belowRect.top <= y) {\r\n        closest = below;\r\n        closestRect = belowRect;\r\n    }\r\n    if (!closest)\r\n        return { node: parent, offset: 0 };\r\n    let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));\r\n    if (closest.nodeType == 3)\r\n        return domPosInText(closest, clipX, y);\r\n    if (!closestX && closest.contentEditable == \"true\")\r\n        return domPosAtCoords(closest, clipX, y);\r\n    let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +\r\n        (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);\r\n    return { node: parent, offset };\r\n}\r\nfunction domPosInText(node, x, y) {\r\n    let len = node.nodeValue.length;\r\n    let closestOffset = -1, closestDY = 1e9, generalSide = 0;\r\n    for (let i = 0; i < len; i++) {\r\n        let rects = (0,_dom_js__WEBPACK_IMPORTED_MODULE_4__.textRange)(node, i, i + 1).getClientRects();\r\n        for (let j = 0; j < rects.length; j++) {\r\n            let rect = rects[j];\r\n            if (rect.top == rect.bottom)\r\n                continue;\r\n            if (!generalSide)\r\n                generalSide = x - rect.left;\r\n            let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;\r\n            if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {\r\n                let right = x >= (rect.left + rect.right) / 2, after = right;\r\n                if (_browser_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].chrome || _browser_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].gecko) {\r\n                    // Check for RTL on browsers that support getting client\r\n                    // rects for empty ranges.\r\n                    let rectBefore = (0,_dom_js__WEBPACK_IMPORTED_MODULE_4__.textRange)(node, i).getBoundingClientRect();\r\n                    if (rectBefore.left == rect.right)\r\n                        after = !right;\r\n                }\r\n                if (dy <= 0)\r\n                    return { node, offset: i + (after ? 1 : 0) };\r\n                closestOffset = i + (after ? 1 : 0);\r\n                closestDY = dy;\r\n            }\r\n        }\r\n    }\r\n    return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };\r\n}\r\nfunction posAtCoords(view, { x, y }, precise, bias = -1) {\r\n    var _a;\r\n    let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;\r\n    let block, { docHeight } = view.viewState;\r\n    let yOffset = y - docTop;\r\n    if (yOffset < 0)\r\n        return 0;\r\n    if (yOffset > docHeight)\r\n        return view.state.doc.length;\r\n    // Scan for a text block near the queried y position\r\n    for (let halfLine = view.defaultLineHeight / 2, bounced = false;;) {\r\n        block = view.elementAtHeight(yOffset);\r\n        if (block.type == _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.Text)\r\n            break;\r\n        for (;;) {\r\n            // Move the y position out of this block\r\n            yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;\r\n            if (yOffset >= 0 && yOffset <= docHeight)\r\n                break;\r\n            // If the document consists entirely of replaced widgets, we\r\n            // won't find a text block, so return 0\r\n            if (bounced)\r\n                return precise ? null : 0;\r\n            bounced = true;\r\n            bias = -bias;\r\n        }\r\n    }\r\n    y = docTop + yOffset;\r\n    let lineStart = block.from;\r\n    // If this is outside of the rendered viewport, we can't determine a position\r\n    if (lineStart < view.viewport.from)\r\n        return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);\r\n    if (lineStart > view.viewport.to)\r\n        return view.viewport.to == view.state.doc.length ? view.state.doc.length :\r\n            precise ? null : posAtCoordsImprecise(view, content, block, x, y);\r\n    // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not\r\n    let doc = view.dom.ownerDocument;\r\n    let root = view.root.elementFromPoint ? view.root : doc;\r\n    let element = root.elementFromPoint(x, y);\r\n    if (element && !view.contentDOM.contains(element))\r\n        element = null;\r\n    // If the element is unexpected, clip x at the sides of the content area and try again\r\n    if (!element) {\r\n        x = Math.max(content.left + 1, Math.min(content.right - 1, x));\r\n        element = root.elementFromPoint(x, y);\r\n        if (element && !view.contentDOM.contains(element))\r\n            element = null;\r\n    }\r\n    // There's visible editor content under the point, so we can try\r\n    // using caret(Position|Range)FromPoint as a shortcut\r\n    let node, offset = -1;\r\n    if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {\r\n        if (doc.caretPositionFromPoint) {\r\n            let pos = doc.caretPositionFromPoint(x, y);\r\n            if (pos)\r\n                ({ offsetNode: node, offset } = pos);\r\n        }\r\n        else if (doc.caretRangeFromPoint) {\r\n            let range = doc.caretRangeFromPoint(x, y);\r\n            if (range) {\r\n                ;\r\n                ({ startContainer: node, startOffset: offset } = range);\r\n                if (_browser_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].safari && isSuspiciousCaretResult(node, offset, x))\r\n                    node = undefined;\r\n            }\r\n        }\r\n    }\r\n    // No luck, do our own (potentially expensive) search\r\n    if (!node || !view.docView.dom.contains(node)) {\r\n        let line = _blockview_js__WEBPACK_IMPORTED_MODULE_2__.LineView.find(view.docView, lineStart);\r\n        if (!line)\r\n            return yOffset > block.top + block.height / 2 ? block.to : block.from;\r\n        ({ node, offset } = domPosAtCoords(line.dom, x, y));\r\n    }\r\n    return view.docView.posFromDOM(node, offset);\r\n}\r\nfunction posAtCoordsImprecise(view, contentRect, block, x, y) {\r\n    let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);\r\n    if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {\r\n        let line = Math.floor((y - block.top) / view.defaultLineHeight);\r\n        into += line * view.viewState.heightOracle.lineLength;\r\n    }\r\n    let content = view.state.sliceDoc(block.from, block.to);\r\n    return block.from + (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.findColumn)(content, into, view.state.tabSize);\r\n}\r\n// In case of a high line height, Safari's caretRangeFromPoint treats\r\n// the space between lines as belonging to the last character of the\r\n// line before. This is used to detect such a result so that it can be\r\n// ignored (issue #401).\r\nfunction isSuspiciousCaretResult(node, offset, x) {\r\n    let len;\r\n    if (node.nodeType != 3 || offset != (len = node.nodeValue.length))\r\n        return false;\r\n    for (let next = node.nextSibling; next; next = next.nextSibling)\r\n        if (next.nodeType != 1 || next.nodeName != \"BR\")\r\n            return false;\r\n    return (0,_dom_js__WEBPACK_IMPORTED_MODULE_4__.textRange)(node, len - 1, len).getBoundingClientRect().left > x;\r\n}\r\nfunction moveToLineBoundary(view, start, forward, includeWrap) {\r\n    let line = view.state.doc.lineAt(start.head);\r\n    let coords = !includeWrap || !view.lineWrapping ? null\r\n        : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);\r\n    if (coords) {\r\n        let editorRect = view.dom.getBoundingClientRect();\r\n        let direction = view.textDirectionAt(line.from);\r\n        let pos = view.posAtCoords({ x: forward == (direction == _bidi_js__WEBPACK_IMPORTED_MODULE_5__.Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,\r\n            y: (coords.top + coords.bottom) / 2 });\r\n        if (pos != null)\r\n            return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(pos, forward ? -1 : 1);\r\n    }\r\n    let lineView = _blockview_js__WEBPACK_IMPORTED_MODULE_2__.LineView.find(view.docView, start.head);\r\n    let end = lineView ? (forward ? lineView.posAtEnd : lineView.posAtStart) : (forward ? line.to : line.from);\r\n    return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(end, forward ? -1 : 1);\r\n}\r\nfunction moveByChar(view, start, forward, by) {\r\n    let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);\r\n    let direction = view.textDirectionAt(line.from);\r\n    for (let cur = start, check = null;;) {\r\n        let next = (0,_bidi_js__WEBPACK_IMPORTED_MODULE_5__.moveVisually)(line, spans, direction, cur, forward), char = _bidi_js__WEBPACK_IMPORTED_MODULE_5__.movedOver;\r\n        if (!next) {\r\n            if (line.number == (forward ? view.state.doc.lines : 1))\r\n                return cur;\r\n            char = \"\\n\";\r\n            line = view.state.doc.line(line.number + (forward ? 1 : -1));\r\n            spans = view.bidiSpans(line);\r\n            next = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(forward ? line.from : line.to);\r\n        }\r\n        if (!check) {\r\n            if (!by)\r\n                return next;\r\n            check = by(char);\r\n        }\r\n        else if (!check(char)) {\r\n            return cur;\r\n        }\r\n        cur = next;\r\n    }\r\n}\r\nfunction byGroup(view, pos, start) {\r\n    let categorize = view.state.charCategorizer(pos);\r\n    let cat = categorize(start);\r\n    return (next) => {\r\n        let nextCat = categorize(next);\r\n        if (cat == _state_index_js__WEBPACK_IMPORTED_MODULE_0__.CharCategory.Space)\r\n            cat = nextCat;\r\n        return cat == nextCat;\r\n    };\r\n}\r\nfunction moveVertically(view, start, forward, distance) {\r\n    let startPos = start.head, dir = forward ? 1 : -1;\r\n    if (startPos == (forward ? view.state.doc.length : 0))\r\n        return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(startPos, start.assoc);\r\n    let goal = start.goalColumn, startY;\r\n    let rect = view.contentDOM.getBoundingClientRect();\r\n    let startCoords = view.coordsAtPos(startPos), docTop = view.documentTop;\r\n    if (startCoords) {\r\n        if (goal == null)\r\n            goal = startCoords.left - rect.left;\r\n        startY = dir < 0 ? startCoords.top : startCoords.bottom;\r\n    }\r\n    else {\r\n        let line = view.viewState.lineBlockAt(startPos);\r\n        if (goal == null)\r\n            goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));\r\n        startY = (dir < 0 ? line.top : line.bottom) + docTop;\r\n    }\r\n    let resolvedGoal = rect.left + goal;\r\n    let dist = distance !== null && distance !== void 0 ? distance : (view.defaultLineHeight >> 1);\r\n    for (let extra = 0;; extra += 10) {\r\n        let curY = startY + (dist + extra) * dir;\r\n        let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);\r\n        if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))\r\n            return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(pos, start.assoc, undefined, goal);\r\n    }\r\n}\r\nfunction skipAtoms(view, oldPos, pos) {\r\n    let atoms = view.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_3__.atomicRanges).map(f => f(view));\r\n    for (;;) {\r\n        let moved = false;\r\n        for (let set of atoms) {\r\n            set.between(pos.from - 1, pos.from + 1, (from, to, value) => {\r\n                if (pos.from > from && pos.from < to) {\r\n                    pos = oldPos.from > pos.from ? _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(from, 1) : _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(to, -1);\r\n                    moved = true;\r\n                }\r\n            });\r\n        }\r\n        if (!moved)\r\n            return pos;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/cursor.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/decoration.js":
/*!******************************************************!*\
  !*** ./sys/public/js/editor/dist/view/decoration.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BlockType\": () => (/* binding */ BlockType),\n/* harmony export */   \"Decoration\": () => (/* binding */ Decoration),\n/* harmony export */   \"LineDecoration\": () => (/* binding */ LineDecoration),\n/* harmony export */   \"MarkDecoration\": () => (/* binding */ MarkDecoration),\n/* harmony export */   \"PointDecoration\": () => (/* binding */ PointDecoration),\n/* harmony export */   \"WidgetType\": () => (/* binding */ WidgetType),\n/* harmony export */   \"addRange\": () => (/* binding */ addRange)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _attributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./attributes.js */ \"./sys/public/js/editor/dist/view/attributes.js\");\n\r\n\r\n/**\r\n * Widgets added to the content are described by subclasses of this class. Using a description\r\n * object like that makes it possible to delay creating of the DOM structure for a widget until\r\n * it is needed, and to avoid redrawing widgets even if the decorations that define them are\r\n * recreated.\r\n */\r\nclass WidgetType {\r\n    // Compare this instance to another instance of the same type.\r\n    // (TypeScript can't express this, but only instances of the same\r\n    // specific class will be passed to this method.) This is used to\r\n    // avoid redrawing widgets when they are replaced by a new\r\n    // decoration of the same type. The default implementation just\r\n    // returns `false`, which will cause new instances of the widget to\r\n    // always be redrawn.\r\n    eq(widget) { return false; }\r\n    // Update a DOM element created by a widget of the same type (but\r\n    // different, non-`eq` content) to reflect this widget. May return\r\n    // true to indicate that it could update, false to indicate it\r\n    // couldn't (in which case the widget will be redrawn). The default\r\n    // implementation just returns false.\r\n    updateDOM(dom) { return false; }\r\n    // @internal\r\n    compare(other) {\r\n        return this == other || this.constructor == other.constructor && this.eq(other);\r\n    }\r\n    // The estimated height this widget will have, to be used when\r\n    // estimating the height of content that hasn't been drawn. May\r\n    // return -1 to indicate you don't know. The default implementation\r\n    // returns -1.\r\n    get estimatedHeight() { return -1; }\r\n    // Can be used to configure which kinds of events inside the widget\r\n    // should be ignored by the editor. The default is to ignore all\r\n    // events.\r\n    ignoreEvent(event) { return true; }\r\n    // @internal\r\n    get customView() { return null; }\r\n    // This is called when the an instance of the widget is removed\r\n    // from the editor view.\r\n    destroy(dom) { }\r\n}\r\n// The different types of blocks that can occur in an editor view.\r\nvar BlockType;\r\n(function (BlockType) {\r\n    // A line of text.\r\n    BlockType[BlockType[\"Text\"] = 0] = \"Text\";\r\n    // A block widget associated with the position after it.\r\n    BlockType[BlockType[\"WidgetBefore\"] = 1] = \"WidgetBefore\";\r\n    // A block widget associated with the position before it.\r\n    BlockType[BlockType[\"WidgetAfter\"] = 2] = \"WidgetAfter\";\r\n    // A block widget [replacing](#view.Decoration^replace) a range of content.\r\n    BlockType[BlockType[\"WidgetRange\"] = 3] = \"WidgetRange\";\r\n})(BlockType || (BlockType = {}));\r\n// A decoration provides information on how to draw or style a piece\r\n// of content. You'll usually use it wrapped in a\r\n// [`Range`](#state.Range), which adds a start and end position.\r\n// @nonabstract\r\nclass Decoration extends _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeValue {\r\n    constructor(\r\n    // @internal\r\n    startSide, \r\n    // @internal\r\n    endSide, \r\n    // @internal\r\n    widget, \r\n    // The config object used to create this decoration. You can\r\n    // include additional properties in there to store metadata about\r\n    // your decoration.\r\n    spec) {\r\n        super();\r\n        this.startSide = startSide;\r\n        this.endSide = endSide;\r\n        this.widget = widget;\r\n        this.spec = spec;\r\n    }\r\n    // @internal\r\n    get heightRelevant() { return false; }\r\n    // Create a mark decoration, which influences the styling of the\r\n    // content in its range. Nested mark decorations will cause nested\r\n    // DOM elements to be created. Nesting order is determined by\r\n    // precedence of the [facet](#view.EditorView^decorations), with\r\n    // the higher-precedence decorations creating the inner DOM nodes.\r\n    // Such elements are split on line boundaries and on the boundaries\r\n    // of lower-precedence decorations.\r\n    static mark(spec) {\r\n        return new MarkDecoration(spec);\r\n    }\r\n    // Create a widget decoration, which displays a DOM element at the\r\n    // given position.\r\n    static widget(spec) {\r\n        let side = spec.side || 0, block = !!spec.block;\r\n        side += block ? (side > 0 ? 300000000 /* BlockAfter */ : -400000000 /* BlockBefore */) : (side > 0 ? 100000000 /* InlineAfter */ : -100000000 /* InlineBefore */);\r\n        return new PointDecoration(spec, side, side, block, spec.widget || null, false);\r\n    }\r\n    // Create a replace decoration which replaces the given range with\r\n    // a widget, or simply hides it.\r\n    static replace(spec) {\r\n        let block = !!spec.block, startSide, endSide;\r\n        if (spec.isBlockGap) {\r\n            startSide = -500000000 /* GapStart */;\r\n            endSide = 400000000 /* GapEnd */;\r\n        }\r\n        else {\r\n            let { start, end } = getInclusive(spec, block);\r\n            startSide = (start ? (block ? -300000000 /* BlockIncStart */ : -1 /* InlineIncStart */) : 500000000 /* NonIncStart */) - 1;\r\n            endSide = (end ? (block ? 200000000 /* BlockIncEnd */ : 1 /* InlineIncEnd */) : -600000000 /* NonIncEnd */) + 1;\r\n        }\r\n        return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);\r\n    }\r\n    // Create a line decoration, which can add DOM attributes to the\r\n    // line starting at the given position.\r\n    static line(spec) {\r\n        return new LineDecoration(spec);\r\n    }\r\n    // Build a [`DecorationSet`](#view.DecorationSet) from the given\r\n    // decorated range or ranges. If the ranges aren't already sorted,\r\n    // pass `true` for `sort` to make the library sort them for you.\r\n    static set(of, sort = false) {\r\n        return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSet.of(of, sort);\r\n    }\r\n    // @internal\r\n    hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }\r\n}\r\n// The empty set of decorations.\r\nDecoration.none = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSet.empty;\r\nclass MarkDecoration extends Decoration {\r\n    constructor(spec) {\r\n        let { start, end } = getInclusive(spec);\r\n        super(start ? -1 /* InlineIncStart */ : 500000000 /* NonIncStart */, end ? 1 /* InlineIncEnd */ : -600000000 /* NonIncEnd */, null, spec);\r\n        this.tagName = spec.tagName || \"span\";\r\n        this.class = spec.class || \"\";\r\n        this.attrs = spec.attributes || null;\r\n    }\r\n    eq(other) {\r\n        return this == other ||\r\n            other instanceof MarkDecoration &&\r\n                this.tagName == other.tagName &&\r\n                this.class == other.class &&\r\n                (0,_attributes_js__WEBPACK_IMPORTED_MODULE_1__.attrsEq)(this.attrs, other.attrs);\r\n    }\r\n    range(from, to = from) {\r\n        if (from >= to)\r\n            throw new RangeError(\"Mark decorations may not be empty\");\r\n        return super.range(from, to);\r\n    }\r\n}\r\nMarkDecoration.prototype.point = false;\r\nclass LineDecoration extends Decoration {\r\n    constructor(spec) {\r\n        super(-200000000 /* Line */, -200000000 /* Line */, null, spec);\r\n    }\r\n    eq(other) {\r\n        return other instanceof LineDecoration && (0,_attributes_js__WEBPACK_IMPORTED_MODULE_1__.attrsEq)(this.spec.attributes, other.spec.attributes);\r\n    }\r\n    range(from, to = from) {\r\n        if (to != from)\r\n            throw new RangeError(\"Line decoration ranges must be zero-length\");\r\n        return super.range(from, to);\r\n    }\r\n}\r\nLineDecoration.prototype.mapMode = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.MapMode.TrackBefore;\r\nLineDecoration.prototype.point = true;\r\nclass PointDecoration extends Decoration {\r\n    constructor(spec, startSide, endSide, block, widget, isReplace) {\r\n        super(startSide, endSide, widget, spec);\r\n        this.block = block;\r\n        this.isReplace = isReplace;\r\n        this.mapMode = !block ? _state_index_js__WEBPACK_IMPORTED_MODULE_0__.MapMode.TrackDel : startSide <= 0 ? _state_index_js__WEBPACK_IMPORTED_MODULE_0__.MapMode.TrackBefore : _state_index_js__WEBPACK_IMPORTED_MODULE_0__.MapMode.TrackAfter;\r\n    }\r\n    // Only relevant when this.block == true\r\n    get type() {\r\n        return this.startSide < this.endSide ? BlockType.WidgetRange\r\n            : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;\r\n    }\r\n    get heightRelevant() { return this.block || !!this.widget && this.widget.estimatedHeight >= 5; }\r\n    eq(other) {\r\n        return other instanceof PointDecoration &&\r\n            widgetsEq(this.widget, other.widget) &&\r\n            this.block == other.block &&\r\n            this.startSide == other.startSide && this.endSide == other.endSide;\r\n    }\r\n    range(from, to = from) {\r\n        if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))\r\n            throw new RangeError(\"Invalid range for replacement decoration\");\r\n        if (!this.isReplace && to != from)\r\n            throw new RangeError(\"Widget decorations can only have zero-length ranges\");\r\n        return super.range(from, to);\r\n    }\r\n}\r\nPointDecoration.prototype.point = true;\r\nfunction getInclusive(spec, block = false) {\r\n    let { inclusiveStart: start, inclusiveEnd: end } = spec;\r\n    if (start == null)\r\n        start = spec.inclusive;\r\n    if (end == null)\r\n        end = spec.inclusive;\r\n    return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };\r\n}\r\nfunction widgetsEq(a, b) {\r\n    return a == b || !!(a && b && a.compare(b));\r\n}\r\nfunction addRange(from, to, ranges, margin = 0) {\r\n    let last = ranges.length - 1;\r\n    if (last >= 0 && ranges[last] + margin >= from)\r\n        ranges[last] = Math.max(ranges[last], to);\r\n    else\r\n        ranges.push(from, to);\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/decoration.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/docview.js":
/*!***************************************************!*\
  !*** ./sys/public/js/editor/dist/view/docview.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CompositionWidget\": () => (/* binding */ CompositionWidget),\n/* harmony export */   \"DocView\": () => (/* binding */ DocView),\n/* harmony export */   \"compositionSurroundingNode\": () => (/* binding */ compositionSurroundingNode)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _contentview_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contentview.js */ \"./sys/public/js/editor/dist/view/contentview.js\");\n/* harmony import */ var _blockview_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./blockview.js */ \"./sys/public/js/editor/dist/view/blockview.js\");\n/* harmony import */ var _inlineview_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./inlineview.js */ \"./sys/public/js/editor/dist/view/inlineview.js\");\n/* harmony import */ var _buildview_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./buildview.js */ \"./sys/public/js/editor/dist/view/buildview.js\");\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./browser.js */ \"./sys/public/js/editor/dist/view/browser.js\");\n/* harmony import */ var _decoration_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./decoration.js */ \"./sys/public/js/editor/dist/view/decoration.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom.js */ \"./sys/public/js/editor/dist/view/dom.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n/* harmony import */ var _bidi_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bidi.js */ \"./sys/public/js/editor/dist/view/bidi.js\");\n/* harmony import */ var _domreader_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./domreader.js */ \"./sys/public/js/editor/dist/view/domreader.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass DocView extends _contentview_js__WEBPACK_IMPORTED_MODULE_1__.ContentView {\r\n    constructor(view) {\r\n        super();\r\n        this.view = view;\r\n        this.compositionDeco = _decoration_js__WEBPACK_IMPORTED_MODULE_6__.Decoration.none;\r\n        this.decorations = [];\r\n        this.dynamicDecorationMap = [];\r\n        // Track a minimum width for the editor. When measuring sizes in\r\n        // measureVisibleLineHeights, this is updated to point at the width\r\n        // of a given element and its extent in the document. When a change\r\n        // happens in that range, these are reset. That way, once we've seen\r\n        // a line/element of a given length, we keep the editor wide enough\r\n        // to fit at least that element, until it is changed, at which point\r\n        // we forget it again.\r\n        this.minWidth = 0;\r\n        this.minWidthFrom = 0;\r\n        this.minWidthTo = 0;\r\n        // Track whether the DOM selection was set in a lossy way, so that\r\n        // we don't mess it up when reading it back it\r\n        this.impreciseAnchor = null;\r\n        this.impreciseHead = null;\r\n        this.forceSelection = false;\r\n        // Used by the resize observer to ignore resizes that we caused\r\n        // ourselves\r\n        this.lastUpdate = Date.now();\r\n        this.setDOM(view.contentDOM);\r\n        this.children = [new _blockview_js__WEBPACK_IMPORTED_MODULE_2__.LineView];\r\n        this.children[0].setParent(this);\r\n        this.updateDeco();\r\n        this.updateInner([new _extension_js__WEBPACK_IMPORTED_MODULE_8__.ChangedRange(0, 0, 0, view.state.doc.length)], 0);\r\n    }\r\n    get root() { return this.view.root; }\r\n    get editorView() { return this.view; }\r\n    get length() { return this.view.state.doc.length; }\r\n    // Update the document view to a given state. scrollIntoView can be\r\n    // used as a hint to compute a new viewport that includes that\r\n    // position, if we know the editor is going to scroll that position\r\n    // into view.\r\n    update(update) {\r\n        let changedRanges = update.changedRanges;\r\n        if (this.minWidth > 0 && changedRanges.length) {\r\n            if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {\r\n                this.minWidth = this.minWidthFrom = this.minWidthTo = 0;\r\n            }\r\n            else {\r\n                this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);\r\n                this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);\r\n            }\r\n        }\r\n        if (this.view.inputState.composing < 0)\r\n            this.compositionDeco = _decoration_js__WEBPACK_IMPORTED_MODULE_6__.Decoration.none;\r\n        else if (update.transactions.length || this.dirty)\r\n            this.compositionDeco = computeCompositionDeco(this.view, update.changes);\r\n        // When the DOM nodes around the selection are moved to another\r\n        // parent, Chrome sometimes reports a different selection through\r\n        // getSelection than the one that it actually shows to the user.\r\n        // This forces a selection update when lines are joined to work\r\n        // around that. Issue #54\r\n        if ((_browser_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].ie || _browser_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].chrome) && !this.compositionDeco.size && update &&\r\n            update.state.doc.lines != update.startState.doc.lines)\r\n            this.forceSelection = true;\r\n        let prevDeco = this.decorations, deco = this.updateDeco();\r\n        let decoDiff = findChangedDeco(prevDeco, deco, update.changes);\r\n        changedRanges = _extension_js__WEBPACK_IMPORTED_MODULE_8__.ChangedRange.extendWithRanges(changedRanges, decoDiff);\r\n        if (this.dirty == 0 /* Not */ && changedRanges.length == 0) {\r\n            return false;\r\n        }\r\n        else {\r\n            this.updateInner(changedRanges, update.startState.doc.length);\r\n            if (update.transactions.length)\r\n                this.lastUpdate = Date.now();\r\n            return true;\r\n        }\r\n    }\r\n    // Used by update and the constructor do perform the actual DOM\r\n    // update\r\n    updateInner(changes, oldLength) {\r\n        this.view.viewState.mustMeasureContent = true;\r\n        this.updateChildren(changes, oldLength);\r\n        let { observer } = this.view;\r\n        observer.ignore(() => {\r\n            // Lock the height during redrawing, since Chrome sometimes\r\n            // messes with the scroll position during DOM mutation (though\r\n            // no relayout is triggered and I cannot imagine how it can\r\n            // recompute the scroll position without a layout)\r\n            this.dom.style.height = this.view.viewState.contentHeight + \"px\";\r\n            this.dom.style.minWidth = this.minWidth ? this.minWidth + \"px\" : \"\";\r\n            // Chrome will sometimes, when DOM mutations occur directly\r\n            // around the selection, get confused and report a different\r\n            // selection from the one it displays (issue #218). This tries\r\n            // to detect that situation.\r\n            let track = _browser_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].chrome || _browser_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;\r\n            this.sync(track);\r\n            this.dirty = 0 /* Not */;\r\n            if (track && (track.written || observer.selectionRange.focusNode != track.node))\r\n                this.forceSelection = true;\r\n            this.dom.style.height = \"\";\r\n        });\r\n        let gaps = [];\r\n        if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)\r\n            for (let child of this.children)\r\n                if (child instanceof _blockview_js__WEBPACK_IMPORTED_MODULE_2__.BlockWidgetView && child.widget instanceof BlockGapWidget)\r\n                    gaps.push(child.dom);\r\n        observer.updateGaps(gaps);\r\n    }\r\n    updateChildren(changes, oldLength) {\r\n        let cursor = this.childCursor(oldLength);\r\n        for (let i = changes.length - 1;; i--) {\r\n            let next = i >= 0 ? changes[i] : null;\r\n            if (!next)\r\n                break;\r\n            let { fromA, toA, fromB, toB } = next;\r\n            let { content, breakAtStart, openStart, openEnd } = _buildview_js__WEBPACK_IMPORTED_MODULE_4__.ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap);\r\n            let { i: toI, off: toOff } = cursor.findPos(toA, 1);\r\n            let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);\r\n            (0,_contentview_js__WEBPACK_IMPORTED_MODULE_1__.replaceRange)(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);\r\n        }\r\n    }\r\n    // Sync the DOM selection to this.state.selection\r\n    updateSelection(mustRead = false, fromPointer = false) {\r\n        if (mustRead)\r\n            this.view.observer.readSelectionRange();\r\n        if (!(fromPointer || this.mayControlSelection()) ||\r\n            _browser_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].ios && this.view.inputState.rapidCompositionStart)\r\n            return;\r\n        let force = this.forceSelection;\r\n        this.forceSelection = false;\r\n        let main = this.view.state.selection.main;\r\n        // FIXME need to handle the case where the selection falls inside a block range\r\n        let anchor = this.domAtPos(main.anchor);\r\n        let head = main.empty ? anchor : this.domAtPos(main.head);\r\n        // Always reset on Firefox when next to an uneditable node to\r\n        // avoid invisible cursor bugs (#111)\r\n        if (_browser_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].gecko && main.empty && betweenUneditable(anchor)) {\r\n            let dummy = document.createTextNode(\"\");\r\n            this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));\r\n            anchor = head = new _contentview_js__WEBPACK_IMPORTED_MODULE_1__.DOMPos(dummy, 0);\r\n            force = true;\r\n        }\r\n        let domSel = this.view.observer.selectionRange;\r\n        // If the selection is already here, or in an equivalent position, don't touch it\r\n        if (force || !domSel.focusNode ||\r\n            !(0,_dom_js__WEBPACK_IMPORTED_MODULE_7__.isEquivalentPosition)(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||\r\n            !(0,_dom_js__WEBPACK_IMPORTED_MODULE_7__.isEquivalentPosition)(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {\r\n            this.view.observer.ignore(() => {\r\n                // Chrome Android will hide the virtual keyboard when tapping\r\n                // inside an uneditable node, and not bring it back when we\r\n                // move the cursor to its proper position. This tries to\r\n                // restore the keyboard by cycling focus.\r\n                if (_browser_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].android && _browser_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].chrome && this.dom.contains(domSel.focusNode) &&\r\n                    inUneditable(domSel.focusNode, this.dom)) {\r\n                    this.dom.blur();\r\n                    this.dom.focus({ preventScroll: true });\r\n                }\r\n                let rawSel = (0,_dom_js__WEBPACK_IMPORTED_MODULE_7__.getSelection)(this.root);\r\n                if (main.empty) {\r\n                    // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076\r\n                    if (_browser_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].gecko) {\r\n                        let nextTo = nextToUneditable(anchor.node, anchor.offset);\r\n                        if (nextTo && nextTo != (1 /* Before */ | 2 /* After */)) {\r\n                            let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* Before */ ? 1 : -1);\r\n                            if (text)\r\n                                anchor = new _contentview_js__WEBPACK_IMPORTED_MODULE_1__.DOMPos(text, nextTo == 1 /* Before */ ? 0 : text.nodeValue.length);\r\n                        }\r\n                    }\r\n                    rawSel.collapse(anchor.node, anchor.offset);\r\n                    if (main.bidiLevel != null && domSel.cursorBidiLevel != null)\r\n                        domSel.cursorBidiLevel = main.bidiLevel;\r\n                }\r\n                else if (rawSel.extend) {\r\n                    // Selection.extend can be used to create an 'inverted' selection\r\n                    // (one where the focus is before the anchor), but not all\r\n                    // browsers support it yet.\r\n                    rawSel.collapse(anchor.node, anchor.offset);\r\n                    rawSel.extend(head.node, head.offset);\r\n                }\r\n                else {\r\n                    // Primitive (IE) way\r\n                    let range = document.createRange();\r\n                    if (main.anchor > main.head)\r\n                        [anchor, head] = [head, anchor];\r\n                    range.setEnd(head.node, head.offset);\r\n                    range.setStart(anchor.node, anchor.offset);\r\n                    rawSel.removeAllRanges();\r\n                    rawSel.addRange(range);\r\n                }\r\n            });\r\n            this.view.observer.setSelectionRange(anchor, head);\r\n        }\r\n        this.impreciseAnchor = anchor.precise ? null : new _contentview_js__WEBPACK_IMPORTED_MODULE_1__.DOMPos(domSel.anchorNode, domSel.anchorOffset);\r\n        this.impreciseHead = head.precise ? null : new _contentview_js__WEBPACK_IMPORTED_MODULE_1__.DOMPos(domSel.focusNode, domSel.focusOffset);\r\n    }\r\n    enforceCursorAssoc() {\r\n        if (this.compositionDeco.size)\r\n            return;\r\n        let cursor = this.view.state.selection.main;\r\n        let sel = (0,_dom_js__WEBPACK_IMPORTED_MODULE_7__.getSelection)(this.root);\r\n        if (!cursor.empty || !cursor.assoc || !sel.modify)\r\n            return;\r\n        let line = _blockview_js__WEBPACK_IMPORTED_MODULE_2__.LineView.find(this, cursor.head);\r\n        if (!line)\r\n            return;\r\n        let lineStart = line.posAtStart;\r\n        if (cursor.head == lineStart || cursor.head == lineStart + line.length)\r\n            return;\r\n        let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);\r\n        if (!before || !after || before.bottom > after.top)\r\n            return;\r\n        let dom = this.domAtPos(cursor.head + cursor.assoc);\r\n        sel.collapse(dom.node, dom.offset);\r\n        sel.modify(\"move\", cursor.assoc < 0 ? \"forward\" : \"backward\", \"lineboundary\");\r\n    }\r\n    mayControlSelection() {\r\n        return this.view.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_8__.editable) ? this.root.activeElement == this.dom\r\n            : (0,_dom_js__WEBPACK_IMPORTED_MODULE_7__.hasSelection)(this.dom, this.view.observer.selectionRange);\r\n    }\r\n    nearest(dom) {\r\n        for (let cur = dom; cur;) {\r\n            let domView = _contentview_js__WEBPACK_IMPORTED_MODULE_1__.ContentView.get(cur);\r\n            if (domView && domView.rootView == this)\r\n                return domView;\r\n            cur = cur.parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    posFromDOM(node, offset) {\r\n        let view = this.nearest(node);\r\n        if (!view)\r\n            throw new RangeError(\"Trying to find position for a DOM position outside of the document\");\r\n        return view.localPosFromDOM(node, offset) + view.posAtStart;\r\n    }\r\n    domAtPos(pos) {\r\n        let { i, off } = this.childCursor().findPos(pos, -1);\r\n        for (; i < this.children.length - 1;) {\r\n            let child = this.children[i];\r\n            if (off < child.length || child instanceof _blockview_js__WEBPACK_IMPORTED_MODULE_2__.LineView)\r\n                break;\r\n            i++;\r\n            off = 0;\r\n        }\r\n        return this.children[i].domAtPos(off);\r\n    }\r\n    coordsAt(pos, side) {\r\n        for (let off = this.length, i = this.children.length - 1;; i--) {\r\n            let child = this.children[i], start = off - child.breakAfter - child.length;\r\n            if (pos > start ||\r\n                (pos == start && child.type != _decoration_js__WEBPACK_IMPORTED_MODULE_6__.BlockType.WidgetBefore && child.type != _decoration_js__WEBPACK_IMPORTED_MODULE_6__.BlockType.WidgetAfter &&\r\n                    (!i || side == 2 || this.children[i - 1].breakAfter ||\r\n                        (this.children[i - 1].type == _decoration_js__WEBPACK_IMPORTED_MODULE_6__.BlockType.WidgetBefore && side > -2))))\r\n                return child.coordsAt(pos - start, side);\r\n            off = start;\r\n        }\r\n    }\r\n    measureVisibleLineHeights(viewport) {\r\n        let result = [], { from, to } = viewport;\r\n        let contentWidth = this.view.contentDOM.clientWidth;\r\n        let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;\r\n        let widest = -1, ltr = this.view.textDirection == _bidi_js__WEBPACK_IMPORTED_MODULE_9__.Direction.LTR;\r\n        for (let pos = 0, i = 0; i < this.children.length; i++) {\r\n            let child = this.children[i], end = pos + child.length;\r\n            if (end > to)\r\n                break;\r\n            if (pos >= from) {\r\n                let childRect = child.dom.getBoundingClientRect();\r\n                result.push(childRect.height);\r\n                if (isWider) {\r\n                    let last = child.dom.lastChild;\r\n                    let rects = last ? (0,_dom_js__WEBPACK_IMPORTED_MODULE_7__.clientRectsFor)(last) : [];\r\n                    if (rects.length) {\r\n                        let rect = rects[rects.length - 1];\r\n                        let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;\r\n                        if (width > widest) {\r\n                            widest = width;\r\n                            this.minWidth = contentWidth;\r\n                            this.minWidthFrom = pos;\r\n                            this.minWidthTo = end;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            pos = end + child.breakAfter;\r\n        }\r\n        return result;\r\n    }\r\n    textDirectionAt(pos) {\r\n        let { i } = this.childPos(pos, 1);\r\n        return getComputedStyle(this.children[i].dom).direction == \"rtl\" ? _bidi_js__WEBPACK_IMPORTED_MODULE_9__.Direction.RTL : _bidi_js__WEBPACK_IMPORTED_MODULE_9__.Direction.LTR;\r\n    }\r\n    measureTextSize() {\r\n        for (let child of this.children) {\r\n            if (child instanceof _blockview_js__WEBPACK_IMPORTED_MODULE_2__.LineView) {\r\n                let measure = child.measureTextSize();\r\n                if (measure)\r\n                    return measure;\r\n            }\r\n        }\r\n        // If no workable line exists, force a layout of a measurable element\r\n        let dummy = document.createElement(\"div\"), lineHeight, charWidth;\r\n        dummy.className = \"cm-line\";\r\n        dummy.textContent = \"abc def ghi jkl mno pqr stu\";\r\n        this.view.observer.ignore(() => {\r\n            this.dom.appendChild(dummy);\r\n            let rect = (0,_dom_js__WEBPACK_IMPORTED_MODULE_7__.clientRectsFor)(dummy.firstChild)[0];\r\n            lineHeight = dummy.getBoundingClientRect().height;\r\n            charWidth = rect ? rect.width / 27 : 7;\r\n            dummy.remove();\r\n        });\r\n        return { lineHeight, charWidth };\r\n    }\r\n    childCursor(pos = this.length) {\r\n        // Move back to start of last element when possible, so that\r\n        // `ChildCursor.findPos` doesn't have to deal with the edge case\r\n        // of being after the last element.\r\n        let i = this.children.length;\r\n        if (i)\r\n            pos -= this.children[--i].length;\r\n        return new _contentview_js__WEBPACK_IMPORTED_MODULE_1__.ChildCursor(this.children, pos, i);\r\n    }\r\n    computeBlockGapDeco() {\r\n        let deco = [], vs = this.view.viewState;\r\n        for (let pos = 0, i = 0;; i++) {\r\n            let next = i == vs.viewports.length ? null : vs.viewports[i];\r\n            let end = next ? next.from - 1 : this.length;\r\n            if (end > pos) {\r\n                let height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;\r\n                deco.push(_decoration_js__WEBPACK_IMPORTED_MODULE_6__.Decoration.replace({\r\n                    widget: new BlockGapWidget(height),\r\n                    block: true,\r\n                    inclusive: true,\r\n                    isBlockGap: true,\r\n                }).range(pos, end));\r\n            }\r\n            if (!next)\r\n                break;\r\n            pos = next.to + 1;\r\n        }\r\n        return _decoration_js__WEBPACK_IMPORTED_MODULE_6__.Decoration.set(deco);\r\n    }\r\n    updateDeco() {\r\n        let allDeco = this.view.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_8__.decorations).map((d, i) => {\r\n            let dynamic = this.dynamicDecorationMap[i] = typeof d == \"function\";\r\n            return dynamic ? d(this.view) : d;\r\n        });\r\n        for (let i = allDeco.length; i < allDeco.length + 3; i++)\r\n            this.dynamicDecorationMap[i] = false;\r\n        return this.decorations = [\r\n            ...allDeco,\r\n            this.compositionDeco,\r\n            this.computeBlockGapDeco(),\r\n            this.view.viewState.lineGapDeco\r\n        ];\r\n    }\r\n    scrollIntoView(target) {\r\n        let { range } = target;\r\n        let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;\r\n        if (!rect)\r\n            return;\r\n        if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))\r\n            rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),\r\n                right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };\r\n        let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;\r\n        for (let margins of this.view.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_8__.scrollMargins).map(f => f(this.view)))\r\n            if (margins) {\r\n                let { left, right, top, bottom } = margins;\r\n                if (left != null)\r\n                    mLeft = Math.max(mLeft, left);\r\n                if (right != null)\r\n                    mRight = Math.max(mRight, right);\r\n                if (top != null)\r\n                    mTop = Math.max(mTop, top);\r\n                if (bottom != null)\r\n                    mBottom = Math.max(mBottom, bottom);\r\n            }\r\n        let targetRect = {\r\n            left: rect.left - mLeft, top: rect.top - mTop,\r\n            right: rect.right + mRight, bottom: rect.bottom + mBottom\r\n        };\r\n        (0,_dom_js__WEBPACK_IMPORTED_MODULE_7__.scrollRectIntoView)(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == _bidi_js__WEBPACK_IMPORTED_MODULE_9__.Direction.LTR);\r\n    }\r\n}\r\nfunction betweenUneditable(pos) {\r\n    return pos.node.nodeType == 1 && pos.node.firstChild &&\r\n        (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == \"false\") &&\r\n        (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == \"false\");\r\n}\r\nclass BlockGapWidget extends _decoration_js__WEBPACK_IMPORTED_MODULE_6__.WidgetType {\r\n    constructor(height) {\r\n        super();\r\n        this.height = height;\r\n    }\r\n    toDOM() {\r\n        let elt = document.createElement(\"div\");\r\n        this.updateDOM(elt);\r\n        return elt;\r\n    }\r\n    eq(other) { return other.height == this.height; }\r\n    updateDOM(elt) {\r\n        elt.style.height = this.height + \"px\";\r\n        return true;\r\n    }\r\n    get estimatedHeight() { return this.height; }\r\n}\r\nfunction compositionSurroundingNode(view) {\r\n    let sel = view.observer.selectionRange;\r\n    let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);\r\n    if (!textNode)\r\n        return null;\r\n    let cView = view.docView.nearest(textNode);\r\n    if (!cView)\r\n        return null;\r\n    if (cView instanceof _blockview_js__WEBPACK_IMPORTED_MODULE_2__.LineView) {\r\n        let topNode = textNode;\r\n        while (topNode.parentNode != cView.dom)\r\n            topNode = topNode.parentNode;\r\n        let prev = topNode.previousSibling;\r\n        while (prev && !_contentview_js__WEBPACK_IMPORTED_MODULE_1__.ContentView.get(prev))\r\n            prev = prev.previousSibling;\r\n        let pos = prev ? _contentview_js__WEBPACK_IMPORTED_MODULE_1__.ContentView.get(prev).posAtEnd : cView.posAtStart;\r\n        return { from: pos, to: pos, node: topNode, text: textNode };\r\n    }\r\n    else {\r\n        for (;;) {\r\n            let { parent } = cView;\r\n            if (!parent)\r\n                return null;\r\n            if (parent instanceof _blockview_js__WEBPACK_IMPORTED_MODULE_2__.LineView)\r\n                break;\r\n            cView = parent;\r\n        }\r\n        let from = cView.posAtStart;\r\n        return { from, to: from + cView.length, node: cView.dom, text: textNode };\r\n    }\r\n}\r\nfunction computeCompositionDeco(view, changes) {\r\n    let surrounding = compositionSurroundingNode(view);\r\n    if (!surrounding)\r\n        return _decoration_js__WEBPACK_IMPORTED_MODULE_6__.Decoration.none;\r\n    let { from, to, node, text: textNode } = surrounding;\r\n    let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));\r\n    let { state } = view, text = node.nodeType == 3 ? node.nodeValue :\r\n        new _domreader_js__WEBPACK_IMPORTED_MODULE_10__.DOMReader([], state).readRange(node.firstChild, null).text;\r\n    if (newTo - newFrom < text.length) {\r\n        if (state.doc.sliceString(newFrom, Math.min(state.doc.length, newFrom + text.length), _domreader_js__WEBPACK_IMPORTED_MODULE_10__.LineBreakPlaceholder) == text)\r\n            newTo = newFrom + text.length;\r\n        else if (state.doc.sliceString(Math.max(0, newTo - text.length), newTo, _domreader_js__WEBPACK_IMPORTED_MODULE_10__.LineBreakPlaceholder) == text)\r\n            newFrom = newTo - text.length;\r\n        else\r\n            return _decoration_js__WEBPACK_IMPORTED_MODULE_6__.Decoration.none;\r\n    }\r\n    else if (state.doc.sliceString(newFrom, newTo, _domreader_js__WEBPACK_IMPORTED_MODULE_10__.LineBreakPlaceholder) != text) {\r\n        return _decoration_js__WEBPACK_IMPORTED_MODULE_6__.Decoration.none;\r\n    }\r\n    let topView = _contentview_js__WEBPACK_IMPORTED_MODULE_1__.ContentView.get(node);\r\n    if (topView instanceof _inlineview_js__WEBPACK_IMPORTED_MODULE_3__.CompositionView)\r\n        topView = topView.widget.topView;\r\n    else if (topView)\r\n        topView.parent = null;\r\n    return _decoration_js__WEBPACK_IMPORTED_MODULE_6__.Decoration.set(_decoration_js__WEBPACK_IMPORTED_MODULE_6__.Decoration.replace({ widget: new CompositionWidget(node, textNode, topView), inclusive: true })\r\n        .range(newFrom, newTo));\r\n}\r\nclass CompositionWidget extends _decoration_js__WEBPACK_IMPORTED_MODULE_6__.WidgetType {\r\n    constructor(top, text, topView) {\r\n        super();\r\n        this.top = top;\r\n        this.text = text;\r\n        this.topView = topView;\r\n    }\r\n    eq(other) { return this.top == other.top && this.text == other.text; }\r\n    toDOM() { return this.top; }\r\n    ignoreEvent() { return false; }\r\n    get customView() { return _inlineview_js__WEBPACK_IMPORTED_MODULE_3__.CompositionView; }\r\n}\r\nfunction nearbyTextNode(node, offset, side) {\r\n    for (;;) {\r\n        if (node.nodeType == 3)\r\n            return node;\r\n        if (node.nodeType == 1 && offset > 0 && side <= 0) {\r\n            node = node.childNodes[offset - 1];\r\n            offset = (0,_dom_js__WEBPACK_IMPORTED_MODULE_7__.maxOffset)(node);\r\n        }\r\n        else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {\r\n            node = node.childNodes[offset];\r\n            offset = 0;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\nfunction nextToUneditable(node, offset) {\r\n    if (node.nodeType != 1)\r\n        return 0;\r\n    return (offset && node.childNodes[offset - 1].contentEditable == \"false\" ? 1 /* Before */ : 0) |\r\n        (offset < node.childNodes.length && node.childNodes[offset].contentEditable == \"false\" ? 2 /* After */ : 0);\r\n}\r\nclass DecorationComparator {\r\n    constructor() {\r\n        this.changes = [];\r\n    }\r\n    compareRange(from, to) { (0,_decoration_js__WEBPACK_IMPORTED_MODULE_6__.addRange)(from, to, this.changes); }\r\n    comparePoint(from, to) { (0,_decoration_js__WEBPACK_IMPORTED_MODULE_6__.addRange)(from, to, this.changes); }\r\n}\r\nfunction findChangedDeco(a, b, diff) {\r\n    let comp = new DecorationComparator;\r\n    _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSet.compare(a, b, diff, comp);\r\n    return comp.changes;\r\n}\r\nfunction inUneditable(node, inside) {\r\n    for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {\r\n        if (cur.nodeType == 1 && cur.contentEditable == 'false') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/docview.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/dom.js":
/*!***********************************************!*\
  !*** ./sys/public/js/editor/dist/view/dom.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DOMSelectionState\": () => (/* binding */ DOMSelectionState),\n/* harmony export */   \"Rect0\": () => (/* binding */ Rect0),\n/* harmony export */   \"clearAttributes\": () => (/* binding */ clearAttributes),\n/* harmony export */   \"clientRectsFor\": () => (/* binding */ clientRectsFor),\n/* harmony export */   \"contains\": () => (/* binding */ contains),\n/* harmony export */   \"deepActiveElement\": () => (/* binding */ deepActiveElement),\n/* harmony export */   \"dispatchKey\": () => (/* binding */ dispatchKey),\n/* harmony export */   \"domIndex\": () => (/* binding */ domIndex),\n/* harmony export */   \"flattenRect\": () => (/* binding */ flattenRect),\n/* harmony export */   \"focusPreventScroll\": () => (/* binding */ focusPreventScroll),\n/* harmony export */   \"getRoot\": () => (/* binding */ getRoot),\n/* harmony export */   \"getSelection\": () => (/* binding */ getSelection),\n/* harmony export */   \"hasSelection\": () => (/* binding */ hasSelection),\n/* harmony export */   \"isEquivalentPosition\": () => (/* binding */ isEquivalentPosition),\n/* harmony export */   \"maxOffset\": () => (/* binding */ maxOffset),\n/* harmony export */   \"scrollRectIntoView\": () => (/* binding */ scrollRectIntoView),\n/* harmony export */   \"textRange\": () => (/* binding */ textRange)\n/* harmony export */ });\nfunction getSelection(root) {\r\n    let target;\r\n    // Browsers differ on whether shadow roots have a getSelection method.\r\n    // If it exists, use that, otherwise, call it on the document.\r\n    if (root.nodeType == 11) { // Shadow root\r\n        target = root.getSelection ? root : root.ownerDocument;\r\n    }\r\n    else {\r\n        target = root;\r\n    }\r\n    return target.getSelection();\r\n}\r\nfunction contains(dom, node) {\r\n    return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;\r\n}\r\nfunction deepActiveElement() {\r\n    let elt = document.activeElement;\r\n    while (elt && elt.shadowRoot)\r\n        elt = elt.shadowRoot.activeElement;\r\n    return elt;\r\n}\r\nfunction hasSelection(dom, selection) {\r\n    if (!selection.anchorNode)\r\n        return false;\r\n    try {\r\n        // Firefox will raise 'permission denied' errors when accessing\r\n        // properties of `sel.anchorNode` when it's in a generated CSS\r\n        // element.\r\n        return contains(dom, selection.anchorNode);\r\n    }\r\n    catch (_) {\r\n        return false;\r\n    }\r\n}\r\nfunction clientRectsFor(dom) {\r\n    if (dom.nodeType == 3)\r\n        return textRange(dom, 0, dom.nodeValue.length).getClientRects();\r\n    else if (dom.nodeType == 1)\r\n        return dom.getClientRects();\r\n    else\r\n        return [];\r\n}\r\n// Scans forward and backward through DOM positions equivalent to the\r\n// given one to see if the two are in the same place (i.e. after a\r\n// text node vs at the end of that text node)\r\nfunction isEquivalentPosition(node, off, targetNode, targetOff) {\r\n    return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||\r\n        scanFor(node, off, targetNode, targetOff, 1)) : false;\r\n}\r\nfunction domIndex(node) {\r\n    for (var index = 0;; index++) {\r\n        node = node.previousSibling;\r\n        if (!node)\r\n            return index;\r\n    }\r\n}\r\nfunction scanFor(node, off, targetNode, targetOff, dir) {\r\n    for (;;) {\r\n        if (node == targetNode && off == targetOff)\r\n            return true;\r\n        if (off == (dir < 0 ? 0 : maxOffset(node))) {\r\n            if (node.nodeName == \"DIV\")\r\n                return false;\r\n            let parent = node.parentNode;\r\n            if (!parent || parent.nodeType != 1)\r\n                return false;\r\n            off = domIndex(node) + (dir < 0 ? 0 : 1);\r\n            node = parent;\r\n        }\r\n        else if (node.nodeType == 1) {\r\n            node = node.childNodes[off + (dir < 0 ? -1 : 0)];\r\n            if (node.nodeType == 1 && node.contentEditable == \"false\")\r\n                return false;\r\n            off = dir < 0 ? maxOffset(node) : 0;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nfunction maxOffset(node) {\r\n    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;\r\n}\r\nconst Rect0 = { left: 0, right: 0, top: 0, bottom: 0 };\r\nfunction flattenRect(rect, left) {\r\n    let x = left ? rect.left : rect.right;\r\n    return { left: x, right: x, top: rect.top, bottom: rect.bottom };\r\n}\r\nfunction windowRect(win) {\r\n    return { left: 0, right: win.innerWidth,\r\n        top: 0, bottom: win.innerHeight };\r\n}\r\nfunction scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {\r\n    let doc = dom.ownerDocument, win = doc.defaultView;\r\n    for (let cur = dom; cur;) {\r\n        if (cur.nodeType == 1) { // Element\r\n            let bounding, top = cur == doc.body;\r\n            if (top) {\r\n                bounding = windowRect(win);\r\n            }\r\n            else {\r\n                if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {\r\n                    cur = cur.parentNode;\r\n                    continue;\r\n                }\r\n                let rect = cur.getBoundingClientRect();\r\n                // Make sure scrollbar width isn't included in the rectangle\r\n                bounding = { left: rect.left, right: rect.left + cur.clientWidth,\r\n                    top: rect.top, bottom: rect.top + cur.clientHeight };\r\n            }\r\n            let moveX = 0, moveY = 0;\r\n            if (y == \"nearest\") {\r\n                if (rect.top < bounding.top) {\r\n                    moveY = -(bounding.top - rect.top + yMargin);\r\n                    if (side > 0 && rect.bottom > bounding.bottom + moveY)\r\n                        moveY = rect.bottom - bounding.bottom + moveY + yMargin;\r\n                }\r\n                else if (rect.bottom > bounding.bottom) {\r\n                    moveY = rect.bottom - bounding.bottom + yMargin;\r\n                    if (side < 0 && (rect.top - moveY) < bounding.top)\r\n                        moveY = -(bounding.top + moveY - rect.top + yMargin);\r\n                }\r\n            }\r\n            else {\r\n                let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;\r\n                let targetTop = y == \"center\" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :\r\n                    y == \"start\" || y == \"center\" && side < 0 ? rect.top - yMargin :\r\n                        rect.bottom - boundingHeight + yMargin;\r\n                moveY = targetTop - bounding.top;\r\n            }\r\n            if (x == \"nearest\") {\r\n                if (rect.left < bounding.left) {\r\n                    moveX = -(bounding.left - rect.left + xMargin);\r\n                    if (side > 0 && rect.right > bounding.right + moveX)\r\n                        moveX = rect.right - bounding.right + moveX + xMargin;\r\n                }\r\n                else if (rect.right > bounding.right) {\r\n                    moveX = rect.right - bounding.right + xMargin;\r\n                    if (side < 0 && rect.left < bounding.left + moveX)\r\n                        moveX = -(bounding.left + moveX - rect.left + xMargin);\r\n                }\r\n            }\r\n            else {\r\n                let targetLeft = x == \"center\" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :\r\n                    (x == \"start\") == ltr ? rect.left - xMargin :\r\n                        rect.right - (bounding.right - bounding.left) + xMargin;\r\n                moveX = targetLeft - bounding.left;\r\n            }\r\n            if (moveX || moveY) {\r\n                if (top) {\r\n                    win.scrollBy(moveX, moveY);\r\n                }\r\n                else {\r\n                    if (moveY) {\r\n                        let start = cur.scrollTop;\r\n                        cur.scrollTop += moveY;\r\n                        moveY = cur.scrollTop - start;\r\n                    }\r\n                    if (moveX) {\r\n                        let start = cur.scrollLeft;\r\n                        cur.scrollLeft += moveX;\r\n                        moveX = cur.scrollLeft - start;\r\n                    }\r\n                    rect = { left: rect.left - moveX, top: rect.top - moveY,\r\n                        right: rect.right - moveX, bottom: rect.bottom - moveY };\r\n                }\r\n            }\r\n            if (top)\r\n                break;\r\n            cur = cur.assignedSlot || cur.parentNode;\r\n            x = y = \"nearest\";\r\n        }\r\n        else if (cur.nodeType == 11) { // A shadow root\r\n            cur = cur.host;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n}\r\nclass DOMSelectionState {\r\n    constructor() {\r\n        this.anchorNode = null;\r\n        this.anchorOffset = 0;\r\n        this.focusNode = null;\r\n        this.focusOffset = 0;\r\n    }\r\n    eq(domSel) {\r\n        return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;\r\n    }\r\n    setRange(range) {\r\n        this.set(range.anchorNode, range.anchorOffset, range.focusNode, range.focusOffset);\r\n    }\r\n    set(anchorNode, anchorOffset, focusNode, focusOffset) {\r\n        this.anchorNode = anchorNode;\r\n        this.anchorOffset = anchorOffset;\r\n        this.focusNode = focusNode;\r\n        this.focusOffset = focusOffset;\r\n    }\r\n}\r\nlet preventScrollSupported = null;\r\n// Feature-detects support for .focus({preventScroll: true}), and uses a fallback kludge when not supported.\r\nfunction focusPreventScroll(dom) {\r\n    if (dom.setActive)\r\n        return dom.setActive(); // in IE\r\n    if (preventScrollSupported)\r\n        return dom.focus(preventScrollSupported);\r\n    let stack = [];\r\n    for (let cur = dom; cur; cur = cur.parentNode) {\r\n        stack.push(cur, cur.scrollTop, cur.scrollLeft);\r\n        if (cur == cur.ownerDocument)\r\n            break;\r\n    }\r\n    dom.focus(preventScrollSupported == null ? {\r\n        get preventScroll() {\r\n            preventScrollSupported = { preventScroll: true };\r\n            return true;\r\n        }\r\n    } : undefined);\r\n    if (!preventScrollSupported) {\r\n        preventScrollSupported = false;\r\n        for (let i = 0; i < stack.length;) {\r\n            let elt = stack[i++], top = stack[i++], left = stack[i++];\r\n            if (elt.scrollTop != top)\r\n                elt.scrollTop = top;\r\n            if (elt.scrollLeft != left)\r\n                elt.scrollLeft = left;\r\n        }\r\n    }\r\n}\r\nlet scratchRange;\r\nfunction textRange(node, from, to = from) {\r\n    let range = scratchRange || (scratchRange = document.createRange());\r\n    range.setEnd(node, to);\r\n    range.setStart(node, from);\r\n    return range;\r\n}\r\nfunction dispatchKey(elt, name, code) {\r\n    let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };\r\n    let down = new KeyboardEvent(\"keydown\", options);\r\n    down.synthetic = true;\r\n    elt.dispatchEvent(down);\r\n    let up = new KeyboardEvent(\"keyup\", options);\r\n    up.synthetic = true;\r\n    elt.dispatchEvent(up);\r\n    return down.defaultPrevented || up.defaultPrevented;\r\n}\r\nfunction getRoot(node) {\r\n    while (node) {\r\n        if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))\r\n            return node;\r\n        node = node.assignedSlot || node.parentNode;\r\n    }\r\n    return null;\r\n}\r\nfunction clearAttributes(node) {\r\n    while (node.attributes.length)\r\n        node.removeAttributeNode(node.attributes[0]);\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/dom.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/domchange.js":
/*!*****************************************************!*\
  !*** ./sys/public/js/editor/dist/view/domchange.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyDOMChange\": () => (/* binding */ applyDOMChange)\n/* harmony export */ });\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom.js */ \"./sys/public/js/editor/dist/view/dom.js\");\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./browser.js */ \"./sys/public/js/editor/dist/view/browser.js\");\n/* harmony import */ var _domreader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./domreader.js */ \"./sys/public/js/editor/dist/view/domreader.js\");\n/* harmony import */ var _docview_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./docview.js */ \"./sys/public/js/editor/dist/view/docview.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nfunction applyDOMChange(view, start, end, typeOver) {\r\n    let change, newSel;\r\n    let sel = view.state.selection.main;\r\n    if (start > -1) {\r\n        let bounds = view.docView.domBoundsAround(start, end, 0);\r\n        if (!bounds || view.state.readOnly)\r\n            return;\r\n        let { from, to } = bounds;\r\n        let selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints(view);\r\n        let reader = new _domreader_js__WEBPACK_IMPORTED_MODULE_3__.DOMReader(selPoints, view.state);\r\n        reader.readRange(bounds.startDOM, bounds.endDOM);\r\n        let preferredPos = sel.from, preferredSide = null;\r\n        // Prefer anchoring to end when Backspace is pressed (or, on Android, when something was deleted)\r\n        if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 || _browser_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].android && reader.text.length < to - from) {\r\n            preferredPos = sel.to;\r\n            preferredSide = \"end\";\r\n        }\r\n        let diff = findDiff(view.state.doc.sliceString(from, to, _domreader_js__WEBPACK_IMPORTED_MODULE_3__.LineBreakPlaceholder), reader.text, preferredPos - from, preferredSide);\r\n        if (diff) {\r\n            // Chrome inserts two newlines when pressing shift-enter at the end of a line. This drops one of those.\r\n            if (_browser_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].chrome && view.inputState.lastKeyCode == 13 && diff.toB == diff.from + 2 && reader.text.slice(diff.from, diff.toB) == _domreader_js__WEBPACK_IMPORTED_MODULE_3__.LineBreakPlaceholder + _domreader_js__WEBPACK_IMPORTED_MODULE_3__.LineBreakPlaceholder)\r\n                diff.toB--;\r\n            change = { from: from + diff.from, to: from + diff.toA,\r\n                insert: _state_index_js__WEBPACK_IMPORTED_MODULE_5__.Text.of(reader.text.slice(diff.from, diff.toB).split(_domreader_js__WEBPACK_IMPORTED_MODULE_3__.LineBreakPlaceholder)) };\r\n        }\r\n        newSel = selectionFromPoints(selPoints, from);\r\n    }\r\n    else if (view.hasFocus || !view.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_0__.editable)) {\r\n        let domSel = view.observer.selectionRange;\r\n        let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;\r\n        let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !(0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.contains)(view.contentDOM, domSel.focusNode) ?\r\n            view.state.selection.main.head :\r\n            view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);\r\n        let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !(0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.contains)(view.contentDOM, domSel.anchorNode) ?\r\n            view.state.selection.main.anchor :\r\n            view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);\r\n        if (head != sel.head || anchor != sel.anchor)\r\n            newSel = _state_index_js__WEBPACK_IMPORTED_MODULE_5__.EditorSelection.single(anchor, head);\r\n    }\r\n    if (!change && !newSel)\r\n        return;\r\n    // Heuristic to notice typing over a selected character\r\n    if (!change && typeOver && !sel.empty && newSel && newSel.main.empty)\r\n        change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };\r\n    // If the change is inside the selection and covers most of it, assume it is a selection replace (with identical characters at the start/end not included in the diff)\r\n    else if (change && change.from >= sel.from && change.to <= sel.to &&\r\n        (change.from != sel.from || change.to != sel.to) &&\r\n        (sel.to - sel.from) - (change.to - change.from) <= 4)\r\n        change = {\r\n            from: sel.from, to: sel.to,\r\n            insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))\r\n        };\r\n    if (change) {\r\n        let startState = view.state;\r\n        if (_browser_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ios && view.inputState.flushIOSKey(view))\r\n            return;\r\n        // Android browsers don't fire reasonable key events for enter,\r\n        // backspace, or delete. So this detects changes that look like\r\n        // they're caused by those keys, and reinterprets them as key\r\n        // events. (Some of these keys are also handled by beforeinput\r\n        // events and the pendingAndroidKey mechanism, but that's not\r\n        // reliable in all situations.)\r\n        if (_browser_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].android &&\r\n            ((change.from == sel.from && change.to == sel.to && change.insert.length == 1 && change.insert.lines == 2 &&\r\n                (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.dispatchKey)(view.contentDOM, \"Enter\", 13)) ||\r\n                (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 &&\r\n                    (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.dispatchKey)(view.contentDOM, \"Backspace\", 8)) ||\r\n                (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&\r\n                    (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.dispatchKey)(view.contentDOM, \"Delete\", 46))))\r\n            return;\r\n        let text = change.insert.toString();\r\n        if (view.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_0__.inputHandler).some(h => h(view, change.from, change.to, text)))\r\n            return;\r\n        if (view.inputState.composing >= 0)\r\n            view.inputState.composing++;\r\n        let tr;\r\n        if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&\r\n            (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&\r\n            view.inputState.composing < 0) {\r\n            let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : \"\";\r\n            let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : \"\";\r\n            tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));\r\n        }\r\n        else {\r\n            let changes = startState.changes(change);\r\n            let mainSel = newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength ? newSel.main : undefined;\r\n            // Try to apply a composition change to all cursors\r\n            if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&\r\n                change.to <= sel.to && change.to >= sel.to - 10) {\r\n                let replaced = view.state.sliceDoc(change.from, change.to);\r\n                let compositionRange = (0,_docview_js__WEBPACK_IMPORTED_MODULE_4__.compositionSurroundingNode)(view) || view.state.doc.lineAt(sel.head);\r\n                let offset = sel.to - change.to, size = sel.to - sel.from;\r\n                tr = startState.changeByRange(range => {\r\n                    if (range.from == sel.from && range.to == sel.to)\r\n                        return { changes, range: mainSel || range.map(changes) };\r\n                    let to = range.to - offset, from = to - replaced.length;\r\n                    if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||\r\n                        // Unfortunately, there's no way to make multiple\r\n                        // changes in the same node work without aborting\r\n                        // composition, so cursors in the composition range are\r\n                        // ignored.\r\n                        compositionRange && range.to >= compositionRange.from && range.from <= compositionRange.to)\r\n                        return { range };\r\n                    let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;\r\n                    return {\r\n                        changes: rangeChanges,\r\n                        range: !mainSel ? range.map(rangeChanges) :\r\n                            _state_index_js__WEBPACK_IMPORTED_MODULE_5__.EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))\r\n                    };\r\n                });\r\n            }\r\n            else {\r\n                tr = {\r\n                    changes,\r\n                    selection: mainSel && startState.selection.replaceRange(mainSel)\r\n                };\r\n            }\r\n        }\r\n        let userEvent = \"input.type\";\r\n        if (view.composing) {\r\n            userEvent += \".compose\";\r\n            if (view.inputState.compositionFirstChange) {\r\n                userEvent += \".start\";\r\n                view.inputState.compositionFirstChange = false;\r\n            }\r\n        }\r\n        view.dispatch(tr, { scrollIntoView: true, userEvent });\r\n    }\r\n    else if (newSel && !newSel.main.eq(sel)) {\r\n        let scrollIntoView = false, userEvent = \"select\";\r\n        if (view.inputState.lastSelectionTime > Date.now() - 50) {\r\n            if (view.inputState.lastSelectionOrigin == \"select\")\r\n                scrollIntoView = true;\r\n            userEvent = view.inputState.lastSelectionOrigin;\r\n        }\r\n        view.dispatch({ selection: newSel, scrollIntoView, userEvent });\r\n    }\r\n}\r\nfunction findDiff(a, b, preferredPos, preferredSide) {\r\n    let minLen = Math.min(a.length, b.length);\r\n    let from = 0;\r\n    while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))\r\n        from++;\r\n    if (from == minLen && a.length == b.length)\r\n        return null;\r\n    let toA = a.length, toB = b.length;\r\n    while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {\r\n        toA--;\r\n        toB--;\r\n    }\r\n    if (preferredSide == \"end\") {\r\n        let adjust = Math.max(0, from - Math.min(toA, toB));\r\n        preferredPos -= toA + adjust - from;\r\n    }\r\n    if (toA < from && a.length < b.length) {\r\n        let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;\r\n        from -= move;\r\n        toB = from + (toB - toA);\r\n        toA = from;\r\n    }\r\n    else if (toB < from) {\r\n        let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;\r\n        from -= move;\r\n        toA = from + (toA - toB);\r\n        toB = from;\r\n    }\r\n    return { from, toA, toB };\r\n}\r\nfunction selectionPoints(view) {\r\n    let result = [];\r\n    if (view.root.activeElement != view.contentDOM)\r\n        return result;\r\n    let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;\r\n    if (anchorNode) {\r\n        result.push(new _domreader_js__WEBPACK_IMPORTED_MODULE_3__.DOMPoint(anchorNode, anchorOffset));\r\n        if (focusNode != anchorNode || focusOffset != anchorOffset)\r\n            result.push(new _domreader_js__WEBPACK_IMPORTED_MODULE_3__.DOMPoint(focusNode, focusOffset));\r\n    }\r\n    return result;\r\n}\r\nfunction selectionFromPoints(points, base) {\r\n    if (points.length == 0)\r\n        return null;\r\n    let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;\r\n    return anchor > -1 && head > -1 ? _state_index_js__WEBPACK_IMPORTED_MODULE_5__.EditorSelection.single(anchor + base, head + base) : null;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/domchange.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/domobserver.js":
/*!*******************************************************!*\
  !*** ./sys/public/js/editor/dist/view/domobserver.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DOMObserver\": () => (/* binding */ DOMObserver)\n/* harmony export */ });\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./browser.js */ \"./sys/public/js/editor/dist/view/browser.js\");\n/* harmony import */ var _contentview_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contentview.js */ \"./sys/public/js/editor/dist/view/contentview.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom.js */ \"./sys/public/js/editor/dist/view/dom.js\");\n\r\n\r\n\r\n\r\nconst observeOptions = {\r\n    childList: true,\r\n    characterData: true,\r\n    subtree: true,\r\n    attributes: true,\r\n    characterDataOldValue: true\r\n};\r\n// IE11 has very broken mutation observers, so we also listen to\r\n// DOMCharacterDataModified there\r\nconst useCharData = _browser_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ie && _browser_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ie_version <= 11;\r\nclass DOMObserver {\r\n    constructor(view, onChange, onScrollChanged) {\r\n        this.view = view;\r\n        this.onChange = onChange;\r\n        this.onScrollChanged = onScrollChanged;\r\n        this.active = false;\r\n        // The known selection. Kept in our own object, as opposed to just\r\n        // directly accessing the selection because:\r\n        //  - Safari doesn't report the right selection in shadow DOM\r\n        //  - Reading from the selection forces a DOM layout\r\n        //  - This way, we can ignore selectionchange events if we have\r\n        //    already seen the 'new' selection\r\n        this.selectionRange = new _dom_js__WEBPACK_IMPORTED_MODULE_3__.DOMSelectionState;\r\n        // Set when a selection change is detected, cleared on flush\r\n        this.selectionChanged = false;\r\n        this.delayedFlush = -1;\r\n        this.resizeTimeout = -1;\r\n        this.queue = [];\r\n        this.delayedAndroidKey = null;\r\n        this.scrollTargets = [];\r\n        this.intersection = null;\r\n        this.resize = null;\r\n        this.intersecting = false;\r\n        this.gapIntersection = null;\r\n        this.gaps = [];\r\n        // Timeout for scheduling check of the parents that need scroll handlers\r\n        this.parentCheck = -1;\r\n        this.dom = view.contentDOM;\r\n        this.observer = new MutationObserver(mutations => {\r\n            for (let mut of mutations)\r\n                this.queue.push(mut);\r\n            // IE11 will sometimes (on typing over a selection or\r\n            // backspacing out a single character text node) call the\r\n            // observer callback before actually updating the DOM.\r\n            //\r\n            // Unrelatedly, iOS Safari will, when ending a composition,\r\n            // sometimes first clear it, deliver the mutations, and then\r\n            // reinsert the finished text. CodeMirror's handling of the\r\n            // deletion will prevent the reinsertion from happening,\r\n            // breaking composition.\r\n            if ((_browser_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ie && _browser_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ie_version <= 11 || _browser_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ios && view.composing) &&\r\n                mutations.some(m => m.type == \"childList\" && m.removedNodes.length ||\r\n                    m.type == \"characterData\" && m.oldValue.length > m.target.nodeValue.length))\r\n                this.flushSoon();\r\n            else\r\n                this.flush();\r\n        });\r\n        if (useCharData)\r\n            this.onCharData = (event) => {\r\n                this.queue.push({ target: event.target,\r\n                    type: \"characterData\",\r\n                    oldValue: event.prevValue });\r\n                this.flushSoon();\r\n            };\r\n        this.onSelectionChange = this.onSelectionChange.bind(this);\r\n        window.addEventListener(\"resize\", this.onResize = this.onResize.bind(this));\r\n        if (typeof ResizeObserver == \"function\") {\r\n            this.resize = new ResizeObserver(() => {\r\n                if (this.view.docView.lastUpdate < Date.now() - 75)\r\n                    this.onResize();\r\n            });\r\n            this.resize.observe(view.scrollDOM);\r\n        }\r\n        window.addEventListener(\"beforeprint\", this.onPrint = this.onPrint.bind(this));\r\n        this.start();\r\n        window.addEventListener(\"scroll\", this.onScroll = this.onScroll.bind(this));\r\n        if (typeof IntersectionObserver == \"function\") {\r\n            this.intersection = new IntersectionObserver(entries => {\r\n                if (this.parentCheck < 0)\r\n                    this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);\r\n                if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {\r\n                    this.intersecting = !this.intersecting;\r\n                    if (this.intersecting != this.view.inView)\r\n                        this.onScrollChanged(document.createEvent(\"Event\"));\r\n                }\r\n            }, {});\r\n            this.intersection.observe(this.dom);\r\n            this.gapIntersection = new IntersectionObserver(entries => {\r\n                if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)\r\n                    this.onScrollChanged(document.createEvent(\"Event\"));\r\n            }, {});\r\n        }\r\n        this.listenForScroll();\r\n        this.readSelectionRange();\r\n        this.dom.ownerDocument.addEventListener(\"selectionchange\", this.onSelectionChange);\r\n    }\r\n    onScroll(e) {\r\n        if (this.intersecting)\r\n            this.flush(false);\r\n        this.onScrollChanged(e);\r\n    }\r\n    onResize() {\r\n        if (this.resizeTimeout < 0)\r\n            this.resizeTimeout = setTimeout(() => {\r\n                this.resizeTimeout = -1;\r\n                this.view.requestMeasure();\r\n            }, 50);\r\n    }\r\n    onPrint() {\r\n        this.view.viewState.printing = true;\r\n        this.view.measure();\r\n        setTimeout(() => {\r\n            this.view.viewState.printing = false;\r\n            this.view.requestMeasure();\r\n        }, 500);\r\n    }\r\n    updateGaps(gaps) {\r\n        if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {\r\n            this.gapIntersection.disconnect();\r\n            for (let gap of gaps)\r\n                this.gapIntersection.observe(gap);\r\n            this.gaps = gaps;\r\n        }\r\n    }\r\n    onSelectionChange(event) {\r\n        if (!this.readSelectionRange() || this.delayedAndroidKey)\r\n            return;\r\n        let { view } = this, sel = this.selectionRange;\r\n        if (view.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_2__.editable) ? view.root.activeElement != this.dom : !(0,_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasSelection)(view.dom, sel))\r\n            return;\r\n        let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);\r\n        if (context && context.ignoreEvent(event))\r\n            return;\r\n        // Deletions on IE11 fire their events in the wrong order, giving\r\n        // us a selection change event before the DOM changes are\r\n        // reported.\r\n        // Chrome Android has a similar issue when backspacing out a\r\n        // selection (#645).\r\n        if ((_browser_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ie && _browser_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ie_version <= 11 || _browser_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].android && _browser_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].chrome) && !view.state.selection.main.empty &&\r\n            // (Selection.isCollapsed isn't reliable on IE)\r\n            sel.focusNode && (0,_dom_js__WEBPACK_IMPORTED_MODULE_3__.isEquivalentPosition)(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))\r\n            this.flushSoon();\r\n        else\r\n            this.flush(false);\r\n    }\r\n    readSelectionRange() {\r\n        let { root } = this.view, domSel = (0,_dom_js__WEBPACK_IMPORTED_MODULE_3__.getSelection)(root);\r\n        // The Selection object is broken in shadow roots in Safari. See\r\n        // https://github.com/codemirror/codemirror.next/issues/414\r\n        let range = _browser_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].safari && root.nodeType == 11 && (0,_dom_js__WEBPACK_IMPORTED_MODULE_3__.deepActiveElement)() == this.view.contentDOM &&\r\n            safariSelectionRangeHack(this.view) || domSel;\r\n        if (this.selectionRange.eq(range))\r\n            return false;\r\n        this.selectionRange.setRange(range);\r\n        return this.selectionChanged = true;\r\n    }\r\n    setSelectionRange(anchor, head) {\r\n        this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);\r\n        this.selectionChanged = false;\r\n    }\r\n    listenForScroll() {\r\n        this.parentCheck = -1;\r\n        let i = 0, changed = null;\r\n        for (let dom = this.dom; dom;) {\r\n            if (dom.nodeType == 1) {\r\n                if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)\r\n                    i++;\r\n                else if (!changed)\r\n                    changed = this.scrollTargets.slice(0, i);\r\n                if (changed)\r\n                    changed.push(dom);\r\n                dom = dom.assignedSlot || dom.parentNode;\r\n            }\r\n            else if (dom.nodeType == 11) { // Shadow root\r\n                dom = dom.host;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (i < this.scrollTargets.length && !changed)\r\n            changed = this.scrollTargets.slice(0, i);\r\n        if (changed) {\r\n            for (let dom of this.scrollTargets)\r\n                dom.removeEventListener(\"scroll\", this.onScroll);\r\n            for (let dom of this.scrollTargets = changed)\r\n                dom.addEventListener(\"scroll\", this.onScroll);\r\n        }\r\n    }\r\n    ignore(f) {\r\n        if (!this.active)\r\n            return f();\r\n        try {\r\n            this.stop();\r\n            return f();\r\n        }\r\n        finally {\r\n            this.start();\r\n            this.clear();\r\n        }\r\n    }\r\n    start() {\r\n        if (this.active)\r\n            return;\r\n        this.observer.observe(this.dom, observeOptions);\r\n        if (useCharData)\r\n            this.dom.addEventListener(\"DOMCharacterDataModified\", this.onCharData);\r\n        this.active = true;\r\n    }\r\n    stop() {\r\n        if (!this.active)\r\n            return;\r\n        this.active = false;\r\n        this.observer.disconnect();\r\n        if (useCharData)\r\n            this.dom.removeEventListener(\"DOMCharacterDataModified\", this.onCharData);\r\n    }\r\n    // Throw away any pending changes\r\n    clear() {\r\n        this.processRecords();\r\n        this.queue.length = 0;\r\n        this.selectionChanged = false;\r\n    }\r\n    // Chrome Android, especially in combination with GBoard, not only\r\n    // doesn't reliably fire regular key events, but also often\r\n    // surrounds the effect of enter or backspace with a bunch of\r\n    // composition events that, when interrupted, cause text duplication\r\n    // or other kinds of corruption. This hack makes the editor back off\r\n    // from handling DOM changes for a moment when such a key is\r\n    // detected (via beforeinput or keydown), and then dispatches the\r\n    // key event, throwing away the DOM changes if it gets handled.\r\n    delayAndroidKey(key, keyCode) {\r\n        if (!this.delayedAndroidKey)\r\n            requestAnimationFrame(() => {\r\n                let key = this.delayedAndroidKey;\r\n                this.delayedAndroidKey = null;\r\n                let startState = this.view.state;\r\n                this.readSelectionRange();\r\n                if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_3__.dispatchKey)(this.view.contentDOM, key.key, key.keyCode))\r\n                    this.processRecords();\r\n                else\r\n                    this.flush();\r\n                if (this.view.state == startState)\r\n                    this.view.update([]);\r\n            });\r\n        // Since backspace beforeinput is sometimes signalled spuriously,\r\n        // Enter always takes precedence.\r\n        if (!this.delayedAndroidKey || key == \"Enter\")\r\n            this.delayedAndroidKey = { key, keyCode };\r\n    }\r\n    flushSoon() {\r\n        if (this.delayedFlush < 0)\r\n            this.delayedFlush = window.setTimeout(() => { this.delayedFlush = -1; this.flush(); }, 20);\r\n    }\r\n    forceFlush() {\r\n        if (this.delayedFlush >= 0) {\r\n            window.clearTimeout(this.delayedFlush);\r\n            this.delayedFlush = -1;\r\n            this.flush();\r\n        }\r\n    }\r\n    processRecords() {\r\n        let records = this.queue;\r\n        for (let mut of this.observer.takeRecords())\r\n            records.push(mut);\r\n        if (records.length)\r\n            this.queue = [];\r\n        let from = -1, to = -1, typeOver = false;\r\n        for (let record of records) {\r\n            let range = this.readMutation(record);\r\n            if (!range)\r\n                continue;\r\n            if (range.typeOver)\r\n                typeOver = true;\r\n            if (from == -1) {\r\n                ;\r\n                ({ from, to } = range);\r\n            }\r\n            else {\r\n                from = Math.min(range.from, from);\r\n                to = Math.max(range.to, to);\r\n            }\r\n        }\r\n        return { from, to, typeOver };\r\n    }\r\n    // Apply pending changes, if any\r\n    flush(readSelection = true) {\r\n        // Completely hold off flushing when pending keys are set—the code\r\n        // managing those will make sure processRecords is called and the\r\n        // view is resynchronized after\r\n        if (this.delayedFlush >= 0 || this.delayedAndroidKey)\r\n            return;\r\n        if (readSelection)\r\n            this.readSelectionRange();\r\n        let { from, to, typeOver } = this.processRecords();\r\n        let newSel = this.selectionChanged && (0,_dom_js__WEBPACK_IMPORTED_MODULE_3__.hasSelection)(this.dom, this.selectionRange);\r\n        if (from < 0 && !newSel)\r\n            return;\r\n        this.selectionChanged = false;\r\n        let startState = this.view.state;\r\n        this.onChange(from, to, typeOver);\r\n        // The view wasn't updated\r\n        if (this.view.state == startState)\r\n            this.view.update([]);\r\n    }\r\n    readMutation(rec) {\r\n        let cView = this.view.docView.nearest(rec.target);\r\n        if (!cView || cView.ignoreMutation(rec))\r\n            return null;\r\n        cView.markDirty(rec.type == \"attributes\");\r\n        if (rec.type == \"attributes\")\r\n            cView.dirty |= 4 /* Attrs */;\r\n        if (rec.type == \"childList\") {\r\n            let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);\r\n            let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);\r\n            return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,\r\n                to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };\r\n        }\r\n        else if (rec.type == \"characterData\") {\r\n            return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    destroy() {\r\n        var _a, _b, _c;\r\n        this.stop();\r\n        (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();\r\n        (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();\r\n        (_c = this.resize) === null || _c === void 0 ? void 0 : _c.disconnect();\r\n        for (let dom of this.scrollTargets)\r\n            dom.removeEventListener(\"scroll\", this.onScroll);\r\n        window.removeEventListener(\"scroll\", this.onScroll);\r\n        window.removeEventListener(\"resize\", this.onResize);\r\n        window.removeEventListener(\"beforeprint\", this.onPrint);\r\n        this.dom.ownerDocument.removeEventListener(\"selectionchange\", this.onSelectionChange);\r\n        clearTimeout(this.parentCheck);\r\n        clearTimeout(this.resizeTimeout);\r\n    }\r\n}\r\nfunction findChild(cView, dom, dir) {\r\n    while (dom) {\r\n        let curView = _contentview_js__WEBPACK_IMPORTED_MODULE_1__.ContentView.get(dom);\r\n        if (curView && curView.parent == cView)\r\n            return curView;\r\n        let parent = dom.parentNode;\r\n        dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;\r\n    }\r\n    return null;\r\n}\r\n// Used to work around a Safari Selection/shadow DOM bug (#414)\r\nfunction safariSelectionRangeHack(view) {\r\n    let found = null;\r\n    // Because Safari (at least in 2018-2021) doesn't provide regular\r\n    // access to the selection inside a shadowroot, we have to perform a\r\n    // ridiculous hack to get at it—using `execCommand` to trigger a\r\n    // `beforeInput` event so that we can read the target range from the\r\n    // event.\r\n    function read(event) {\r\n        event.preventDefault();\r\n        event.stopImmediatePropagation();\r\n        found = event.getTargetRanges()[0];\r\n    }\r\n    view.contentDOM.addEventListener(\"beforeinput\", read, true);\r\n    document.execCommand(\"indent\");\r\n    view.contentDOM.removeEventListener(\"beforeinput\", read, true);\r\n    if (!found)\r\n        return null;\r\n    let anchorNode = found.startContainer, anchorOffset = found.startOffset;\r\n    let focusNode = found.endContainer, focusOffset = found.endOffset;\r\n    let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);\r\n    // Since such a range doesn't distinguish between anchor and head,\r\n    // use a heuristic that flips it around if its end matches the\r\n    // current anchor.\r\n    if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_3__.isEquivalentPosition)(curAnchor.node, curAnchor.offset, focusNode, focusOffset))\r\n        [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];\r\n    return { anchorNode, anchorOffset, focusNode, focusOffset };\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/domobserver.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/domreader.js":
/*!*****************************************************!*\
  !*** ./sys/public/js/editor/dist/view/domreader.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DOMPoint\": () => (/* binding */ DOMPoint),\n/* harmony export */   \"DOMReader\": () => (/* binding */ DOMReader),\n/* harmony export */   \"LineBreakPlaceholder\": () => (/* binding */ LineBreakPlaceholder)\n/* harmony export */ });\n/* harmony import */ var _contentview_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contentview.js */ \"./sys/public/js/editor/dist/view/contentview.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n\r\n\r\nconst LineBreakPlaceholder = \"\\uffff\";\r\nclass DOMReader {\r\n    constructor(points, state) {\r\n        this.points = points;\r\n        this.text = \"\";\r\n        this.lineSeparator = state.facet(_state_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorState.lineSeparator);\r\n    }\r\n    append(text) {\r\n        this.text += text;\r\n    }\r\n    lineBreak() {\r\n        this.text += LineBreakPlaceholder;\r\n    }\r\n    readRange(start, end) {\r\n        if (!start)\r\n            return this;\r\n        let parent = start.parentNode;\r\n        for (let cur = start;;) {\r\n            this.findPointBefore(parent, cur);\r\n            this.readNode(cur);\r\n            let next = cur.nextSibling;\r\n            if (next == end)\r\n                break;\r\n            let view = _contentview_js__WEBPACK_IMPORTED_MODULE_0__.ContentView.get(cur), nextView = _contentview_js__WEBPACK_IMPORTED_MODULE_0__.ContentView.get(next);\r\n            if (view && nextView ? view.breakAfter :\r\n                (view ? view.breakAfter : isBlockElement(cur)) ||\r\n                    (isBlockElement(next) && (cur.nodeName != \"BR\" || cur.cmIgnore)))\r\n                this.lineBreak();\r\n            cur = next;\r\n        }\r\n        this.findPointBefore(parent, end);\r\n        return this;\r\n    }\r\n    readTextNode(node) {\r\n        let text = node.nodeValue;\r\n        for (let point of this.points)\r\n            if (point.node == node)\r\n                point.pos = this.text.length + Math.min(point.offset, text.length);\r\n        for (let off = 0, re = this.lineSeparator ? null : /\\r\\n?|\\n/g;;) {\r\n            let nextBreak = -1, breakSize = 1, m;\r\n            if (this.lineSeparator) {\r\n                nextBreak = text.indexOf(this.lineSeparator, off);\r\n                breakSize = this.lineSeparator.length;\r\n            }\r\n            else if (m = re.exec(text)) {\r\n                nextBreak = m.index;\r\n                breakSize = m[0].length;\r\n            }\r\n            this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));\r\n            if (nextBreak < 0)\r\n                break;\r\n            this.lineBreak();\r\n            if (breakSize > 1)\r\n                for (let point of this.points)\r\n                    if (point.node == node && point.pos > this.text.length)\r\n                        point.pos -= breakSize - 1;\r\n            off = nextBreak + breakSize;\r\n        }\r\n    }\r\n    readNode(node) {\r\n        if (node.cmIgnore)\r\n            return;\r\n        let view = _contentview_js__WEBPACK_IMPORTED_MODULE_0__.ContentView.get(node);\r\n        let fromView = view && view.overrideDOMText;\r\n        if (fromView != null) {\r\n            this.findPointInside(node, fromView.length);\r\n            for (let i = fromView.iter(); !i.next().done;) {\r\n                if (i.lineBreak)\r\n                    this.lineBreak();\r\n                else\r\n                    this.append(i.value);\r\n            }\r\n        }\r\n        else if (node.nodeType == 3) {\r\n            this.readTextNode(node);\r\n        }\r\n        else if (node.nodeName == \"BR\") {\r\n            if (node.nextSibling)\r\n                this.lineBreak();\r\n        }\r\n        else if (node.nodeType == 1) {\r\n            this.readRange(node.firstChild, null);\r\n        }\r\n    }\r\n    findPointBefore(node, next) {\r\n        for (let point of this.points)\r\n            if (point.node == node && node.childNodes[point.offset] == next)\r\n                point.pos = this.text.length;\r\n    }\r\n    findPointInside(node, maxLen) {\r\n        for (let point of this.points)\r\n            if (node.nodeType == 3 ? point.node == node : node.contains(point.node))\r\n                point.pos = this.text.length + Math.min(maxLen, point.offset);\r\n    }\r\n}\r\nfunction isBlockElement(node) {\r\n    return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\\d|SECTION|PRE)$/.test(node.nodeName);\r\n}\r\nclass DOMPoint {\r\n    constructor(node, offset) {\r\n        this.node = node;\r\n        this.offset = offset;\r\n        this.pos = -1;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/domreader.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/draw-selection.js":
/*!**********************************************************!*\
  !*** ./sys/public/js/editor/dist/view/draw-selection.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"drawSelection\": () => (/* binding */ drawSelection)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _decoration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./decoration.js */ \"./sys/public/js/editor/dist/view/decoration.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n/* harmony import */ var _editorview_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editorview.js */ \"./sys/public/js/editor/dist/view/editorview.js\");\n/* harmony import */ var _bidi_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bidi.js */ \"./sys/public/js/editor/dist/view/bidi.js\");\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./browser.js */ \"./sys/public/js/editor/dist/view/browser.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst CanHidePrimary = !_browser_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].ios; // FIXME test IE\r\nconst selectionConfig = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({\r\n    combine(configs) {\r\n        return (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.combineConfig)(configs, {\r\n            cursorBlinkRate: 1200,\r\n            drawRangeCursor: true\r\n        }, {\r\n            cursorBlinkRate: (a, b) => Math.min(a, b),\r\n            drawRangeCursor: (a, b) => a || b\r\n        });\r\n    }\r\n});\r\n/**\r\n * Returns an extension that hides the browser's native selection and cursor, replacing the selection\r\n * with a background behind the text (with the `cm-selectionBackground` class), and the cursors with\r\n * elements overlaid over the code (using `cm-cursor-primary` and `cm-cursor-secondary`).\r\n *\r\n * This allows the editor to display secondary selection ranges, and tends to produce a type of\r\n * selection more in line with that users expect in a text editor (the native selection styling will\r\n * often leave gaps between lines and won't fill the horizontal space after a line when the selection\r\n * continues past it).\r\n *\r\n * It does have a performance cost, in that it requires an extra DOM layout cycle for many updates\r\n * (the selection is drawn based on DOM layout information that's only available after laying out the\r\n * content).\r\n */\r\nfunction drawSelection(config = {}) {\r\n    return [\r\n        selectionConfig.of(config),\r\n        drawSelectionPlugin,\r\n        hideNativeSelection\r\n    ];\r\n}\r\nclass Piece {\r\n    constructor(left, top, width, height, className) {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.className = className;\r\n    }\r\n    draw() {\r\n        let elt = document.createElement(\"div\");\r\n        elt.className = this.className;\r\n        this.adjust(elt);\r\n        return elt;\r\n    }\r\n    adjust(elt) {\r\n        elt.style.left = this.left + \"px\";\r\n        elt.style.top = this.top + \"px\";\r\n        if (this.width >= 0)\r\n            elt.style.width = this.width + \"px\";\r\n        elt.style.height = this.height + \"px\";\r\n    }\r\n    eq(p) {\r\n        return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&\r\n            this.className == p.className;\r\n    }\r\n}\r\nconst drawSelectionPlugin = _extension_js__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.rangePieces = [];\r\n        this.cursors = [];\r\n        this.measureReq = { read: this.readPos.bind(this), write: this.drawSel.bind(this) };\r\n        this.selectionLayer = view.scrollDOM.appendChild(document.createElement(\"div\"));\r\n        this.selectionLayer.className = \"cm-selectionLayer\";\r\n        this.selectionLayer.setAttribute(\"aria-hidden\", \"true\");\r\n        this.cursorLayer = view.scrollDOM.appendChild(document.createElement(\"div\"));\r\n        this.cursorLayer.className = \"cm-cursorLayer\";\r\n        this.cursorLayer.setAttribute(\"aria-hidden\", \"true\");\r\n        view.requestMeasure(this.measureReq);\r\n        this.setBlinkRate();\r\n    }\r\n    setBlinkRate() {\r\n        this.cursorLayer.style.animationDuration = this.view.state.facet(selectionConfig).cursorBlinkRate + \"ms\";\r\n    }\r\n    update(update) {\r\n        let confChanged = update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);\r\n        if (confChanged || update.selectionSet || update.geometryChanged || update.viewportChanged)\r\n            this.view.requestMeasure(this.measureReq);\r\n        if (update.transactions.some(tr => tr.scrollIntoView))\r\n            this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == \"cm-blink\" ? \"cm-blink2\" : \"cm-blink\";\r\n        if (confChanged)\r\n            this.setBlinkRate();\r\n    }\r\n    readPos() {\r\n        let { state } = this.view, conf = state.facet(selectionConfig);\r\n        let rangePieces = state.selection.ranges.map(r => r.empty ? [] : measureRange(this.view, r)).reduce((a, b) => a.concat(b));\r\n        let cursors = [];\r\n        for (let r of state.selection.ranges) {\r\n            let prim = r == state.selection.main;\r\n            if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {\r\n                let piece = measureCursor(this.view, r, prim);\r\n                if (piece)\r\n                    cursors.push(piece);\r\n            }\r\n        }\r\n        return { rangePieces, cursors };\r\n    }\r\n    drawSel({ rangePieces, cursors }) {\r\n        if (rangePieces.length != this.rangePieces.length || rangePieces.some((p, i) => !p.eq(this.rangePieces[i]))) {\r\n            this.selectionLayer.textContent = \"\";\r\n            for (let p of rangePieces)\r\n                this.selectionLayer.appendChild(p.draw());\r\n            this.rangePieces = rangePieces;\r\n        }\r\n        if (cursors.length != this.cursors.length || cursors.some((c, i) => !c.eq(this.cursors[i]))) {\r\n            let oldCursors = this.cursorLayer.children;\r\n            if (oldCursors.length !== cursors.length) {\r\n                this.cursorLayer.textContent = \"\";\r\n                for (const c of cursors)\r\n                    this.cursorLayer.appendChild(c.draw());\r\n            }\r\n            else {\r\n                cursors.forEach((c, idx) => c.adjust(oldCursors[idx]));\r\n            }\r\n            this.cursors = cursors;\r\n        }\r\n    }\r\n    destroy() {\r\n        this.selectionLayer.remove();\r\n        this.cursorLayer.remove();\r\n    }\r\n});\r\nconst themeSpec = {\r\n    \".cm-line\": {\r\n        \"& ::selection\": { backgroundColor: \"transparent !important\" },\r\n        \"&::selection\": { backgroundColor: \"transparent !important\" }\r\n    }\r\n};\r\nif (CanHidePrimary)\r\n    themeSpec[\".cm-line\"].caretColor = \"transparent !important\";\r\nconst hideNativeSelection = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Prec.highest(_editorview_js__WEBPACK_IMPORTED_MODULE_3__.EditorView.theme(themeSpec));\r\nfunction getBase(view) {\r\n    let rect = view.scrollDOM.getBoundingClientRect();\r\n    let left = view.textDirection == _bidi_js__WEBPACK_IMPORTED_MODULE_4__.Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;\r\n    return { left: left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };\r\n}\r\nfunction wrappedLine(view, pos, inside) {\r\n    let range = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(pos);\r\n    return { from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),\r\n        to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),\r\n        type: _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.Text };\r\n}\r\nfunction blockAt(view, pos) {\r\n    let line = view.lineBlockAt(pos);\r\n    if (Array.isArray(line.type))\r\n        for (let l of line.type) {\r\n            if (l.to > pos || l.to == pos && (l.to == line.to || l.type == _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.Text))\r\n                return l;\r\n        }\r\n    return line;\r\n}\r\nfunction measureRange(view, range) {\r\n    if (range.to <= view.viewport.from || range.from >= view.viewport.to)\r\n        return [];\r\n    let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);\r\n    let ltr = view.textDirection == _bidi_js__WEBPACK_IMPORTED_MODULE_4__.Direction.LTR;\r\n    let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);\r\n    let lineStyle = window.getComputedStyle(content.firstChild);\r\n    let leftSide = contentRect.left + parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent));\r\n    let rightSide = contentRect.right - parseInt(lineStyle.paddingRight);\r\n    let startBlock = blockAt(view, from), endBlock = blockAt(view, to);\r\n    let visualStart = startBlock.type == _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.Text ? startBlock : null;\r\n    let visualEnd = endBlock.type == _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.Text ? endBlock : null;\r\n    if (view.lineWrapping) {\r\n        if (visualStart)\r\n            visualStart = wrappedLine(view, from, visualStart);\r\n        if (visualEnd)\r\n            visualEnd = wrappedLine(view, to, visualEnd);\r\n    }\r\n    if (visualStart && visualEnd && visualStart.from == visualEnd.from) {\r\n        return pieces(drawForLine(range.from, range.to, visualStart));\r\n    }\r\n    else {\r\n        let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);\r\n        let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);\r\n        let between = [];\r\n        if ((visualStart || startBlock).to < (visualEnd || endBlock).from - 1)\r\n            between.push(piece(leftSide, top.bottom, rightSide, bottom.top));\r\n        else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.Text)\r\n            top.bottom = bottom.top = (top.bottom + bottom.top) / 2;\r\n        return pieces(top).concat(between).concat(pieces(bottom));\r\n    }\r\n    function piece(left, top, right, bottom) {\r\n        return new Piece(left - base.left, top - base.top - 0.01 /* Epsilon */, right - left, bottom - top + 0.01 /* Epsilon */, \"cm-selectionBackground\");\r\n    }\r\n    function pieces({ top, bottom, horizontal }) {\r\n        let pieces = [];\r\n        for (let i = 0; i < horizontal.length; i += 2)\r\n            pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));\r\n        return pieces;\r\n    }\r\n    // Gets passed from/to in line-local positions\r\n    function drawForLine(from, to, line) {\r\n        let top = 1e9, bottom = -1e9, horizontal = [];\r\n        function addSpan(from, fromOpen, to, toOpen, dir) {\r\n            // Passing 2/-2 is a kludge to force the view to return\r\n            // coordinates on the proper side of block widgets, since\r\n            // normalizing the side there, though appropriate for most\r\n            // coordsAtPos queries, would break selection drawing.\r\n            let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));\r\n            let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));\r\n            top = Math.min(fromCoords.top, toCoords.top, top);\r\n            bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);\r\n            if (dir == _bidi_js__WEBPACK_IMPORTED_MODULE_4__.Direction.LTR)\r\n                horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);\r\n            else\r\n                horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);\r\n        }\r\n        let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;\r\n        // Split the range by visible range and document line\r\n        for (let r of view.visibleRanges)\r\n            if (r.to > start && r.from < end) {\r\n                for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {\r\n                    let docLine = view.state.doc.lineAt(pos);\r\n                    for (let span of view.bidiSpans(docLine)) {\r\n                        let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;\r\n                        if (spanFrom >= endPos)\r\n                            break;\r\n                        if (spanTo > pos)\r\n                            addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);\r\n                    }\r\n                    pos = docLine.to + 1;\r\n                    if (pos >= endPos)\r\n                        break;\r\n                }\r\n            }\r\n        if (horizontal.length == 0)\r\n            addSpan(start, from == null, end, to == null, view.textDirection);\r\n        return { top, bottom, horizontal };\r\n    }\r\n    function drawForWidget(block, top) {\r\n        let y = contentRect.top + (top ? block.top : block.bottom);\r\n        return { top: y, bottom: y, horizontal: [] };\r\n    }\r\n}\r\nfunction measureCursor(view, cursor, primary) {\r\n    let pos = view.coordsAtPos(cursor.head, cursor.assoc || 1);\r\n    if (!pos)\r\n        return null;\r\n    let base = getBase(view);\r\n    return new Piece(pos.left - base.left, pos.top - base.top, -1, pos.bottom - pos.top, primary ? \"cm-cursor cm-cursor-primary\" : \"cm-cursor cm-cursor-secondary\");\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/draw-selection.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/dropcursor.js":
/*!******************************************************!*\
  !*** ./sys/public/js/editor/dist/view/dropcursor.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"dropCursor\": () => (/* binding */ dropCursor)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n\r\n\r\nconst setDropCursorPos = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.StateEffect.define({\r\n    map(pos, mapping) { return pos == null ? null : mapping.mapPos(pos); }\r\n});\r\nconst dropCursorPos = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.StateField.define({\r\n    create() { return null; },\r\n    update(pos, tr) {\r\n        if (pos != null)\r\n            pos = tr.changes.mapPos(pos);\r\n        return tr.effects.reduce((pos, e) => e.is(setDropCursorPos) ? e.value : pos, pos);\r\n    }\r\n});\r\nconst drawDropCursor = _extension_js__WEBPACK_IMPORTED_MODULE_1__.ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.cursor = null;\r\n        this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };\r\n    }\r\n    update(update) {\r\n        var _a;\r\n        let cursorPos = update.state.field(dropCursorPos);\r\n        if (cursorPos == null) {\r\n            if (this.cursor != null) {\r\n                (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();\r\n                this.cursor = null;\r\n            }\r\n        }\r\n        else {\r\n            if (!this.cursor) {\r\n                this.cursor = this.view.scrollDOM.appendChild(document.createElement(\"div\"));\r\n                this.cursor.className = \"cm-dropCursor\";\r\n            }\r\n            if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)\r\n                this.view.requestMeasure(this.measureReq);\r\n        }\r\n    }\r\n    readPos() {\r\n        let pos = this.view.state.field(dropCursorPos);\r\n        let rect = pos != null && this.view.coordsAtPos(pos);\r\n        if (!rect)\r\n            return null;\r\n        let outer = this.view.scrollDOM.getBoundingClientRect();\r\n        return {\r\n            left: rect.left - outer.left + this.view.scrollDOM.scrollLeft,\r\n            top: rect.top - outer.top + this.view.scrollDOM.scrollTop,\r\n            height: rect.bottom - rect.top\r\n        };\r\n    }\r\n    drawCursor(pos) {\r\n        if (this.cursor) {\r\n            if (pos) {\r\n                this.cursor.style.left = pos.left + \"px\";\r\n                this.cursor.style.top = pos.top + \"px\";\r\n                this.cursor.style.height = pos.height + \"px\";\r\n            }\r\n            else {\r\n                this.cursor.style.left = \"-100000px\";\r\n            }\r\n        }\r\n    }\r\n    destroy() {\r\n        if (this.cursor)\r\n            this.cursor.remove();\r\n    }\r\n    setDropPos(pos) {\r\n        if (this.view.state.field(dropCursorPos) != pos)\r\n            this.view.dispatch({ effects: setDropCursorPos.of(pos) });\r\n    }\r\n}, {\r\n    eventHandlers: {\r\n        dragover(event) {\r\n            this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));\r\n        },\r\n        dragleave(event) {\r\n            if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))\r\n                this.setDropPos(null);\r\n        },\r\n        dragend() {\r\n            this.setDropPos(null);\r\n        },\r\n        drop() {\r\n            this.setDropPos(null);\r\n        }\r\n    }\r\n});\r\n/** Draws a cursor at the current drop position when something is dragged over the editor. */\r\nfunction dropCursor() {\r\n    return [dropCursorPos, drawDropCursor];\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/dropcursor.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/editorview.js":
/*!******************************************************!*\
  !*** ./sys/public/js/editor/dist/view/editorview.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EditorView\": () => (/* binding */ EditorView)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _utils_style_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/style-mod.js */ \"./sys/public/js/editor/dist/utils/style-mod.js\");\n/* harmony import */ var _docview_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./docview.js */ \"./sys/public/js/editor/dist/view/docview.js\");\n/* harmony import */ var _input_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./input.js */ \"./sys/public/js/editor/dist/view/input.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom.js */ \"./sys/public/js/editor/dist/view/dom.js\");\n/* harmony import */ var _cursor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cursor.js */ \"./sys/public/js/editor/dist/view/cursor.js\");\n/* harmony import */ var _viewstate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./viewstate.js */ \"./sys/public/js/editor/dist/view/viewstate.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n/* harmony import */ var _theme_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./theme.js */ \"./sys/public/js/editor/dist/view/theme.js\");\n/* harmony import */ var _domobserver_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./domobserver.js */ \"./sys/public/js/editor/dist/view/domobserver.js\");\n/* harmony import */ var _attributes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./attributes.js */ \"./sys/public/js/editor/dist/view/attributes.js\");\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./browser.js */ \"./sys/public/js/editor/dist/view/browser.js\");\n/* harmony import */ var _domchange_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./domchange.js */ \"./sys/public/js/editor/dist/view/domchange.js\");\n/* harmony import */ var _bidi_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./bidi.js */ \"./sys/public/js/editor/dist/view/bidi.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// The editor's update state machine looks something like this:\r\n//\r\n//     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle\r\n//                                         ↑      ↓\r\n//                                         Updating (measure)\r\n//\r\n// The difference between 'Idle' and 'Idle (unchecked)' lies in\r\n// whether a layout check has been scheduled. A regular update through\r\n// the `update` method updates the DOM in a write-only fashion, and\r\n// relies on a check (scheduled with `requestAnimationFrame`) to make\r\n// sure everything is where it should be and the viewport covers the\r\n// visible code. That check continues to measure and then optionally\r\n// update until it reaches a coherent state.\r\n/**\r\n * An editor view represents the editor's user interface. It holds the editable DOM surface,\r\n * and possibly other elements such as the line number gutter. It handles events and dispatches\r\n * state transactions for editing actions.\r\n */\r\nclass EditorView {\r\n    /**\r\n     * Construct a new view. You'll want to either provide a `parent` option, or put `view.dom`\r\n     * into your document after creating a view, so that the user can see the editor.\r\n     * @param config Initialization options.\r\n     */\r\n    constructor(config = {}) {\r\n        this.plugins = [];\r\n        this.pluginMap = new Map;\r\n        this.editorAttrs = {};\r\n        this.contentAttrs = {};\r\n        this.bidiCache = [];\r\n        this.destroyed = false;\r\n        // @internal\r\n        this.updateState = 2 /* Updating */;\r\n        // @internal\r\n        this.measureScheduled = -1;\r\n        // @internal\r\n        this.measureRequests = [];\r\n        this.contentDOM = document.createElement(\"div\");\r\n        this.scrollDOM = document.createElement(\"div\");\r\n        this.scrollDOM.tabIndex = -1;\r\n        this.scrollDOM.className = \"cm-scroller\";\r\n        this.scrollDOM.appendChild(this.contentDOM);\r\n        this.announceDOM = document.createElement(\"div\");\r\n        this.announceDOM.style.cssText = \"position: absolute; top: -10000px\";\r\n        this.announceDOM.setAttribute(\"aria-live\", \"polite\");\r\n        this.dom = document.createElement(\"div\");\r\n        this.dom.appendChild(this.announceDOM);\r\n        this.dom.appendChild(this.scrollDOM);\r\n        this._dispatch = config.dispatch || ((tr) => this.update([tr]));\r\n        this.dispatch = this.dispatch.bind(this);\r\n        this.root = (config.root || (0,_dom_js__WEBPACK_IMPORTED_MODULE_4__.getRoot)(config.parent) || document);\r\n        this.viewState = new _viewstate_js__WEBPACK_IMPORTED_MODULE_6__.ViewState(config.state || _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorState.create());\r\n        this.plugins = this.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_7__.viewPlugin).map(spec => new _extension_js__WEBPACK_IMPORTED_MODULE_7__.PluginInstance(spec));\r\n        for (let plugin of this.plugins)\r\n            plugin.update(this);\r\n        this.observer = new _domobserver_js__WEBPACK_IMPORTED_MODULE_9__.DOMObserver(this, (from, to, typeOver) => {\r\n            (0,_domchange_js__WEBPACK_IMPORTED_MODULE_12__.applyDOMChange)(this, from, to, typeOver);\r\n        }, event => {\r\n            this.inputState.runScrollHandlers(this, event);\r\n            if (this.observer.intersecting)\r\n                this.measure();\r\n        });\r\n        this.inputState = new _input_js__WEBPACK_IMPORTED_MODULE_3__.InputState(this);\r\n        this.inputState.ensureHandlers(this, this.plugins);\r\n        this.docView = new _docview_js__WEBPACK_IMPORTED_MODULE_2__.DocView(this);\r\n        this.mountStyles();\r\n        this.updateAttrs();\r\n        this.updateState = 0 /* Idle */;\r\n        this.requestMeasure();\r\n        if (config.parent)\r\n            config.parent.appendChild(this.dom);\r\n    }\r\n    /** The current editor state. */\r\n    get state() { return this.viewState.state; }\r\n    /**\r\n     * To be able to display large documents without consuming too much memory or overloading the\r\n     * browser, CodeMirror only draws the code that is visible (plus a margin around it) to the\r\n     * DOM. This property tells you the extent of the current drawn viewport, in document positions.\r\n     */\r\n    get viewport() { return this.viewState.viewport; }\r\n    /**\r\n     * When there are, for example, large collapsed ranges in the viewport, its size can be a lot\r\n     * bigger than the actual visible content. Thus, if you are doing something like styling the\r\n     * content in the viewport, it is preferable to only do so for these ranges, which are the subset\r\n     * of the viewport that is actually drawn.\r\n     */\r\n    get visibleRanges() { return this.viewState.visibleRanges; }\r\n    /** Returns false when the editor is entirely scrolled out of view or otherwise hidden. */\r\n    get inView() { return this.viewState.inView; }\r\n    /**\r\n     * Indicates whether the user is currently composing text via [IME](https://en.wikipedia.org/wiki/Input_method),\r\n     * and at least one change has been made in the current composition.\r\n     */\r\n    get composing() { return this.inputState.composing > 0; }\r\n    /**\r\n     * Indicates whether the user is currently in composing state. Note that on some platforms,\r\n     * like Android, this will be the case a lot, since just putting the cursor on a word starts a\r\n     * composition there.\r\n     */\r\n    get compositionStarted() { return this.inputState.composing >= 0; }\r\n    dispatch(...input) {\r\n        this._dispatch(input.length == 1 && input[0] instanceof _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Transaction ? input[0] :\r\n            this.state.update(...input));\r\n    }\r\n    /**\r\n     * Update the view for the given array of transactions. This will update the visible document\r\n     * and selection to match the state produced by the transactions, and notify view plugins of the\r\n     * change. You should usually call [`dispatch`]{@link EditorView.dispatch} instead, which uses\r\n     * this as a primitive.\r\n     */\r\n    update(transactions) {\r\n        if (this.updateState != 0 /* Idle */)\r\n            throw new Error(\"Calls to EditorView.update are not allowed while an update is in progress\");\r\n        let redrawn = false, update;\r\n        let state = this.state;\r\n        for (let tr of transactions) {\r\n            if (tr.startState != state)\r\n                throw new RangeError(\"Trying to update state with a transaction that doesn't start from the previous state.\");\r\n            state = tr.state;\r\n        }\r\n        if (this.destroyed) {\r\n            this.viewState.state = state;\r\n            return;\r\n        }\r\n        // When the phrases change, redraw the editor\r\n        if (state.facet(_state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorState.phrases) != this.state.facet(_state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorState.phrases))\r\n            return this.setState(state);\r\n        update = _extension_js__WEBPACK_IMPORTED_MODULE_7__.ViewUpdate.create(this, state, transactions);\r\n        let scrollTarget = this.viewState.scrollTarget;\r\n        try {\r\n            this.updateState = 2 /* Updating */;\r\n            for (let tr of transactions) {\r\n                if (scrollTarget)\r\n                    scrollTarget = scrollTarget.map(tr.changes);\r\n                if (tr.scrollIntoView) {\r\n                    let { main } = tr.state.selection;\r\n                    scrollTarget = new _extension_js__WEBPACK_IMPORTED_MODULE_7__.ScrollTarget(main.empty ? main : _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));\r\n                }\r\n                for (let e of tr.effects)\r\n                    if (e.is(_extension_js__WEBPACK_IMPORTED_MODULE_7__.scrollIntoView))\r\n                        scrollTarget = e.value;\r\n            }\r\n            this.viewState.update(update, scrollTarget);\r\n            this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);\r\n            if (!update.empty) {\r\n                this.updatePlugins(update);\r\n                this.inputState.update(update);\r\n            }\r\n            redrawn = this.docView.update(update);\r\n            if (this.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_7__.styleModule) != this.styleModules)\r\n                this.mountStyles();\r\n            this.updateAttrs();\r\n            this.showAnnouncements(transactions);\r\n            this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent(\"select.pointer\")));\r\n        }\r\n        finally {\r\n            this.updateState = 0 /* Idle */;\r\n        }\r\n        if (update.startState.facet(_theme_js__WEBPACK_IMPORTED_MODULE_8__.theme) != update.state.facet(_theme_js__WEBPACK_IMPORTED_MODULE_8__.theme))\r\n            this.viewState.mustMeasureContent = true;\r\n        if (redrawn || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)\r\n            this.requestMeasure();\r\n        if (!update.empty)\r\n            for (let listener of this.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_7__.updateListener))\r\n                listener(update);\r\n    }\r\n    /**\r\n     * Reset the view to the given state. (This will cause the entire document to be redrawn and all\r\n     * view plugins to be reinitialized, so you should probably only use it when the new state isn't\r\n     * derived from the old state. Otherwise, use [`dispatch`]{@link EditorView.dispatch} instead.)\r\n     */\r\n    setState(newState) {\r\n        if (this.updateState != 0 /* Idle */)\r\n            throw new Error(\"Calls to EditorView.setState are not allowed while an update is in progress\");\r\n        if (this.destroyed) {\r\n            this.viewState.state = newState;\r\n            return;\r\n        }\r\n        this.updateState = 2 /* Updating */;\r\n        let hadFocus = this.hasFocus;\r\n        try {\r\n            for (let plugin of this.plugins)\r\n                plugin.destroy(this);\r\n            this.viewState = new _viewstate_js__WEBPACK_IMPORTED_MODULE_6__.ViewState(newState);\r\n            this.plugins = newState.facet(_extension_js__WEBPACK_IMPORTED_MODULE_7__.viewPlugin).map(spec => new _extension_js__WEBPACK_IMPORTED_MODULE_7__.PluginInstance(spec));\r\n            this.pluginMap.clear();\r\n            for (let plugin of this.plugins)\r\n                plugin.update(this);\r\n            this.docView = new _docview_js__WEBPACK_IMPORTED_MODULE_2__.DocView(this);\r\n            this.inputState.ensureHandlers(this, this.plugins);\r\n            this.mountStyles();\r\n            this.updateAttrs();\r\n            this.bidiCache = [];\r\n        }\r\n        finally {\r\n            this.updateState = 0 /* Idle */;\r\n        }\r\n        if (hadFocus)\r\n            this.focus();\r\n        this.requestMeasure();\r\n    }\r\n    updatePlugins(update) {\r\n        let prevSpecs = update.startState.facet(_extension_js__WEBPACK_IMPORTED_MODULE_7__.viewPlugin), specs = update.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_7__.viewPlugin);\r\n        if (prevSpecs != specs) {\r\n            let newPlugins = [];\r\n            for (let spec of specs) {\r\n                let found = prevSpecs.indexOf(spec);\r\n                if (found < 0) {\r\n                    newPlugins.push(new _extension_js__WEBPACK_IMPORTED_MODULE_7__.PluginInstance(spec));\r\n                }\r\n                else {\r\n                    let plugin = this.plugins[found];\r\n                    plugin.mustUpdate = update;\r\n                    newPlugins.push(plugin);\r\n                }\r\n            }\r\n            for (let plugin of this.plugins)\r\n                if (plugin.mustUpdate != update)\r\n                    plugin.destroy(this);\r\n            this.plugins = newPlugins;\r\n            this.pluginMap.clear();\r\n            this.inputState.ensureHandlers(this, this.plugins);\r\n        }\r\n        else {\r\n            for (let p of this.plugins)\r\n                p.mustUpdate = update;\r\n        }\r\n        for (let i = 0; i < this.plugins.length; i++)\r\n            this.plugins[i].update(this);\r\n    }\r\n    // @internal\r\n    measure(flush = true) {\r\n        if (this.destroyed)\r\n            return;\r\n        if (this.measureScheduled > -1)\r\n            cancelAnimationFrame(this.measureScheduled);\r\n        this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame\r\n        if (flush)\r\n            this.observer.flush();\r\n        let updated = null;\r\n        try {\r\n            for (let i = 0;; i++) {\r\n                this.updateState = 1 /* Measuring */;\r\n                let oldViewport = this.viewport;\r\n                let changed = this.viewState.measure(this);\r\n                if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)\r\n                    break;\r\n                if (i > 5) {\r\n                    console.warn(this.measureRequests.length ?\r\n                        \"Measure loop restarted more than 5 times\" :\r\n                        \"Viewport failed to stabilize\");\r\n                    break;\r\n                }\r\n                let measuring = [];\r\n                // Only run measure requests in this cycle when the viewport didn't change\r\n                if (!(changed & 4 /* Viewport */))\r\n                    [this.measureRequests, measuring] = [measuring, this.measureRequests];\r\n                let measured = measuring.map(m => {\r\n                    try {\r\n                        return m.read(this);\r\n                    }\r\n                    catch (e) {\r\n                        (0,_extension_js__WEBPACK_IMPORTED_MODULE_7__.logException)(this.state, e);\r\n                        return BadMeasure;\r\n                    }\r\n                });\r\n                let update = _extension_js__WEBPACK_IMPORTED_MODULE_7__.ViewUpdate.create(this, this.state, []), redrawn = false, scrolled = false;\r\n                update.flags |= changed;\r\n                if (!updated)\r\n                    updated = update;\r\n                else\r\n                    updated.flags |= changed;\r\n                this.updateState = 2 /* Updating */;\r\n                if (!update.empty) {\r\n                    this.updatePlugins(update);\r\n                    this.inputState.update(update);\r\n                    this.updateAttrs();\r\n                    redrawn = this.docView.update(update);\r\n                }\r\n                for (let i = 0; i < measuring.length; i++)\r\n                    if (measured[i] != BadMeasure) {\r\n                        try {\r\n                            let m = measuring[i];\r\n                            if (m.write)\r\n                                m.write(measured[i], this);\r\n                        }\r\n                        catch (e) {\r\n                            (0,_extension_js__WEBPACK_IMPORTED_MODULE_7__.logException)(this.state, e);\r\n                        }\r\n                    }\r\n                if (this.viewState.scrollTarget) {\r\n                    this.docView.scrollIntoView(this.viewState.scrollTarget);\r\n                    this.viewState.scrollTarget = null;\r\n                    scrolled = true;\r\n                }\r\n                if (redrawn)\r\n                    this.docView.updateSelection(true);\r\n                if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to &&\r\n                    !scrolled && this.measureRequests.length == 0)\r\n                    break;\r\n            }\r\n        }\r\n        finally {\r\n            this.updateState = 0 /* Idle */;\r\n            this.measureScheduled = -1;\r\n        }\r\n        if (updated && !updated.empty)\r\n            for (let listener of this.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_7__.updateListener))\r\n                listener(updated);\r\n    }\r\n    /** Get the CSS classes for the currently active editor themes. */\r\n    get themeClasses() {\r\n        return _theme_js__WEBPACK_IMPORTED_MODULE_8__.baseThemeID + \" \" +\r\n            (this.state.facet(_theme_js__WEBPACK_IMPORTED_MODULE_8__.darkTheme) ? _theme_js__WEBPACK_IMPORTED_MODULE_8__.baseDarkID : _theme_js__WEBPACK_IMPORTED_MODULE_8__.baseLightID) + \" \" +\r\n            this.state.facet(_theme_js__WEBPACK_IMPORTED_MODULE_8__.theme);\r\n    }\r\n    updateAttrs() {\r\n        let editorAttrs = attrsFromFacet(this, _extension_js__WEBPACK_IMPORTED_MODULE_7__.editorAttributes, {\r\n            class: \"cm-editor\" + (this.hasFocus ? \" cm-focused \" : \" \") + this.themeClasses\r\n        });\r\n        let contentAttrs = {\r\n            spellcheck: \"false\",\r\n            autocorrect: \"off\",\r\n            autocapitalize: \"off\",\r\n            translate: \"no\",\r\n            contenteditable: !this.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_7__.editable) ? \"false\" : \"true\",\r\n            class: \"cm-content\",\r\n            style: `${_browser_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"].tabSize}: ${this.state.tabSize}`,\r\n            role: \"textbox\",\r\n            \"aria-multiline\": \"true\"\r\n        };\r\n        if (this.state.readOnly)\r\n            contentAttrs[\"aria-readonly\"] = \"true\";\r\n        attrsFromFacet(this, _extension_js__WEBPACK_IMPORTED_MODULE_7__.contentAttributes, contentAttrs);\r\n        this.observer.ignore(() => {\r\n            (0,_attributes_js__WEBPACK_IMPORTED_MODULE_10__.updateAttrs)(this.contentDOM, this.contentAttrs, contentAttrs);\r\n            (0,_attributes_js__WEBPACK_IMPORTED_MODULE_10__.updateAttrs)(this.dom, this.editorAttrs, editorAttrs);\r\n        });\r\n        this.editorAttrs = editorAttrs;\r\n        this.contentAttrs = contentAttrs;\r\n    }\r\n    showAnnouncements(trs) {\r\n        let first = true;\r\n        for (let tr of trs)\r\n            for (let effect of tr.effects)\r\n                if (effect.is(EditorView.announce)) {\r\n                    if (first)\r\n                        this.announceDOM.textContent = \"\";\r\n                    first = false;\r\n                    let div = this.announceDOM.appendChild(document.createElement(\"div\"));\r\n                    div.textContent = effect.value;\r\n                }\r\n    }\r\n    mountStyles() {\r\n        this.styleModules = this.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_7__.styleModule);\r\n        _utils_style_mod_js__WEBPACK_IMPORTED_MODULE_1__.StyleModule.mount(this.root, this.styleModules.concat(_theme_js__WEBPACK_IMPORTED_MODULE_8__.baseTheme).reverse());\r\n    }\r\n    readMeasured() {\r\n        if (this.updateState == 2 /* Updating */)\r\n            throw new Error(\"Reading the editor layout isn't allowed during an update\");\r\n        if (this.updateState == 0 /* Idle */ && this.measureScheduled > -1)\r\n            this.measure(false);\r\n    }\r\n    /**\r\n     * Schedule a layout measurement, optionally providing callbacks to do custom DOM measuring\r\n     * followed by a DOM write phase. Using this is preferable reading DOM layout directly from,\r\n     * for example, an event handler, because it'll make sure measuring and drawing done by other\r\n     * components is synchronized, avoiding unnecessary DOM layout computations.\r\n     */\r\n    requestMeasure(request) {\r\n        if (this.measureScheduled < 0)\r\n            this.measureScheduled = requestAnimationFrame(() => this.measure());\r\n        if (request) {\r\n            if (request.key != null)\r\n                for (let i = 0; i < this.measureRequests.length; i++) {\r\n                    if (this.measureRequests[i].key === request.key) {\r\n                        this.measureRequests[i] = request;\r\n                        return;\r\n                    }\r\n                }\r\n            this.measureRequests.push(request);\r\n        }\r\n    }\r\n    /**\r\n     * Get the value of a specific plugin, if present. Note that plugins that crash can be dropped\r\n     * from a view, so even when you know you registered a given plugin, it is recommended to check\r\n     * the return value of this method.\r\n     */\r\n    plugin(plugin) {\r\n        let known = this.pluginMap.get(plugin);\r\n        if (known === undefined || known && known.spec != plugin)\r\n            this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);\r\n        return known && known.update(this).value;\r\n    }\r\n    /**\r\n     * The top position of the document, in screen coordinates. This may be negative when the\r\n     * editor is scrolled down. Points directly to the top of the first line, not above the padding.\r\n     */\r\n    get documentTop() {\r\n        return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;\r\n    }\r\n    /** Reports the padding above and below the document. */\r\n    get documentPadding() {\r\n        return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };\r\n    }\r\n    /**\r\n     * Find the text line or block widget at the given vertical position (which is interpreted as\r\n     * relative to the [top of the document]{@link documentTop}\r\n     */\r\n    elementAtHeight(height) {\r\n        this.readMeasured();\r\n        return this.viewState.elementAtHeight(height);\r\n    }\r\n    /** Find the line block (see [`lineBlockAt`]{@link lineBlockAt} at the given height. */\r\n    lineBlockAtHeight(height) {\r\n        this.readMeasured();\r\n        return this.viewState.lineBlockAtHeight(height);\r\n    }\r\n    /**\r\n     * Get the extent and vertical position of all [line blocks]{@link lineBlockAt} in the viewport. Positions\r\n     * are relative to the [top of the document]{@link documentTop};\r\n     */\r\n    get viewportLineBlocks() {\r\n        return this.viewState.viewportLines;\r\n    }\r\n    /**\r\n     * Find the line block around the given document position. A line block is a range delimited on\r\n     * both sides by either a non-[hidden]{@link Decoration.replace} line breaks, or the start/end\r\n     * of the document. It will usually just hold a line of text, but may be broken into multiple\r\n     * textblocks by block widgets.\r\n     */\r\n    lineBlockAt(pos) {\r\n        return this.viewState.lineBlockAt(pos);\r\n    }\r\n    /** The editor's total content height. */\r\n    get contentHeight() {\r\n        return this.viewState.contentHeight;\r\n    }\r\n    /**\r\n     * Move a cursor position by [grapheme cluster]{@link findClusterBreak}. `forward` determines whether\r\n     * the motion is away from the line start, or towards it. In bidirectional text, the line is traversed\r\n     * in visual order, using the editor's [text direction](#view.EditorView.textDirection). When the\r\n     * start position was the last one on the line, the returned position will be across the line break.\r\n     * If there is no further line, the original position is returned.\r\n     *\r\n     * By default, this method moves over a single cluster. The optional `by` argument can be used to move\r\n     * across more. It will be called with the first cluster as argument, and should return a predicate\r\n     * that determines, for each subsequent cluster, whether it should also be moved over.\r\n     */\r\n    moveByChar(start, forward, by) {\r\n        return (0,_cursor_js__WEBPACK_IMPORTED_MODULE_5__.skipAtoms)(this, start, (0,_cursor_js__WEBPACK_IMPORTED_MODULE_5__.moveByChar)(this, start, forward, by));\r\n    }\r\n    /**\r\n     * Move a cursor position across the next group of either [letters]{@link charCategorizer} or non-letter\r\n     * non-whitespace characters.\r\n     */\r\n    moveByGroup(start, forward) {\r\n        return (0,_cursor_js__WEBPACK_IMPORTED_MODULE_5__.skipAtoms)(this, start, (0,_cursor_js__WEBPACK_IMPORTED_MODULE_5__.moveByChar)(this, start, forward, initial => (0,_cursor_js__WEBPACK_IMPORTED_MODULE_5__.byGroup)(this, start.head, initial)));\r\n    }\r\n    /**\r\n     * Move to the next line boundary in the given direction. If `includeWrap` is true, line\r\n     * wrapping is on, and there is a further wrap point on the current line, the wrap point\r\n     * will be returned. Otherwise this function will return the start or end of the line.\r\n     */\r\n    moveToLineBoundary(start, forward, includeWrap = true) {\r\n        return (0,_cursor_js__WEBPACK_IMPORTED_MODULE_5__.moveToLineBoundary)(this, start, forward, includeWrap);\r\n    }\r\n    /**\r\n     * Move a cursor position vertically. When `distance` isn't given, it defaults to moving to\r\n     * the next line (including wrapped lines). Otherwise, `distance` should provide a positive\r\n     * distance in pixels.\r\n     * When `start` has a [`goalColumn`]{@link SelectionRange.goalColumn}, the vertical motion\r\n     * will use that as a target horizontal position. Otherwise, the cursor's own horizontal\r\n     * position is used. The returned cursor will have its goal column set to whichever column was\r\n     * used.\r\n     */\r\n    moveVertically(start, forward, distance) {\r\n        return (0,_cursor_js__WEBPACK_IMPORTED_MODULE_5__.skipAtoms)(this, start, (0,_cursor_js__WEBPACK_IMPORTED_MODULE_5__.moveVertically)(this, start, forward, distance));\r\n    }\r\n    /**\r\n     * Find the DOM parent node and offset (child offset if `node` is an element, character offset\r\n     * when it is a text node) at the given document position. Note that for positions that aren't\r\n     * currently in `visibleRanges`, the resulting DOM position isn't necessarily meaningful (it may\r\n     * just point before or after a placeholder element).\r\n     */\r\n    domAtPos(pos) {\r\n        return this.docView.domAtPos(pos);\r\n    }\r\n    /**\r\n     * Find the document position at the given DOM node. Can be useful for associating positions with\r\n     * DOM events. Will raise an error when `node` isn't part of the editor content.\r\n     */\r\n    posAtDOM(node, offset = 0) {\r\n        return this.docView.posFromDOM(node, offset);\r\n    }\r\n    posAtCoords(coords, precise = true) {\r\n        this.readMeasured();\r\n        return (0,_cursor_js__WEBPACK_IMPORTED_MODULE_5__.posAtCoords)(this, coords, precise);\r\n    }\r\n    /**\r\n     * Get the screen coordinates at the given document position. `side` determines whether the coordinates\r\n     * are based on the element before (-1) or after (1) the position (if no element is available on the given\r\n     * side, the method will transparently use another strategy to get reasonable coordinates).\r\n     */\r\n    coordsAtPos(pos, side = 1) {\r\n        this.readMeasured();\r\n        let rect = this.docView.coordsAt(pos, side);\r\n        if (!rect || rect.left == rect.right)\r\n            return rect;\r\n        let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);\r\n        let span = order[_bidi_js__WEBPACK_IMPORTED_MODULE_13__.BidiSpan.find(order, pos - line.from, -1, side)];\r\n        return (0,_dom_js__WEBPACK_IMPORTED_MODULE_4__.flattenRect)(rect, (span.dir == _bidi_js__WEBPACK_IMPORTED_MODULE_13__.Direction.LTR) == (side > 0));\r\n    }\r\n    /**\r\n     * The default width of a character in the editor. May not accurately reflect the width of all\r\n     * characters (given variable width fonts or styling of invididual ranges).\r\n     */\r\n    get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }\r\n    /** The default height of a line in the editor. May not be accurate for all lines. */\r\n    get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }\r\n    /**\r\n     * The text direction ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)\r\n     * CSS property) of the editor's content element.\r\n     */\r\n    get textDirection() { return this.viewState.defaultTextDirection; }\r\n    /** Find the text direction of the block at the given position, as assigned by CSS. */\r\n    textDirectionAt(pos) {\r\n        let perLine = this.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_7__.perLineTextDirection);\r\n        if (!perLine || pos < this.viewport.from || pos > this.viewport.to)\r\n            return this.textDirection;\r\n        this.readMeasured();\r\n        return this.docView.textDirectionAt(pos);\r\n    }\r\n    /**\r\n     * Whether this editor [wraps lines](#view.EditorView.lineWrapping)\r\n     * (as determined by the [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)\r\n     * CSS property of its content element).\r\n     */\r\n    get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }\r\n    /**\r\n     * Returns the bidirectional text structure of the given line (which should be in the\r\n     * current document) as an array of span objects. The order of these spans matches the\r\n     * [text direction]{@link textDirection}—if that is left-to-right, the leftmost spans\r\n     * come first, otherwise the rightmost spans come first.\r\n     */\r\n    bidiSpans(line) {\r\n        if (line.length > MaxBidiLine)\r\n            return (0,_bidi_js__WEBPACK_IMPORTED_MODULE_13__.trivialOrder)(line.length);\r\n        let dir = this.textDirectionAt(line.from);\r\n        for (let entry of this.bidiCache)\r\n            if (entry.from == line.from && entry.dir == dir)\r\n                return entry.order;\r\n        let order = (0,_bidi_js__WEBPACK_IMPORTED_MODULE_13__.computeOrder)(line.text, dir);\r\n        this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));\r\n        return order;\r\n    }\r\n    /** Check whether the editor has focus. */\r\n    get hasFocus() {\r\n        var _a;\r\n        // Safari return false for hasFocus when the context menu is open\r\n        // or closing, which leads us to ignore selection changes from the\r\n        // context menu because it looks like the editor isn't focused.\r\n        // This kludges around that.\r\n        return (document.hasFocus() || _browser_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"].safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&\r\n            this.root.activeElement == this.contentDOM;\r\n    }\r\n    /** Put focus on the editor. */\r\n    focus() {\r\n        this.observer.ignore(() => {\r\n            (0,_dom_js__WEBPACK_IMPORTED_MODULE_4__.focusPreventScroll)(this.contentDOM);\r\n            this.docView.updateSelection();\r\n        });\r\n    }\r\n    /**\r\n     * Clean up this editor view, removing its element from the document, unregistering event\r\n     * handlers, and notifying plugins. The view instance can no longer be used after calling this.\r\n     */\r\n    destroy() {\r\n        for (let plugin of this.plugins)\r\n            plugin.destroy(this);\r\n        this.plugins = [];\r\n        this.inputState.destroy();\r\n        this.dom.remove();\r\n        this.observer.destroy();\r\n        if (this.measureScheduled > -1)\r\n            cancelAnimationFrame(this.measureScheduled);\r\n        this.destroyed = true;\r\n    }\r\n    /**\r\n     * Returns an effect that can be [added]{@link TransactionSpec.effects} to a transaction to\r\n     * cause it to scroll the given position or range into view.\r\n     * @param options.y By default (`\"nearest\"`) the position will be vertically scrolled only the minimal amount\r\n     *          required to move the given position into view. You can set this to `\"start\"` to move it to the top\r\n     *          of the view, `\"end\"` to move it to the bottom, or `\"center\"` to move it to the center.\r\n     * @param options.x Effect similar to [`y`]{@link scrollIntoView.options.y}, but for the horizontal scroll position.\r\n     * @param options.yMargin Extra vertical distance to add when moving something into view. Not used with the `\"center\"` strategy. Defaults to 5.\r\n     * @param options.xMargin Extra horizontal distance to add. Not used with the `\"center\"` strategy. Defaults to 5.\r\n     */\r\n    static scrollIntoView(pos, options = {}) {\r\n        return _extension_js__WEBPACK_IMPORTED_MODULE_7__.scrollIntoView.of(new _extension_js__WEBPACK_IMPORTED_MODULE_7__.ScrollTarget(typeof pos == \"number\" ? _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));\r\n    }\r\n    /**\r\n     * Returns an extension that can be used to add DOM event handlers. The value should be an\r\n     * object mapping event names to handler functions. For any given event, such functions are\r\n     * ordered by extension precedence, and the first handler to return true will be assumed\r\n     * to have handled that event, and no other handlers or built-in behavior will be activated\r\n     * for it. These are registered on the [content element]{@link contentDOM}, except for `scroll`\r\n     * handlers, which will be called any time the editor's [scroll element]{@link scrollDOM}\r\n     * or one of its parent nodes is scrolled.\r\n     */\r\n    static domEventHandlers(handlers) {\r\n        return _extension_js__WEBPACK_IMPORTED_MODULE_7__.ViewPlugin.define(() => ({}), { eventHandlers: handlers });\r\n    }\r\n    /**\r\n     * Create a theme extension. The first argument can be a [`style-mod`](https://github.com/marijnh/style-mod#documentation)\r\n     * style spec providing the styles for the theme. These will be prefixed with a generated class for\r\n     * the style. Because the selectors will be prefixed with a scope class, rule that directly match\r\n     * the editor's [wrapper element]{@link EditorView.dom}—to which the scope class will be added—need\r\n     * to be explicitly differentiated by adding an `&` to the selector for that element—for example\r\n     * `&.cm-focused`. When `dark` is set to true, the theme will be marked as dark, which will cause\r\n     * the `&dark` rules from [base themes]{@link baseTheme} to be used (as opposed to `&light` when a\r\n     * light theme is active).\r\n     */\r\n    static theme(spec, options) {\r\n        let prefix = _utils_style_mod_js__WEBPACK_IMPORTED_MODULE_1__.StyleModule.newName();\r\n        let result = [_theme_js__WEBPACK_IMPORTED_MODULE_8__.theme.of(prefix), _extension_js__WEBPACK_IMPORTED_MODULE_7__.styleModule.of((0,_theme_js__WEBPACK_IMPORTED_MODULE_8__.buildTheme)(`.${prefix}`, spec))];\r\n        if (options && options.dark)\r\n            result.push(_theme_js__WEBPACK_IMPORTED_MODULE_8__.darkTheme.of(true));\r\n        return result;\r\n    }\r\n    /**\r\n     * Create an extension that adds styles to the base theme. Like with [`theme`]{@link theme},\r\n     * use `&` to indicate the place of the editor wrapper element when directly targeting that. You can\r\n     * also use `&dark` or `&light` instead to only target editors with a dark or light theme.\r\n     */\r\n    static baseTheme(spec) {\r\n        return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Prec.lowest(_extension_js__WEBPACK_IMPORTED_MODULE_7__.styleModule.of((0,_theme_js__WEBPACK_IMPORTED_MODULE_8__.buildTheme)(\".\" + _theme_js__WEBPACK_IMPORTED_MODULE_8__.baseThemeID, spec, _theme_js__WEBPACK_IMPORTED_MODULE_8__.lightDarkIDs)));\r\n    }\r\n}\r\n/**\r\n * Facet to add a [style module](https://github.com/marijnh/style-mod#documentation) to\r\n * an editor view. The view will ensure that the module is mounted in its\r\n * [document root]{@link root}.\r\n */\r\nEditorView.styleModule = _extension_js__WEBPACK_IMPORTED_MODULE_7__.styleModule;\r\n/**\r\n * An input handler can override the way changes to the editable DOM content are handled.\r\n * Handlers are passed the document positions between which the change was found, and the\r\n * new content. When one returns true, no further input handlers are called and the default\r\n * behavior is prevented.\r\n */\r\nEditorView.inputHandler = _extension_js__WEBPACK_IMPORTED_MODULE_7__.inputHandler;\r\n/**\r\n * By default, the editor assumes all its content has the same [text direction]{@link Direction}.\r\n * Configure this with a `true` value to make it read the text direction of every (rendered)\r\n * line separately.\r\n */\r\nEditorView.perLineTextDirection = _extension_js__WEBPACK_IMPORTED_MODULE_7__.perLineTextDirection;\r\n/**\r\n * Allows you to provide a function that should be called when the library catches an exception\r\n * from an extension (mostly from view plugins, but may be used by other extensions to route\r\n * exceptions from user-code-provided callbacks). This is mostly useful for debugging and logging.\r\n * See {@link logException}.\r\n */\r\nEditorView.exceptionSink = _extension_js__WEBPACK_IMPORTED_MODULE_7__.exceptionSink;\r\n/** A facet that can be used to register a function to be called every time the view updates. */\r\nEditorView.updateListener = _extension_js__WEBPACK_IMPORTED_MODULE_7__.updateListener;\r\n/**\r\n * Facet that controls whether the editor content DOM is editable. When its highest-precedence\r\n * value is `false`, the element will not have its `contenteditable` attribute set. (Note that\r\n * this doesn't affect API calls that change the editor content, even when those are bound to keys\r\n * or buttons. See the {@link readOnly} facet for that.)\r\n */\r\nEditorView.editable = _extension_js__WEBPACK_IMPORTED_MODULE_7__.editable;\r\n/**\r\n * Allows you to influence the way mouse selection happens. The functions in this facet will\r\n * be called for a `mousedown` event on the editor, and can return an object that overrides\r\n * the way a selection is computed from that mouse click or drag.\r\n */\r\nEditorView.mouseSelectionStyle = _extension_js__WEBPACK_IMPORTED_MODULE_7__.mouseSelectionStyle;\r\n/**\r\n * Facet used to configure whether a given selection drag event should move or copy the\r\n * selection. The given predicate will be called with the `mousedown` event, and can return\r\n * `true` when the drag should move the content.\r\n */\r\nEditorView.dragMovesSelection = _extension_js__WEBPACK_IMPORTED_MODULE_7__.dragMovesSelection;\r\n/**\r\n * Facet used to configure whether a given selecting click adds a new range to the existing\r\n * selection or replaces it entirely. The default behavior is to check `event.metaKey` on macOS,\r\n * and `event.ctrlKey` elsewhere.\r\n */\r\nEditorView.clickAddsSelectionRange = _extension_js__WEBPACK_IMPORTED_MODULE_7__.clickAddsSelectionRange;\r\n/**\r\n * A facet that determines which [decorations](#view.Decoration) are shown in the view.\r\n * Decorations can be provided in two ways—directly, or via a function that takes an editor view.\r\n *\r\n * Only decoration sets provided directly are allowed to influence the editor's vertical\r\n * layout structure. The ones provided as functions are called _after_ the new viewport\r\n * has been computed, and thus **must not** introduce block widgets or replacing decorations\r\n * that cover line breaks.\r\n */\r\nEditorView.decorations = _extension_js__WEBPACK_IMPORTED_MODULE_7__.decorations;\r\n/**\r\n * Used to provide ranges that should be treated as atoms as far as cursor motion is concerned.\r\n * This causes methods like [`moveByChar`]{@link moveByChar} and [`moveVertically`]{@link moveVertically}\r\n * (and the commands built on top of them) to skip across such regions when a selection endpoint\r\n * would enter them. This does _not_ prevent direct programmatic\r\n * [selection updates]{@link TransactionSpec.selection} from moving into such regions.\r\n */\r\nEditorView.atomicRanges = _extension_js__WEBPACK_IMPORTED_MODULE_7__.atomicRanges;\r\n/**\r\n * Facet that allows extensions to provide additional scroll margins (space around the sides of\r\n * the scrolling element that should be considered invisible). This can be useful when the plugin\r\n * introduces elements that cover part of that element (for example a horizontally fixed gutter).\r\n */\r\nEditorView.scrollMargins = _extension_js__WEBPACK_IMPORTED_MODULE_7__.scrollMargins;\r\n/**\r\n * This facet records whether a dark theme is active. The extension returned by [`theme`]{@link theme}\r\n * automatically includes an instance of this when the `dark` option is set to true.\r\n */\r\nEditorView.darkTheme = _theme_js__WEBPACK_IMPORTED_MODULE_8__.darkTheme;\r\n/** Facet that provides additional DOM attributes for the editor's editable DOM element. */\r\nEditorView.contentAttributes = _extension_js__WEBPACK_IMPORTED_MODULE_7__.contentAttributes;\r\n/** Facet that provides DOM attributes for the editor's outer element. */\r\nEditorView.editorAttributes = _extension_js__WEBPACK_IMPORTED_MODULE_7__.editorAttributes;\r\n/** An extension that enables line wrapping in the editor (by setting CSS `white-space` to `pre-wrap` in the content). */\r\nEditorView.lineWrapping = EditorView.contentAttributes.of({ \"class\": \"cm-lineWrapping\" });\r\n/**\r\n * State effect used to include screen reader announcements in a transaction. These will be added\r\n * to the DOM in a visually hidden element with `aria-live=\"polite\"` set, and should be used to\r\n * describe effects that are visually obvious but may not be noticed by screen reader users (such\r\n * as moving to the next search match).\r\n */\r\nEditorView.announce = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.StateEffect.define();\r\n// Maximum line length for which we compute accurate bidi info\r\nconst MaxBidiLine = 4096;\r\nconst BadMeasure = {};\r\nclass CachedOrder {\r\n    constructor(from, to, dir, order) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.dir = dir;\r\n        this.order = order;\r\n    }\r\n    static update(cache, changes) {\r\n        if (changes.empty)\r\n            return cache;\r\n        let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : _bidi_js__WEBPACK_IMPORTED_MODULE_13__.Direction.LTR;\r\n        for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {\r\n            let entry = cache[i];\r\n            if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))\r\n                result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));\r\n        }\r\n        return result;\r\n    }\r\n}\r\nfunction attrsFromFacet(view, facet, base) {\r\n    for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {\r\n        let source = sources[i], value = typeof source == \"function\" ? source(view) : source;\r\n        if (value)\r\n            (0,_attributes_js__WEBPACK_IMPORTED_MODULE_10__.combineAttrs)(value, base);\r\n    }\r\n    return base;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/editorview.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/extension.js":
/*!*****************************************************!*\
  !*** ./sys/public/js/editor/dist/view/extension.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ChangedRange\": () => (/* binding */ ChangedRange),\n/* harmony export */   \"PluginInstance\": () => (/* binding */ PluginInstance),\n/* harmony export */   \"ScrollTarget\": () => (/* binding */ ScrollTarget),\n/* harmony export */   \"ViewPlugin\": () => (/* binding */ ViewPlugin),\n/* harmony export */   \"ViewUpdate\": () => (/* binding */ ViewUpdate),\n/* harmony export */   \"atomicRanges\": () => (/* binding */ atomicRanges),\n/* harmony export */   \"clickAddsSelectionRange\": () => (/* binding */ clickAddsSelectionRange),\n/* harmony export */   \"contentAttributes\": () => (/* binding */ contentAttributes),\n/* harmony export */   \"decorations\": () => (/* binding */ decorations),\n/* harmony export */   \"dragMovesSelection\": () => (/* binding */ dragMovesSelection),\n/* harmony export */   \"editable\": () => (/* binding */ editable),\n/* harmony export */   \"editorAttributes\": () => (/* binding */ editorAttributes),\n/* harmony export */   \"exceptionSink\": () => (/* binding */ exceptionSink),\n/* harmony export */   \"inputHandler\": () => (/* binding */ inputHandler),\n/* harmony export */   \"logException\": () => (/* binding */ logException),\n/* harmony export */   \"mouseSelectionStyle\": () => (/* binding */ mouseSelectionStyle),\n/* harmony export */   \"perLineTextDirection\": () => (/* binding */ perLineTextDirection),\n/* harmony export */   \"scrollIntoView\": () => (/* binding */ scrollIntoView),\n/* harmony export */   \"scrollMargins\": () => (/* binding */ scrollMargins),\n/* harmony export */   \"styleModule\": () => (/* binding */ styleModule),\n/* harmony export */   \"updateListener\": () => (/* binding */ updateListener),\n/* harmony export */   \"viewPlugin\": () => (/* binding */ viewPlugin)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _decoration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./decoration.js */ \"./sys/public/js/editor/dist/view/decoration.js\");\n\r\n\r\nconst clickAddsSelectionRange = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst dragMovesSelection = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst mouseSelectionStyle = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst exceptionSink = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst updateListener = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst inputHandler = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst perLineTextDirection = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({\r\n    combine: values => values.some(x => x)\r\n});\r\nclass ScrollTarget {\r\n    constructor(range, y = \"nearest\", x = \"nearest\", yMargin = 5, xMargin = 5) {\r\n        this.range = range;\r\n        this.y = y;\r\n        this.x = x;\r\n        this.yMargin = yMargin;\r\n        this.xMargin = xMargin;\r\n    }\r\n    map(changes) {\r\n        return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);\r\n    }\r\n}\r\nconst scrollIntoView = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.StateEffect.define({ map: (t, ch) => t.map(ch) });\r\n/**\r\n * Log or report an unhandled exception in client code. Should probably only be used by\r\n * extension code that allows client code to provide functions, and calls those functions\r\n * in a context where an exception can't be propagated to calling code in a reasonable way\r\n * (for example when in an event handler).\r\n *\r\n * Either calls a handler registered with {@link EditorView.exceptionSink}, `window.onerror`,\r\n * if defined, or `console.error` (in which case it'll pass `context`, when given, as first argument).\r\n */\r\nfunction logException(state, exception, context) {\r\n    let handler = state.facet(exceptionSink);\r\n    if (handler.length)\r\n        handler[0](exception);\r\n    else if (window.onerror)\r\n        window.onerror(String(exception), context, undefined, undefined, exception);\r\n    else if (context)\r\n        console.error(context + \":\", exception);\r\n    else\r\n        console.error(exception);\r\n}\r\nconst editable = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({ combine: values => values.length ? values[0] : true });\r\nlet nextPluginID = 0;\r\nconst viewPlugin = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\n/**\r\n * View plugins associate stateful values with a view. They can influence the way the content is drawn,\r\n * and are notified of things that happen in the view.\r\n */\r\nclass ViewPlugin {\r\n    constructor(\r\n    // @internal\r\n    id, \r\n    // @internal\r\n    create, \r\n    // @internal\r\n    domEventHandlers, buildExtensions) {\r\n        this.id = id;\r\n        this.create = create;\r\n        this.domEventHandlers = domEventHandlers;\r\n        this.extension = buildExtensions(this);\r\n    }\r\n    /** Define a plugin from a constructor function that creates the plugin's value, given an editor view. */\r\n    static define(create, spec) {\r\n        const { eventHandlers, provide, decorations: deco } = spec || {};\r\n        return new ViewPlugin(nextPluginID++, create, eventHandlers, plugin => {\r\n            let ext = [viewPlugin.of(plugin)];\r\n            if (deco)\r\n                ext.push(decorations.of(view => {\r\n                    let pluginInst = view.plugin(plugin);\r\n                    return pluginInst ? deco(pluginInst) : _decoration_js__WEBPACK_IMPORTED_MODULE_1__.Decoration.none;\r\n                }));\r\n            if (provide)\r\n                ext.push(provide(plugin));\r\n            return ext;\r\n        });\r\n    }\r\n    /** Create a plugin for a class whose constructor takes a single editor view as argument. */\r\n    static fromClass(cls, spec) {\r\n        return ViewPlugin.define(view => new cls(view), spec);\r\n    }\r\n}\r\nclass PluginInstance {\r\n    constructor(spec) {\r\n        this.spec = spec;\r\n        this.mustUpdate = null;\r\n        // This is null when the plugin is initially created, but initialized on the first update.\r\n        this.value = null;\r\n    }\r\n    update(view) {\r\n        if (!this.value) {\r\n            if (this.spec) {\r\n                try {\r\n                    this.value = this.spec.create(view);\r\n                }\r\n                catch (e) {\r\n                    logException(view.state, e, \"CodeMirror plugin crashed\");\r\n                    this.deactivate();\r\n                }\r\n            }\r\n        }\r\n        else if (this.mustUpdate) {\r\n            let update = this.mustUpdate;\r\n            this.mustUpdate = null;\r\n            if (this.value.update) {\r\n                try {\r\n                    this.value.update(update);\r\n                }\r\n                catch (e) {\r\n                    logException(update.state, e, \"CodeMirror plugin crashed\");\r\n                    if (this.value.destroy)\r\n                        try {\r\n                            this.value.destroy();\r\n                        }\r\n                        catch (_) { }\r\n                    this.deactivate();\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    destroy(view) {\r\n        var _a;\r\n        if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {\r\n            try {\r\n                this.value.destroy();\r\n            }\r\n            catch (e) {\r\n                logException(view.state, e, \"CodeMirror plugin crashed\");\r\n            }\r\n        }\r\n    }\r\n    deactivate() {\r\n        this.spec = this.value = null;\r\n    }\r\n}\r\nconst editorAttributes = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst contentAttributes = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\n// Provide decorations\r\nconst decorations = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst atomicRanges = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst scrollMargins = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst styleModule = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nclass ChangedRange {\r\n    constructor(fromA, toA, fromB, toB) {\r\n        this.fromA = fromA;\r\n        this.toA = toA;\r\n        this.fromB = fromB;\r\n        this.toB = toB;\r\n    }\r\n    join(other) {\r\n        return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));\r\n    }\r\n    addToSet(set) {\r\n        let i = set.length, me = this;\r\n        for (; i > 0; i--) {\r\n            let range = set[i - 1];\r\n            if (range.fromA > me.toA)\r\n                continue;\r\n            if (range.toA < me.fromA)\r\n                break;\r\n            me = me.join(range);\r\n            set.splice(i - 1, 1);\r\n        }\r\n        set.splice(i, 0, me);\r\n        return set;\r\n    }\r\n    static extendWithRanges(diff, ranges) {\r\n        if (ranges.length == 0)\r\n            return diff;\r\n        let result = [];\r\n        for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {\r\n            let next = dI == diff.length ? null : diff[dI], off = posA - posB;\r\n            let end = next ? next.fromB : 1e9;\r\n            while (rI < ranges.length && ranges[rI] < end) {\r\n                let from = ranges[rI], to = ranges[rI + 1];\r\n                let fromB = Math.max(posB, from), toB = Math.min(end, to);\r\n                if (fromB <= toB)\r\n                    new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);\r\n                if (to > end)\r\n                    break;\r\n                else\r\n                    rI += 2;\r\n            }\r\n            if (!next)\r\n                return result;\r\n            new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);\r\n            posA = next.toA;\r\n            posB = next.toB;\r\n        }\r\n    }\r\n}\r\n/** View [plugins](#view.ViewPlugin) are given instances of this class, which describe what happened, whenever the view is updated. */\r\nclass ViewUpdate {\r\n    constructor(\r\n    /** The editor view that the update is associated with. */\r\n    view, \r\n    /** The new editor state. */\r\n    state, \r\n    /** The transactions involved in the update. May be empty. */\r\n    transactions) {\r\n        this.view = view;\r\n        this.state = state;\r\n        this.transactions = transactions;\r\n        // @internal\r\n        this.flags = 0;\r\n        this.startState = view.state;\r\n        this.changes = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.ChangeSet.empty(this.startState.doc.length);\r\n        for (let tr of transactions)\r\n            this.changes = this.changes.compose(tr.changes);\r\n        let changedRanges = [];\r\n        this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));\r\n        this.changedRanges = changedRanges;\r\n        let focus = view.hasFocus;\r\n        if (focus != view.inputState.notifiedFocused) {\r\n            view.inputState.notifiedFocused = focus;\r\n            this.flags |= 1 /* Focus */;\r\n        }\r\n    }\r\n    // @internal\r\n    static create(view, state, transactions) {\r\n        return new ViewUpdate(view, state, transactions);\r\n    }\r\n    /** Tells you whether the [viewport]{@link EditorView.viewport} or [visible ranges]{@link EditorView.visibleRanges} changed in this update. */\r\n    get viewportChanged() {\r\n        return (this.flags & 4 /* Viewport */) > 0;\r\n    }\r\n    /** Indicates whether the height of a block element in the editor changed in this update. */\r\n    get heightChanged() {\r\n        return (this.flags & 2 /* Height */) > 0;\r\n    }\r\n    /** Returns true when the document was modified or the size of the editor, or elements within the editor, changed. */\r\n    get geometryChanged() {\r\n        return this.docChanged || (this.flags & (8 /* Geometry */ | 2 /* Height */)) > 0;\r\n    }\r\n    /** True when this update indicates a focus change. */\r\n    get focusChanged() {\r\n        return (this.flags & 1 /* Focus */) > 0;\r\n    }\r\n    /** Whether the document changed in this update. */\r\n    get docChanged() {\r\n        return !this.changes.empty;\r\n    }\r\n    /** Whether the selection was explicitly set in this update. */\r\n    get selectionSet() {\r\n        return this.transactions.some(tr => tr.selection);\r\n    }\r\n    // @internal\r\n    get empty() { return this.flags == 0 && this.transactions.length == 0; }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/extension.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/gutter.js":
/*!**************************************************!*\
  !*** ./sys/public/js/editor/dist/view/gutter.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GutterMarker\": () => (/* binding */ GutterMarker),\n/* harmony export */   \"gutter\": () => (/* binding */ gutter),\n/* harmony export */   \"gutterLineClass\": () => (/* binding */ gutterLineClass),\n/* harmony export */   \"gutters\": () => (/* binding */ gutters),\n/* harmony export */   \"highlightActiveLineGutter\": () => (/* binding */ highlightActiveLineGutter),\n/* harmony export */   \"lineNumberMarkers\": () => (/* binding */ lineNumberMarkers),\n/* harmony export */   \"lineNumbers\": () => (/* binding */ lineNumbers)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _editorview_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editorview.js */ \"./sys/public/js/editor/dist/view/editorview.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n/* harmony import */ var _decoration_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./decoration.js */ \"./sys/public/js/editor/dist/view/decoration.js\");\n/* harmony import */ var _bidi_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bidi.js */ \"./sys/public/js/editor/dist/view/bidi.js\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A gutter marker represents a bit of information attached to a line in a specific gutter.\r\n * Your own custom markers have to extend this class.\r\n */\r\nclass GutterMarker extends _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeValue {\r\n    // @internal\r\n    compare(other) {\r\n        return this == other || this.constructor == other.constructor && this.eq(other);\r\n    }\r\n    /** Compare this marker to another marker of the same type. */\r\n    eq(other) { return false; }\r\n    /** Called if the marker has a `toDOM` method and its representation was removed from a gutter. */\r\n    destroy(dom) { }\r\n}\r\nGutterMarker.prototype.elementClass = \"\";\r\nGutterMarker.prototype.toDOM = undefined;\r\nGutterMarker.prototype.mapMode = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.MapMode.TrackBefore;\r\nGutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;\r\nGutterMarker.prototype.point = true;\r\n/**\r\n * Facet used to add a class to all gutter elements for a given line. Markers given to this facet\r\n * should _only_ define an [`elementclass`]{@link GutterMarker.elementClass}, not a\r\n * [`toDOM`]{@link GutterMarker.toDOM} (or the marker will appear in all gutters for the line).\r\n */\r\nconst gutterLineClass = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst defaults = {\r\n    class: \"\",\r\n    renderEmptyElements: false,\r\n    elementStyle: \"\",\r\n    markers: () => _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSet.empty,\r\n    lineMarker: () => null,\r\n    lineMarkerChange: null,\r\n    initialSpacer: null,\r\n    updateSpacer: null,\r\n    domEventHandlers: {}\r\n};\r\nconst activeGutters = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\n/** Define an editor gutter. The order in which the gutters appear is determined by their extension priority. */\r\nfunction gutter(config) {\r\n    return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];\r\n}\r\nconst unfixGutters = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({\r\n    combine: values => values.some(x => x)\r\n});\r\n/**\r\n * The gutter-drawing plugin is automatically enabled when you add a gutter, but you can use\r\n * this function to explicitly configure it.\r\n *\r\n * Unless `fixed` is explicitly set to `false`, the gutters are fixed, meaning they don't scroll\r\n * along with the content horizontally (except on Internet Explorer, which doesn't support\r\n * CSS [`position: sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).\r\n */\r\nfunction gutters(config) {\r\n    let result = [gutterView,];\r\n    if (config && config.fixed === false)\r\n        result.push(unfixGutters.of(true));\r\n    return result;\r\n}\r\nconst gutterView = _extension_js__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.prevViewport = view.viewport;\r\n        this.dom = document.createElement(\"div\");\r\n        this.dom.className = \"cm-gutters\";\r\n        this.dom.setAttribute(\"aria-hidden\", \"true\");\r\n        this.dom.style.minHeight = this.view.contentHeight + \"px\";\r\n        this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));\r\n        for (let gutter of this.gutters)\r\n            this.dom.appendChild(gutter.dom);\r\n        this.fixed = !view.state.facet(unfixGutters);\r\n        if (this.fixed) {\r\n            // FIXME IE11 fallback, which doesn't support position: sticky,\r\n            // by using position: relative + event handlers that realign the\r\n            // gutter (or just force fixed=false on IE11?)\r\n            this.dom.style.position = \"sticky\";\r\n        }\r\n        this.syncGutters(false);\r\n        view.scrollDOM.insertBefore(this.dom, view.contentDOM);\r\n    }\r\n    update(update) {\r\n        if (this.updateGutters(update)) {\r\n            // Detach during sync when the viewport changed significantly (such as during scrolling), since for large updates that is faster.\r\n            let vpA = this.prevViewport, vpB = update.view.viewport;\r\n            let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);\r\n            this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);\r\n        }\r\n        if (update.geometryChanged)\r\n            this.dom.style.minHeight = this.view.contentHeight + \"px\";\r\n        if (this.view.state.facet(unfixGutters) != !this.fixed) {\r\n            this.fixed = !this.fixed;\r\n            this.dom.style.position = this.fixed ? \"sticky\" : \"\";\r\n        }\r\n        this.prevViewport = update.view.viewport;\r\n    }\r\n    syncGutters(detach) {\r\n        let after = this.dom.nextSibling;\r\n        if (detach)\r\n            this.dom.remove();\r\n        let lineClasses = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);\r\n        let classSet = [];\r\n        let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));\r\n        for (let line of this.view.viewportLineBlocks) {\r\n            let text;\r\n            if (Array.isArray(line.type)) {\r\n                for (let b of line.type)\r\n                    if (b.type == _decoration_js__WEBPACK_IMPORTED_MODULE_3__.BlockType.Text) {\r\n                        text = b;\r\n                        break;\r\n                    }\r\n            }\r\n            else {\r\n                text = line.type == _decoration_js__WEBPACK_IMPORTED_MODULE_3__.BlockType.Text ? line : undefined;\r\n            }\r\n            if (!text)\r\n                continue;\r\n            if (classSet.length)\r\n                classSet = [];\r\n            advanceCursor(lineClasses, classSet, line.from);\r\n            for (let cx of contexts)\r\n                cx.line(this.view, text, classSet);\r\n        }\r\n        for (let cx of contexts)\r\n            cx.finish();\r\n        if (detach)\r\n            this.view.scrollDOM.insertBefore(this.dom, after);\r\n    }\r\n    updateGutters(update) {\r\n        let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);\r\n        let change = update.docChanged || update.heightChanged || update.viewportChanged ||\r\n            !_state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);\r\n        if (prev == cur) {\r\n            for (let gutter of this.gutters)\r\n                if (gutter.update(update))\r\n                    change = true;\r\n        }\r\n        else {\r\n            change = true;\r\n            let gutters = [];\r\n            for (let conf of cur) {\r\n                let known = prev.indexOf(conf);\r\n                if (known < 0) {\r\n                    gutters.push(new SingleGutterView(this.view, conf));\r\n                }\r\n                else {\r\n                    this.gutters[known].update(update);\r\n                    gutters.push(this.gutters[known]);\r\n                }\r\n            }\r\n            for (let g of this.gutters) {\r\n                g.dom.remove();\r\n                if (gutters.indexOf(g) < 0)\r\n                    g.destroy();\r\n            }\r\n            for (let g of gutters)\r\n                this.dom.appendChild(g.dom);\r\n            this.gutters = gutters;\r\n        }\r\n        return change;\r\n    }\r\n    destroy() {\r\n        for (let view of this.gutters)\r\n            view.destroy();\r\n        this.dom.remove();\r\n    }\r\n}, {\r\n    provide: plugin => _editorview_js__WEBPACK_IMPORTED_MODULE_1__.EditorView.scrollMargins.of(view => {\r\n        let value = view.plugin(plugin);\r\n        if (!value || value.gutters.length == 0 || !value.fixed)\r\n            return null;\r\n        return view.textDirection == _bidi_js__WEBPACK_IMPORTED_MODULE_4__.Direction.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };\r\n    })\r\n});\r\nfunction asArray(val) { return (Array.isArray(val) ? val : [val]); }\r\nfunction advanceCursor(cursor, collect, pos) {\r\n    while (cursor.value && cursor.from <= pos) {\r\n        if (cursor.from == pos)\r\n            collect.push(cursor.value);\r\n        cursor.next();\r\n    }\r\n}\r\nclass UpdateContext {\r\n    constructor(gutter, viewport, height) {\r\n        this.gutter = gutter;\r\n        this.height = height;\r\n        this.localMarkers = [];\r\n        this.i = 0;\r\n        this.cursor = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSet.iter(gutter.markers, viewport.from);\r\n    }\r\n    line(view, line, extraMarkers) {\r\n        if (this.localMarkers.length)\r\n            this.localMarkers = [];\r\n        advanceCursor(this.cursor, this.localMarkers, line.from);\r\n        let localMarkers = extraMarkers.length ? this.localMarkers.concat(extraMarkers) : this.localMarkers;\r\n        let forLine = this.gutter.config.lineMarker(view, line, localMarkers);\r\n        if (forLine)\r\n            localMarkers.unshift(forLine);\r\n        let gutter = this.gutter;\r\n        if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)\r\n            return;\r\n        let above = line.top - this.height;\r\n        if (this.i == gutter.elements.length) {\r\n            let newElt = new GutterElement(view, line.height, above, localMarkers);\r\n            gutter.elements.push(newElt);\r\n            gutter.dom.appendChild(newElt.dom);\r\n        }\r\n        else {\r\n            gutter.elements[this.i].update(view, line.height, above, localMarkers);\r\n        }\r\n        this.height = line.bottom;\r\n        this.i++;\r\n    }\r\n    finish() {\r\n        let gutter = this.gutter;\r\n        while (gutter.elements.length > this.i) {\r\n            let last = gutter.elements.pop();\r\n            gutter.dom.removeChild(last.dom);\r\n            last.destroy();\r\n        }\r\n    }\r\n}\r\nclass SingleGutterView {\r\n    constructor(view, config) {\r\n        this.view = view;\r\n        this.config = config;\r\n        this.elements = [];\r\n        this.spacer = null;\r\n        this.dom = document.createElement(\"div\");\r\n        this.dom.className = \"cm-gutter\" + (this.config.class ? \" \" + this.config.class : \"\");\r\n        for (let prop in config.domEventHandlers) {\r\n            this.dom.addEventListener(prop, (event) => {\r\n                let line = view.lineBlockAtHeight(event.clientY - view.documentTop);\r\n                if (config.domEventHandlers[prop](view, line, event))\r\n                    event.preventDefault();\r\n            });\r\n        }\r\n        this.markers = asArray(config.markers(view));\r\n        if (config.initialSpacer) {\r\n            this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);\r\n            this.dom.appendChild(this.spacer.dom);\r\n            this.spacer.dom.style.cssText += \"visibility: hidden; pointer-events: none\";\r\n        }\r\n    }\r\n    update(update) {\r\n        let prevMarkers = this.markers;\r\n        this.markers = asArray(this.config.markers(update.view));\r\n        if (this.spacer && this.config.updateSpacer) {\r\n            let updated = this.config.updateSpacer(this.spacer.markers[0], update);\r\n            if (updated != this.spacer.markers[0])\r\n                this.spacer.update(update.view, 0, 0, [updated]);\r\n        }\r\n        let vp = update.view.viewport;\r\n        return !_state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||\r\n            (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);\r\n    }\r\n    destroy() {\r\n        for (let elt of this.elements)\r\n            elt.destroy();\r\n    }\r\n}\r\nclass GutterElement {\r\n    constructor(view, height, above, markers) {\r\n        this.height = -1;\r\n        this.above = 0;\r\n        this.markers = [];\r\n        this.dom = document.createElement(\"div\");\r\n        this.update(view, height, above, markers);\r\n    }\r\n    update(view, height, above, markers) {\r\n        if (this.height != height)\r\n            this.dom.style.height = (this.height = height) + \"px\";\r\n        if (this.above != above)\r\n            this.dom.style.marginTop = (this.above = above) ? above + \"px\" : \"\";\r\n        if (!sameMarkers(this.markers, markers))\r\n            this.setMarkers(view, markers);\r\n    }\r\n    setMarkers(view, markers) {\r\n        let cls = \"cm-gutterElement\", domPos = this.dom.firstChild;\r\n        for (let iNew = 0, iOld = 0;;) {\r\n            let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;\r\n            if (marker) {\r\n                let c = marker.elementClass;\r\n                if (c)\r\n                    cls += \" \" + c;\r\n                for (let i = iOld; i < this.markers.length; i++)\r\n                    if (this.markers[i].compare(marker)) {\r\n                        skipTo = i;\r\n                        matched = true;\r\n                        break;\r\n                    }\r\n            }\r\n            else {\r\n                skipTo = this.markers.length;\r\n            }\r\n            while (iOld < skipTo) {\r\n                let next = this.markers[iOld++];\r\n                if (next.toDOM) {\r\n                    next.destroy(domPos);\r\n                    let after = domPos.nextSibling;\r\n                    domPos.remove();\r\n                    domPos = after;\r\n                }\r\n            }\r\n            if (!marker)\r\n                break;\r\n            if (marker.toDOM) {\r\n                if (matched)\r\n                    domPos = domPos.nextSibling;\r\n                else\r\n                    this.dom.insertBefore(marker.toDOM(view), domPos);\r\n            }\r\n            if (matched)\r\n                iOld++;\r\n        }\r\n        this.dom.className = cls;\r\n        this.markers = markers;\r\n    }\r\n    destroy() {\r\n        this.setMarkers(null, []); // First argument not used unless creating markers\r\n    }\r\n}\r\nfunction sameMarkers(a, b) {\r\n    if (a.length != b.length)\r\n        return false;\r\n    for (let i = 0; i < a.length; i++)\r\n        if (!a[i].compare(b[i]))\r\n            return false;\r\n    return true;\r\n}\r\n/** Facet used to provide markers to the line number gutter. */\r\nconst lineNumberMarkers = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nconst lineNumberConfig = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({\r\n    combine(values) {\r\n        return (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.combineConfig)(values, { formatNumber: String, domEventHandlers: {} }, {\r\n            domEventHandlers(a, b) {\r\n                let result = Object.assign({}, a);\r\n                for (let event in b) {\r\n                    let exists = result[event], add = b[event];\r\n                    result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;\r\n                }\r\n                return result;\r\n            }\r\n        });\r\n    }\r\n});\r\nclass NumberMarker extends GutterMarker {\r\n    constructor(number) {\r\n        super();\r\n        this.number = number;\r\n    }\r\n    eq(other) { return this.number == other.number; }\r\n    toDOM() { return document.createTextNode(this.number); }\r\n}\r\nfunction formatNumber(view, number) {\r\n    return view.state.facet(lineNumberConfig).formatNumber(number, view.state);\r\n}\r\nconst lineNumberGutter = activeGutters.compute([lineNumberConfig], state => ({\r\n    class: \"cm-lineNumbers\",\r\n    renderEmptyElements: false,\r\n    markers(view) { return view.state.facet(lineNumberMarkers); },\r\n    lineMarker(view, line, others) {\r\n        if (others.some(m => m.toDOM))\r\n            return null;\r\n        return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));\r\n    },\r\n    lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),\r\n    initialSpacer(view) {\r\n        return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));\r\n    },\r\n    updateSpacer(spacer, update) {\r\n        let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));\r\n        return max == spacer.number ? spacer : new NumberMarker(max);\r\n    },\r\n    domEventHandlers: state.facet(lineNumberConfig).domEventHandlers\r\n}));\r\n/** Create a line number gutter extension. */\r\nfunction lineNumbers(config = {}) {\r\n    return [\r\n        lineNumberConfig.of(config),\r\n        gutters(),\r\n        lineNumberGutter\r\n    ];\r\n}\r\nfunction maxLineNumber(lines) {\r\n    let last = 9;\r\n    while (last < lines)\r\n        last = last * 10 + 9;\r\n    return last;\r\n}\r\nconst activeLineGutterMarker = new class extends GutterMarker {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.elementClass = \"cm-activeLineGutter\";\r\n    }\r\n};\r\nconst activeLineGutterHighlighter = gutterLineClass.compute([\"selection\"], state => {\r\n    let marks = [], last = -1;\r\n    for (let range of state.selection.ranges)\r\n        if (range.empty) {\r\n            let linePos = state.doc.lineAt(range.head).from;\r\n            if (linePos > last) {\r\n                last = linePos;\r\n                marks.push(activeLineGutterMarker.range(linePos));\r\n            }\r\n        }\r\n    return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSet.of(marks);\r\n});\r\n/**\r\n * Returns an extension that adds a `cm-activeLineGutter` class to all gutter elements on the [active\r\n * line]{@link highlightActiveLine}.\r\n */\r\nfunction highlightActiveLineGutter() {\r\n    return activeLineGutterHighlighter;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/gutter.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/heightmap.js":
/*!*****************************************************!*\
  !*** ./sys/public/js/editor/dist/view/heightmap.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BlockInfo\": () => (/* binding */ BlockInfo),\n/* harmony export */   \"HeightMap\": () => (/* binding */ HeightMap),\n/* harmony export */   \"HeightOracle\": () => (/* binding */ HeightOracle),\n/* harmony export */   \"MeasuredHeights\": () => (/* binding */ MeasuredHeights),\n/* harmony export */   \"QueryType\": () => (/* binding */ QueryType),\n/* harmony export */   \"heightRelevantDecoChanges\": () => (/* binding */ heightRelevantDecoChanges)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _decoration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./decoration.js */ \"./sys/public/js/editor/dist/view/decoration.js\");\n\r\n\r\nconst wrappingWhiteSpace = [\"pre-wrap\", \"normal\", \"pre-line\", \"break-spaces\"];\r\nclass HeightOracle {\r\n    constructor() {\r\n        this.doc = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Text.empty;\r\n        this.lineWrapping = false;\r\n        this.heightSamples = {};\r\n        this.lineHeight = 14;\r\n        this.charWidth = 7;\r\n        this.lineLength = 30;\r\n        // Used to track, during updateHeight, if any actual heights changed\r\n        this.heightChanged = false;\r\n    }\r\n    heightForGap(from, to) {\r\n        let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;\r\n        if (this.lineWrapping)\r\n            lines += Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength);\r\n        return this.lineHeight * lines;\r\n    }\r\n    heightForLine(length) {\r\n        if (!this.lineWrapping)\r\n            return this.lineHeight;\r\n        let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));\r\n        return lines * this.lineHeight;\r\n    }\r\n    setDoc(doc) { this.doc = doc; return this; }\r\n    mustRefreshForWrapping(whiteSpace) {\r\n        return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;\r\n    }\r\n    mustRefreshForHeights(lineHeights) {\r\n        let newHeight = false;\r\n        for (let i = 0; i < lineHeights.length; i++) {\r\n            let h = lineHeights[i];\r\n            if (h < 0) {\r\n                i++;\r\n            }\r\n            else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels\r\n                newHeight = true;\r\n                this.heightSamples[Math.floor(h * 10)] = true;\r\n            }\r\n        }\r\n        return newHeight;\r\n    }\r\n    refresh(whiteSpace, lineHeight, charWidth, lineLength, knownHeights) {\r\n        let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;\r\n        let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;\r\n        this.lineWrapping = lineWrapping;\r\n        this.lineHeight = lineHeight;\r\n        this.charWidth = charWidth;\r\n        this.lineLength = lineLength;\r\n        if (changed) {\r\n            this.heightSamples = {};\r\n            for (let i = 0; i < knownHeights.length; i++) {\r\n                let h = knownHeights[i];\r\n                if (h < 0)\r\n                    i++;\r\n                else\r\n                    this.heightSamples[Math.floor(h * 10)] = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n}\r\n/**\r\n * This object is used by `updateHeight` to make DOM measurements arrive at the right nides.\r\n * The `heights` array is a sequence of block heights, starting from position `from`.\r\n */\r\nclass MeasuredHeights {\r\n    constructor(from, heights) {\r\n        this.from = from;\r\n        this.heights = heights;\r\n        this.index = 0;\r\n    }\r\n    get more() { return this.index < this.heights.length; }\r\n}\r\n/** Record used to represent information about a block-level element in the editor view. */\r\nclass BlockInfo {\r\n    /**\r\n     * @param from The start of the element in the document.\r\n     * @param length The length of the element.\r\n     * @param top The top position of the element (relative to the top of the document).\r\n     * @param height Its height.\r\n     * @param type The type of element this is. When querying lines, this may be an array of all the\r\n     *              blocks that make up the line.\r\n     */\r\n    // @internal\r\n    constructor(from, length, top, height, type) {\r\n        this.from = from;\r\n        this.length = length;\r\n        this.top = top;\r\n        this.height = height;\r\n        this.type = type;\r\n    }\r\n    /** The end of the element as a document position. */\r\n    get to() { return this.from + this.length; }\r\n    /** The bottom position of the element. */\r\n    get bottom() { return this.top + this.height; }\r\n    // @internal\r\n    join(other) {\r\n        let detail = (Array.isArray(this.type) ? this.type : [this]).concat(Array.isArray(other.type) ? other.type : [other]);\r\n        return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);\r\n    }\r\n}\r\nvar QueryType;\r\n(function (QueryType) {\r\n    QueryType[QueryType[\"ByPos\"] = 0] = \"ByPos\";\r\n    QueryType[QueryType[\"ByHeight\"] = 1] = \"ByHeight\";\r\n    QueryType[QueryType[\"ByPosNoHeight\"] = 2] = \"ByPosNoHeight\";\r\n})(QueryType || (QueryType = {}));\r\nconst Epsilon = 1e-3;\r\nclass HeightMap {\r\n    constructor(length, // The number of characters covered\r\n    height, // Height of this part of the document\r\n    flags = 2 /* Outdated */) {\r\n        this.length = length;\r\n        this.height = height;\r\n        this.flags = flags;\r\n    }\r\n    get outdated() { return (this.flags & 2 /* Outdated */) > 0; }\r\n    set outdated(value) { this.flags = (value ? 2 /* Outdated */ : 0) | (this.flags & ~2 /* Outdated */); }\r\n    setHeight(oracle, height) {\r\n        if (this.height != height) {\r\n            if (Math.abs(this.height - height) > Epsilon)\r\n                oracle.heightChanged = true;\r\n            this.height = height;\r\n        }\r\n    }\r\n    /**\r\n     * Base case is to replace a leaf node, which simply builds a tree from the new nodes and\r\n     * returns that (HeightMapBranch and HeightMapGap override this to actually use from/to)\r\n     */\r\n    replace(_from, _to, nodes) {\r\n        return HeightMap.of(nodes);\r\n    }\r\n    /** Again, these are base cases, and are overridden for branch and gap nodes. */\r\n    decomposeLeft(_to, result) { result.push(this); }\r\n    decomposeRight(_from, result) { result.push(this); }\r\n    applyChanges(decorations, oldDoc, oracle, changes) {\r\n        let me = this;\r\n        for (let i = changes.length - 1; i >= 0; i--) {\r\n            let { fromA, toA, fromB, toB } = changes[i];\r\n            let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);\r\n            let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oldDoc, 0, 0);\r\n            toB += end.to - toA;\r\n            toA = end.to;\r\n            while (i > 0 && start.from <= changes[i - 1].toA) {\r\n                fromA = changes[i - 1].fromA;\r\n                fromB = changes[i - 1].fromB;\r\n                i--;\r\n                if (fromA < start.from)\r\n                    start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);\r\n            }\r\n            fromB += start.from - fromA;\r\n            fromA = start.from;\r\n            let nodes = NodeBuilder.build(oracle, decorations, fromB, toB);\r\n            me = me.replace(fromA, toA, nodes);\r\n        }\r\n        return me.updateHeight(oracle, 0);\r\n    }\r\n    static empty() { return new HeightMapText(0, 0); }\r\n    /**\r\n     * nodes uses null values to indicate the position of line breaks. There are never line breaks\r\n     * at the start or end of the array, or two line breaks next to each other, and the array isn't\r\n     * allowed to be empty (same restrictions as return value from the builder).\r\n     */\r\n    static of(nodes) {\r\n        if (nodes.length == 1)\r\n            return nodes[0];\r\n        let i = 0, j = nodes.length, before = 0, after = 0;\r\n        for (;;) {\r\n            if (i == j) {\r\n                if (before > after * 2) {\r\n                    let split = nodes[i - 1];\r\n                    if (split.break)\r\n                        nodes.splice(--i, 1, split.left, null, split.right);\r\n                    else\r\n                        nodes.splice(--i, 1, split.left, split.right);\r\n                    j += 1 + split.break;\r\n                    before -= split.size;\r\n                }\r\n                else if (after > before * 2) {\r\n                    let split = nodes[j];\r\n                    if (split.break)\r\n                        nodes.splice(j, 1, split.left, null, split.right);\r\n                    else\r\n                        nodes.splice(j, 1, split.left, split.right);\r\n                    j += 2 + split.break;\r\n                    after -= split.size;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else if (before < after) {\r\n                let next = nodes[i++];\r\n                if (next)\r\n                    before += next.size;\r\n            }\r\n            else {\r\n                let next = nodes[--j];\r\n                if (next)\r\n                    after += next.size;\r\n            }\r\n        }\r\n        let brk = 0;\r\n        if (nodes[i - 1] == null) {\r\n            brk = 1;\r\n            i--;\r\n        }\r\n        else if (nodes[i] == null) {\r\n            brk = 1;\r\n            j++;\r\n        }\r\n        return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));\r\n    }\r\n}\r\nHeightMap.prototype.size = 1;\r\nclass HeightMapBlock extends HeightMap {\r\n    constructor(length, height, type) {\r\n        super(length, height);\r\n        this.type = type;\r\n    }\r\n    blockAt(_height, _doc, top, offset) {\r\n        return new BlockInfo(offset, this.length, top, this.height, this.type);\r\n    }\r\n    lineAt(_value, _type, doc, top, offset) {\r\n        return this.blockAt(0, doc, top, offset);\r\n    }\r\n    forEachLine(from, to, doc, top, offset, f) {\r\n        if (from <= offset + this.length && to >= offset)\r\n            f(this.blockAt(0, doc, top, offset));\r\n    }\r\n    updateHeight(oracle, offset = 0, _force = false, measured) {\r\n        if (measured && measured.from <= offset && measured.more)\r\n            this.setHeight(oracle, measured.heights[measured.index++]);\r\n        this.outdated = false;\r\n        return this;\r\n    }\r\n    toString() { return `block(${this.length})`; }\r\n}\r\nclass HeightMapText extends HeightMapBlock {\r\n    constructor(length, height) {\r\n        super(length, height, _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.Text);\r\n        this.collapsed = 0; // Amount of collapsed content in the line\r\n        this.widgetHeight = 0; // Maximum inline widget height\r\n    }\r\n    replace(_from, _to, nodes) {\r\n        let node = nodes[0];\r\n        if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* SingleLine */)) &&\r\n            Math.abs(this.length - node.length) < 10) {\r\n            if (node instanceof HeightMapGap)\r\n                node = new HeightMapText(node.length, this.height);\r\n            else\r\n                node.height = this.height;\r\n            if (!this.outdated)\r\n                node.outdated = false;\r\n            return node;\r\n        }\r\n        else {\r\n            return HeightMap.of(nodes);\r\n        }\r\n    }\r\n    updateHeight(oracle, offset = 0, force = false, measured) {\r\n        if (measured && measured.from <= offset && measured.more)\r\n            this.setHeight(oracle, measured.heights[measured.index++]);\r\n        else if (force || this.outdated)\r\n            this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));\r\n        this.outdated = false;\r\n        return this;\r\n    }\r\n    toString() {\r\n        return `line(${this.length}${this.collapsed ? -this.collapsed : \"\"}${this.widgetHeight ? \":\" + this.widgetHeight : \"\"})`;\r\n    }\r\n}\r\nclass HeightMapGap extends HeightMap {\r\n    constructor(length) { super(length, 0); }\r\n    lines(doc, offset) {\r\n        let firstLine = doc.lineAt(offset).number, lastLine = doc.lineAt(offset + this.length).number;\r\n        return { firstLine, lastLine, lineHeight: this.height / (lastLine - firstLine + 1) };\r\n    }\r\n    blockAt(height, doc, top, offset) {\r\n        let { firstLine, lastLine, lineHeight } = this.lines(doc, offset);\r\n        let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));\r\n        let { from, length } = doc.line(firstLine + line);\r\n        return new BlockInfo(from, length, top + lineHeight * line, lineHeight, _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.Text);\r\n    }\r\n    lineAt(value, type, doc, top, offset) {\r\n        if (type == QueryType.ByHeight)\r\n            return this.blockAt(value, doc, top, offset);\r\n        if (type == QueryType.ByPosNoHeight) {\r\n            let { from, to } = doc.lineAt(value);\r\n            return new BlockInfo(from, to - from, 0, 0, _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.Text);\r\n        }\r\n        let { firstLine, lineHeight } = this.lines(doc, offset);\r\n        let { from, length, number } = doc.lineAt(value);\r\n        return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.Text);\r\n    }\r\n    forEachLine(from, to, doc, top, offset, f) {\r\n        let { firstLine, lineHeight } = this.lines(doc, offset);\r\n        for (let pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end;) {\r\n            let line = doc.lineAt(pos);\r\n            if (pos == from)\r\n                top += lineHeight * (line.number - firstLine);\r\n            f(new BlockInfo(line.from, line.length, top, lineHeight, _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.Text));\r\n            top += lineHeight;\r\n            pos = line.to + 1;\r\n        }\r\n    }\r\n    replace(from, to, nodes) {\r\n        let after = this.length - to;\r\n        if (after > 0) {\r\n            let last = nodes[nodes.length - 1];\r\n            if (last instanceof HeightMapGap)\r\n                nodes[nodes.length - 1] = new HeightMapGap(last.length + after);\r\n            else\r\n                nodes.push(null, new HeightMapGap(after - 1));\r\n        }\r\n        if (from > 0) {\r\n            let first = nodes[0];\r\n            if (first instanceof HeightMapGap)\r\n                nodes[0] = new HeightMapGap(from + first.length);\r\n            else\r\n                nodes.unshift(new HeightMapGap(from - 1), null);\r\n        }\r\n        return HeightMap.of(nodes);\r\n    }\r\n    decomposeLeft(to, result) {\r\n        result.push(new HeightMapGap(to - 1), null);\r\n    }\r\n    decomposeRight(from, result) {\r\n        result.push(null, new HeightMapGap(this.length - from - 1));\r\n    }\r\n    updateHeight(oracle, offset = 0, force = false, measured) {\r\n        let end = offset + this.length;\r\n        if (measured && measured.from <= offset + this.length && measured.more) {\r\n            let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;\r\n            let wasChanged = oracle.heightChanged;\r\n            if (measured.from > offset)\r\n                nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));\r\n            while (pos <= end && measured.more) {\r\n                let len = oracle.doc.lineAt(pos).length;\r\n                if (nodes.length)\r\n                    nodes.push(null);\r\n                let height = measured.heights[measured.index++];\r\n                if (singleHeight == -1)\r\n                    singleHeight = height;\r\n                else if (Math.abs(height - singleHeight) >= Epsilon)\r\n                    singleHeight = -2;\r\n                let line = new HeightMapText(len, height);\r\n                line.outdated = false;\r\n                nodes.push(line);\r\n                pos += len + 1;\r\n            }\r\n            if (pos <= end)\r\n                nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));\r\n            let result = HeightMap.of(nodes);\r\n            oracle.heightChanged = wasChanged || singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||\r\n                Math.abs(singleHeight - this.lines(oracle.doc, offset).lineHeight) >= Epsilon;\r\n            return result;\r\n        }\r\n        else if (force || this.outdated) {\r\n            this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));\r\n            this.outdated = false;\r\n        }\r\n        return this;\r\n    }\r\n    toString() { return `gap(${this.length})`; }\r\n}\r\nclass HeightMapBranch extends HeightMap {\r\n    constructor(left, brk, right) {\r\n        super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Outdated */ : 0));\r\n        this.left = left;\r\n        this.right = right;\r\n        this.size = left.size + right.size;\r\n    }\r\n    get break() { return this.flags & 1 /* Break */; }\r\n    blockAt(height, doc, top, offset) {\r\n        let mid = top + this.left.height;\r\n        return height < mid ? this.left.blockAt(height, doc, top, offset) :\r\n            this.right.blockAt(height, doc, mid, offset + this.left.length + this.break);\r\n    }\r\n    lineAt(value, type, doc, top, offset) {\r\n        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;\r\n        let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;\r\n        let base = left ? this.left.lineAt(value, type, doc, top, offset) :\r\n            this.right.lineAt(value, type, doc, rightTop, rightOffset);\r\n        if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))\r\n            return base;\r\n        let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;\r\n        if (left)\r\n            return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));\r\n        else\r\n            return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);\r\n    }\r\n    forEachLine(from, to, doc, top, offset, f) {\r\n        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;\r\n        if (this.break) {\r\n            if (from < rightOffset)\r\n                this.left.forEachLine(from, to, doc, top, offset, f);\r\n            if (to >= rightOffset)\r\n                this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);\r\n        }\r\n        else {\r\n            let mid = this.lineAt(rightOffset, QueryType.ByPos, doc, top, offset);\r\n            if (from < mid.from)\r\n                this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);\r\n            if (mid.to >= from && mid.from <= to)\r\n                f(mid);\r\n            if (to > mid.to)\r\n                this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);\r\n        }\r\n    }\r\n    replace(from, to, nodes) {\r\n        let rightStart = this.left.length + this.break;\r\n        if (to < rightStart)\r\n            return this.balanced(this.left.replace(from, to, nodes), this.right);\r\n        if (from > this.left.length)\r\n            return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));\r\n        let result = [];\r\n        if (from > 0)\r\n            this.decomposeLeft(from, result);\r\n        let left = result.length;\r\n        for (let node of nodes)\r\n            result.push(node);\r\n        if (from > 0)\r\n            mergeGaps(result, left - 1);\r\n        if (to < this.length) {\r\n            let right = result.length;\r\n            this.decomposeRight(to, result);\r\n            mergeGaps(result, right);\r\n        }\r\n        return HeightMap.of(result);\r\n    }\r\n    decomposeLeft(to, result) {\r\n        let left = this.left.length;\r\n        if (to <= left)\r\n            return this.left.decomposeLeft(to, result);\r\n        result.push(this.left);\r\n        if (this.break) {\r\n            left++;\r\n            if (to >= left)\r\n                result.push(null);\r\n        }\r\n        if (to > left)\r\n            this.right.decomposeLeft(to - left, result);\r\n    }\r\n    decomposeRight(from, result) {\r\n        let left = this.left.length, right = left + this.break;\r\n        if (from >= right)\r\n            return this.right.decomposeRight(from - right, result);\r\n        if (from < left)\r\n            this.left.decomposeRight(from, result);\r\n        if (this.break && from < right)\r\n            result.push(null);\r\n        result.push(this.right);\r\n    }\r\n    balanced(left, right) {\r\n        if (left.size > 2 * right.size || right.size > 2 * left.size)\r\n            return HeightMap.of(this.break ? [left, null, right] : [left, right]);\r\n        this.left = left;\r\n        this.right = right;\r\n        this.height = left.height + right.height;\r\n        this.outdated = left.outdated || right.outdated;\r\n        this.size = left.size + right.size;\r\n        this.length = left.length + this.break + right.length;\r\n        return this;\r\n    }\r\n    updateHeight(oracle, offset = 0, force = false, measured) {\r\n        let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;\r\n        if (measured && measured.from <= offset + left.length && measured.more)\r\n            rebalance = left = left.updateHeight(oracle, offset, force, measured);\r\n        else\r\n            left.updateHeight(oracle, offset, force);\r\n        if (measured && measured.from <= rightStart + right.length && measured.more)\r\n            rebalance = right = right.updateHeight(oracle, rightStart, force, measured);\r\n        else\r\n            right.updateHeight(oracle, rightStart, force);\r\n        if (rebalance)\r\n            return this.balanced(left, right);\r\n        this.height = this.left.height + this.right.height;\r\n        this.outdated = false;\r\n        return this;\r\n    }\r\n    toString() { return this.left + (this.break ? \" \" : \"-\") + this.right; }\r\n}\r\nfunction mergeGaps(nodes, around) {\r\n    let before, after;\r\n    if (nodes[around] == null &&\r\n        (before = nodes[around - 1]) instanceof HeightMapGap &&\r\n        (after = nodes[around + 1]) instanceof HeightMapGap)\r\n        nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));\r\n}\r\nconst relevantWidgetHeight = 5;\r\nclass NodeBuilder {\r\n    constructor(pos, oracle) {\r\n        this.pos = pos;\r\n        this.oracle = oracle;\r\n        this.nodes = [];\r\n        this.lineStart = -1;\r\n        this.lineEnd = -1;\r\n        this.covering = null;\r\n        this.writtenTo = pos;\r\n    }\r\n    get isCovered() {\r\n        return this.covering && this.nodes[this.nodes.length - 1] == this.covering;\r\n    }\r\n    span(_from, to) {\r\n        if (this.lineStart > -1) {\r\n            let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];\r\n            if (last instanceof HeightMapText)\r\n                last.length += end - this.pos;\r\n            else if (end > this.pos || !this.isCovered)\r\n                this.nodes.push(new HeightMapText(end - this.pos, -1));\r\n            this.writtenTo = end;\r\n            if (to > end) {\r\n                this.nodes.push(null);\r\n                this.writtenTo++;\r\n                this.lineStart = -1;\r\n            }\r\n        }\r\n        this.pos = to;\r\n    }\r\n    point(from, to, deco) {\r\n        if (from < to || deco.heightRelevant) {\r\n            let height = deco.widget ? deco.widget.estimatedHeight : 0;\r\n            if (height < 0)\r\n                height = this.oracle.lineHeight;\r\n            let len = to - from;\r\n            if (deco.block) {\r\n                this.addBlock(new HeightMapBlock(len, height, deco.type));\r\n            }\r\n            else if (len || height >= relevantWidgetHeight) {\r\n                this.addLineDeco(height, len);\r\n            }\r\n        }\r\n        else if (to > from) {\r\n            this.span(from, to);\r\n        }\r\n        if (this.lineEnd > -1 && this.lineEnd < this.pos)\r\n            this.lineEnd = this.oracle.doc.lineAt(this.pos).to;\r\n    }\r\n    enterLine() {\r\n        if (this.lineStart > -1)\r\n            return;\r\n        let { from, to } = this.oracle.doc.lineAt(this.pos);\r\n        this.lineStart = from;\r\n        this.lineEnd = to;\r\n        if (this.writtenTo < from) {\r\n            if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)\r\n                this.nodes.push(this.blankContent(this.writtenTo, from - 1));\r\n            this.nodes.push(null);\r\n        }\r\n        if (this.pos > from)\r\n            this.nodes.push(new HeightMapText(this.pos - from, -1));\r\n        this.writtenTo = this.pos;\r\n    }\r\n    blankContent(from, to) {\r\n        let gap = new HeightMapGap(to - from);\r\n        if (this.oracle.doc.lineAt(from).to == to)\r\n            gap.flags |= 4 /* SingleLine */;\r\n        return gap;\r\n    }\r\n    ensureLine() {\r\n        this.enterLine();\r\n        let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;\r\n        if (last instanceof HeightMapText)\r\n            return last;\r\n        let line = new HeightMapText(0, -1);\r\n        this.nodes.push(line);\r\n        return line;\r\n    }\r\n    addBlock(block) {\r\n        this.enterLine();\r\n        if (block.type == _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.WidgetAfter && !this.isCovered)\r\n            this.ensureLine();\r\n        this.nodes.push(block);\r\n        this.writtenTo = this.pos = this.pos + block.length;\r\n        if (block.type != _decoration_js__WEBPACK_IMPORTED_MODULE_1__.BlockType.WidgetBefore)\r\n            this.covering = block;\r\n    }\r\n    addLineDeco(height, length) {\r\n        let line = this.ensureLine();\r\n        line.length += length;\r\n        line.collapsed += length;\r\n        line.widgetHeight = Math.max(line.widgetHeight, height);\r\n        this.writtenTo = this.pos = this.pos + length;\r\n    }\r\n    finish(from) {\r\n        let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];\r\n        if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)\r\n            this.nodes.push(new HeightMapText(0, -1));\r\n        else if (this.writtenTo < this.pos || last == null)\r\n            this.nodes.push(this.blankContent(this.writtenTo, this.pos));\r\n        let pos = from;\r\n        for (let node of this.nodes) {\r\n            if (node instanceof HeightMapText)\r\n                node.updateHeight(this.oracle, pos);\r\n            pos += node ? node.length : 1;\r\n        }\r\n        return this.nodes;\r\n    }\r\n    /**\r\n     * Always called with a region that on both sides either stretches to a line break or\r\n     * the end of the document. The returned array uses null to indicate line breaks, but\r\n     * never starts or ends in a line break, or has multiple line breaks next to each other.\r\n     */\r\n    static build(oracle, decorations, from, to) {\r\n        let builder = new NodeBuilder(from, oracle);\r\n        _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSet.spans(decorations, from, to, builder, 0);\r\n        return builder.finish(from);\r\n    }\r\n}\r\nfunction heightRelevantDecoChanges(a, b, diff) {\r\n    let comp = new DecorationComparator;\r\n    _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSet.compare(a, b, diff, comp, 0);\r\n    return comp.changes;\r\n}\r\nclass DecorationComparator {\r\n    constructor() {\r\n        this.changes = [];\r\n    }\r\n    compareRange() { }\r\n    comparePoint(from, to, a, b) {\r\n        if (from < to || a && a.heightRelevant || b && b.heightRelevant)\r\n            (0,_decoration_js__WEBPACK_IMPORTED_MODULE_1__.addRange)(from, to, this.changes, 5);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/heightmap.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/index.js":
/*!*************************************************!*\
  !*** ./sys/public/js/editor/dist/view/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BidiSpan\": () => (/* reexport safe */ _bidi_js__WEBPACK_IMPORTED_MODULE_4__.BidiSpan),\n/* harmony export */   \"BlockInfo\": () => (/* reexport safe */ _heightmap_js__WEBPACK_IMPORTED_MODULE_3__.BlockInfo),\n/* harmony export */   \"BlockType\": () => (/* reexport safe */ _decoration_js__WEBPACK_IMPORTED_MODULE_2__.BlockType),\n/* harmony export */   \"Decoration\": () => (/* reexport safe */ _decoration_js__WEBPACK_IMPORTED_MODULE_2__.Decoration),\n/* harmony export */   \"Direction\": () => (/* reexport safe */ _bidi_js__WEBPACK_IMPORTED_MODULE_4__.Direction),\n/* harmony export */   \"EditorView\": () => (/* reexport safe */ _editorview_js__WEBPACK_IMPORTED_MODULE_0__.EditorView),\n/* harmony export */   \"GutterMarker\": () => (/* reexport safe */ _gutter_js__WEBPACK_IMPORTED_MODULE_16__.GutterMarker),\n/* harmony export */   \"MatchDecorator\": () => (/* reexport safe */ _matchdecorator_js__WEBPACK_IMPORTED_MODULE_12__.MatchDecorator),\n/* harmony export */   \"ViewPlugin\": () => (/* reexport safe */ _extension_js__WEBPACK_IMPORTED_MODULE_1__.ViewPlugin),\n/* harmony export */   \"ViewUpdate\": () => (/* reexport safe */ _extension_js__WEBPACK_IMPORTED_MODULE_1__.ViewUpdate),\n/* harmony export */   \"WidgetType\": () => (/* reexport safe */ _decoration_js__WEBPACK_IMPORTED_MODULE_2__.WidgetType),\n/* harmony export */   \"__test\": () => (/* binding */ __test),\n/* harmony export */   \"closeHoverTooltips\": () => (/* reexport safe */ _tooltip_js__WEBPACK_IMPORTED_MODULE_14__.closeHoverTooltips),\n/* harmony export */   \"crosshairCursor\": () => (/* reexport safe */ _rectangular_selection_js__WEBPACK_IMPORTED_MODULE_13__.crosshairCursor),\n/* harmony export */   \"drawSelection\": () => (/* reexport safe */ _draw_selection_js__WEBPACK_IMPORTED_MODULE_6__.drawSelection),\n/* harmony export */   \"dropCursor\": () => (/* reexport safe */ _dropcursor_js__WEBPACK_IMPORTED_MODULE_7__.dropCursor),\n/* harmony export */   \"getPanel\": () => (/* reexport safe */ _panel_js__WEBPACK_IMPORTED_MODULE_15__.getPanel),\n/* harmony export */   \"getTooltip\": () => (/* reexport safe */ _tooltip_js__WEBPACK_IMPORTED_MODULE_14__.getTooltip),\n/* harmony export */   \"gutter\": () => (/* reexport safe */ _gutter_js__WEBPACK_IMPORTED_MODULE_16__.gutter),\n/* harmony export */   \"gutterLineClass\": () => (/* reexport safe */ _gutter_js__WEBPACK_IMPORTED_MODULE_16__.gutterLineClass),\n/* harmony export */   \"gutters\": () => (/* reexport safe */ _gutter_js__WEBPACK_IMPORTED_MODULE_16__.gutters),\n/* harmony export */   \"hasHoverTooltips\": () => (/* reexport safe */ _tooltip_js__WEBPACK_IMPORTED_MODULE_14__.hasHoverTooltips),\n/* harmony export */   \"highlightActiveLine\": () => (/* reexport safe */ _active_line_js__WEBPACK_IMPORTED_MODULE_10__.highlightActiveLine),\n/* harmony export */   \"highlightActiveLineGutter\": () => (/* reexport safe */ _gutter_js__WEBPACK_IMPORTED_MODULE_16__.highlightActiveLineGutter),\n/* harmony export */   \"highlightSpecialChars\": () => (/* reexport safe */ _special_chars_js__WEBPACK_IMPORTED_MODULE_8__.highlightSpecialChars),\n/* harmony export */   \"hoverTooltip\": () => (/* reexport safe */ _tooltip_js__WEBPACK_IMPORTED_MODULE_14__.hoverTooltip),\n/* harmony export */   \"keymap\": () => (/* reexport safe */ _keymap_js__WEBPACK_IMPORTED_MODULE_5__.keymap),\n/* harmony export */   \"lineNumberMarkers\": () => (/* reexport safe */ _gutter_js__WEBPACK_IMPORTED_MODULE_16__.lineNumberMarkers),\n/* harmony export */   \"lineNumbers\": () => (/* reexport safe */ _gutter_js__WEBPACK_IMPORTED_MODULE_16__.lineNumbers),\n/* harmony export */   \"logException\": () => (/* reexport safe */ _extension_js__WEBPACK_IMPORTED_MODULE_1__.logException),\n/* harmony export */   \"panels\": () => (/* reexport safe */ _panel_js__WEBPACK_IMPORTED_MODULE_15__.panels),\n/* harmony export */   \"placeholder\": () => (/* reexport safe */ _placeholder_js__WEBPACK_IMPORTED_MODULE_11__.placeholder),\n/* harmony export */   \"rectangularSelection\": () => (/* reexport safe */ _rectangular_selection_js__WEBPACK_IMPORTED_MODULE_13__.rectangularSelection),\n/* harmony export */   \"repositionTooltips\": () => (/* reexport safe */ _tooltip_js__WEBPACK_IMPORTED_MODULE_14__.repositionTooltips),\n/* harmony export */   \"runScopeHandlers\": () => (/* reexport safe */ _keymap_js__WEBPACK_IMPORTED_MODULE_5__.runScopeHandlers),\n/* harmony export */   \"scrollPastEnd\": () => (/* reexport safe */ _scrollpastend_js__WEBPACK_IMPORTED_MODULE_9__.scrollPastEnd),\n/* harmony export */   \"showPanel\": () => (/* reexport safe */ _panel_js__WEBPACK_IMPORTED_MODULE_15__.showPanel),\n/* harmony export */   \"showTooltip\": () => (/* reexport safe */ _tooltip_js__WEBPACK_IMPORTED_MODULE_14__.showTooltip),\n/* harmony export */   \"tooltips\": () => (/* reexport safe */ _tooltip_js__WEBPACK_IMPORTED_MODULE_14__.tooltips)\n/* harmony export */ });\n/* harmony import */ var _editorview_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./editorview.js */ \"./sys/public/js/editor/dist/view/editorview.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n/* harmony import */ var _decoration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./decoration.js */ \"./sys/public/js/editor/dist/view/decoration.js\");\n/* harmony import */ var _heightmap_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./heightmap.js */ \"./sys/public/js/editor/dist/view/heightmap.js\");\n/* harmony import */ var _bidi_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bidi.js */ \"./sys/public/js/editor/dist/view/bidi.js\");\n/* harmony import */ var _keymap_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./keymap.js */ \"./sys/public/js/editor/dist/view/keymap.js\");\n/* harmony import */ var _draw_selection_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./draw-selection.js */ \"./sys/public/js/editor/dist/view/draw-selection.js\");\n/* harmony import */ var _dropcursor_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dropcursor.js */ \"./sys/public/js/editor/dist/view/dropcursor.js\");\n/* harmony import */ var _special_chars_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./special-chars.js */ \"./sys/public/js/editor/dist/view/special-chars.js\");\n/* harmony import */ var _scrollpastend_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./scrollpastend.js */ \"./sys/public/js/editor/dist/view/scrollpastend.js\");\n/* harmony import */ var _active_line_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./active-line.js */ \"./sys/public/js/editor/dist/view/active-line.js\");\n/* harmony import */ var _placeholder_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./placeholder.js */ \"./sys/public/js/editor/dist/view/placeholder.js\");\n/* harmony import */ var _matchdecorator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./matchdecorator.js */ \"./sys/public/js/editor/dist/view/matchdecorator.js\");\n/* harmony import */ var _rectangular_selection_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./rectangular-selection.js */ \"./sys/public/js/editor/dist/view/rectangular-selection.js\");\n/* harmony import */ var _tooltip_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./tooltip.js */ \"./sys/public/js/editor/dist/view/tooltip.js\");\n/* harmony import */ var _panel_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./panel.js */ \"./sys/public/js/editor/dist/view/panel.js\");\n/* harmony import */ var _gutter_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./gutter.js */ \"./sys/public/js/editor/dist/view/gutter.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// @internal\r\nconst __test = { HeightMap: _heightmap_js__WEBPACK_IMPORTED_MODULE_3__.HeightMap, HeightOracle: _heightmap_js__WEBPACK_IMPORTED_MODULE_3__.HeightOracle, MeasuredHeights: _heightmap_js__WEBPACK_IMPORTED_MODULE_3__.MeasuredHeights, QueryType: _heightmap_js__WEBPACK_IMPORTED_MODULE_3__.QueryType, ChangedRange: _extension_js__WEBPACK_IMPORTED_MODULE_1__.ChangedRange, computeOrder: _bidi_js__WEBPACK_IMPORTED_MODULE_4__.computeOrder, moveVisually: _bidi_js__WEBPACK_IMPORTED_MODULE_4__.moveVisually };\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/index.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/inlineview.js":
/*!******************************************************!*\
  !*** ./sys/public/js/editor/dist/view/inlineview.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CompositionView\": () => (/* binding */ CompositionView),\n/* harmony export */   \"MarkView\": () => (/* binding */ MarkView),\n/* harmony export */   \"TextView\": () => (/* binding */ TextView),\n/* harmony export */   \"WidgetBufferView\": () => (/* binding */ WidgetBufferView),\n/* harmony export */   \"WidgetView\": () => (/* binding */ WidgetView),\n/* harmony export */   \"coordsInChildren\": () => (/* binding */ coordsInChildren),\n/* harmony export */   \"inlineDOMAtPos\": () => (/* binding */ inlineDOMAtPos),\n/* harmony export */   \"joinInlineInto\": () => (/* binding */ joinInlineInto)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _contentview_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contentview.js */ \"./sys/public/js/editor/dist/view/contentview.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom.js */ \"./sys/public/js/editor/dist/view/dom.js\");\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./browser.js */ \"./sys/public/js/editor/dist/view/browser.js\");\n\r\n\r\n\r\n\r\nconst MaxJoinLen = 256;\r\nclass TextView extends _contentview_js__WEBPACK_IMPORTED_MODULE_1__.ContentView {\r\n    constructor(text) {\r\n        super();\r\n        this.text = text;\r\n    }\r\n    get length() { return this.text.length; }\r\n    createDOM(textDOM) {\r\n        this.setDOM(textDOM || document.createTextNode(this.text));\r\n    }\r\n    sync(track) {\r\n        if (!this.dom)\r\n            this.createDOM();\r\n        if (this.dom.nodeValue != this.text) {\r\n            if (track && track.node == this.dom)\r\n                track.written = true;\r\n            this.dom.nodeValue = this.text;\r\n        }\r\n    }\r\n    reuseDOM(dom) {\r\n        if (dom.nodeType == 3)\r\n            this.createDOM(dom);\r\n    }\r\n    merge(from, to, source) {\r\n        if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen))\r\n            return false;\r\n        this.text = this.text.slice(0, from) + (source ? source.text : \"\") + this.text.slice(to);\r\n        this.markDirty();\r\n        return true;\r\n    }\r\n    split(from) {\r\n        let result = new TextView(this.text.slice(from));\r\n        this.text = this.text.slice(0, from);\r\n        this.markDirty();\r\n        return result;\r\n    }\r\n    localPosFromDOM(node, offset) {\r\n        return node == this.dom ? offset : offset ? this.text.length : 0;\r\n    }\r\n    domAtPos(pos) { return new _contentview_js__WEBPACK_IMPORTED_MODULE_1__.DOMPos(this.dom, pos); }\r\n    domBoundsAround(_from, _to, offset) {\r\n        return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };\r\n    }\r\n    coordsAt(pos, side) {\r\n        return textCoords(this.dom, pos, side);\r\n    }\r\n}\r\nclass MarkView extends _contentview_js__WEBPACK_IMPORTED_MODULE_1__.ContentView {\r\n    constructor(mark, children = [], length = 0) {\r\n        super();\r\n        this.mark = mark;\r\n        this.children = children;\r\n        this.length = length;\r\n        for (let ch of children)\r\n            ch.setParent(this);\r\n    }\r\n    setAttrs(dom) {\r\n        (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.clearAttributes)(dom);\r\n        if (this.mark.class)\r\n            dom.className = this.mark.class;\r\n        if (this.mark.attrs)\r\n            for (let name in this.mark.attrs)\r\n                dom.setAttribute(name, this.mark.attrs[name]);\r\n        return dom;\r\n    }\r\n    reuseDOM(node) {\r\n        if (node.nodeName == this.mark.tagName.toUpperCase()) {\r\n            this.setDOM(node);\r\n            this.dirty |= 4 /* Attrs */ | 2 /* Node */;\r\n        }\r\n    }\r\n    sync(track) {\r\n        if (!this.dom)\r\n            this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));\r\n        else if (this.dirty & 4 /* Attrs */)\r\n            this.setAttrs(this.dom);\r\n        super.sync(track);\r\n    }\r\n    merge(from, to, source, _hasStart, openStart, openEnd) {\r\n        if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||\r\n            (from && openStart <= 0) || (to < this.length && openEnd <= 0)))\r\n            return false;\r\n        (0,_contentview_js__WEBPACK_IMPORTED_MODULE_1__.mergeChildrenInto)(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);\r\n        this.markDirty();\r\n        return true;\r\n    }\r\n    split(from) {\r\n        let result = [], off = 0, detachFrom = -1, i = 0;\r\n        for (let elt of this.children) {\r\n            let end = off + elt.length;\r\n            if (end > from)\r\n                result.push(off < from ? elt.split(from - off) : elt);\r\n            if (detachFrom < 0 && off >= from)\r\n                detachFrom = i;\r\n            off = end;\r\n            i++;\r\n        }\r\n        let length = this.length - from;\r\n        this.length = from;\r\n        if (detachFrom > -1) {\r\n            this.children.length = detachFrom;\r\n            this.markDirty();\r\n        }\r\n        return new MarkView(this.mark, result, length);\r\n    }\r\n    domAtPos(pos) {\r\n        return inlineDOMAtPos(this.dom, this.children, pos);\r\n    }\r\n    coordsAt(pos, side) {\r\n        return coordsInChildren(this, pos, side);\r\n    }\r\n}\r\nfunction textCoords(text, pos, side) {\r\n    let length = text.nodeValue.length;\r\n    if (pos > length)\r\n        pos = length;\r\n    let from = pos, to = pos, flatten = 0;\r\n    if (pos == 0 && side < 0 || pos == length && side >= 0) {\r\n        if (!(_browser_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].chrome || _browser_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gecko)) { // These browsers reliably return valid rectangles for empty ranges\r\n            if (pos) {\r\n                from--;\r\n                flatten = 1;\r\n            } // FIXME this is wrong in RTL text\r\n            else {\r\n                to++;\r\n                flatten = -1;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if (side < 0)\r\n            from--;\r\n        else\r\n            to++;\r\n    }\r\n    let rects = (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.textRange)(text, from, to).getClientRects();\r\n    if (!rects.length)\r\n        return _dom_js__WEBPACK_IMPORTED_MODULE_2__.Rect0;\r\n    let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];\r\n    if (_browser_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].safari && !flatten && rect.width == 0)\r\n        rect = Array.prototype.find.call(rects, r => r.width) || rect;\r\n    return flatten ? (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.flattenRect)(rect, flatten < 0) : rect || null;\r\n}\r\n// Also used for collapsed ranges that don't have a placeholder widget!\r\nclass WidgetView extends _contentview_js__WEBPACK_IMPORTED_MODULE_1__.ContentView {\r\n    constructor(widget, length, side) {\r\n        super();\r\n        this.widget = widget;\r\n        this.length = length;\r\n        this.side = side;\r\n        this.prevWidget = null;\r\n    }\r\n    static create(widget, length, side) {\r\n        return new (widget.customView || WidgetView)(widget, length, side);\r\n    }\r\n    split(from) {\r\n        let result = WidgetView.create(this.widget, this.length - from, this.side);\r\n        this.length -= from;\r\n        return result;\r\n    }\r\n    sync() {\r\n        if (!this.dom || !this.widget.updateDOM(this.dom)) {\r\n            if (this.dom && this.prevWidget)\r\n                this.prevWidget.destroy(this.dom);\r\n            this.prevWidget = null;\r\n            this.setDOM(this.widget.toDOM(this.editorView));\r\n            this.dom.contentEditable = \"false\";\r\n        }\r\n    }\r\n    getSide() { return this.side; }\r\n    merge(from, to, source, hasStart, openStart, openEnd) {\r\n        if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||\r\n            from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))\r\n            return false;\r\n        this.length = from + (source ? source.length : 0) + (this.length - to);\r\n        return true;\r\n    }\r\n    become(other) {\r\n        if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {\r\n            if (this.widget.constructor == other.widget.constructor) {\r\n                if (!this.widget.eq(other.widget))\r\n                    this.markDirty(true);\r\n                if (this.dom && !this.prevWidget)\r\n                    this.prevWidget = this.widget;\r\n                this.widget = other.widget;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    ignoreMutation() { return true; }\r\n    ignoreEvent(event) { return this.widget.ignoreEvent(event); }\r\n    get overrideDOMText() {\r\n        if (this.length == 0)\r\n            return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Text.empty;\r\n        let top = this;\r\n        while (top.parent)\r\n            top = top.parent;\r\n        let view = top.editorView, text = view && view.state.doc, start = this.posAtStart;\r\n        return text ? text.slice(start, start + this.length) : _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Text.empty;\r\n    }\r\n    domAtPos(pos) {\r\n        return pos == 0 ? _contentview_js__WEBPACK_IMPORTED_MODULE_1__.DOMPos.before(this.dom) : _contentview_js__WEBPACK_IMPORTED_MODULE_1__.DOMPos.after(this.dom, pos == this.length);\r\n    }\r\n    domBoundsAround() { return null; }\r\n    coordsAt(pos, side) {\r\n        let rects = this.dom.getClientRects(), rect = null;\r\n        if (!rects.length)\r\n            return _dom_js__WEBPACK_IMPORTED_MODULE_2__.Rect0;\r\n        for (let i = pos > 0 ? rects.length - 1 : 0;; i += (pos > 0 ? -1 : 1)) {\r\n            rect = rects[i];\r\n            if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)\r\n                break;\r\n        }\r\n        return (pos == 0 && side > 0 || pos == this.length && side <= 0) ? rect : (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.flattenRect)(rect, pos == 0);\r\n    }\r\n    get isEditable() { return false; }\r\n    destroy() {\r\n        super.destroy();\r\n        if (this.dom)\r\n            this.widget.destroy(this.dom);\r\n    }\r\n}\r\nclass CompositionView extends WidgetView {\r\n    domAtPos(pos) {\r\n        let { topView, text } = this.widget;\r\n        if (!topView)\r\n            return new _contentview_js__WEBPACK_IMPORTED_MODULE_1__.DOMPos(text, Math.min(pos, text.nodeValue.length));\r\n        return scanCompositionTree(pos, 0, topView, text, (v, p) => v.domAtPos(p), p => new _contentview_js__WEBPACK_IMPORTED_MODULE_1__.DOMPos(text, Math.min(p, text.nodeValue.length)));\r\n    }\r\n    sync() { this.setDOM(this.widget.toDOM()); }\r\n    localPosFromDOM(node, offset) {\r\n        let { topView, text } = this.widget;\r\n        if (!topView)\r\n            return Math.min(offset, this.length);\r\n        return posFromDOMInCompositionTree(node, offset, topView, text);\r\n    }\r\n    ignoreMutation() { return false; }\r\n    get overrideDOMText() { return null; }\r\n    coordsAt(pos, side) {\r\n        let { topView, text } = this.widget;\r\n        if (!topView)\r\n            return textCoords(text, pos, side);\r\n        return scanCompositionTree(pos, side, topView, text, (v, pos, side) => v.coordsAt(pos, side), (pos, side) => textCoords(text, pos, side));\r\n    }\r\n    destroy() {\r\n        var _a;\r\n        super.destroy();\r\n        (_a = this.widget.topView) === null || _a === void 0 ? void 0 : _a.destroy();\r\n    }\r\n    get isEditable() { return true; }\r\n}\r\n/**\r\n * Uses the old structure of a chunk of content view frozen for composition to try and find a\r\n * reasonable DOM location for the given offset.\r\n */\r\nfunction scanCompositionTree(pos, side, view, text, enterView, fromText) {\r\n    if (view instanceof MarkView) {\r\n        for (let child of view.children) {\r\n            let hasComp = (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.contains)(child.dom, text);\r\n            let len = hasComp ? text.nodeValue.length : child.length;\r\n            if (pos < len || pos == len && child.getSide() <= 0)\r\n                return hasComp ? scanCompositionTree(pos, side, child, text, enterView, fromText) : enterView(child, pos, side);\r\n            pos -= len;\r\n        }\r\n        return enterView(view, view.length, -1);\r\n    }\r\n    else if (view.dom == text) {\r\n        return fromText(pos, side);\r\n    }\r\n    else {\r\n        return enterView(view, pos, side);\r\n    }\r\n}\r\nfunction posFromDOMInCompositionTree(node, offset, view, text) {\r\n    if (view instanceof MarkView) {\r\n        for (let child of view.children) {\r\n            let pos = 0, hasComp = (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.contains)(child.dom, text);\r\n            if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.contains)(child.dom, node))\r\n                return pos + (hasComp ? posFromDOMInCompositionTree(node, offset, child, text) : child.localPosFromDOM(node, offset));\r\n            pos += hasComp ? text.nodeValue.length : child.length;\r\n        }\r\n    }\r\n    else if (view.dom == text) {\r\n        return Math.min(offset, text.nodeValue.length);\r\n    }\r\n    return view.localPosFromDOM(node, offset);\r\n}\r\n/**\r\n * These are drawn around uneditable widgets to avoid a number of browser bugs that show up when\r\n * the cursor is directly next to uneditable inline content.\r\n */\r\nclass WidgetBufferView extends _contentview_js__WEBPACK_IMPORTED_MODULE_1__.ContentView {\r\n    constructor(side) {\r\n        super();\r\n        this.side = side;\r\n    }\r\n    get length() { return 0; }\r\n    merge() { return false; }\r\n    become(other) {\r\n        return other instanceof WidgetBufferView && other.side == this.side;\r\n    }\r\n    split() { return new WidgetBufferView(this.side); }\r\n    sync() {\r\n        if (!this.dom) {\r\n            let dom = document.createElement(\"img\");\r\n            dom.className = \"cm-widgetBuffer\";\r\n            dom.setAttribute(\"aria-hidden\", \"true\");\r\n            this.setDOM(dom);\r\n        }\r\n    }\r\n    getSide() { return this.side; }\r\n    domAtPos(pos) { return _contentview_js__WEBPACK_IMPORTED_MODULE_1__.DOMPos.before(this.dom); }\r\n    localPosFromDOM() { return 0; }\r\n    domBoundsAround() { return null; }\r\n    coordsAt(pos) {\r\n        let imgRect = this.dom.getBoundingClientRect();\r\n        // Since the <img> height doesn't correspond to text height, try\r\n        // to borrow the height from some sibling node.\r\n        let siblingRect = inlineSiblingRect(this, this.side > 0 ? -1 : 1);\r\n        return siblingRect && siblingRect.top < imgRect.bottom && siblingRect.bottom > imgRect.top ?\r\n            { left: imgRect.left, right: imgRect.right, top: siblingRect.top, bottom: siblingRect.bottom } : imgRect;\r\n    }\r\n    get overrideDOMText() {\r\n        return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Text.empty;\r\n    }\r\n}\r\nTextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = _contentview_js__WEBPACK_IMPORTED_MODULE_1__.noChildren;\r\nfunction inlineSiblingRect(view, side) {\r\n    let parent = view.parent, index = parent ? parent.children.indexOf(view) : -1;\r\n    while (parent && index >= 0) {\r\n        if (side < 0 ? index > 0 : index < parent.children.length) {\r\n            let next = parent.children[index + side];\r\n            if (next instanceof TextView) {\r\n                let nextRect = next.coordsAt(side < 0 ? next.length : 0, side);\r\n                if (nextRect)\r\n                    return nextRect;\r\n            }\r\n            index += side;\r\n        }\r\n        else if (parent instanceof MarkView && parent.parent) {\r\n            index = parent.parent.children.indexOf(parent) + (side < 0 ? 0 : 1);\r\n            parent = parent.parent;\r\n        }\r\n        else {\r\n            let last = parent.dom.lastChild;\r\n            if (last && last.nodeName == \"BR\")\r\n                return last.getClientRects()[0];\r\n            break;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction inlineDOMAtPos(dom, children, pos) {\r\n    let i = 0;\r\n    for (let off = 0; i < children.length; i++) {\r\n        let child = children[i], end = off + child.length;\r\n        if (end == off && child.getSide() <= 0)\r\n            continue;\r\n        if (pos > off && pos < end && child.dom.parentNode == dom)\r\n            return child.domAtPos(pos - off);\r\n        if (pos <= off)\r\n            break;\r\n        off = end;\r\n    }\r\n    for (; i > 0; i--) {\r\n        let before = children[i - 1].dom;\r\n        if (before.parentNode == dom)\r\n            return _contentview_js__WEBPACK_IMPORTED_MODULE_1__.DOMPos.after(before);\r\n    }\r\n    return new _contentview_js__WEBPACK_IMPORTED_MODULE_1__.DOMPos(dom, 0);\r\n}\r\n// Assumes `view`, if a mark view, has precisely 1 child.\r\nfunction joinInlineInto(parent, view, open) {\r\n    let last, { children } = parent;\r\n    if (open > 0 && view instanceof MarkView && children.length &&\r\n        (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {\r\n        joinInlineInto(last, view.children[0], open - 1);\r\n    }\r\n    else {\r\n        children.push(view);\r\n        view.setParent(parent);\r\n    }\r\n    parent.length += view.length;\r\n}\r\nfunction coordsInChildren(view, pos, side) {\r\n    for (let off = 0, i = 0; i < view.children.length; i++) {\r\n        let child = view.children[i], end = off + child.length, next;\r\n        if ((side <= 0 || end == view.length || child.getSide() > 0 ? end >= pos : end > pos) &&\r\n            (pos < end || i + 1 == view.children.length || (next = view.children[i + 1]).length || next.getSide() > 0)) {\r\n            let flatten = 0;\r\n            if (end == off) {\r\n                if (child.getSide() <= 0)\r\n                    continue;\r\n                flatten = side = -child.getSide();\r\n            }\r\n            let rect = child.coordsAt(Math.max(0, pos - off), side);\r\n            return flatten && rect ? (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.flattenRect)(rect, side < 0) : rect;\r\n        }\r\n        off = end;\r\n    }\r\n    let last = view.dom.lastChild;\r\n    if (!last)\r\n        return view.dom.getBoundingClientRect();\r\n    let rects = (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.clientRectsFor)(last);\r\n    return rects[rects.length - 1] || null;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/inlineview.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/input.js":
/*!*************************************************!*\
  !*** ./sys/public/js/editor/dist/view/input.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InputState\": () => (/* binding */ InputState),\n/* harmony export */   \"modifierCodes\": () => (/* binding */ modifierCodes)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _contentview_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contentview.js */ \"./sys/public/js/editor/dist/view/contentview.js\");\n/* harmony import */ var _blockview_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./blockview.js */ \"./sys/public/js/editor/dist/view/blockview.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./browser.js */ \"./sys/public/js/editor/dist/view/browser.js\");\n/* harmony import */ var _cursor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cursor.js */ \"./sys/public/js/editor/dist/view/cursor.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dom.js */ \"./sys/public/js/editor/dist/view/dom.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** This will also be where dragging info and such goes */\r\nclass InputState {\r\n    constructor(view) {\r\n        this.lastKeyCode = 0;\r\n        this.lastKeyTime = 0;\r\n        // On iOS, some keys need to have their default behavior happen (after which we retroactively\r\n        // handle them and reset the DOM) to avoid messing up the virtual keyboard state.\r\n        this.pendingIOSKey = undefined;\r\n        this.lastSelectionOrigin = null;\r\n        this.lastSelectionTime = 0;\r\n        this.lastEscPress = 0;\r\n        this.lastContextMenu = 0;\r\n        this.scrollHandlers = [];\r\n        this.registeredEvents = [];\r\n        this.customHandlers = [];\r\n        /**\r\n         * -1 means not in a composition. Otherwise, this counts the number of changes made during the\r\n         * composition. The count is used to avoid treating the start state of the composition, before\r\n         * any changes have been made, as part of the composition.\r\n         */\r\n        this.composing = -1;\r\n        /**\r\n         * Tracks whether the next change should be marked as starting the composition (null means no\r\n         * composition, true means next is the first, false means first has already been marked for this\r\n         * composition)\r\n         */\r\n        this.compositionFirstChange = null;\r\n        this.compositionEndedAt = 0;\r\n        this.rapidCompositionStart = false;\r\n        this.mouseSelection = null;\r\n        for (let type in handlers) {\r\n            let handler = handlers[type];\r\n            view.contentDOM.addEventListener(type, (event) => {\r\n                if (!eventBelongsToEditor(view, event) || this.ignoreDuringComposition(event))\r\n                    return;\r\n                if (type == \"keydown\" && this.keydown(view, event))\r\n                    return;\r\n                if (this.mustFlushObserver(event))\r\n                    view.observer.forceFlush();\r\n                if (this.runCustomHandlers(type, view, event))\r\n                    event.preventDefault();\r\n                else\r\n                    handler(view, event);\r\n            });\r\n            this.registeredEvents.push(type);\r\n        }\r\n        this.notifiedFocused = view.hasFocus;\r\n        if (_browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].safari)\r\n            view.contentDOM.addEventListener(\"input\", () => null);\r\n    }\r\n    setSelectionOrigin(origin) {\r\n        this.lastSelectionOrigin = origin;\r\n        this.lastSelectionTime = Date.now();\r\n    }\r\n    ensureHandlers(view, plugins) {\r\n        var _a;\r\n        let handlers;\r\n        for (let plugin of plugins)\r\n            if (handlers = (_a = plugin.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {\r\n                this.customHandlers.push({ plugin: plugin.value, handlers });\r\n                for (let type in handlers)\r\n                    if (this.registeredEvents.indexOf(type) < 0 && type != \"scroll\") {\r\n                        this.registeredEvents.push(type);\r\n                        view.contentDOM.addEventListener(type, (event) => {\r\n                            if (!eventBelongsToEditor(view, event))\r\n                                return;\r\n                            if (this.runCustomHandlers(type, view, event))\r\n                                event.preventDefault();\r\n                        });\r\n                    }\r\n            }\r\n    }\r\n    runCustomHandlers(type, view, event) {\r\n        for (let set of this.customHandlers) {\r\n            let handler = set.handlers[type];\r\n            if (handler) {\r\n                try {\r\n                    if (handler.call(set.plugin, event, view) || event.defaultPrevented)\r\n                        return true;\r\n                }\r\n                catch (e) {\r\n                    (0,_extension_js__WEBPACK_IMPORTED_MODULE_3__.logException)(view.state, e);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    runScrollHandlers(view, event) {\r\n        for (let set of this.customHandlers) {\r\n            let handler = set.handlers.scroll;\r\n            if (handler) {\r\n                try {\r\n                    handler.call(set.plugin, event, view);\r\n                }\r\n                catch (e) {\r\n                    (0,_extension_js__WEBPACK_IMPORTED_MODULE_3__.logException)(view.state, e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    keydown(view, event) {\r\n        // Must always run, even if a custom handler handled the event\r\n        this.lastKeyCode = event.keyCode;\r\n        this.lastKeyTime = Date.now();\r\n        if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000)\r\n            return true;\r\n        if (_browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].android && _browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].chrome && !event.synthetic &&\r\n            (event.keyCode == 13 || event.keyCode == 8)) {\r\n            view.observer.delayAndroidKey(event.key, event.keyCode);\r\n            return true;\r\n        }\r\n        let pending;\r\n        if (_browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ios && (pending = PendingKeys.find(key => key.keyCode == event.keyCode)) &&\r\n            !(event.ctrlKey || event.altKey || event.metaKey) && !event.synthetic) {\r\n            this.pendingIOSKey = pending;\r\n            setTimeout(() => this.flushIOSKey(view), 250);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    flushIOSKey(view) {\r\n        let key = this.pendingIOSKey;\r\n        if (!key)\r\n            return false;\r\n        this.pendingIOSKey = undefined;\r\n        return (0,_dom_js__WEBPACK_IMPORTED_MODULE_6__.dispatchKey)(view.contentDOM, key.key, key.keyCode);\r\n    }\r\n    ignoreDuringComposition(event) {\r\n        if (!/^key/.test(event.type))\r\n            return false;\r\n        if (this.composing > 0)\r\n            return true;\r\n        if (_browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].safari && Date.now() - this.compositionEndedAt < 100) {\r\n            this.compositionEndedAt = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    mustFlushObserver(event) {\r\n        return (event.type == \"keydown\" && event.keyCode != 229) ||\r\n            event.type == \"compositionend\" && !_browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ios;\r\n    }\r\n    startMouseSelection(mouseSelection) {\r\n        if (this.mouseSelection)\r\n            this.mouseSelection.destroy();\r\n        this.mouseSelection = mouseSelection;\r\n    }\r\n    update(update) {\r\n        if (this.mouseSelection)\r\n            this.mouseSelection.update(update);\r\n        if (update.transactions.length)\r\n            this.lastKeyCode = this.lastSelectionTime = 0;\r\n    }\r\n    destroy() {\r\n        if (this.mouseSelection)\r\n            this.mouseSelection.destroy();\r\n    }\r\n}\r\nconst PendingKeys = [\r\n    { key: \"Backspace\", keyCode: 8, inputType: \"deleteContentBackward\" },\r\n    { key: \"Enter\", keyCode: 13, inputType: \"insertParagraph\" },\r\n    { key: \"Delete\", keyCode: 46, inputType: \"deleteContentForward\" }\r\n];\r\n/** Key codes for modifier keys */\r\nconst modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];\r\nclass MouseSelection {\r\n    constructor(view, startEvent, style, mustSelect) {\r\n        this.view = view;\r\n        this.style = style;\r\n        this.mustSelect = mustSelect;\r\n        this.lastEvent = startEvent;\r\n        let doc = view.contentDOM.ownerDocument;\r\n        doc.addEventListener(\"mousemove\", this.move = this.move.bind(this));\r\n        doc.addEventListener(\"mouseup\", this.up = this.up.bind(this));\r\n        this.extend = startEvent.shiftKey;\r\n        this.multiple = view.state.facet(_state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);\r\n        this.dragMove = dragMovesSelection(view, startEvent);\r\n        this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;\r\n        // When clicking outside of the selection, immediately apply the effect of starting the selection\r\n        if (this.dragging === false) {\r\n            startEvent.preventDefault();\r\n            this.select(startEvent);\r\n        }\r\n    }\r\n    move(event) {\r\n        if (event.buttons == 0)\r\n            return this.destroy();\r\n        if (this.dragging !== false)\r\n            return;\r\n        this.select(this.lastEvent = event);\r\n    }\r\n    up(event) {\r\n        if (this.dragging == null)\r\n            this.select(this.lastEvent);\r\n        if (!this.dragging)\r\n            event.preventDefault();\r\n        this.destroy();\r\n    }\r\n    destroy() {\r\n        let doc = this.view.contentDOM.ownerDocument;\r\n        doc.removeEventListener(\"mousemove\", this.move);\r\n        doc.removeEventListener(\"mouseup\", this.up);\r\n        this.view.inputState.mouseSelection = null;\r\n    }\r\n    select(event) {\r\n        let selection = this.style.get(event, this.extend, this.multiple);\r\n        if (this.mustSelect || !selection.eq(this.view.state.selection) ||\r\n            selection.main.assoc != this.view.state.selection.main.assoc)\r\n            this.view.dispatch({\r\n                selection,\r\n                userEvent: \"select.pointer\",\r\n                scrollIntoView: true\r\n            });\r\n        this.mustSelect = false;\r\n    }\r\n    update(update) {\r\n        if (update.docChanged && this.dragging)\r\n            this.dragging = this.dragging.map(update.changes);\r\n        if (this.style.update(update))\r\n            setTimeout(() => this.select(this.lastEvent), 20);\r\n    }\r\n}\r\nfunction addsSelectionRange(view, event) {\r\n    let facet = view.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_3__.clickAddsSelectionRange);\r\n    return facet.length ? facet[0](event) : _browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].mac ? event.metaKey : event.ctrlKey;\r\n}\r\nfunction dragMovesSelection(view, event) {\r\n    let facet = view.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_3__.dragMovesSelection);\r\n    return facet.length ? facet[0](event) : _browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].mac ? !event.altKey : !event.ctrlKey;\r\n}\r\nfunction isInPrimarySelection(view, event) {\r\n    let { main } = view.state.selection;\r\n    if (main.empty)\r\n        return false;\r\n    // On boundary clicks, check whether the coordinates are inside the selection's client rectangles\r\n    let sel = (0,_dom_js__WEBPACK_IMPORTED_MODULE_6__.getSelection)(view.root);\r\n    if (sel.rangeCount == 0)\r\n        return true;\r\n    let rects = sel.getRangeAt(0).getClientRects();\r\n    for (let i = 0; i < rects.length; i++) {\r\n        let rect = rects[i];\r\n        if (rect.left <= event.clientX && rect.right >= event.clientX &&\r\n            rect.top <= event.clientY && rect.bottom >= event.clientY)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\nfunction eventBelongsToEditor(view, event) {\r\n    if (!event.bubbles)\r\n        return true;\r\n    if (event.defaultPrevented)\r\n        return false;\r\n    for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)\r\n        if (!node || node.nodeType == 11 || ((cView = _contentview_js__WEBPACK_IMPORTED_MODULE_1__.ContentView.get(node)) && cView.ignoreEvent(event)))\r\n            return false;\r\n    return true;\r\n}\r\nconst handlers = Object.create(null);\r\nconst brokenClipboardAPI = (_browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ie && _browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ie_version < 15) || (_browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ios && _browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].webkit_version < 604);\r\nfunction capturePaste(view) {\r\n    let parent = view.dom.parentNode;\r\n    if (!parent)\r\n        return;\r\n    let target = parent.appendChild(document.createElement(\"textarea\"));\r\n    target.style.cssText = \"position: fixed; left: -10000px; top: 10px\";\r\n    target.focus();\r\n    setTimeout(() => {\r\n        view.focus();\r\n        target.remove();\r\n        doPaste(view, target.value);\r\n    }, 50);\r\n}\r\nfunction doPaste(view, input) {\r\n    let { state } = view, changes, i = 1, text = state.toText(input);\r\n    let byLine = text.lines == state.selection.ranges.length;\r\n    let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();\r\n    if (linewise) {\r\n        let lastLine = -1;\r\n        changes = state.changeByRange(range => {\r\n            let line = state.doc.lineAt(range.from);\r\n            if (line.from == lastLine)\r\n                return { range };\r\n            lastLine = line.from;\r\n            let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);\r\n            return { changes: { from: line.from, insert },\r\n                range: _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(range.from + insert.length) };\r\n        });\r\n    }\r\n    else if (byLine) {\r\n        changes = state.changeByRange(range => {\r\n            let line = text.line(i++);\r\n            return { changes: { from: range.from, to: range.to, insert: line.text },\r\n                range: _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(range.from + line.length) };\r\n        });\r\n    }\r\n    else {\r\n        changes = state.replaceSelection(text);\r\n    }\r\n    view.dispatch(changes, {\r\n        userEvent: \"input.paste\",\r\n        scrollIntoView: true\r\n    });\r\n}\r\nhandlers.keydown = (view, event) => {\r\n    view.inputState.setSelectionOrigin(\"select\");\r\n    if (event.keyCode == 27)\r\n        view.inputState.lastEscPress = Date.now();\r\n    else if (modifierCodes.indexOf(event.keyCode) < 0)\r\n        view.inputState.lastEscPress = 0;\r\n};\r\nlet lastTouch = 0;\r\nhandlers.touchstart = (view, e) => {\r\n    lastTouch = Date.now();\r\n    view.inputState.setSelectionOrigin(\"select.pointer\");\r\n};\r\nhandlers.touchmove = view => {\r\n    view.inputState.setSelectionOrigin(\"select.pointer\");\r\n};\r\nhandlers.mousedown = (view, event) => {\r\n    view.observer.flush();\r\n    if (lastTouch > Date.now() - 2000 && getClickType(event) == 1)\r\n        return; // Ignore touch interaction\r\n    let style = null;\r\n    for (let makeStyle of view.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_3__.mouseSelectionStyle)) {\r\n        style = makeStyle(view, event);\r\n        if (style)\r\n            break;\r\n    }\r\n    if (!style && event.button == 0)\r\n        style = basicMouseSelection(view, event);\r\n    if (style) {\r\n        let mustFocus = view.root.activeElement != view.contentDOM;\r\n        if (mustFocus)\r\n            view.observer.ignore(() => (0,_dom_js__WEBPACK_IMPORTED_MODULE_6__.focusPreventScroll)(view.contentDOM));\r\n        view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));\r\n    }\r\n};\r\nfunction rangeForClick(view, pos, bias, type) {\r\n    if (type == 1) { // Single click\r\n        return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(pos, bias);\r\n    }\r\n    else if (type == 2) { // Double click\r\n        return (0,_cursor_js__WEBPACK_IMPORTED_MODULE_5__.groupAt)(view.state, pos, bias);\r\n    }\r\n    else { // Triple click\r\n        let visual = _blockview_js__WEBPACK_IMPORTED_MODULE_2__.LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);\r\n        let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;\r\n        if (to < view.state.doc.length && to == line.to)\r\n            to++;\r\n        return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(from, to);\r\n    }\r\n}\r\nlet insideY = (y, rect) => y >= rect.top && y <= rect.bottom;\r\nlet inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;\r\n/**\r\n * Try to determine, for the given coordinates, associated with the given position, whether they are\r\n * related to the element before or the element after the position.\r\n */\r\nfunction findPositionSide(view, pos, x, y) {\r\n    let line = _blockview_js__WEBPACK_IMPORTED_MODULE_2__.LineView.find(view.docView, pos);\r\n    if (!line)\r\n        return 1;\r\n    let off = pos - line.posAtStart;\r\n    // Line boundaries point into the line\r\n    if (off == 0)\r\n        return 1;\r\n    if (off == line.length)\r\n        return -1;\r\n    // Positions on top of an element point at that element\r\n    let before = line.coordsAt(off, -1);\r\n    if (before && inside(x, y, before))\r\n        return -1;\r\n    let after = line.coordsAt(off, 1);\r\n    if (after && inside(x, y, after))\r\n        return 1;\r\n    // This is probably a line wrap point. Pick before if the point is beside it.\r\n    return before && insideY(y, before) ? -1 : 1;\r\n}\r\nfunction queryPos(view, event) {\r\n    let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);\r\n    return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };\r\n}\r\nconst BadMouseDetail = _browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ie && _browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ie_version <= 11;\r\nlet lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;\r\nfunction getClickType(event) {\r\n    if (!BadMouseDetail)\r\n        return event.detail;\r\n    let last = lastMouseDown, lastTime = lastMouseDownTime;\r\n    lastMouseDown = event;\r\n    lastMouseDownTime = Date.now();\r\n    return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&\r\n        Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;\r\n}\r\nfunction basicMouseSelection(view, event) {\r\n    let start = queryPos(view, event), type = getClickType(event);\r\n    let startSel = view.state.selection;\r\n    let last = start, lastEvent = event;\r\n    return {\r\n        update(update) {\r\n            if (update.docChanged) {\r\n                if (start)\r\n                    start.pos = update.changes.mapPos(start.pos);\r\n                startSel = startSel.map(update.changes);\r\n                lastEvent = null;\r\n            }\r\n        },\r\n        get(event, extend, multiple) {\r\n            let cur;\r\n            if (lastEvent && event.clientX == lastEvent.clientX && event.clientY == lastEvent.clientY)\r\n                cur = last;\r\n            else {\r\n                cur = last = queryPos(view, event);\r\n                lastEvent = event;\r\n            }\r\n            if (!cur || !start)\r\n                return startSel;\r\n            let range = rangeForClick(view, cur.pos, cur.bias, type);\r\n            if (start.pos != cur.pos && !extend) {\r\n                let startRange = rangeForClick(view, start.pos, start.bias, type);\r\n                let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);\r\n                range = from < range.from ? _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(from, to) : _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(to, from);\r\n            }\r\n            if (extend)\r\n                return startSel.replaceRange(startSel.main.extend(range.from, range.to));\r\n            else if (multiple)\r\n                return startSel.addRange(range);\r\n            else\r\n                return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.create([range]);\r\n        }\r\n    };\r\n}\r\nhandlers.dragstart = (view, event) => {\r\n    let { selection: { main } } = view.state;\r\n    let { mouseSelection } = view.inputState;\r\n    if (mouseSelection)\r\n        mouseSelection.dragging = main;\r\n    if (event.dataTransfer) {\r\n        event.dataTransfer.setData(\"Text\", view.state.sliceDoc(main.from, main.to));\r\n        event.dataTransfer.effectAllowed = \"copyMove\";\r\n    }\r\n};\r\nfunction dropText(view, event, text, direct) {\r\n    if (!text)\r\n        return;\r\n    let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);\r\n    event.preventDefault();\r\n    let { mouseSelection } = view.inputState;\r\n    let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ?\r\n        { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;\r\n    let ins = { from: dropPos, insert: text };\r\n    let changes = view.state.changes(del ? [del, ins] : ins);\r\n    view.focus();\r\n    view.dispatch({\r\n        changes,\r\n        selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },\r\n        userEvent: del ? \"move.drop\" : \"input.drop\"\r\n    });\r\n}\r\nhandlers.drop = (view, event) => {\r\n    if (!event.dataTransfer)\r\n        return;\r\n    if (view.state.readOnly)\r\n        return event.preventDefault();\r\n    let files = event.dataTransfer.files;\r\n    if (files && files.length) { // For a file drop, read the file's text.\r\n        event.preventDefault();\r\n        let text = Array(files.length), read = 0;\r\n        let finishFile = () => {\r\n            if (++read == files.length)\r\n                dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);\r\n        };\r\n        for (let i = 0; i < files.length; i++) {\r\n            let reader = new FileReader;\r\n            reader.onerror = finishFile;\r\n            reader.onload = () => {\r\n                if (!/[\\x00-\\x08\\x0e-\\x1f]{2}/.test(reader.result))\r\n                    text[i] = reader.result;\r\n                finishFile();\r\n            };\r\n            reader.readAsText(files[i]);\r\n        }\r\n    }\r\n    else {\r\n        dropText(view, event, event.dataTransfer.getData(\"Text\"), true);\r\n    }\r\n};\r\nhandlers.paste = (view, event) => {\r\n    if (view.state.readOnly)\r\n        return event.preventDefault();\r\n    view.observer.flush();\r\n    let data = brokenClipboardAPI ? null : event.clipboardData;\r\n    if (data) {\r\n        doPaste(view, data.getData(\"text/plain\"));\r\n        event.preventDefault();\r\n    }\r\n    else {\r\n        capturePaste(view);\r\n    }\r\n};\r\nfunction captureCopy(view, text) {\r\n    // The extra wrapper is somehow necessary on IE/Edge to prevent the content from being mangled when it is put onto the clipboard\r\n    let parent = view.dom.parentNode;\r\n    if (!parent)\r\n        return;\r\n    let target = parent.appendChild(document.createElement(\"textarea\"));\r\n    target.style.cssText = \"position: fixed; left: -10000px; top: 10px\";\r\n    target.value = text;\r\n    target.focus();\r\n    target.selectionEnd = text.length;\r\n    target.selectionStart = 0;\r\n    setTimeout(() => {\r\n        target.remove();\r\n        view.focus();\r\n    }, 50);\r\n}\r\nfunction copiedRange(state) {\r\n    let content = [], ranges = [], linewise = false;\r\n    for (let range of state.selection.ranges)\r\n        if (!range.empty) {\r\n            content.push(state.sliceDoc(range.from, range.to));\r\n            ranges.push(range);\r\n        }\r\n    if (!content.length) {\r\n        // Nothing selected, do a line-wise copy\r\n        let upto = -1;\r\n        for (let { from } of state.selection.ranges) {\r\n            let line = state.doc.lineAt(from);\r\n            if (line.number > upto) {\r\n                content.push(line.text);\r\n                ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });\r\n            }\r\n            upto = line.number;\r\n        }\r\n        linewise = true;\r\n    }\r\n    return { text: content.join(state.lineBreak), ranges, linewise };\r\n}\r\nlet lastLinewiseCopy = null;\r\nhandlers.copy = handlers.cut = (view, event) => {\r\n    let { text, ranges, linewise } = copiedRange(view.state);\r\n    if (!text && !linewise)\r\n        return;\r\n    lastLinewiseCopy = linewise ? text : null;\r\n    let data = brokenClipboardAPI ? null : event.clipboardData;\r\n    if (data) {\r\n        event.preventDefault();\r\n        data.clearData();\r\n        data.setData(\"text/plain\", text);\r\n    }\r\n    else {\r\n        captureCopy(view, text);\r\n    }\r\n    if (event.type == \"cut\" && !view.state.readOnly)\r\n        view.dispatch({\r\n            changes: ranges,\r\n            scrollIntoView: true,\r\n            userEvent: \"delete.cut\"\r\n        });\r\n};\r\nhandlers.focus = handlers.blur = view => {\r\n    setTimeout(() => {\r\n        if (view.hasFocus != view.inputState.notifiedFocused)\r\n            view.update([]);\r\n    }, 10);\r\n};\r\nfunction forceClearComposition(view, rapid) {\r\n    if (view.docView.compositionDeco.size) {\r\n        view.inputState.rapidCompositionStart = rapid;\r\n        try {\r\n            view.update([]);\r\n        }\r\n        finally {\r\n            view.inputState.rapidCompositionStart = false;\r\n        }\r\n    }\r\n}\r\nhandlers.compositionstart = handlers.compositionupdate = view => {\r\n    if (view.inputState.compositionFirstChange == null)\r\n        view.inputState.compositionFirstChange = true;\r\n    if (view.inputState.composing < 0) {\r\n        // FIXME possibly set a timeout to clear it again on Android\r\n        view.inputState.composing = 0;\r\n        if (view.docView.compositionDeco.size) {\r\n            view.observer.flush();\r\n            forceClearComposition(view, true);\r\n        }\r\n    }\r\n};\r\nhandlers.compositionend = view => {\r\n    view.inputState.composing = -1;\r\n    view.inputState.compositionEndedAt = Date.now();\r\n    view.inputState.compositionFirstChange = null;\r\n    setTimeout(() => {\r\n        if (view.inputState.composing < 0)\r\n            forceClearComposition(view, false);\r\n    }, 50);\r\n};\r\nhandlers.contextmenu = view => {\r\n    view.inputState.lastContextMenu = Date.now();\r\n};\r\nhandlers.beforeinput = (view, event) => {\r\n    var _a;\r\n    let pending;\r\n    if (_browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].chrome && _browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {\r\n        view.observer.delayAndroidKey(pending.key, pending.keyCode);\r\n        if (pending.key == \"Backspace\" || pending.key == \"Delete\") {\r\n            let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;\r\n            setTimeout(() => {\r\n                var _a;\r\n                if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {\r\n                    view.contentDOM.blur();\r\n                    view.focus();\r\n                }\r\n            }, 100);\r\n        }\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/input.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/keymap.js":
/*!**************************************************!*\
  !*** ./sys/public/js/editor/dist/view/keymap.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"keymap\": () => (/* binding */ keymap),\n/* harmony export */   \"runScopeHandlers\": () => (/* binding */ runScopeHandlers)\n/* harmony export */ });\n/* harmony import */ var _editorview_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./editorview.js */ \"./sys/public/js/editor/dist/view/editorview.js\");\n/* harmony import */ var _input_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./input.js */ \"./sys/public/js/editor/dist/view/input.js\");\n/* harmony import */ var _utils_keyname_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/keyname.js */ \"./sys/public/js/editor/dist/utils/keyname.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./browser.js */ \"./sys/public/js/editor/dist/view/browser.js\");\n\r\n\r\n\r\n\r\n\r\nconst currentPlatform = _browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].mac ? \"mac\" : _browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].windows ? \"win\" : _browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].linux ? \"linux\" : \"key\";\r\nfunction normalizeKeyName(name, platform) {\r\n    const parts = name.split(/-(?!$)/);\r\n    let result = parts[parts.length - 1];\r\n    if (result == \"Space\")\r\n        result = \" \";\r\n    let alt, ctrl, shift, meta;\r\n    for (let i = 0; i < parts.length - 1; ++i) {\r\n        const mod = parts[i];\r\n        if (/^(cmd|meta|m)$/i.test(mod))\r\n            meta = true;\r\n        else if (/^a(lt)?$/i.test(mod))\r\n            alt = true;\r\n        else if (/^(c|ctrl|control)$/i.test(mod))\r\n            ctrl = true;\r\n        else if (/^s(hift)?$/i.test(mod))\r\n            shift = true;\r\n        else if (/^mod$/i.test(mod)) {\r\n            if (platform == \"mac\")\r\n                meta = true;\r\n            else\r\n                ctrl = true;\r\n        }\r\n        else\r\n            throw new Error(\"Unrecognized modifier name: \" + mod);\r\n    }\r\n    if (alt)\r\n        result = \"Alt-\" + result;\r\n    if (ctrl)\r\n        result = \"Ctrl-\" + result;\r\n    if (meta)\r\n        result = \"Meta-\" + result;\r\n    if (shift)\r\n        result = \"Shift-\" + result;\r\n    return result;\r\n}\r\nfunction modifiers(name, event, shift) {\r\n    if (event.altKey)\r\n        name = \"Alt-\" + name;\r\n    if (event.ctrlKey)\r\n        name = \"Ctrl-\" + name;\r\n    if (event.metaKey)\r\n        name = \"Meta-\" + name;\r\n    if (shift !== false && event.shiftKey)\r\n        name = \"Shift-\" + name;\r\n    return name;\r\n}\r\nconst handleKeyEvents = _editorview_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.domEventHandlers({\r\n    keydown(event, view) {\r\n        return runHandlers(getKeymap(view.state), event, view, \"editor\");\r\n    }\r\n});\r\n/**\r\n * Facet used for registering keymaps.\r\n *\r\n * You can add multiple keymaps to an editor. Their priorities determine their precedence (the\r\n * ones specified early or with high priority get checked first). When a handler has returned\r\n * `true` for a given key, no further handlers are called.\r\n */\r\nconst keymap = _state_index_js__WEBPACK_IMPORTED_MODULE_3__.Facet.define({ enables: handleKeyEvents });\r\nconst Keymaps = new WeakMap();\r\n/** This is hidden behind an indirection, rather than directly computed by the facet, to keep internal types out of the facet's type. */\r\nfunction getKeymap(state) {\r\n    let bindings = state.facet(keymap);\r\n    let map = Keymaps.get(bindings);\r\n    if (!map)\r\n        Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));\r\n    return map;\r\n}\r\n/** Run the key handlers registered for a given scope. The event object should be a `\"keydown\"` event. Returns true if any of the handlers handled it. */\r\nfunction runScopeHandlers(view, event, scope) {\r\n    return runHandlers(getKeymap(view.state), event, view, scope);\r\n}\r\nlet storedPrefix = null;\r\nconst PrefixTimeout = 4000;\r\nfunction buildKeymap(bindings, platform = currentPlatform) {\r\n    let bound = Object.create(null);\r\n    let isPrefix = Object.create(null);\r\n    let checkPrefix = (name, is) => {\r\n        let current = isPrefix[name];\r\n        if (current == null)\r\n            isPrefix[name] = is;\r\n        else if (current != is)\r\n            throw new Error(\"Key binding \" + name + \" is used both as a regular binding and as a multi-stroke prefix\");\r\n    };\r\n    let add = (scope, key, command, preventDefault) => {\r\n        let scopeObj = bound[scope] || (bound[scope] = Object.create(null));\r\n        let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));\r\n        for (let i = 1; i < parts.length; i++) {\r\n            let prefix = parts.slice(0, i).join(\" \");\r\n            checkPrefix(prefix, true);\r\n            if (!scopeObj[prefix])\r\n                scopeObj[prefix] = {\r\n                    preventDefault: true,\r\n                    commands: [(view) => {\r\n                            let ourObj = storedPrefix = { view, prefix, scope };\r\n                            setTimeout(() => { if (storedPrefix == ourObj)\r\n                                storedPrefix = null; }, PrefixTimeout);\r\n                            return true;\r\n                        }]\r\n                };\r\n        }\r\n        let full = parts.join(\" \");\r\n        checkPrefix(full, false);\r\n        let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, commands: [] });\r\n        binding.commands.push(command);\r\n        if (preventDefault)\r\n            binding.preventDefault = true;\r\n    };\r\n    for (let b of bindings) {\r\n        let name = b[platform] || b.key;\r\n        if (!name)\r\n            continue;\r\n        for (let scope of b.scope ? b.scope.split(\" \") : [\"editor\"]) {\r\n            add(scope, name, b.run, b.preventDefault);\r\n            if (b.shift)\r\n                add(scope, \"Shift-\" + name, b.shift, b.preventDefault);\r\n        }\r\n    }\r\n    return bound;\r\n}\r\nfunction runHandlers(map, event, view, scope) {\r\n    let name = (0,_utils_keyname_js__WEBPACK_IMPORTED_MODULE_2__.keyName)(event), isChar = name.length == 1 && name != \" \";\r\n    let prefix = \"\", fallthrough = false;\r\n    if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {\r\n        prefix = storedPrefix.prefix + \" \";\r\n        if (fallthrough = _input_js__WEBPACK_IMPORTED_MODULE_1__.modifierCodes.indexOf(event.keyCode) < 0)\r\n            storedPrefix = null;\r\n    }\r\n    let runFor = (binding) => {\r\n        if (binding) {\r\n            for (let cmd of binding.commands)\r\n                if (cmd(view))\r\n                    return true;\r\n            if (binding.preventDefault)\r\n                fallthrough = true;\r\n        }\r\n        return false;\r\n    };\r\n    let scopeObj = map[scope], baseName;\r\n    if (scopeObj) {\r\n        if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)]))\r\n            return true;\r\n        if (isChar && (event.shiftKey || event.altKey || event.metaKey) && (baseName = _utils_keyname_js__WEBPACK_IMPORTED_MODULE_2__.base[event.keyCode]) && baseName != name) {\r\n            if (runFor(scopeObj[prefix + modifiers(baseName, event, true)]))\r\n                return true;\r\n        }\r\n        else if (isChar && event.shiftKey) {\r\n            if (runFor(scopeObj[prefix + modifiers(name, event, true)]))\r\n                return true;\r\n        }\r\n    }\r\n    return fallthrough;\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/keymap.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/matchdecorator.js":
/*!**********************************************************!*\
  !*** ./sys/public/js/editor/dist/view/matchdecorator.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MatchDecorator\": () => (/* binding */ MatchDecorator)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n\r\nfunction iterMatches(doc, re, from, to, func) {\r\n    re.lastIndex = 0;\r\n    for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {\r\n        if (!cursor.lineBreak)\r\n            while (m = re.exec(cursor.value))\r\n                func(pos + m.index, pos + m.index + m[0].length, m);\r\n    }\r\n}\r\nfunction matchRanges(view, maxLength) {\r\n    let visible = view.visibleRanges;\r\n    if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to)\r\n        return visible;\r\n    let result = [];\r\n    for (let { from, to } of visible) {\r\n        from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);\r\n        to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);\r\n        if (result.length && result[result.length - 1].to >= from)\r\n            result[result.length - 1].to = to;\r\n        else\r\n            result.push({ from, to });\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Helper class used to make it easier to maintain decorations on visible code that matches a\r\n * given regular expression. To be used in a [view plugin]{@link ViewPlugin}. Instances of this\r\n * object represent a matching configuration.\r\n */\r\nclass MatchDecorator {\r\n    /**\r\n     * Create a decorator.\r\n     * @param config.regexp The regular expression to match against the content. Will only be matched\r\n     *                      inside lines (not across them). Should have its 'g' flag set.\r\n     * @param config.decoration The decoration to apply to matches, either directly or as a function\r\n     *                      of the match.\r\n     * @param config.boundary By default, changed lines are re-matched entirely. You can provide a\r\n     *                      boundary expression,which should match single character strings that can\r\n     *                      never occur in `regexp`, to reducethe amount of re-matching.\r\n     * @param config.maxLength Matching happens by line, by default, but when lines are folded or very\r\n     *                      long lines are onlypartially drawn, the decorator may avoid matching part\r\n     *                      of them for speed. This controls howmuch additional invisible content it\r\n     *                      should include in its matches. Defaults to 1000.\r\n     */\r\n    constructor(config) {\r\n        let { regexp, decoration, boundary, maxLength = 1000 } = config;\r\n        if (!regexp.global)\r\n            throw new RangeError(\"The regular expression given to MatchDecorator should have its 'g' flag set\");\r\n        this.regexp = regexp;\r\n        this.getDeco = typeof decoration == \"function\" ? decoration : () => decoration;\r\n        this.boundary = boundary;\r\n        this.maxLength = maxLength;\r\n    }\r\n    /**\r\n     * Compute the full set of decorations for matches in the given view's viewport. You'll want to call\r\n     * this when initializing your plugin.\r\n     */\r\n    createDeco(view) {\r\n        let build = new _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSetBuilder();\r\n        for (let { from, to } of matchRanges(view, this.maxLength))\r\n            iterMatches(view.state.doc, this.regexp, from, to, (a, b, m) => build.add(a, b, this.getDeco(m, view, a)));\r\n        return build.finish();\r\n    }\r\n    /**\r\n     * Update a set of decorations for a view update. `deco` _must_ be the set of decorations produced by\r\n     * _this_ `MatchDecorator` for the view state before the update.\r\n     */\r\n    updateDeco(update, deco) {\r\n        let changeFrom = 1e9, changeTo = -1;\r\n        if (update.docChanged)\r\n            update.changes.iterChanges((_f, _t, from, to) => {\r\n                if (to > update.view.viewport.from && from < update.view.viewport.to) {\r\n                    changeFrom = Math.min(from, changeFrom);\r\n                    changeTo = Math.max(to, changeTo);\r\n                }\r\n            });\r\n        if (update.viewportChanged || changeTo - changeFrom > 1000)\r\n            return this.createDeco(update.view);\r\n        if (changeTo > -1)\r\n            return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);\r\n        return deco;\r\n    }\r\n    updateRange(view, deco, updateFrom, updateTo) {\r\n        for (let r of view.visibleRanges) {\r\n            let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);\r\n            if (to > from) {\r\n                let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;\r\n                let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);\r\n                if (this.boundary) {\r\n                    for (; from > fromLine.from; from--)\r\n                        if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {\r\n                            start = from;\r\n                            break;\r\n                        }\r\n                    for (; to < toLine.to; to++)\r\n                        if (this.boundary.test(toLine.text[to - toLine.from])) {\r\n                            end = to;\r\n                            break;\r\n                        }\r\n                }\r\n                let ranges = [], m;\r\n                if (fromLine == toLine) {\r\n                    this.regexp.lastIndex = start - fromLine.from;\r\n                    while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) {\r\n                        let pos = m.index + fromLine.from;\r\n                        ranges.push(this.getDeco(m, view, pos).range(pos, pos + m[0].length));\r\n                    }\r\n                }\r\n                else {\r\n                    iterMatches(view.state.doc, this.regexp, start, end, (from, to, m) => ranges.push(this.getDeco(m, view, from).range(from, to)));\r\n                }\r\n                deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });\r\n            }\r\n        }\r\n        return deco;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/matchdecorator.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/panel.js":
/*!*************************************************!*\
  !*** ./sys/public/js/editor/dist/view/panel.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getPanel\": () => (/* binding */ getPanel),\n/* harmony export */   \"panels\": () => (/* binding */ panels),\n/* harmony export */   \"showPanel\": () => (/* binding */ showPanel)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _editorview_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editorview.js */ \"./sys/public/js/editor/dist/view/editorview.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n\r\n\r\n\r\nconst panelConfig = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({\r\n    combine(configs) {\r\n        let topContainer, bottomContainer;\r\n        for (let c of configs) {\r\n            topContainer = topContainer || c.topContainer;\r\n            bottomContainer = bottomContainer || c.bottomContainer;\r\n        }\r\n        return { topContainer, bottomContainer };\r\n    }\r\n});\r\n/** Configures the panel-managing extension. */\r\nfunction panels(config) {\r\n    return config ? [panelConfig.of(config)] : [];\r\n}\r\n/**\r\n * Get the active panel created by the given constructor, if any. This can be useful when\r\n * you need access to your panels' DOM structure.\r\n */\r\nfunction getPanel(view, panel) {\r\n    let plugin = view.plugin(panelPlugin);\r\n    let index = plugin ? plugin.specs.indexOf(panel) : -1;\r\n    return index > -1 ? plugin.panels[index] : null;\r\n}\r\nconst panelPlugin = _extension_js__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        this.input = view.state.facet(showPanel);\r\n        this.specs = this.input.filter(s => s);\r\n        this.panels = this.specs.map(spec => spec(view));\r\n        let conf = view.state.facet(panelConfig);\r\n        this.top = new PanelGroup(view, true, conf.topContainer);\r\n        this.bottom = new PanelGroup(view, false, conf.bottomContainer);\r\n        this.top.sync(this.panels.filter(p => p.top));\r\n        this.bottom.sync(this.panels.filter(p => !p.top));\r\n        for (let p of this.panels) {\r\n            p.dom.classList.add(\"cm-panel\");\r\n            if (p.mount)\r\n                p.mount();\r\n        }\r\n    }\r\n    update(update) {\r\n        let conf = update.state.facet(panelConfig);\r\n        if (this.top.container != conf.topContainer) {\r\n            this.top.sync([]);\r\n            this.top = new PanelGroup(update.view, true, conf.topContainer);\r\n        }\r\n        if (this.bottom.container != conf.bottomContainer) {\r\n            this.bottom.sync([]);\r\n            this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);\r\n        }\r\n        this.top.syncClasses();\r\n        this.bottom.syncClasses();\r\n        let input = update.state.facet(showPanel);\r\n        if (input != this.input) {\r\n            let specs = input.filter(x => x);\r\n            let panels = [], top = [], bottom = [], mount = [];\r\n            for (let spec of specs) {\r\n                let known = this.specs.indexOf(spec), panel;\r\n                if (known < 0) {\r\n                    panel = spec(update.view);\r\n                    mount.push(panel);\r\n                }\r\n                else {\r\n                    panel = this.panels[known];\r\n                    if (panel.update)\r\n                        panel.update(update);\r\n                }\r\n                panels.push(panel);\r\n                (panel.top ? top : bottom).push(panel);\r\n            }\r\n            this.specs = specs;\r\n            this.panels = panels;\r\n            this.top.sync(top);\r\n            this.bottom.sync(bottom);\r\n            for (let p of mount) {\r\n                p.dom.classList.add(\"cm-panel\");\r\n                if (p.mount)\r\n                    p.mount();\r\n            }\r\n        }\r\n        else {\r\n            for (let p of this.panels)\r\n                if (p.update)\r\n                    p.update(update);\r\n        }\r\n    }\r\n    destroy() {\r\n        this.top.sync([]);\r\n        this.bottom.sync([]);\r\n    }\r\n}, {\r\n    provide: plugin => _editorview_js__WEBPACK_IMPORTED_MODULE_1__.EditorView.scrollMargins.of(view => {\r\n        let value = view.plugin(plugin);\r\n        return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };\r\n    })\r\n});\r\nclass PanelGroup {\r\n    constructor(view, top, container) {\r\n        this.view = view;\r\n        this.top = top;\r\n        this.container = container;\r\n        this.dom = undefined;\r\n        this.classes = \"\";\r\n        this.panels = [];\r\n        this.syncClasses();\r\n    }\r\n    sync(panels) {\r\n        for (let p of this.panels)\r\n            if (p.destroy && panels.indexOf(p) < 0)\r\n                p.destroy();\r\n        this.panels = panels;\r\n        this.syncDOM();\r\n    }\r\n    syncDOM() {\r\n        if (this.panels.length == 0) {\r\n            if (this.dom) {\r\n                this.dom.remove();\r\n                this.dom = undefined;\r\n            }\r\n            return;\r\n        }\r\n        if (!this.dom) {\r\n            this.dom = document.createElement(\"div\");\r\n            this.dom.className = this.top ? \"cm-panels cm-panels-top\" : \"cm-panels cm-panels-bottom\";\r\n            this.dom.style[this.top ? \"top\" : \"bottom\"] = \"0\";\r\n            let parent = this.container || this.view.dom;\r\n            parent.insertBefore(this.dom, this.top ? parent.firstChild : null);\r\n        }\r\n        let curDOM = this.dom.firstChild;\r\n        for (let panel of this.panels) {\r\n            if (panel.dom.parentNode == this.dom) {\r\n                while (curDOM != panel.dom)\r\n                    curDOM = rm(curDOM);\r\n                curDOM = curDOM.nextSibling;\r\n            }\r\n            else {\r\n                this.dom.insertBefore(panel.dom, curDOM);\r\n            }\r\n        }\r\n        while (curDOM)\r\n            curDOM = rm(curDOM);\r\n    }\r\n    scrollMargin() {\r\n        return !this.dom || this.container ? 0 : Math.max(0, this.top ?\r\n            this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :\r\n            Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);\r\n    }\r\n    syncClasses() {\r\n        if (!this.container || this.classes == this.view.themeClasses)\r\n            return;\r\n        for (let cls of this.classes.split(\" \"))\r\n            if (cls)\r\n                this.container.classList.remove(cls);\r\n        for (let cls of (this.classes = this.view.themeClasses).split(\" \"))\r\n            if (cls)\r\n                this.container.classList.add(cls);\r\n    }\r\n}\r\nfunction rm(node) {\r\n    let next = node.nextSibling;\r\n    node.remove();\r\n    return next;\r\n}\r\n/**\r\n * Opening a panel is done by providing a constructor function for the panel through this facet.\r\n * (The panel is closed again when its constructor is no longer provided.) Values of `null` are ignored.\r\n */\r\nconst showPanel = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({\r\n    enables: panelPlugin\r\n});\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/panel.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/placeholder.js":
/*!*******************************************************!*\
  !*** ./sys/public/js/editor/dist/view/placeholder.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"placeholder\": () => (/* binding */ placeholder)\n/* harmony export */ });\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n/* harmony import */ var _decoration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./decoration.js */ \"./sys/public/js/editor/dist/view/decoration.js\");\n\r\n\r\nclass Placeholder extends _decoration_js__WEBPACK_IMPORTED_MODULE_1__.WidgetType {\r\n    constructor(content) {\r\n        super();\r\n        this.content = content;\r\n    }\r\n    toDOM() {\r\n        let wrap = document.createElement(\"span\");\r\n        wrap.className = \"cm-placeholder\";\r\n        wrap.style.pointerEvents = \"none\";\r\n        wrap.appendChild(typeof this.content == \"string\" ? document.createTextNode(this.content) : this.content);\r\n        if (typeof this.content == \"string\")\r\n            wrap.setAttribute(\"aria-label\", \"placeholder \" + this.content);\r\n        else\r\n            wrap.setAttribute(\"aria-hidden\", \"true\");\r\n        return wrap;\r\n    }\r\n    ignoreEvent() { return false; }\r\n}\r\n/** Extension that enables a placeholder—a piece of example content to show when the editor is empty. */\r\nfunction placeholder(content) {\r\n    return _extension_js__WEBPACK_IMPORTED_MODULE_0__.ViewPlugin.fromClass(class {\r\n        constructor(view) {\r\n            this.view = view;\r\n            this.placeholder = _decoration_js__WEBPACK_IMPORTED_MODULE_1__.Decoration.set([_decoration_js__WEBPACK_IMPORTED_MODULE_1__.Decoration.widget({ widget: new Placeholder(content), side: 1 }).range(0)]);\r\n        }\r\n        get decorations() { return this.view.state.doc.length ? _decoration_js__WEBPACK_IMPORTED_MODULE_1__.Decoration.none : this.placeholder; }\r\n    }, { decorations: v => v.decorations });\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/placeholder.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/rectangular-selection.js":
/*!*****************************************************************!*\
  !*** ./sys/public/js/editor/dist/view/rectangular-selection.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"crosshairCursor\": () => (/* binding */ crosshairCursor),\n/* harmony export */   \"rectangularSelection\": () => (/* binding */ rectangularSelection)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _editorview_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editorview.js */ \"./sys/public/js/editor/dist/view/editorview.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n\r\n\r\n\r\n// Don't compute precise column positions for line offsets above this (since it could get expensive). Assume offset==column for them.\r\nconst MaxOff = 2000;\r\nfunction rectangleFor(state, a, b) {\r\n    let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);\r\n    let ranges = [];\r\n    if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {\r\n        let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);\r\n        for (let i = startLine; i <= endLine; i++) {\r\n            let line = state.doc.line(i);\r\n            if (line.length <= endOff)\r\n                ranges.push(_state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(line.from + startOff, line.to + endOff));\r\n        }\r\n    }\r\n    else {\r\n        let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);\r\n        for (let i = startLine; i <= endLine; i++) {\r\n            let line = state.doc.line(i);\r\n            let start = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.findColumn)(line.text, startCol, state.tabSize, true);\r\n            if (start > -1) {\r\n                let end = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.findColumn)(line.text, endCol, state.tabSize);\r\n                ranges.push(_state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(line.from + start, line.from + end));\r\n            }\r\n        }\r\n    }\r\n    return ranges;\r\n}\r\nfunction absoluteColumn(view, x) {\r\n    let ref = view.coordsAtPos(view.viewport.from);\r\n    return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;\r\n}\r\nfunction getPos(view, event) {\r\n    let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);\r\n    let line = view.state.doc.lineAt(offset), off = offset - line.from;\r\n    let col = off > MaxOff ? -1 : off == line.length ?\r\n        absoluteColumn(view, event.clientX) : (0,_state_index_js__WEBPACK_IMPORTED_MODULE_0__.countColumn)(line.text, view.state.tabSize, offset - line.from);\r\n    return { line: line.number, col, off };\r\n}\r\nfunction rectangleSelectionStyle(view, event) {\r\n    let start = getPos(view, event), startSel = view.state.selection;\r\n    if (!start)\r\n        return null;\r\n    return {\r\n        update(update) {\r\n            if (update.docChanged) {\r\n                let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);\r\n                let newLine = update.state.doc.lineAt(newStart);\r\n                start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };\r\n                startSel = startSel.map(update.changes);\r\n            }\r\n        },\r\n        get(event, _extend, multiple) {\r\n            let cur = getPos(view, event);\r\n            if (!cur)\r\n                return startSel;\r\n            let ranges = rectangleFor(view.state, start, cur);\r\n            if (!ranges.length)\r\n                return startSel;\r\n            if (multiple)\r\n                return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.create(ranges.concat(startSel.ranges));\r\n            else\r\n                return _state_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.create(ranges);\r\n        }\r\n    };\r\n}\r\n/**\r\n * Create an extension that enables rectangular selections. By default, it will react to left mouse\r\n * drag with the Alt key held down. When such a selection occurs, the text within the rectangle\r\n * that was dragged over will be selected, as one selection [range]{@link SelectionRange} per line.\r\n * @param options.eventFilter A custom predicate function, which takes a `mousedown` event and\r\n *                            returns true if it should be used for rectangular selection.\r\n */\r\nfunction rectangularSelection(options) {\r\n    let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);\r\n    return _editorview_js__WEBPACK_IMPORTED_MODULE_1__.EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);\r\n}\r\nconst keys = {\r\n    Alt: [18, e => e.altKey],\r\n    Control: [17, e => e.ctrlKey],\r\n    Shift: [16, e => e.shiftKey],\r\n    Meta: [91, e => e.metaKey]\r\n};\r\nconst showCrosshair = { style: \"cursor: crosshair\" };\r\n/**\r\n * Returns an extension that turns the pointer cursor into a crosshair when a given modifier key,\r\n * defaulting to Alt, is held down. Can serve as a visual hint that rectangular selection is\r\n * going to happen when paired with {@link rectangularSelection}.\r\n */\r\nfunction crosshairCursor(options = {}) {\r\n    let [code, getter] = keys[options.key || \"Alt\"];\r\n    let plugin = _extension_js__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.fromClass(class {\r\n        constructor(view) {\r\n            this.view = view;\r\n            this.isDown = false;\r\n        }\r\n        set(isDown) {\r\n            if (this.isDown != isDown) {\r\n                this.isDown = isDown;\r\n                this.view.update([]);\r\n            }\r\n        }\r\n    }, {\r\n        eventHandlers: {\r\n            keydown(e) {\r\n                this.set(e.keyCode == code || getter(e));\r\n            },\r\n            keyup(e) {\r\n                if (e.keyCode == code || !getter(e))\r\n                    this.set(false);\r\n            }\r\n        }\r\n    });\r\n    return [\r\n        plugin,\r\n        _editorview_js__WEBPACK_IMPORTED_MODULE_1__.EditorView.contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null; })\r\n    ];\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/rectangular-selection.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/scrollpastend.js":
/*!*********************************************************!*\
  !*** ./sys/public/js/editor/dist/view/scrollpastend.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"scrollPastEnd\": () => (/* binding */ scrollPastEnd)\n/* harmony export */ });\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n\r\nconst plugin = _extension_js__WEBPACK_IMPORTED_MODULE_0__.ViewPlugin.fromClass(class {\r\n    constructor() {\r\n        this.height = 1000;\r\n        this.attrs = { style: \"padding-bottom: 1000px\" };\r\n    }\r\n    update(update) {\r\n        let height = update.view.viewState.editorHeight - update.view.defaultLineHeight;\r\n        if (height != this.height) {\r\n            this.height = height;\r\n            this.attrs = { style: `padding-bottom: ${height}px` };\r\n        }\r\n    }\r\n});\r\n/**\r\n * Returns an extension that makes sure the content has a bottom margin equivalent to the\r\n * height of the editor, minus one line height, so that every line in the document can be\r\n * scrolled to the top of the editor.\r\n *\r\n * This is only meaningful when the editor is scrollable, and should not be enabled in editors\r\n * that take the size of their content.\r\n */\r\nfunction scrollPastEnd() {\r\n    return [plugin, _extension_js__WEBPACK_IMPORTED_MODULE_0__.contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.attrs) || null; })];\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/scrollpastend.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/special-chars.js":
/*!*********************************************************!*\
  !*** ./sys/public/js/editor/dist/view/special-chars.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"highlightSpecialChars\": () => (/* binding */ highlightSpecialChars)\n/* harmony export */ });\n/* harmony import */ var _decoration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decoration.js */ \"./sys/public/js/editor/dist/view/decoration.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n/* harmony import */ var _matchdecorator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./matchdecorator.js */ \"./sys/public/js/editor/dist/view/matchdecorator.js\");\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n\r\n\r\n\r\n\r\nconst UnicodeRegexpSupport = /x/.unicode != null ? \"gu\" : \"g\";\r\nconst Specials = new RegExp(\"[\\u0000-\\u0008\\u000a-\\u001f\\u007f-\\u009f\\u00ad\\u061c\\u200b\\u200e\\u200f\\u2028\\u2029\\u202d\\u202e\\ufeff\\ufff9-\\ufffc]\", UnicodeRegexpSupport);\r\nconst Names = {\r\n    0: \"null\",\r\n    7: \"bell\",\r\n    8: \"backspace\",\r\n    10: \"newline\",\r\n    11: \"vertical tab\",\r\n    13: \"carriage return\",\r\n    27: \"escape\",\r\n    8203: \"zero width space\",\r\n    8204: \"zero width non-joiner\",\r\n    8205: \"zero width joiner\",\r\n    8206: \"left-to-right mark\",\r\n    8207: \"right-to-left mark\",\r\n    8232: \"line separator\",\r\n    8237: \"left-to-right override\",\r\n    8238: \"right-to-left override\",\r\n    8233: \"paragraph separator\",\r\n    65279: \"zero width no-break space\",\r\n    65532: \"object replacement\"\r\n};\r\nlet _supportsTabSize = null;\r\nfunction supportsTabSize() {\r\n    var _a;\r\n    if (_supportsTabSize == null && typeof document != \"undefined\" && document.body) {\r\n        let styles = document.body.style;\r\n        _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;\r\n    }\r\n    return _supportsTabSize || false;\r\n}\r\nconst specialCharConfig = _state_index_js__WEBPACK_IMPORTED_MODULE_3__.Facet.define({\r\n    combine(configs) {\r\n        let config = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_3__.combineConfig)(configs, {\r\n            render: null,\r\n            specialChars: Specials,\r\n            addSpecialChars: null\r\n        });\r\n        if ((config.replaceTabs = !supportsTabSize()))\r\n            config.specialChars = new RegExp(\"\\t|\" + config.specialChars.source, UnicodeRegexpSupport);\r\n        if (config.addSpecialChars)\r\n            config.specialChars = new RegExp(config.specialChars.source + \"|\" + config.addSpecialChars.source, UnicodeRegexpSupport);\r\n        return config;\r\n    }\r\n});\r\n/**\r\n * Returns an extension that installs highlighting of special characters.\r\n * @param config Configuration options.\r\n */\r\nfunction highlightSpecialChars(config = {}) {\r\n    return [specialCharConfig.of(config), specialCharPlugin()];\r\n}\r\nlet _plugin = null;\r\nfunction specialCharPlugin() {\r\n    return _plugin || (_plugin = _extension_js__WEBPACK_IMPORTED_MODULE_1__.ViewPlugin.fromClass(class {\r\n        constructor(view) {\r\n            this.view = view;\r\n            this.decorations = _decoration_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.none;\r\n            this.decorationCache = Object.create(null);\r\n            this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));\r\n            this.decorations = this.decorator.createDeco(view);\r\n        }\r\n        makeDecorator(conf) {\r\n            return new _matchdecorator_js__WEBPACK_IMPORTED_MODULE_2__.MatchDecorator({\r\n                regexp: conf.specialChars,\r\n                decoration: (m, view, pos) => {\r\n                    let { doc } = view.state;\r\n                    let code = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_3__.codePointAt)(m[0], 0);\r\n                    if (code == 9) {\r\n                        let line = doc.lineAt(pos);\r\n                        let size = view.state.tabSize, col = (0,_state_index_js__WEBPACK_IMPORTED_MODULE_3__.countColumn)(line.text, size, pos - line.from);\r\n                        return _decoration_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.replace({ widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth) });\r\n                    }\r\n                    return this.decorationCache[code] ||\r\n                        (this.decorationCache[code] = _decoration_js__WEBPACK_IMPORTED_MODULE_0__.Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));\r\n                },\r\n                boundary: conf.replaceTabs ? undefined : /[^]/\r\n            });\r\n        }\r\n        update(update) {\r\n            let conf = update.state.facet(specialCharConfig);\r\n            if (update.startState.facet(specialCharConfig) != conf) {\r\n                this.decorator = this.makeDecorator(conf);\r\n                this.decorations = this.decorator.createDeco(update.view);\r\n            }\r\n            else {\r\n                this.decorations = this.decorator.updateDeco(update, this.decorations);\r\n            }\r\n        }\r\n    }, {\r\n        decorations: v => v.decorations\r\n    }));\r\n}\r\nconst DefaultPlaceholder = \"\\u2022\";\r\n// Assigns placeholder characters from the Control Pictures block to ASCII control characters\r\nfunction placeholder(code) {\r\n    if (code >= 32)\r\n        return DefaultPlaceholder;\r\n    if (code == 10)\r\n        return \"\\u2424\";\r\n    return String.fromCharCode(9216 + code);\r\n}\r\nclass SpecialCharWidget extends _decoration_js__WEBPACK_IMPORTED_MODULE_0__.WidgetType {\r\n    constructor(options, code) {\r\n        super();\r\n        this.options = options;\r\n        this.code = code;\r\n    }\r\n    eq(other) { return other.code == this.code; }\r\n    toDOM(view) {\r\n        let ph = placeholder(this.code);\r\n        let desc = view.state.phrase(\"Control character\") + \" \" + (Names[this.code] || \"0x\" + this.code.toString(16));\r\n        let custom = this.options.render && this.options.render(this.code, desc, ph);\r\n        if (custom)\r\n            return custom;\r\n        let span = document.createElement(\"span\");\r\n        span.textContent = ph;\r\n        span.title = desc;\r\n        span.setAttribute(\"aria-label\", desc);\r\n        span.className = \"cm-specialChar\";\r\n        return span;\r\n    }\r\n    ignoreEvent() { return false; }\r\n}\r\nclass TabWidget extends _decoration_js__WEBPACK_IMPORTED_MODULE_0__.WidgetType {\r\n    constructor(width) {\r\n        super();\r\n        this.width = width;\r\n    }\r\n    eq(other) { return other.width == this.width; }\r\n    toDOM() {\r\n        let span = document.createElement(\"span\");\r\n        span.textContent = \"\\t\";\r\n        span.className = \"cm-tab\";\r\n        span.style.width = this.width + \"px\";\r\n        return span;\r\n    }\r\n    ignoreEvent() { return false; }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/special-chars.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/theme.js":
/*!*************************************************!*\
  !*** ./sys/public/js/editor/dist/view/theme.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"baseDarkID\": () => (/* binding */ baseDarkID),\n/* harmony export */   \"baseLightID\": () => (/* binding */ baseLightID),\n/* harmony export */   \"baseTheme\": () => (/* binding */ baseTheme),\n/* harmony export */   \"baseThemeID\": () => (/* binding */ baseThemeID),\n/* harmony export */   \"buildTheme\": () => (/* binding */ buildTheme),\n/* harmony export */   \"darkTheme\": () => (/* binding */ darkTheme),\n/* harmony export */   \"lightDarkIDs\": () => (/* binding */ lightDarkIDs),\n/* harmony export */   \"theme\": () => (/* binding */ theme)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _utils_style_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/style-mod.js */ \"./sys/public/js/editor/dist/utils/style-mod.js\");\n\r\n\r\nconst theme = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({ combine: strs => strs.join(\" \") });\r\nconst darkTheme = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({ combine: values => values.indexOf(true) > -1 });\r\nconst baseThemeID = _utils_style_mod_js__WEBPACK_IMPORTED_MODULE_1__.StyleModule.newName(), baseLightID = _utils_style_mod_js__WEBPACK_IMPORTED_MODULE_1__.StyleModule.newName(), baseDarkID = _utils_style_mod_js__WEBPACK_IMPORTED_MODULE_1__.StyleModule.newName();\r\nconst lightDarkIDs = { \"&light\": \".\" + baseLightID, \"&dark\": \".\" + baseDarkID };\r\nfunction buildTheme(main, spec, scopes) {\r\n    return new _utils_style_mod_js__WEBPACK_IMPORTED_MODULE_1__.StyleModule(spec, {\r\n        finish(sel) {\r\n            return /&/.test(sel) ? sel.replace(/&\\w*/, m => {\r\n                if (m == \"&\")\r\n                    return main;\r\n                if (!scopes || !scopes[m])\r\n                    throw new RangeError(`Unsupported selector: ${m}`);\r\n                return scopes[m];\r\n            }) : main + \" \" + sel;\r\n        }\r\n    });\r\n}\r\nconst baseTheme = buildTheme(\".\" + baseThemeID, {\r\n    \"&.cm-editor\": {\r\n        position: \"relative !important\",\r\n        boxSizing: \"border-box\",\r\n        display: \"flex !important\",\r\n        flexDirection: \"column\"\r\n    },\r\n    \".cm-scroller\": {\r\n        display: \"flex !important\",\r\n        alignItems: \"flex-start !important\",\r\n        fontFamily: \"monospace\",\r\n        lineHeight: 1.4,\r\n        height: \"100%\",\r\n        overflowX: \"auto\",\r\n        position: \"relative\",\r\n        zIndex: 0\r\n    },\r\n    \".cm-content\": {\r\n        margin: 0,\r\n        flexGrow: 2,\r\n        minHeight: \"100%\",\r\n        display: \"block\",\r\n        whiteSpace: \"pre\",\r\n        wordWrap: \"normal\",\r\n        boxSizing: \"border-box\",\r\n        padding: \"4px 0\",\r\n        outline: \"none\",\r\n        \"&[contenteditable=true]\": {\r\n            WebkitUserModify: \"read-write-plaintext-only\",\r\n        }\r\n    },\r\n    \".cm-lineWrapping\": {\r\n        whiteSpace_fallback: \"pre-wrap\",\r\n        whiteSpace: \"break-spaces\",\r\n        wordBreak: \"break-word\",\r\n        overflowWrap: \"anywhere\"\r\n    },\r\n    \"&light .cm-content\": { caretColor: \"black\" },\r\n    \"&dark .cm-content\": { caretColor: \"white\" },\r\n    \".cm-line\": {\r\n        display: \"block\",\r\n        padding: \"0 2px 0 4px\"\r\n    },\r\n    \".cm-selectionLayer\": {\r\n        zIndex: -1,\r\n        contain: \"size style\"\r\n    },\r\n    \".cm-selectionBackground\": {\r\n        position: \"absolute\",\r\n    },\r\n    \"&light .cm-selectionBackground\": {\r\n        background: \"#d9d9d9\"\r\n    },\r\n    \"&dark .cm-selectionBackground\": {\r\n        background: \"#222\"\r\n    },\r\n    \"&light.cm-focused .cm-selectionBackground\": {\r\n        background: \"#d7d4f0\"\r\n    },\r\n    \"&dark.cm-focused .cm-selectionBackground\": {\r\n        background: \"#233\"\r\n    },\r\n    \".cm-cursorLayer\": {\r\n        zIndex: 100,\r\n        contain: \"size style\",\r\n        pointerEvents: \"none\"\r\n    },\r\n    \"&.cm-focused .cm-cursorLayer\": {\r\n        animation: \"steps(1) cm-blink 1.2s infinite\"\r\n    },\r\n    // Two animations defined so that we can switch between them to restart the animation without forcing another style recomputation.\r\n    \"@keyframes cm-blink\": { \"0%\": {}, \"50%\": { visibility: \"hidden\" }, \"100%\": {} },\r\n    \"@keyframes cm-blink2\": { \"0%\": {}, \"50%\": { visibility: \"hidden\" }, \"100%\": {} },\r\n    \".cm-cursor, .cm-dropCursor\": {\r\n        position: \"absolute\",\r\n        borderLeft: \"1.2px solid black\",\r\n        marginLeft: \"-0.6px\",\r\n        pointerEvents: \"none\",\r\n    },\r\n    \".cm-cursor\": {\r\n        display: \"none\"\r\n    },\r\n    \"&dark .cm-cursor\": {\r\n        borderLeftColor: \"#444\"\r\n    },\r\n    \"&.cm-focused .cm-cursor\": {\r\n        display: \"block\"\r\n    },\r\n    \"&light .cm-activeLine\": { backgroundColor: \"#f3f9ff\" },\r\n    \"&dark .cm-activeLine\": { backgroundColor: \"#223039\" },\r\n    \"&light .cm-specialChar\": { color: \"red\" },\r\n    \"&dark .cm-specialChar\": { color: \"#f78\" },\r\n    \".cm-gutters\": {\r\n        display: \"flex\",\r\n        height: \"100%\",\r\n        boxSizing: \"border-box\",\r\n        left: 0,\r\n        zIndex: 200\r\n    },\r\n    \"&light .cm-gutters\": {\r\n        backgroundColor: \"#fcfcfc\",\r\n        color: \"#6c6c6c\",\r\n        borderRight: \"1px solid #ddd\"\r\n    },\r\n    \"&dark .cm-gutters\": {\r\n        backgroundColor: \"#333338\",\r\n        color: \"#ccc\"\r\n    },\r\n    \".cm-gutter\": {\r\n        display: \"flex !important\",\r\n        flexDirection: \"column\",\r\n        flexShrink: 0,\r\n        boxSizing: \"border-box\",\r\n        minHeight: \"100%\",\r\n        overflow: \"hidden\"\r\n    },\r\n    \".cm-gutterElement\": {\r\n        boxSizing: \"border-box\"\r\n    },\r\n    \".cm-lineNumbers .cm-gutterElement\": {\r\n        padding: \"0 3px 0 5px\",\r\n        minWidth: \"20px\",\r\n        textAlign: \"right\",\r\n        whiteSpace: \"nowrap\"\r\n    },\r\n    \"&light .cm-activeLineGutter\": {\r\n        backgroundColor: \"#e2f2ff\"\r\n    },\r\n    \"&dark .cm-activeLineGutter\": {\r\n        backgroundColor: \"#222227\"\r\n    },\r\n    \".cm-panels\": {\r\n        boxSizing: \"border-box\",\r\n        position: \"sticky\",\r\n        left: 0,\r\n        right: 0\r\n    },\r\n    \"&light .cm-panels\": {\r\n        backgroundColor: \"#f5f5f5\",\r\n        color: \"black\"\r\n    },\r\n    \"&light .cm-panels-top\": {\r\n        borderBottom: \"1px solid #ddd\"\r\n    },\r\n    \"&light .cm-panels-bottom\": {\r\n        borderTop: \"1px solid #ddd\"\r\n    },\r\n    \"&dark .cm-panels\": {\r\n        backgroundColor: \"#333338\",\r\n        color: \"white\"\r\n    },\r\n    \".cm-tab\": {\r\n        display: \"inline-block\",\r\n        overflow: \"hidden\",\r\n        verticalAlign: \"bottom\"\r\n    },\r\n    \".cm-widgetBuffer\": {\r\n        verticalAlign: \"text-top\",\r\n        height: \"1em\",\r\n        display: \"inline\"\r\n    },\r\n    \".cm-placeholder\": {\r\n        color: \"#888\",\r\n        display: \"inline-block\",\r\n        verticalAlign: \"top\",\r\n    },\r\n    \".cm-button\": {\r\n        verticalAlign: \"middle\",\r\n        color: \"inherit\",\r\n        fontSize: \"70%\",\r\n        padding: \".2em 1em\",\r\n        borderRadius: \"1px\"\r\n    },\r\n    \"&light .cm-button\": {\r\n        backgroundImage: \"linear-gradient(#eff1f5, #d9d9df)\",\r\n        border: \"1px solid #888\",\r\n        \"&:active\": {\r\n            backgroundImage: \"linear-gradient(#b4b4b4, #d0d3d6)\"\r\n        }\r\n    },\r\n    \"&dark .cm-button\": {\r\n        backgroundImage: \"linear-gradient(#393939, #111)\",\r\n        border: \"1px solid #888\",\r\n        \"&:active\": {\r\n            backgroundImage: \"linear-gradient(#111, #333)\"\r\n        }\r\n    },\r\n    \".cm-textfield\": {\r\n        verticalAlign: \"middle\",\r\n        color: \"inherit\",\r\n        fontSize: \"70%\",\r\n        border: \"1px solid silver\",\r\n        padding: \".2em .5em\"\r\n    },\r\n    \"&light .cm-textfield\": {\r\n        backgroundColor: \"white\"\r\n    },\r\n    \"&dark .cm-textfield\": {\r\n        border: \"1px solid #555\",\r\n        backgroundColor: \"inherit\"\r\n    }\r\n}, lightDarkIDs);\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/theme.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/tooltip.js":
/*!***************************************************!*\
  !*** ./sys/public/js/editor/dist/view/tooltip.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"closeHoverTooltips\": () => (/* binding */ closeHoverTooltips),\n/* harmony export */   \"getTooltip\": () => (/* binding */ getTooltip),\n/* harmony export */   \"hasHoverTooltips\": () => (/* binding */ hasHoverTooltips),\n/* harmony export */   \"hoverTooltip\": () => (/* binding */ hoverTooltip),\n/* harmony export */   \"repositionTooltips\": () => (/* binding */ repositionTooltips),\n/* harmony export */   \"showTooltip\": () => (/* binding */ showTooltip),\n/* harmony export */   \"tooltips\": () => (/* binding */ tooltips)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _editorview_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editorview.js */ \"./sys/public/js/editor/dist/view/editorview.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n/* harmony import */ var _bidi_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bidi.js */ \"./sys/public/js/editor/dist/view/bidi.js\");\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./browser.js */ \"./sys/public/js/editor/dist/view/browser.js\");\n\r\n\r\n\r\n\r\n\r\nconst Outside = \"-10000px\";\r\nclass TooltipViewManager {\r\n    constructor(view, facet, createTooltipView) {\r\n        this.facet = facet;\r\n        this.createTooltipView = createTooltipView;\r\n        this.input = view.state.facet(facet);\r\n        this.tooltips = this.input.filter(t => t);\r\n        this.tooltipViews = this.tooltips.map(createTooltipView);\r\n    }\r\n    update(update) {\r\n        let input = update.state.facet(this.facet);\r\n        let tooltips = input.filter(x => x);\r\n        if (input === this.input) {\r\n            for (let t of this.tooltipViews)\r\n                if (t.update)\r\n                    t.update(update);\r\n            return false;\r\n        }\r\n        let tooltipViews = [];\r\n        for (let i = 0; i < tooltips.length; i++) {\r\n            let tip = tooltips[i], known = -1;\r\n            if (!tip)\r\n                continue;\r\n            for (let i = 0; i < this.tooltips.length; i++) {\r\n                let other = this.tooltips[i];\r\n                if (other && other.create == tip.create)\r\n                    known = i;\r\n            }\r\n            if (known < 0) {\r\n                tooltipViews[i] = this.createTooltipView(tip);\r\n            }\r\n            else {\r\n                let tooltipView = tooltipViews[i] = this.tooltipViews[known];\r\n                if (tooltipView.update)\r\n                    tooltipView.update(update);\r\n            }\r\n        }\r\n        for (let t of this.tooltipViews)\r\n            if (tooltipViews.indexOf(t) < 0)\r\n                t.dom.remove();\r\n        this.input = input;\r\n        this.tooltips = tooltips;\r\n        this.tooltipViews = tooltipViews;\r\n        return true;\r\n    }\r\n}\r\n/**\r\n * Creates an extension that configures tooltip behavior.\r\n * @param [config.position] By default, tooltips use `\"fixed\"` [positioning](https://developer.mozilla.org/en-US/docs/Web/CSS/position),\r\n *              which has the advantage that tooltips don't get cut off by scrollable parent elements.\r\n *              However, CSS rules like `contain: layout` can break fixed positioning in child nodes,\r\n *              which can be worked about by using `\"absolute\"` here.\r\n *\r\n *              On iOS, which at the time of writing still doesn't properly support fixed positioning,\r\n *              the library always uses absolute positioning.\r\n * @param [config.parent] The element to put the tooltips into. By default, they are put in the editor\r\n *              (`cm-editor`) element, and that is usually what you want. But in some layouts that can\r\n *              lead to positioning issues, and you need to use a different parent to work around those.\r\n * @param [config.tooltipSpace] By default, when figuring out whether there is room for a tooltip at a\r\n *              given position, the extension considers the entire space between 0,0 and `innerWidth`,\r\n *              `innerHeight` to be available for showing tooltips. You can provide a function here that\r\n *              returns an alternative rectangle.\r\n */\r\nfunction tooltips(config = {}) {\r\n    return tooltipConfig.of(config);\r\n}\r\nfunction windowSpace() {\r\n    return { top: 0, left: 0, bottom: innerHeight, right: innerWidth };\r\n}\r\nconst tooltipConfig = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({\r\n    combine: values => {\r\n        var _a, _b, _c;\r\n        return ({\r\n            position: _browser_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ios ? \"absolute\" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || \"fixed\",\r\n            parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,\r\n            tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,\r\n        });\r\n    }\r\n});\r\nconst tooltipPlugin = _extension_js__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.fromClass(class {\r\n    constructor(view) {\r\n        var _a;\r\n        this.view = view;\r\n        this.inView = true;\r\n        this.lastTransaction = 0;\r\n        this.measureTimeout = -1;\r\n        let config = view.state.facet(tooltipConfig);\r\n        this.position = config.position;\r\n        this.parent = config.parent;\r\n        this.classes = view.themeClasses;\r\n        this.createContainer();\r\n        this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };\r\n        this.manager = new TooltipViewManager(view, showTooltip, t => this.createTooltip(t));\r\n        this.intersectionObserver = typeof IntersectionObserver == \"function\" ? new IntersectionObserver(entries => {\r\n            if (Date.now() > this.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)\r\n                this.measureSoon();\r\n        }, { threshold: [1] }) : null;\r\n        this.observeIntersection();\r\n        (_a = view.dom.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.addEventListener(\"resize\", this.measureSoon = this.measureSoon.bind(this));\r\n        this.maybeMeasure();\r\n    }\r\n    createContainer() {\r\n        if (this.parent) {\r\n            this.container = document.createElement(\"div\");\r\n            this.container.style.position = \"relative\";\r\n            this.container.className = this.view.themeClasses;\r\n            this.parent.appendChild(this.container);\r\n        }\r\n        else {\r\n            this.container = this.view.dom;\r\n        }\r\n    }\r\n    observeIntersection() {\r\n        if (this.intersectionObserver) {\r\n            this.intersectionObserver.disconnect();\r\n            for (let tooltip of this.manager.tooltipViews)\r\n                this.intersectionObserver.observe(tooltip.dom);\r\n        }\r\n    }\r\n    measureSoon() {\r\n        if (this.measureTimeout < 0)\r\n            this.measureTimeout = setTimeout(() => {\r\n                this.measureTimeout = -1;\r\n                this.maybeMeasure();\r\n            }, 50);\r\n    }\r\n    update(update) {\r\n        if (update.transactions.length)\r\n            this.lastTransaction = Date.now();\r\n        let updated = this.manager.update(update);\r\n        if (updated)\r\n            this.observeIntersection();\r\n        let shouldMeasure = updated || update.geometryChanged;\r\n        let newConfig = update.state.facet(tooltipConfig);\r\n        if (newConfig.position != this.position) {\r\n            this.position = newConfig.position;\r\n            for (let t of this.manager.tooltipViews)\r\n                t.dom.style.position = this.position;\r\n            shouldMeasure = true;\r\n        }\r\n        if (newConfig.parent != this.parent) {\r\n            if (this.parent)\r\n                this.container.remove();\r\n            this.parent = newConfig.parent;\r\n            this.createContainer();\r\n            for (let t of this.manager.tooltipViews)\r\n                this.container.appendChild(t.dom);\r\n            shouldMeasure = true;\r\n        }\r\n        else if (this.parent && this.view.themeClasses != this.classes) {\r\n            this.classes = this.container.className = this.view.themeClasses;\r\n        }\r\n        if (shouldMeasure)\r\n            this.maybeMeasure();\r\n    }\r\n    createTooltip(tooltip) {\r\n        let tooltipView = tooltip.create(this.view);\r\n        tooltipView.dom.classList.add(\"cm-tooltip\");\r\n        if (tooltip.arrow && !tooltipView.dom.querySelector(\".cm-tooltip > .cm-tooltip-arrow\")) {\r\n            let arrow = document.createElement(\"div\");\r\n            arrow.className = \"cm-tooltip-arrow\";\r\n            tooltipView.dom.appendChild(arrow);\r\n        }\r\n        tooltipView.dom.style.position = this.position;\r\n        tooltipView.dom.style.top = Outside;\r\n        this.container.appendChild(tooltipView.dom);\r\n        if (tooltipView.mount)\r\n            tooltipView.mount(this.view);\r\n        return tooltipView;\r\n    }\r\n    destroy() {\r\n        var _a, _b;\r\n        (_a = this.view.dom.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"resize\", this.measureSoon);\r\n        for (let { dom } of this.manager.tooltipViews)\r\n            dom.remove();\r\n        (_b = this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.disconnect();\r\n        clearTimeout(this.measureTimeout);\r\n    }\r\n    readMeasure() {\r\n        let editor = this.view.dom.getBoundingClientRect();\r\n        return {\r\n            editor,\r\n            parent: this.parent ? this.container.getBoundingClientRect() : editor,\r\n            pos: this.manager.tooltips.map((t, i) => {\r\n                let tv = this.manager.tooltipViews[i];\r\n                return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);\r\n            }),\r\n            size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),\r\n            space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),\r\n        };\r\n    }\r\n    writeMeasure(measured) {\r\n        let { editor, space } = measured;\r\n        let others = [];\r\n        for (let i = 0; i < this.manager.tooltips.length; i++) {\r\n            let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;\r\n            let pos = measured.pos[i], size = measured.size[i];\r\n            // Hide tooltips that are outside of the editor.\r\n            if (!pos || pos.bottom <= Math.max(editor.top, space.top) || pos.top >= Math.min(editor.bottom, space.bottom) ||\r\n                pos.right < Math.max(editor.left, space.left) - .1 || pos.left > Math.min(editor.right, space.right) + .1) {\r\n                dom.style.top = Outside;\r\n                continue;\r\n            }\r\n            let arrow = tooltip.arrow ? tView.dom.querySelector(\".cm-tooltip-arrow\") : null;\r\n            let arrowHeight = arrow ? 7 /* Size */ : 0;\r\n            let width = size.right - size.left, height = size.bottom - size.top;\r\n            let offset = tView.offset || noOffset, ltr = this.view.textDirection == _bidi_js__WEBPACK_IMPORTED_MODULE_3__.Direction.LTR;\r\n            let left = size.width > space.right - space.left ? (ltr ? space.left : space.right - size.width) :\r\n                ltr ? Math.min(pos.left - (arrow ? 14 /* Offset */ : 0) + offset.x, space.right - width) : Math.max(space.left, pos.left - width + (arrow ? 14 /* Offset */ : 0) - offset.x);\r\n            let above = !!tooltip.above;\r\n            if (!tooltip.strictSide && (above ?\r\n                pos.top - (size.bottom - size.top) - offset.y < space.top :\r\n                pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) &&\r\n                above == (space.bottom - pos.bottom > pos.top - space.top))\r\n                above = !above;\r\n            let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;\r\n            let right = left + width;\r\n            if (tView.overlap !== true)\r\n                for (let r of others)\r\n                    if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)\r\n                        top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;\r\n            if (this.position == \"absolute\") {\r\n                dom.style.top = (top - measured.parent.top) + \"px\";\r\n                dom.style.left = (left - measured.parent.left) + \"px\";\r\n            }\r\n            else {\r\n                dom.style.top = top + \"px\";\r\n                dom.style.left = left + \"px\";\r\n            }\r\n            if (arrow)\r\n                arrow.style.left = `${pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Offset */ - 7 /* Size */)}px`;\r\n            if (tView.overlap !== true)\r\n                others.push({ left, top, right, bottom: top + height });\r\n            dom.classList.toggle(\"cm-tooltip-above\", above);\r\n            dom.classList.toggle(\"cm-tooltip-below\", !above);\r\n            if (tView.positioned)\r\n                tView.positioned();\r\n        }\r\n    }\r\n    maybeMeasure() {\r\n        if (this.manager.tooltips.length) {\r\n            if (this.view.inView)\r\n                this.view.requestMeasure(this.measureReq);\r\n            if (this.inView != this.view.inView) {\r\n                this.inView = this.view.inView;\r\n                if (!this.inView)\r\n                    for (let tv of this.manager.tooltipViews)\r\n                        tv.dom.style.top = Outside;\r\n            }\r\n        }\r\n    }\r\n}, {\r\n    eventHandlers: {\r\n        scroll() { this.maybeMeasure(); }\r\n    }\r\n});\r\nconst baseTheme = _editorview_js__WEBPACK_IMPORTED_MODULE_1__.EditorView.baseTheme({\r\n    \".cm-tooltip\": {\r\n        zIndex: 100\r\n    },\r\n    \"&light .cm-tooltip\": {\r\n        border: \"1px solid #bbb\",\r\n        backgroundColor: \"#f5f5f5\"\r\n    },\r\n    \"&light .cm-tooltip-section:not(:first-child)\": {\r\n        borderTop: \"1px solid #bbb\",\r\n    },\r\n    \"&dark .cm-tooltip\": {\r\n        backgroundColor: \"#333338\",\r\n        color: \"white\"\r\n    },\r\n    \".cm-tooltip-arrow\": {\r\n        height: `${7 /* Size */}px`,\r\n        width: `${7 /* Size */ * 2}px`,\r\n        position: \"absolute\",\r\n        zIndex: -1,\r\n        overflow: \"hidden\",\r\n        \"&:before, &:after\": {\r\n            content: \"''\",\r\n            position: \"absolute\",\r\n            width: 0,\r\n            height: 0,\r\n            borderLeft: `${7 /* Size */}px solid transparent`,\r\n            borderRight: `${7 /* Size */}px solid transparent`,\r\n        },\r\n        \".cm-tooltip-above &\": {\r\n            bottom: `-${7 /* Size */}px`,\r\n            \"&:before\": {\r\n                borderTop: `${7 /* Size */}px solid #bbb`,\r\n            },\r\n            \"&:after\": {\r\n                borderTop: `${7 /* Size */}px solid #f5f5f5`,\r\n                bottom: \"1px\"\r\n            }\r\n        },\r\n        \".cm-tooltip-below &\": {\r\n            top: `-${7 /* Size */}px`,\r\n            \"&:before\": {\r\n                borderBottom: `${7 /* Size */}px solid #bbb`,\r\n            },\r\n            \"&:after\": {\r\n                borderBottom: `${7 /* Size */}px solid #f5f5f5`,\r\n                top: \"1px\"\r\n            }\r\n        },\r\n    },\r\n    \"&dark .cm-tooltip .cm-tooltip-arrow\": {\r\n        \"&:before\": {\r\n            borderTopColor: \"#333338\",\r\n            borderBottomColor: \"#333338\"\r\n        },\r\n        \"&:after\": {\r\n            borderTopColor: \"transparent\",\r\n            borderBottomColor: \"transparent\"\r\n        }\r\n    }\r\n});\r\nconst noOffset = { x: 0, y: 0 };\r\n/** Facet to which an extension can add a value to show a tooltip. */\r\nconst showTooltip = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define({\r\n    enables: [tooltipPlugin, baseTheme]\r\n});\r\nconst showHoverTooltip = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Facet.define();\r\nclass HoverTooltipHost {\r\n    constructor(view) {\r\n        this.view = view;\r\n        this.mounted = false;\r\n        this.dom = document.createElement(\"div\");\r\n        this.dom.classList.add(\"cm-tooltip-hover\");\r\n        this.manager = new TooltipViewManager(view, showHoverTooltip, t => this.createHostedView(t));\r\n    }\r\n    // Needs to be static so that host tooltip instances always match\r\n    static create(view) {\r\n        return new HoverTooltipHost(view);\r\n    }\r\n    createHostedView(tooltip) {\r\n        let hostedView = tooltip.create(this.view);\r\n        hostedView.dom.classList.add(\"cm-tooltip-section\");\r\n        this.dom.appendChild(hostedView.dom);\r\n        if (this.mounted && hostedView.mount)\r\n            hostedView.mount(this.view);\r\n        return hostedView;\r\n    }\r\n    mount(view) {\r\n        for (let hostedView of this.manager.tooltipViews) {\r\n            if (hostedView.mount)\r\n                hostedView.mount(view);\r\n        }\r\n        this.mounted = true;\r\n    }\r\n    positioned() {\r\n        for (let hostedView of this.manager.tooltipViews) {\r\n            if (hostedView.positioned)\r\n                hostedView.positioned();\r\n        }\r\n    }\r\n    update(update) {\r\n        this.manager.update(update);\r\n    }\r\n}\r\nconst showHoverTooltipHost = showTooltip.compute([showHoverTooltip], state => {\r\n    let tooltips = state.facet(showHoverTooltip).filter(t => t);\r\n    if (tooltips.length === 0)\r\n        return null;\r\n    return {\r\n        pos: Math.min(...tooltips.map(t => t.pos)),\r\n        end: Math.max(...tooltips.filter(t => t.end != null).map(t => t.end)),\r\n        create: HoverTooltipHost.create,\r\n        above: tooltips[0].above,\r\n        arrow: tooltips.some(t => t.arrow),\r\n    };\r\n});\r\nclass HoverPlugin {\r\n    constructor(view, source, field, setHover, hoverTime) {\r\n        this.view = view;\r\n        this.source = source;\r\n        this.field = field;\r\n        this.setHover = setHover;\r\n        this.hoverTime = hoverTime;\r\n        this.hoverTimeout = -1;\r\n        this.restartTimeout = -1;\r\n        this.pending = null;\r\n        this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };\r\n        this.checkHover = this.checkHover.bind(this);\r\n        view.dom.addEventListener(\"mouseleave\", this.mouseleave = this.mouseleave.bind(this));\r\n        view.dom.addEventListener(\"mousemove\", this.mousemove = this.mousemove.bind(this));\r\n    }\r\n    update() {\r\n        if (this.pending) {\r\n            this.pending = null;\r\n            clearTimeout(this.restartTimeout);\r\n            this.restartTimeout = setTimeout(() => this.startHover(), 20);\r\n        }\r\n    }\r\n    get active() {\r\n        return this.view.state.field(this.field);\r\n    }\r\n    checkHover() {\r\n        this.hoverTimeout = -1;\r\n        if (this.active)\r\n            return;\r\n        let hovered = Date.now() - this.lastMove.time;\r\n        if (hovered < this.hoverTime)\r\n            this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);\r\n        else\r\n            this.startHover();\r\n    }\r\n    startHover() {\r\n        clearTimeout(this.restartTimeout);\r\n        let { lastMove } = this;\r\n        let pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(lastMove) : null;\r\n        if (pos == null)\r\n            return;\r\n        let posCoords = this.view.coordsAtPos(pos);\r\n        if (posCoords == null || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom ||\r\n            lastMove.x < posCoords.left - this.view.defaultCharacterWidth ||\r\n            lastMove.x > posCoords.right + this.view.defaultCharacterWidth)\r\n            return;\r\n        let bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);\r\n        let rtl = bidi && bidi.dir == _bidi_js__WEBPACK_IMPORTED_MODULE_3__.Direction.RTL ? -1 : 1;\r\n        let open = this.source(this.view, pos, (lastMove.x < posCoords.left ? -rtl : rtl));\r\n        if (open === null || open === void 0 ? void 0 : open.then) {\r\n            let pending = this.pending = { pos };\r\n            open.then(result => {\r\n                if (this.pending == pending) {\r\n                    this.pending = null;\r\n                    if (result)\r\n                        this.view.dispatch({ effects: this.setHover.of(result) });\r\n                }\r\n            }, e => (0,_extension_js__WEBPACK_IMPORTED_MODULE_2__.logException)(this.view.state, e, \"hover tooltip\"));\r\n        }\r\n        else if (open) {\r\n            this.view.dispatch({ effects: this.setHover.of(open) });\r\n        }\r\n    }\r\n    mousemove(event) {\r\n        var _a;\r\n        this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };\r\n        if (this.hoverTimeout < 0)\r\n            this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);\r\n        let tooltip = this.active;\r\n        if (tooltip && !isInTooltip(this.lastMove.target) || this.pending) {\r\n            let { pos } = tooltip || this.pending, end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;\r\n            if ((pos == end ? this.view.posAtCoords(this.lastMove) != pos :\r\n                !isOverRange(this.view, pos, end, event.clientX, event.clientY, 6 /* MaxDist */))) {\r\n                this.view.dispatch({ effects: this.setHover.of(null) });\r\n                this.pending = null;\r\n            }\r\n        }\r\n    }\r\n    mouseleave() {\r\n        clearTimeout(this.hoverTimeout);\r\n        this.hoverTimeout = -1;\r\n        if (this.active)\r\n            this.view.dispatch({ effects: this.setHover.of(null) });\r\n    }\r\n    destroy() {\r\n        clearTimeout(this.hoverTimeout);\r\n        this.view.dom.removeEventListener(\"mouseleave\", this.mouseleave);\r\n        this.view.dom.removeEventListener(\"mousemove\", this.mousemove);\r\n    }\r\n}\r\nfunction isInTooltip(elt) {\r\n    for (let cur = elt; cur; cur = cur.parentNode)\r\n        if (cur.nodeType == 1 && cur.classList.contains(\"cm-tooltip\"))\r\n            return true;\r\n    return false;\r\n}\r\nfunction isOverRange(view, from, to, x, y, margin) {\r\n    let range = document.createRange();\r\n    let fromDOM = view.domAtPos(from), toDOM = view.domAtPos(to);\r\n    range.setEnd(toDOM.node, toDOM.offset);\r\n    range.setStart(fromDOM.node, fromDOM.offset);\r\n    let rects = range.getClientRects();\r\n    range.detach();\r\n    for (let i = 0; i < rects.length; i++) {\r\n        let rect = rects[i];\r\n        let dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);\r\n        if (dist <= margin)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Set up a hover tooltip, which shows up when the pointer hovers over ranges of text. The callback\r\n * is called when the mouse hovers over the document text. It should, if there is a tooltip associated\r\n * with position `pos`, return the tooltip description (either directly or in a promise). The `side`\r\n * argument indicates on which side of the position the pointer is—it will be -1 if the pointer is\r\n * before the position, 1 if after the position.\r\n *\r\n * Note that all hover tooltips are hosted within a single tooltip container element. This allows\r\n * multiple tooltips over the same range to be \"merged\" together without overlapping.\r\n * @param options.hideOnChange When enabled (this defaults to false), close the tooltip whenever the document changes.\r\n * @param options.hoverTime Hover time after which the tooltip should appear, in milliseconds. Defaults to 300ms.\r\n */\r\nfunction hoverTooltip(source, options = {}) {\r\n    let setHover = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.StateEffect.define();\r\n    let hoverState = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.StateField.define({\r\n        create() { return null; },\r\n        update(value, tr) {\r\n            if (value && (options.hideOnChange && (tr.docChanged || tr.selection) ||\r\n                options.hideOn && options.hideOn(tr, value)))\r\n                return null;\r\n            if (value && tr.docChanged) {\r\n                let newPos = tr.changes.mapPos(value.pos, -1, _state_index_js__WEBPACK_IMPORTED_MODULE_0__.MapMode.TrackDel);\r\n                if (newPos == null)\r\n                    return null;\r\n                let copy = Object.assign(Object.create(null), value);\r\n                copy.pos = newPos;\r\n                if (value.end != null)\r\n                    copy.end = tr.changes.mapPos(value.end);\r\n                value = copy;\r\n            }\r\n            for (let effect of tr.effects) {\r\n                if (effect.is(setHover))\r\n                    value = effect.value;\r\n                if (effect.is(closeHoverTooltipEffect))\r\n                    value = null;\r\n            }\r\n            return value;\r\n        },\r\n        provide: f => showHoverTooltip.from(f)\r\n    });\r\n    return [\r\n        hoverState,\r\n        _extension_js__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Time */)),\r\n        showHoverTooltipHost\r\n    ];\r\n}\r\n/** Get the active tooltip view for a given tooltip, if available. */\r\nfunction getTooltip(view, tooltip) {\r\n    let plugin = view.plugin(tooltipPlugin);\r\n    if (!plugin)\r\n        return null;\r\n    let found = plugin.manager.tooltips.indexOf(tooltip);\r\n    return found < 0 ? null : plugin.manager.tooltipViews[found];\r\n}\r\n/** Returns true if any hover tooltips are currently active. */\r\nfunction hasHoverTooltips(state) {\r\n    return state.facet(showHoverTooltip).some(x => x);\r\n}\r\nconst closeHoverTooltipEffect = _state_index_js__WEBPACK_IMPORTED_MODULE_0__.StateEffect.define();\r\n/** Transaction effect that closes all hover tooltips. */\r\nconst closeHoverTooltips = closeHoverTooltipEffect.of(null);\r\n/**\r\n * Tell the tooltip extension to recompute the position of the active tooltips. This can\r\n * be useful when something happens (such as a re-positioning or CSS change affecting the\r\n * editor) that could invalidate the existing tooltip positions.\r\n */\r\nfunction repositionTooltips(view) {\r\n    var _a;\r\n    (_a = view.plugin(tooltipPlugin)) === null || _a === void 0 ? void 0 : _a.maybeMeasure();\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/tooltip.js?");

/***/ }),

/***/ "./sys/public/js/editor/dist/view/viewstate.js":
/*!*****************************************************!*\
  !*** ./sys/public/js/editor/dist/view/viewstate.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LineGap\": () => (/* binding */ LineGap),\n/* harmony export */   \"ViewState\": () => (/* binding */ ViewState),\n/* harmony export */   \"Viewport\": () => (/* binding */ Viewport)\n/* harmony export */ });\n/* harmony import */ var _state_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _heightmap_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./heightmap.js */ \"./sys/public/js/editor/dist/view/heightmap.js\");\n/* harmony import */ var _extension_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extension.js */ \"./sys/public/js/editor/dist/view/extension.js\");\n/* harmony import */ var _decoration_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./decoration.js */ \"./sys/public/js/editor/dist/view/decoration.js\");\n/* harmony import */ var _bidi_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bidi.js */ \"./sys/public/js/editor/dist/view/bidi.js\");\n\r\n\r\n\r\n\r\n\r\nfunction visiblePixelRange(dom, paddingTop) {\r\n    let rect = dom.getBoundingClientRect();\r\n    let left = Math.max(0, rect.left), right = Math.min(innerWidth, rect.right);\r\n    let top = Math.max(0, rect.top), bottom = Math.min(innerHeight, rect.bottom);\r\n    let body = dom.ownerDocument.body;\r\n    for (let parent = dom.parentNode; parent && parent != body;) {\r\n        if (parent.nodeType == 1) {\r\n            let elt = parent;\r\n            let style = window.getComputedStyle(elt);\r\n            if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&\r\n                style.overflow != \"visible\") {\r\n                let parentRect = elt.getBoundingClientRect();\r\n                left = Math.max(left, parentRect.left);\r\n                right = Math.min(right, parentRect.right);\r\n                top = Math.max(top, parentRect.top);\r\n                bottom = Math.min(bottom, parentRect.bottom);\r\n            }\r\n            parent = style.position == \"absolute\" || style.position == \"fixed\" ? elt.offsetParent : elt.parentNode;\r\n        }\r\n        else if (parent.nodeType == 11) { // Shadow root\r\n            parent = parent.host;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return { left: left - rect.left, right: Math.max(left, right) - rect.left,\r\n        top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };\r\n}\r\nfunction fullPixelRange(dom, paddingTop) {\r\n    let rect = dom.getBoundingClientRect();\r\n    return { left: 0, right: rect.right - rect.left,\r\n        top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };\r\n}\r\n// Line gaps are placeholder widgets used to hide pieces of overlong\r\n// lines within the viewport, as a kludge to keep the editor\r\n// responsive when a ridiculously long line is loaded into it.\r\nclass LineGap {\r\n    constructor(from, to, size) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.size = size;\r\n    }\r\n    static same(a, b) {\r\n        if (a.length != b.length)\r\n            return false;\r\n        for (let i = 0; i < a.length; i++) {\r\n            let gA = a[i], gB = b[i];\r\n            if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    draw(wrapping) {\r\n        return _decoration_js__WEBPACK_IMPORTED_MODULE_3__.Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);\r\n    }\r\n}\r\nclass LineGapWidget extends _decoration_js__WEBPACK_IMPORTED_MODULE_3__.WidgetType {\r\n    constructor(size, vertical) {\r\n        super();\r\n        this.size = size;\r\n        this.vertical = vertical;\r\n    }\r\n    eq(other) { return other.size == this.size && other.vertical == this.vertical; }\r\n    toDOM() {\r\n        let elt = document.createElement(\"div\");\r\n        if (this.vertical) {\r\n            elt.style.height = this.size + \"px\";\r\n        }\r\n        else {\r\n            elt.style.width = this.size + \"px\";\r\n            elt.style.height = \"2px\";\r\n            elt.style.display = \"inline-block\";\r\n        }\r\n        return elt;\r\n    }\r\n    get estimatedHeight() { return this.vertical ? this.size : -1; }\r\n}\r\nclass ViewState {\r\n    constructor(state) {\r\n        this.state = state;\r\n        // These are contentDOM-local coordinates\r\n        this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };\r\n        this.inView = true;\r\n        this.paddingTop = 0;\r\n        this.paddingBottom = 0;\r\n        this.contentDOMWidth = 0;\r\n        this.contentDOMHeight = 0;\r\n        this.editorHeight = 0;\r\n        this.editorWidth = 0;\r\n        this.heightOracle = new _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.HeightOracle;\r\n        // See VP.MaxDOMHeight\r\n        this.scaler = IdScaler;\r\n        this.scrollTarget = null;\r\n        // Briefly set to true when printing, to disable viewport limiting\r\n        this.printing = false;\r\n        // Flag set when editor content was redrawn, so that the next measure stage knows it must read DOM layout\r\n        this.mustMeasureContent = true;\r\n        this.defaultTextDirection = _bidi_js__WEBPACK_IMPORTED_MODULE_4__.Direction.RTL;\r\n        this.visibleRanges = [];\r\n        // Cursor 'assoc' is only significant when the cursor is on a line\r\n        // wrap point, where it must stick to the character that it is\r\n        // associated with. Since browsers don't provide a reasonable\r\n        // interface to set or query this, when a selection is set that\r\n        // might cause this to be significant, this flag is set. The next\r\n        // measure phase will check whether the cursor is on a line-wrapping\r\n        // boundary and, if so, reset it to make sure it is positioned in\r\n        // the right place.\r\n        this.mustEnforceCursorAssoc = false;\r\n        this.stateDeco = state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_2__.decorations).filter(d => typeof d != \"function\");\r\n        this.heightMap = _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.HeightMap.empty().applyChanges(this.stateDeco, _state_index_js__WEBPACK_IMPORTED_MODULE_0__.Text.empty, this.heightOracle.setDoc(state.doc), [new _extension_js__WEBPACK_IMPORTED_MODULE_2__.ChangedRange(0, 0, 0, state.doc.length)]);\r\n        this.viewport = this.getViewport(0, null);\r\n        this.updateViewportLines();\r\n        this.updateForViewport();\r\n        this.lineGaps = this.ensureLineGaps([]);\r\n        this.lineGapDeco = _decoration_js__WEBPACK_IMPORTED_MODULE_3__.Decoration.set(this.lineGaps.map(gap => gap.draw(false)));\r\n        this.computeVisibleRanges();\r\n    }\r\n    updateForViewport() {\r\n        let viewports = [this.viewport], { main } = this.state.selection;\r\n        for (let i = 0; i <= 1; i++) {\r\n            let pos = i ? main.head : main.anchor;\r\n            if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {\r\n                let { from, to } = this.lineBlockAt(pos);\r\n                viewports.push(new Viewport(from, to));\r\n            }\r\n        }\r\n        this.viewports = viewports.sort((a, b) => a.from - b.from);\r\n        this.scaler = this.heightMap.height <= 7000000 /* MaxDOMHeight */ ? IdScaler :\r\n            new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);\r\n    }\r\n    updateViewportLines() {\r\n        this.viewportLines = [];\r\n        this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, block => {\r\n            this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));\r\n        });\r\n    }\r\n    update(update, scrollTarget = null) {\r\n        this.state = update.state;\r\n        let prevDeco = this.stateDeco;\r\n        this.stateDeco = this.state.facet(_extension_js__WEBPACK_IMPORTED_MODULE_2__.decorations).filter(d => typeof d != \"function\");\r\n        let contentChanges = update.changedRanges;\r\n        let heightChanges = _extension_js__WEBPACK_IMPORTED_MODULE_2__.ChangedRange.extendWithRanges(contentChanges, (0,_heightmap_js__WEBPACK_IMPORTED_MODULE_1__.heightRelevantDecoChanges)(prevDeco, this.stateDeco, update ? update.changes : _state_index_js__WEBPACK_IMPORTED_MODULE_0__.ChangeSet.empty(this.state.doc.length)));\r\n        let prevHeight = this.heightMap.height;\r\n        this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);\r\n        if (this.heightMap.height != prevHeight)\r\n            update.flags |= 2 /* Height */;\r\n        let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;\r\n        if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||\r\n            !this.viewportIsAppropriate(viewport))\r\n            viewport = this.getViewport(0, scrollTarget);\r\n        let updateLines = !update.changes.empty || (update.flags & 2 /* Height */) ||\r\n            viewport.from != this.viewport.from || viewport.to != this.viewport.to;\r\n        this.viewport = viewport;\r\n        this.updateForViewport();\r\n        if (updateLines)\r\n            this.updateViewportLines();\r\n        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4000 /* DoubleMargin */)\r\n            this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));\r\n        update.flags |= this.computeVisibleRanges();\r\n        if (scrollTarget)\r\n            this.scrollTarget = scrollTarget;\r\n        if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&\r\n            update.state.selection.main.empty && update.state.selection.main.assoc)\r\n            this.mustEnforceCursorAssoc = true;\r\n    }\r\n    measure(view) {\r\n        let dom = view.contentDOM, style = window.getComputedStyle(dom);\r\n        let oracle = this.heightOracle;\r\n        let whiteSpace = style.whiteSpace;\r\n        this.defaultTextDirection = style.direction == \"rtl\" ? _bidi_js__WEBPACK_IMPORTED_MODULE_4__.Direction.RTL : _bidi_js__WEBPACK_IMPORTED_MODULE_4__.Direction.LTR;\r\n        let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);\r\n        let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != dom.clientHeight;\r\n        let result = 0, bias = 0;\r\n        if (this.editorWidth != view.scrollDOM.clientWidth) {\r\n            if (oracle.lineWrapping)\r\n                measureContent = true;\r\n            this.editorWidth = view.scrollDOM.clientWidth;\r\n            result |= 8 /* Geometry */;\r\n        }\r\n        if (measureContent) {\r\n            this.mustMeasureContent = false;\r\n            this.contentDOMHeight = dom.clientHeight;\r\n            // Vertical padding\r\n            let paddingTop = parseInt(style.paddingTop) || 0, paddingBottom = parseInt(style.paddingBottom) || 0;\r\n            if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {\r\n                result |= 8 /* Geometry */;\r\n                this.paddingTop = paddingTop;\r\n                this.paddingBottom = paddingBottom;\r\n            }\r\n        }\r\n        // Pixel viewport\r\n        let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);\r\n        let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;\r\n        this.pixelViewport = pixelViewport;\r\n        let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;\r\n        if (inView != this.inView) {\r\n            this.inView = inView;\r\n            if (inView)\r\n                measureContent = true;\r\n        }\r\n        if (!this.inView)\r\n            return 0;\r\n        let contentWidth = dom.clientWidth;\r\n        if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {\r\n            this.contentDOMWidth = contentWidth;\r\n            this.editorHeight = view.scrollDOM.clientHeight;\r\n            result |= 8 /* Geometry */;\r\n        }\r\n        if (measureContent) {\r\n            let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);\r\n            if (oracle.mustRefreshForHeights(lineHeights))\r\n                refresh = true;\r\n            if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {\r\n                let { lineHeight, charWidth } = view.docView.measureTextSize();\r\n                refresh = oracle.refresh(whiteSpace, lineHeight, charWidth, contentWidth / charWidth, lineHeights);\r\n                if (refresh) {\r\n                    view.docView.minWidth = 0;\r\n                    result |= 8 /* Geometry */;\r\n                }\r\n            }\r\n            if (dTop > 0 && dBottom > 0)\r\n                bias = Math.max(dTop, dBottom);\r\n            else if (dTop < 0 && dBottom < 0)\r\n                bias = Math.min(dTop, dBottom);\r\n            oracle.heightChanged = false;\r\n            for (let vp of this.viewports) {\r\n                let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);\r\n                this.heightMap = this.heightMap.updateHeight(oracle, 0, refresh, new _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.MeasuredHeights(vp.from, heights));\r\n            }\r\n            if (oracle.heightChanged)\r\n                result |= 2 /* Height */;\r\n        }\r\n        let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||\r\n            this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);\r\n        if (viewportChange)\r\n            this.viewport = this.getViewport(bias, this.scrollTarget);\r\n        this.updateForViewport();\r\n        if ((result & 2 /* Height */) || viewportChange)\r\n            this.updateViewportLines();\r\n        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4000 /* DoubleMargin */)\r\n            this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));\r\n        result |= this.computeVisibleRanges();\r\n        if (this.mustEnforceCursorAssoc) {\r\n            this.mustEnforceCursorAssoc = false;\r\n            // This is done in the read stage, because moving the selection\r\n            // to a line end is going to trigger a layout anyway, so it\r\n            // can't be a pure write. It should be rare that it does any\r\n            // writing.\r\n            view.docView.enforceCursorAssoc();\r\n        }\r\n        return result;\r\n    }\r\n    get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }\r\n    get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }\r\n    getViewport(bias, scrollTarget) {\r\n        // This will divide VP.Margin between the top and the\r\n        // bottom, depending on the bias (the change in viewport position\r\n        // since the last update). It'll hold a number between 0 and 1\r\n        let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* Margin */ / 2));\r\n        let map = this.heightMap, doc = this.state.doc, { visibleTop, visibleBottom } = this;\r\n        let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* Margin */, _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.QueryType.ByHeight, doc, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* Margin */, _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.QueryType.ByHeight, doc, 0, 0).to);\r\n        // If scrollTarget is given, make sure the viewport includes that position\r\n        if (scrollTarget) {\r\n            let { head } = scrollTarget.range;\r\n            if (head < viewport.from || head > viewport.to) {\r\n                let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);\r\n                let block = map.lineAt(head, _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.QueryType.ByPos, doc, 0, 0), topPos;\r\n                if (scrollTarget.y == \"center\")\r\n                    topPos = (block.top + block.bottom) / 2 - viewHeight / 2;\r\n                else if (scrollTarget.y == \"start\" || scrollTarget.y == \"nearest\" && head < viewport.from)\r\n                    topPos = block.top;\r\n                else\r\n                    topPos = block.bottom - viewHeight;\r\n                viewport = new Viewport(map.lineAt(topPos - 1000 /* Margin */ / 2, _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.QueryType.ByHeight, doc, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* Margin */ / 2, _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.QueryType.ByHeight, doc, 0, 0).to);\r\n            }\r\n        }\r\n        return viewport;\r\n    }\r\n    mapViewport(viewport, changes) {\r\n        let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);\r\n        return new Viewport(this.heightMap.lineAt(from, _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.QueryType.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.QueryType.ByPos, this.state.doc, 0, 0).to);\r\n    }\r\n    // Checks if a given viewport covers the visible part of the\r\n    // document and not too much beyond that.\r\n    viewportIsAppropriate({ from, to }, bias = 0) {\r\n        if (!this.inView)\r\n            return true;\r\n        let { top } = this.heightMap.lineAt(from, _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.QueryType.ByPos, this.state.doc, 0, 0);\r\n        let { bottom } = this.heightMap.lineAt(to, _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.QueryType.ByPos, this.state.doc, 0, 0);\r\n        let { visibleTop, visibleBottom } = this;\r\n        return (from == 0 || top <= visibleTop - Math.max(10 /* MinCoverMargin */, Math.min(-bias, 250 /* MaxCoverMargin */))) &&\r\n            (to == this.state.doc.length ||\r\n                bottom >= visibleBottom + Math.max(10 /* MinCoverMargin */, Math.min(bias, 250 /* MaxCoverMargin */))) &&\r\n            (top > visibleTop - 2 * 1000 /* Margin */ && bottom < visibleBottom + 2 * 1000 /* Margin */);\r\n    }\r\n    mapLineGaps(gaps, changes) {\r\n        if (!gaps.length || changes.empty)\r\n            return gaps;\r\n        let mapped = [];\r\n        for (let gap of gaps)\r\n            if (!changes.touchesRange(gap.from, gap.to))\r\n                mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));\r\n        return mapped;\r\n    }\r\n    // Computes positions in the viewport where the start or end of a\r\n    // line should be hidden, trying to reuse existing line gaps when\r\n    // appropriate to avoid unneccesary redraws.\r\n    // Uses crude character-counting for the positioning and sizing,\r\n    // since actual DOM coordinates aren't always available and\r\n    // predictable. Relies on generous margins (see LG.Margin) to hide\r\n    // the artifacts this might produce from the user.\r\n    ensureLineGaps(current) {\r\n        let gaps = [];\r\n        // This won't work at all in predominantly right-to-left text.\r\n        if (this.defaultTextDirection != _bidi_js__WEBPACK_IMPORTED_MODULE_4__.Direction.LTR)\r\n            return gaps;\r\n        for (let line of this.viewportLines) {\r\n            if (line.length < 4000 /* DoubleMargin */)\r\n                continue;\r\n            let structure = lineStructure(line.from, line.to, this.stateDeco);\r\n            if (structure.total < 4000 /* DoubleMargin */)\r\n                continue;\r\n            let viewFrom, viewTo;\r\n            if (this.heightOracle.lineWrapping) {\r\n                let marginHeight = (2000 /* Margin */ / this.heightOracle.lineLength) * this.heightOracle.lineHeight;\r\n                viewFrom = findPosition(structure, (this.visibleTop - line.top - marginHeight) / line.height);\r\n                viewTo = findPosition(structure, (this.visibleBottom - line.top + marginHeight) / line.height);\r\n            }\r\n            else {\r\n                let totalWidth = structure.total * this.heightOracle.charWidth;\r\n                let marginWidth = 2000 /* Margin */ * this.heightOracle.charWidth;\r\n                viewFrom = findPosition(structure, (this.pixelViewport.left - marginWidth) / totalWidth);\r\n                viewTo = findPosition(structure, (this.pixelViewport.right + marginWidth) / totalWidth);\r\n            }\r\n            let outside = [];\r\n            if (viewFrom > line.from)\r\n                outside.push({ from: line.from, to: viewFrom });\r\n            if (viewTo < line.to)\r\n                outside.push({ from: viewTo, to: line.to });\r\n            let sel = this.state.selection.main;\r\n            // Make sure the gaps don't cover a selection end\r\n            if (sel.from >= line.from && sel.from <= line.to)\r\n                cutRange(outside, sel.from - 10 /* SelectionMargin */, sel.from + 10 /* SelectionMargin */);\r\n            if (!sel.empty && sel.to >= line.from && sel.to <= line.to)\r\n                cutRange(outside, sel.to - 10 /* SelectionMargin */, sel.to + 10 /* SelectionMargin */);\r\n            for (let { from, to } of outside)\r\n                if (to - from > 1000 /* HalfMargin */) {\r\n                    gaps.push(find(current, gap => gap.from >= line.from && gap.to <= line.to &&\r\n                        Math.abs(gap.from - from) < 1000 /* HalfMargin */ && Math.abs(gap.to - to) < 1000 /* HalfMargin */) ||\r\n                        new LineGap(from, to, this.gapSize(line, from, to, structure)));\r\n                }\r\n        }\r\n        return gaps;\r\n    }\r\n    gapSize(line, from, to, structure) {\r\n        let fraction = findFraction(structure, to) - findFraction(structure, from);\r\n        if (this.heightOracle.lineWrapping) {\r\n            return line.height * fraction;\r\n        }\r\n        else {\r\n            return structure.total * this.heightOracle.charWidth * fraction;\r\n        }\r\n    }\r\n    updateLineGaps(gaps) {\r\n        if (!LineGap.same(gaps, this.lineGaps)) {\r\n            this.lineGaps = gaps;\r\n            this.lineGapDeco = _decoration_js__WEBPACK_IMPORTED_MODULE_3__.Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));\r\n        }\r\n    }\r\n    computeVisibleRanges() {\r\n        let deco = this.stateDeco;\r\n        if (this.lineGaps.length)\r\n            deco = deco.concat(this.lineGapDeco);\r\n        let ranges = [];\r\n        _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSet.spans(deco, this.viewport.from, this.viewport.to, {\r\n            span(from, to) { ranges.push({ from, to }); },\r\n            point() { }\r\n        }, 20);\r\n        let changed = ranges.length != this.visibleRanges.length ||\r\n            this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);\r\n        this.visibleRanges = ranges;\r\n        return changed ? 4 /* Viewport */ : 0;\r\n    }\r\n    lineBlockAt(pos) {\r\n        return (pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||\r\n            scaleBlock(this.heightMap.lineAt(pos, _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.QueryType.ByPos, this.state.doc, 0, 0), this.scaler);\r\n    }\r\n    lineBlockAtHeight(height) {\r\n        return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.QueryType.ByHeight, this.state.doc, 0, 0), this.scaler);\r\n    }\r\n    elementAtHeight(height) {\r\n        return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.state.doc, 0, 0), this.scaler);\r\n    }\r\n    get docHeight() {\r\n        return this.scaler.toDOM(this.heightMap.height);\r\n    }\r\n    get contentHeight() {\r\n        return this.docHeight + this.paddingTop + this.paddingBottom;\r\n    }\r\n}\r\nclass Viewport {\r\n    constructor(from, to) {\r\n        this.from = from;\r\n        this.to = to;\r\n    }\r\n}\r\nfunction lineStructure(from, to, stateDeco) {\r\n    let ranges = [], pos = from, total = 0;\r\n    _state_index_js__WEBPACK_IMPORTED_MODULE_0__.RangeSet.spans(stateDeco, from, to, {\r\n        span() { },\r\n        point(from, to) {\r\n            if (from > pos) {\r\n                ranges.push({ from: pos, to: from });\r\n                total += from - pos;\r\n            }\r\n            pos = to;\r\n        }\r\n    }, 20); // We're only interested in collapsed ranges of a significant size\r\n    if (pos < to) {\r\n        ranges.push({ from: pos, to });\r\n        total += to - pos;\r\n    }\r\n    return { total, ranges };\r\n}\r\nfunction findPosition({ total, ranges }, ratio) {\r\n    if (ratio <= 0)\r\n        return ranges[0].from;\r\n    if (ratio >= 1)\r\n        return ranges[ranges.length - 1].to;\r\n    let dist = Math.floor(total * ratio);\r\n    for (let i = 0;; i++) {\r\n        let { from, to } = ranges[i], size = to - from;\r\n        if (dist <= size)\r\n            return from + dist;\r\n        dist -= size;\r\n    }\r\n}\r\nfunction findFraction(structure, pos) {\r\n    let counted = 0;\r\n    for (let { from, to } of structure.ranges) {\r\n        if (pos <= to) {\r\n            counted += pos - from;\r\n            break;\r\n        }\r\n        counted += to - from;\r\n    }\r\n    return counted / structure.total;\r\n}\r\nfunction cutRange(ranges, from, to) {\r\n    for (let i = 0; i < ranges.length; i++) {\r\n        let r = ranges[i];\r\n        if (r.from < to && r.to > from) {\r\n            let pieces = [];\r\n            if (r.from < from)\r\n                pieces.push({ from: r.from, to: from });\r\n            if (r.to > to)\r\n                pieces.push({ from: to, to: r.to });\r\n            ranges.splice(i, 1, ...pieces);\r\n            i += pieces.length - 1;\r\n        }\r\n    }\r\n}\r\nfunction find(array, f) {\r\n    for (let val of array)\r\n        if (f(val))\r\n            return val;\r\n    return undefined;\r\n}\r\n// Don't scale when the document height is within the range of what\r\n// the DOM can handle.\r\nconst IdScaler = {\r\n    toDOM(n) { return n; },\r\n    fromDOM(n) { return n; },\r\n    scale: 1\r\n};\r\n// When the height is too big (> VP.MaxDOMHeight), scale down the\r\n// regions outside the viewports so that the total height is\r\n// VP.MaxDOMHeight.\r\nclass BigScaler {\r\n    constructor(doc, heightMap, viewports) {\r\n        let vpHeight = 0, base = 0, domBase = 0;\r\n        this.viewports = viewports.map(({ from, to }) => {\r\n            let top = heightMap.lineAt(from, _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.QueryType.ByPos, doc, 0, 0).top;\r\n            let bottom = heightMap.lineAt(to, _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.QueryType.ByPos, doc, 0, 0).bottom;\r\n            vpHeight += bottom - top;\r\n            return { from, to, top, bottom, domTop: 0, domBottom: 0 };\r\n        });\r\n        this.scale = (7000000 /* MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);\r\n        for (let obj of this.viewports) {\r\n            obj.domTop = domBase + (obj.top - base) * this.scale;\r\n            domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);\r\n            base = obj.bottom;\r\n        }\r\n    }\r\n    toDOM(n) {\r\n        for (let i = 0, base = 0, domBase = 0;; i++) {\r\n            let vp = i < this.viewports.length ? this.viewports[i] : null;\r\n            if (!vp || n < vp.top)\r\n                return domBase + (n - base) * this.scale;\r\n            if (n <= vp.bottom)\r\n                return vp.domTop + (n - vp.top);\r\n            base = vp.bottom;\r\n            domBase = vp.domBottom;\r\n        }\r\n    }\r\n    fromDOM(n) {\r\n        for (let i = 0, base = 0, domBase = 0;; i++) {\r\n            let vp = i < this.viewports.length ? this.viewports[i] : null;\r\n            if (!vp || n < vp.domTop)\r\n                return base + (n - domBase) / this.scale;\r\n            if (n <= vp.domBottom)\r\n                return vp.top + (n - vp.domTop);\r\n            base = vp.bottom;\r\n            domBase = vp.domBottom;\r\n        }\r\n    }\r\n}\r\nfunction scaleBlock(block, scaler) {\r\n    if (scaler.scale == 1)\r\n        return block;\r\n    let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);\r\n    return new _heightmap_js__WEBPACK_IMPORTED_MODULE_1__.BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(b => scaleBlock(b, scaler)) : block.type);\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/dist/view/viewstate.js?");

/***/ }),

/***/ "./sys/public/js/editor/hover.js":
/*!***************************************!*\
  !*** ./sys/public/js/editor/hover.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"glslHoverRef\": () => (/* binding */ glslHoverRef)\n/* harmony export */ });\n/* harmony import */ var _dist_view_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _dist_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dist/glsl.js */ \"./sys/public/js/editor/dist/glsl.js\");\n\r\n\r\n\r\nconst glslRef = {\r\n    abs: {\r\n        type: \"buildin\",\r\n        desc: \"return the absolute value of the parameter\"\r\n    },\r\n    acos: {\r\n        type: \"buildin\",\r\n        desc: \"return the arccosine of the parameter\"\r\n    },\r\n    all: {\r\n        type: \"buildin\",\r\n        desc: \"check whether all elements of a boolean vector are true\"\r\n    },\r\n    sin: {\r\n        type: \"buildin\",\r\n        desc: \"return the sine of the parameter\"\r\n    },\r\n    gl_FragCoord: {\r\n        type: \"keyword\",\r\n        desc: \"contains the window-relative coordinates of the current fragment\"\r\n    },\r\n    gl_FragColor: {\r\n        type: \"keyword\",\r\n        desc: \"contains the window-relative coordinates of the current fragment\"\r\n    }\r\n}\r\n\r\nconst glslColor = {\r\n    keyword: \"#6478ac\",\r\n    buildin: \"#2790d2\"\r\n}\r\n\r\nconst hoverTooltipTheme = _dist_view_index_js__WEBPACK_IMPORTED_MODULE_0__.EditorView.baseTheme({\r\n    \".cm-tooltip.cm-tooltip-hover\": {\r\n        borderRadius: \"2px\",\r\n        borderBottom: \"1px solid var(--graph_icon)\",\r\n        backgroundColor: \"var(--graph_bg_thin)\",\r\n        \"& .cm-tooltip-section div\": {\r\n            fontSize: \"14px\",\r\n        }\r\n    }\r\n})\r\n\r\nconst glslHoverRef = [ (0,_dist_view_index_js__WEBPACK_IMPORTED_MODULE_0__.hoverTooltip)((view, pos, side) => {\r\n    let { from, to, text } = view.state.doc.lineAt(pos); // single line\r\n    let start = pos, end = pos;\r\n    while (start > from && /\\w/.test(text[start - from - 1])) start--;\r\n    while (end < to && /\\w/.test(text[end - from])) end++;\r\n    if (start === pos && side < 0 || end === pos && side > 0) return null;\r\n    const target = text.slice(start - from, end - from);\r\n    if (_dist_glsl_js__WEBPACK_IMPORTED_MODULE_1__.glslKeywords[target] || _dist_glsl_js__WEBPACK_IMPORTED_MODULE_1__.glslTypes[target] || _dist_glsl_js__WEBPACK_IMPORTED_MODULE_1__.glslParams[target]) return null;\r\n    return {\r\n        pos: start,\r\n        end,\r\n        above: true,\r\n        create(view) {\r\n            let ref, dom = document.createElement(\"div\");\r\n            if ((ref = glslRef[target])) {\r\n                dom.innerHTML += `<div style='margin: 7px 10px 7px 10px; display: flex;'>\r\n                                     <div style='color: ${glslColor[ref.type]};'>${ref.type} macro</div>\r\n                                     <div style=\"margin-left: 5px; color: #6643bf\">${target}</div>\r\n                                  </div>`\r\n                dom.innerHTML += `<div style=\"height: 1px; border-top: 1px solid var(--graph_icon); text-align: center;\"></div>`;\r\n                dom.innerHTML += `<div style=\"margin: 7px 10px 7px 10px; color: var(--text_mid_dark)\">${ref.desc}</div>`;\r\n            } else {\r\n                dom.innerHTML += `<div style=\"margin: 5px 10px 5px 10px; color: #538035\">ღ variable ${target}</div>`\r\n            }\r\n            return { dom };\r\n        }\r\n    }\r\n}), hoverTooltipTheme ];\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/hover.js?");

/***/ }),

/***/ "./sys/public/js/editor/instance.js":
/*!******************************************!*\
  !*** ./sys/public/js/editor/instance.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EditorState\": () => (/* reexport safe */ _dist_state_index_js__WEBPACK_IMPORTED_MODULE_2__.EditorState),\n/* harmony export */   \"EditorView\": () => (/* reexport safe */ _dist_view_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorView),\n/* harmony export */   \"glslInstance\": () => (/* binding */ glslInstance),\n/* harmony export */   \"instances\": () => (/* binding */ instances),\n/* harmony export */   \"javascriptInstance\": () => (/* binding */ javascriptInstance)\n/* harmony export */ });\n/* harmony import */ var _default_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./default.js */ \"./sys/public/js/editor/default.js\");\n/* harmony import */ var _dist_view_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dist/view/index.js */ \"./sys/public/js/editor/dist/view/index.js\");\n/* harmony import */ var _dist_state_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dist/state/index.js */ \"./sys/public/js/editor/dist/state/index.js\");\n/* harmony import */ var _dist_javascript_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dist/javascript.js */ \"./sys/public/js/editor/dist/javascript.js\");\n/* harmony import */ var _dist_glsl_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dist/glsl.js */ \"./sys/public/js/editor/dist/glsl.js\");\n/* harmony import */ var _bottom_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bottom.js */ \"./sys/public/js/editor/bottom.js\");\n/* harmony import */ var _hover_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hover.js */ \"./sys/public/js/editor/hover.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet instances = {};\r\n\r\nconst glslInstance = (name, dom, override = null) => {\r\n    if (instances[name]) return instances[name];\r\n    instances[name] = new _dist_view_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorView({\r\n        state: _dist_state_index_js__WEBPACK_IMPORTED_MODULE_2__.EditorState.create({\r\n            doc: override ? override : localStorage.getItem(name),\r\n            extensions: [\r\n                _default_js__WEBPACK_IMPORTED_MODULE_0__.defaultConfig,\r\n                _dist_view_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorView.lineWrapping, // css white-space\r\n                _dist_glsl_js__WEBPACK_IMPORTED_MODULE_4__.glsl,\r\n                _bottom_js__WEBPACK_IMPORTED_MODULE_5__.wordCounter,\r\n                _hover_js__WEBPACK_IMPORTED_MODULE_6__.glslHoverRef,\r\n                _dist_view_index_js__WEBPACK_IMPORTED_MODULE_1__.ViewPlugin.fromClass(class {\r\n                    constructor(view) { localStorage.setItem(name, view.state.doc); }\r\n                    update(update) { if (update.docChanged) localStorage.setItem(name, update.state.doc); }\r\n                    destroy() { delete instances[name]; }\r\n                })\r\n            ]\r\n        }),\r\n        parent: dom\r\n    });\r\n    return instances[name];\r\n}\r\n\r\nconst javascriptInstance = (name) => {\r\n    instances[name] = _dist_state_index_js__WEBPACK_IMPORTED_MODULE_2__.EditorState.create({\r\n        doc: localStorage.getItem(name) ||\r\n            'function hello(who = \"world\") {\\n' +\r\n            '  console.log(`Hello, ${who}!`)\\n' +\r\n            '}',\r\n        extensions: [\r\n            _default_js__WEBPACK_IMPORTED_MODULE_0__.defaultConfig,\r\n            _dist_view_index_js__WEBPACK_IMPORTED_MODULE_1__.EditorView.lineWrapping, // css white-space\r\n            (0,_dist_javascript_js__WEBPACK_IMPORTED_MODULE_3__.javascript)(),\r\n            _bottom_js__WEBPACK_IMPORTED_MODULE_5__.wordCounter,\r\n            _dist_view_index_js__WEBPACK_IMPORTED_MODULE_1__.ViewPlugin.fromClass(class {\r\n                constructor(view) { localStorage.setItem(name, view.state.doc); }\r\n                update(update) { if (update.docChanged) localStorage.setItem(name, update.state.doc); }\r\n                destroy() { delete instances[name] }\r\n            })\r\n        ]\r\n    });\r\n    return instances[name];\r\n}\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/editor/instance.js?");

/***/ }),

/***/ "./sys/public/js/element/editor/action.js":
/*!************************************************!*\
  !*** ./sys/public/js/element/editor/action.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"editor\": () => (/* binding */ editor),\n/* harmony export */   \"flowFeature\": () => (/* binding */ flowFeature)\n/* harmony export */ });\n/* harmony import */ var _flow_drawflow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../flow/drawflow.js */ \"./sys/public/js/flow/drawflow.js\");\n\r\n\r\nconst workflowElement = document.getElementById(\"workflow\");\r\nconst holderElement = document.querySelector(\".sl-editor .flow-holder\");\r\nconst createElement = document.querySelector(\".sl-editor .flow-create\");\r\n\r\nlet mobileItemSelec = '', mobileLastMove = null;\r\nlet prefabs = JSON.parse(localStorage.getItem(\"pipeline\")) || {};\r\n\r\nconst editor = new _flow_drawflow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](workflowElement);\r\neditor.reroute = true;\r\n//const dataToImport = {}\r\neditor.start();\r\n//editor.import(dataToImport);\r\n\r\nconst addNodeToFlow = (name, posX, posY) => {\r\n    if(editor.editor_mode === \"fixed\") return false;\r\n    posX = posX * (editor.precanvas.clientWidth / (editor.precanvas.clientWidth * editor.zoom)) - (editor.precanvas.getBoundingClientRect().x * (editor.precanvas.clientWidth / (editor.precanvas.clientWidth * editor.zoom)));\r\n    posY = posY * (editor.precanvas.clientHeight / (editor.precanvas.clientHeight * editor.zoom)) - (editor.precanvas.getBoundingClientRect().y * (editor.precanvas.clientHeight / (editor.precanvas.clientHeight * editor.zoom)));\r\n    switch (name) {\r\n        case \"vertex\":\r\n            const vs = `<div><div class=\"title-box\">vertex shader</div></div>`;\r\n            editor.addNode(\"vertex\", 0, 1, posX, posY, \"vertex\", {}, vs);\r\n            break;\r\n        case \"fragment\":\r\n            const fs = `<div><div class=\"title-box\">fragment shader</div></div>`;\r\n            editor.addNode(\"fragment\", 1, 0, posX, posY, \"fragment\", {}, fs);\r\n            break;\r\n        default:\r\n            if (prefabs[name]) {\r\n                const info = `<div><div class=\"title-box\"><input type=\"text\" df-name placeholder=\"RT name\"><br></div></div>`;\r\n                editor.addNode(name, 1, 1, posX, posY, \"flow-import\", {\"name\": name}, info);\r\n            }\r\n            break;\r\n    }\r\n}\r\n\r\nconst drag = event => {\r\n    if (event.type === \"touchstart\") {\r\n        mobileItemSelec = event.target.closest(\".flow-drag\").getAttribute(\"data-node\");\r\n    } else {\r\n        event.dataTransfer.setData(\"node\", event.target.getAttribute(\"data-node\"));\r\n    }\r\n}\r\n\r\nconst drop = event => {\r\n    if (event.type === \"touchend\") {\r\n        let parent = document.elementFromPoint(mobileLastMove.touches[0].clientX, mobileLastMove.touches[0].clientY).closest(\"#workflow\");\r\n        if (parent != null)\r\n            addNodeToFlow(mobileItemSelec, mobileLastMove.touches[0].clientX, mobileLastMove.touches[0].clientY);\r\n        mobileItemSelec = '';\r\n    } else {\r\n        event.preventDefault();\r\n        let data = event.dataTransfer.getData(\"node\");\r\n        addNodeToFlow(data, event.clientX, event.clientY);\r\n    }\r\n}\r\n\r\nconst prefab = (node, info) => {\r\n    let data = document.createElement(\"div\");\r\n    data.setAttribute(\"class\", \"flow-drag\");\r\n    data.setAttribute(\"draggable\", true);\r\n    data.setAttribute(\"data-node\", node);\r\n    data.innerHTML = info;\r\n    return data;\r\n};\r\n\r\nconst bindEventListener = node => {\r\n    node.addEventListener(\"dragstart\", drag);\r\n    node.addEventListener(\"touchstart\", drag, false);\r\n    node.addEventListener(\"touchend\", drop, false);\r\n    node.addEventListener(\"touchmove\", event => mobileLastMove = event, false);\r\n    holderElement.append(node);\r\n}\r\n\r\nconst flowFeature = () => {\r\n    workflowElement.addEventListener(\"drop\", drop);\r\n    workflowElement.addEventListener(\"dragover\", event => event.preventDefault());\r\n\r\n    prefabs[\"vertex\"] = prefab(\"vertex\", `<span>VS</span>`);\r\n    bindEventListener(prefabs[\"vertex\"]);\r\n    prefabs[\"fragment\"] = prefab(\"fragment\", `<span>FS</span>`);\r\n    bindEventListener(prefabs[\"fragment\"]);\r\n\r\n    createElement.addEventListener(\"click\", () => {\r\n        const name = \"buffer\" + (Object.keys(prefabs).length - 1);\r\n        prefabs[name] = prefab(name, `<span>Buffer</span>`);\r\n        bindEventListener(prefabs[name]);\r\n    });\r\n}\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/element/editor/action.js?");

/***/ }),

/***/ "./sys/public/js/element/editor/render.js":
/*!************************************************!*\
  !*** ./sys/public/js/element/editor/render.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"babylonFeature\": () => (/* binding */ babylonFeature),\n/* harmony export */   \"compile\": () => (/* binding */ compile),\n/* harmony export */   \"screenShotFeature\": () => (/* binding */ screenShotFeature)\n/* harmony export */ });\n/* harmony import */ var _editor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../editor.js */ \"./sys/public/js/editor.js\");\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state.js */ \"./sys/public/js/element/editor/state.js\");\n\r\n\r\n\r\nconst canvasElement = document.getElementById(\"render-canvas\");\r\nconst timeElement = document.querySelector(\".sl-editor .renderer-time\");\r\nconst fpsElement = document.querySelector(\".sl-editor .renderer-fps\");\r\n\r\nlet time = 0, engine, scene, camera, shaderMaterial, mesh;\r\n\r\nconst compile = () => {\r\n    if (shaderMaterial) shaderMaterial.dispose(true);\r\n\r\n    document.getElementById(\"vertexShaderCode\").innerHTML = localStorage.getItem(\"glsl_\" + _editor_js__WEBPACK_IMPORTED_MODULE_0__.structure.indexOf(\"vertex\"));\r\n    document.getElementById(\"fragmentShaderCode\").innerHTML = localStorage.getItem(\"glsl_\" + _editor_js__WEBPACK_IMPORTED_MODULE_0__.structure.indexOf(\"fragment\"));\r\n\r\n    shaderMaterial = new BABYLON.ShaderMaterial(\"shader\", scene, {\r\n        vertexElement: \"vertexShaderCode\",\r\n        fragmentElement: \"fragmentShaderCode\",\r\n    }, {\r\n        attributes: [\"position\", \"normal\", \"uv\"],\r\n        uniforms: [\"world\", \"worldView\", \"worldViewProjection\", \"view\", \"projection\"]\r\n    }, false);\r\n\r\n    let refTexture = new BABYLON.Texture(\"../../../img/editor/ref.jpg\", scene);\r\n    refTexture.wrapU = BABYLON.Texture.CLAMP_ADDRESSMODE;\r\n    refTexture.wrapV = BABYLON.Texture.CLAMP_ADDRESSMODE;\r\n\r\n    let mainTexture = new BABYLON.Texture(\"../../../img/editor/amiga.jpg\", scene);\r\n\r\n    shaderMaterial.setTexture(\"textureSampler\", mainTexture);\r\n    shaderMaterial.setTexture(\"refSampler\", refTexture);\r\n    shaderMaterial.setFloat(\"time\", 0);\r\n    shaderMaterial.setVector3(\"cameraPosition\", BABYLON.Vector3.Zero());\r\n    shaderMaterial.backFaceCulling = false;\r\n\r\n    mesh.material = shaderMaterial;\r\n\r\n    shaderMaterial.onCompiled = () => console.log(\"Compile success\");\r\n    shaderMaterial.onError = (sender, errors) => console.log(\"Fail\");\r\n}\r\n\r\nconst screenShotFeature = (width, height) => {\r\n    BABYLON.Tools.CreateScreenshot(engine, camera, { width: width, height: height }, function (data) {\r\n        console.log(data);\r\n    });\r\n}\r\n\r\nconst babylonFeature = () => {\r\n    if (BABYLON.Engine.isSupported()) {\r\n        engine = new BABYLON.Engine(canvasElement, true);\r\n        scene = new BABYLON.Scene(engine);\r\n\r\n        mesh = BABYLON.Mesh.CreateTorusKnot(\"mesh\", 2, 0.5, 128, 64, 2, 3, scene)\r\n\r\n        camera = new BABYLON.ArcRotateCamera(\"Camera\", 0, Math.PI / 2, 12, BABYLON.Vector3.Zero(), scene);\r\n\r\n        camera.attachControl(canvasElement, false);\r\n        camera.lowerRadiusLimit = 1;\r\n        camera.minZ = 1.0;\r\n\r\n        engine.runRenderLoop(function () {\r\n            if (_state_js__WEBPACK_IMPORTED_MODULE_1__.playState === false) return;\r\n            if (shaderMaterial) {\r\n                shaderMaterial.setFloat(\"time\", time);\r\n                time += 0.02;\r\n                shaderMaterial.setVector3(\"cameraPosition\", camera.position);\r\n            }\r\n            scene.render();\r\n        });\r\n\r\n        window.addEventListener(\"resize\", () => engine.resize());\r\n\r\n        setInterval(() => {\r\n            timeElement.textContent = isNaN(time) ? \"--\" : time.toFixed(1);\r\n            fpsElement.textContent = engine.getFps().toFixed() + \" fps\";\r\n        }, 100);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/element/editor/render.js?");

/***/ }),

/***/ "./sys/public/js/element/editor/state.js":
/*!***********************************************!*\
  !*** ./sys/public/js/element/editor/state.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"playState\": () => (/* binding */ flip),\n/* harmony export */   \"stateFeature\": () => (/* binding */ stateFeature)\n/* harmony export */ });\nconst pause = \"M11,10 L18,13.74 18,22.28 11,26 M18,13.74 L26,18 26,18 18,22.28\", play = \"M11,10 L17,10 17,26 11,26 M20,10 L26,10 26,26 20,26\";\r\n\r\nconst anim = document.getElementById(\"state-animation\");\r\n\r\nlet flip = true;\r\n\r\nconst stateFeature = () => {\r\n    document.querySelector(\".sl-editor .renderer-state\").addEventListener(\"click\", () => {\r\n        flip = !flip;\r\n        anim.setAttribute(\"from\", flip ? pause : play);\r\n        anim.setAttribute(\"to\", flip ? play : pause);\r\n        anim.beginElement();\r\n    });\r\n}\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/element/editor/state.js?");

/***/ }),

/***/ "./sys/public/js/element/editor/template.js":
/*!**************************************************!*\
  !*** ./sys/public/js/element/editor/template.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"base\": () => (/* binding */ base),\n/* harmony export */   \"baseFs\": () => (/* binding */ baseFs),\n/* harmony export */   \"baseVs\": () => (/* binding */ baseVs)\n/* harmony export */ });\nconst base =\r\n    'precision highp float;\\n' +\r\n    'attribute vec3 position;\\n' +\r\n    'attribute vec2 uv;\\n' +\r\n    'void main(void) {\\n' +\r\n    '  \\n' +\r\n    '}'\r\n\r\nconst baseVs =\r\n    'precision highp float;\\n' +\r\n    'attribute vec3 position;\\n' +\r\n    'attribute vec2 uv;\\n' +\r\n    'uniform mat4 worldViewProjection;\\n' +\r\n    'varying vec2 vUV;\\n' +\r\n    'void main(void) {\\n' +\r\n    '  gl_Position = worldViewProjection * vec4(position, 1.0);\\n' +\r\n    '  vUV = uv;\\n' +\r\n    '}'\r\n\r\nconst baseFs =\r\n    'precision highp float;\\n' +\r\n    'varying vec2 vUV;\\n' +\r\n    'uniform sampler2D textureSampler;\\n' +\r\n    'void main(void) {\\n' +\r\n    '  gl_FragColor = texture2D(textureSampler, vUV);\\n' +\r\n    '}'\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/element/editor/template.js?");

/***/ }),

/***/ "./sys/public/js/element/shared/search.js":
/*!************************************************!*\
  !*** ./sys/public/js/element/shared/search.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"searchFeature\": () => (/* binding */ searchFeature)\n/* harmony export */ });\nconst centerElement = document.querySelector(\".sl-nav .container-extend\");\r\nconst outerElement = document.querySelector(\".sl-nav .bar-outer\");\r\nconst panelElement = document.querySelector(\".sl-nav .search-panel\");\r\nconst searchElement = document.querySelector(\"#nav-search\");\r\n\r\nlet onPanel = {\r\n    inputFocusFlag: false,\r\n    set inputFocus(value) { this.inputFocusFlag = value; this.update(); },\r\n    panelFocusFlag: false,\r\n    set panelFocus(value) { this.panelFocusFlag = value; this.update(); },\r\n    cache: false,\r\n    update: function () {\r\n        const flag = (this.inputFocusFlag || this.panelFocusFlag);\r\n        if (flag === this.cache) return;\r\n        if ((this.cache = flag)) {\r\n            centerElement.setAttribute(\"class\", \"container-extend is-focus\");\r\n            outerElement.setAttribute(\"style\", \"display: block\");\r\n            searchElement.setAttribute(\"class\", \"is-focus\");\r\n            searchElement.setAttribute(\"style\", \"border-radius: 8px 8px 0 0\");\r\n            panelElement.removeAttribute(\"style\");\r\n        } else {\r\n            centerElement.setAttribute(\"class\", \"container-extend\");\r\n            outerElement.setAttribute(\"style\", \"display: none\");\r\n            searchElement.removeAttribute(\"class\");\r\n            searchElement.setAttribute(\"style\", \"border-radius: 8px\");\r\n            panelElement.setAttribute(\"style\", \"display: none\");\r\n        }\r\n    }\r\n}\r\n\r\nconst searchFeature = () => {\r\n    document.querySelector(\"#nav-search .nav-search-clean\").addEventListener(\"click\", () => document.querySelector(\"#nav-search .nav-search-input\").value = \"\");\r\n    document.querySelector(\"#nav-search .nav-search-input\").addEventListener(\"focusout\", () => onPanel.inputFocus = false);\r\n    document.querySelector(\"#nav-search .nav-search-input\").addEventListener(\"focusin\", () => onPanel.inputFocus = true);\r\n    document.querySelector(\"#nav-search .nav-search-input\").addEventListener(\"input\", () => {\r\n\r\n    })\r\n    outerElement.addEventListener(\"click\", () => onPanel.panelFocus = false);\r\n    panelElement.addEventListener(\"mouseover\", () => onPanel.panelFocus = true);\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/element/shared/search.js?");

/***/ }),

/***/ "./sys/public/js/element/shared/user.js":
/*!**********************************************!*\
  !*** ./sys/public/js/element/shared/user.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"userFeature\": () => (/* binding */ userFeature)\n/* harmony export */ });\nconst userHolderElement = document.querySelector(\".sl-nav .right-entry-item:first-child\");\r\nconst avatarElement = document.querySelector(\".sl-nav .avatar-container\");\r\nconst userinfoElement = document.querySelector(\".sl-nav .avatar-bottom\");\r\n\r\nlet avatarLock = true, avatarLockId = -1;\r\n\r\nconst isParent = (refNode, otherNode) => {\r\n    if (otherNode == null) return false; // if switch platform\r\n    let parent = otherNode.parentNode;\r\n    do {\r\n        if (refNode === parent) return true;\r\n        parent = parent.parentNode;\r\n    } while (parent);\r\n    return false;\r\n}\r\n\r\nconst enterAvatar = event => {\r\n    if (!isParent(avatarElement, event.relatedTarget) && event.target === avatarElement && avatarLock) {\r\n        avatarLock = false;\r\n        avatarElement.setAttribute(\"class\", \"avatar-container large-avatar\");\r\n        userinfoElement.setAttribute(\"class\", \"avatar-bottom\");\r\n        userinfoElement.setAttribute(\"style\", \"padding-top: 8px;\");\r\n        setTimeout(() => avatarLock = true, 300);\r\n    }\r\n}\r\n\r\nconst leaveAvatar = event => {\r\n    if (!isParent(userHolderElement, event.relatedTarget) && avatarLockId < 0) {\r\n        if (avatarLock) {\r\n            avatarLock = false;\r\n            avatarElement.setAttribute(\"class\", \"avatar-container small-avatar\");\r\n            userinfoElement.setAttribute(\"class\", \"avatar-bottom avatar-bottom-transition\");\r\n            setTimeout(() => {\r\n                userinfoElement.setAttribute(\"style\", \"padding-top: 8px; display: none\");\r\n                avatarLock = true;\r\n            }, 300);\r\n        } else {\r\n            avatarLockId = setTimeout(() => { avatarLockId = -1; leaveAvatar(event); }, 300)\r\n        }\r\n    }\r\n}\r\n\r\nconst userFeature = (user) => {\r\n    if (user != null) {\r\n        avatarElement.addEventListener(\"mouseover\", enterAvatar);\r\n        userHolderElement.addEventListener(\"mouseout\", leaveAvatar);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/element/shared/user.js?");

/***/ }),

/***/ "./sys/public/js/flow/drawflow.js":
/*!****************************************!*\
  !*** ./sys/public/js/flow/drawflow.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Drawflow)\n/* harmony export */ });\nclass Drawflow {\r\n    constructor(container, render = null, parent = null) {\r\n        this.events = {};\r\n        this.container = container;\r\n        this.precanvas = null;\r\n        this.nodeId = 1;\r\n        this.ele_selected = null;\r\n        this.node_selected = null;\r\n        this.drag = false;\r\n        this.reroute = false;\r\n        this.reroute_fix_curvature = false;\r\n        this.curvature = 0.5;\r\n        this.reroute_curvature_start_end = 0.5;\r\n        this.reroute_curvature = 0.5;\r\n        this.reroute_width = 6;\r\n        this.drag_point = false;\r\n        this.editor_selected = false;\r\n        this.connection = false;\r\n        this.connection_ele = null;\r\n        this.connection_selected = null;\r\n        this.canvas_x = 0;\r\n        this.canvas_y = 0;\r\n        this.pos_x = 0;\r\n        this.pos_x_start = 0;\r\n        this.pos_y = 0;\r\n        this.pos_y_start = 0;\r\n        this.mouse_x = 0;\r\n        this.mouse_y = 0;\r\n        this.line_path = 5;\r\n        this.first_click = null;\r\n        this.force_first_input = false;\r\n        this.draggable_inputs = true;\r\n        this.useuuid = false;\r\n        this.parent = parent;\r\n\r\n        this.noderegister = {};\r\n        this.render = render;\r\n        this.drawflow = { \"drawflow\": { \"Home\": { \"data\": {} }}};\r\n        // Configurable options\r\n        this.module = 'Home';\r\n        this.editor_mode = 'edit';\r\n        this.zoom = 1;\r\n        this.zoom_max = 1.6;\r\n        this.zoom_min = 0.5;\r\n        this.zoom_value = 0.1;\r\n        this.zoom_last_value = 1;\r\n\r\n        // Mobile\r\n        this.evCache = new Array();\r\n        this.prevDiff = -1;\r\n    }\r\n\r\n    start () {\r\n        // console.info(\"Start Drawflow!!\");\r\n        this.container.classList.add(\"parent-drawflow\");\r\n        this.container.tabIndex = 0;\r\n        this.precanvas = document.createElement('div');\r\n        this.precanvas.classList.add(\"drawflow\");\r\n        this.container.appendChild(this.precanvas);\r\n\r\n        /* Mouse and Touch Actions */\r\n        this.container.addEventListener('mouseup', this.dragEnd.bind(this));\r\n        this.container.addEventListener('mousemove', this.position.bind(this));\r\n        this.container.addEventListener('mousedown', this.click.bind(this) );\r\n\r\n        this.container.addEventListener('touchend', this.dragEnd.bind(this));\r\n        this.container.addEventListener('touchmove', this.position.bind(this));\r\n        this.container.addEventListener('touchstart', this.click.bind(this));\r\n\r\n        /* Context Menu */\r\n        this.container.addEventListener('contextmenu', this.contextmenu.bind(this));\r\n        /* Delete */\r\n        this.container.addEventListener('keydown', this.key.bind(this));\r\n\r\n        /* Zoom Mouse */\r\n        this.container.addEventListener('wheel', this.zoom_enter.bind(this));\r\n        /* Update data Nodes */\r\n        this.container.addEventListener('input', this.updateNodeValue.bind(this));\r\n\r\n        this.container.addEventListener('dblclick', this.dblclick.bind(this));\r\n        /* Mobile zoom */\r\n        this.container.onpointerdown = this.pointerdown_handler.bind(this);\r\n        this.container.onpointermove = this.pointermove_handler.bind(this);\r\n        this.container.onpointerup = this.pointerup_handler.bind(this);\r\n        this.container.onpointercancel = this.pointerup_handler.bind(this);\r\n        this.container.onpointerout = this.pointerup_handler.bind(this);\r\n        this.container.onpointerleave = this.pointerup_handler.bind(this);\r\n\r\n        this.load();\r\n    }\r\n\r\n    /* Mobile zoom */\r\n    pointerdown_handler(ev) {\r\n        this.evCache.push(ev);\r\n    }\r\n\r\n    pointermove_handler(ev) {\r\n        for (var i = 0; i < this.evCache.length; i++) {\r\n            if (ev.pointerId == this.evCache[i].pointerId) {\r\n                this.evCache[i] = ev;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (this.evCache.length == 2) {\r\n            // Calculate the distance between the two pointers\r\n            var curDiff = Math.abs(this.evCache[0].clientX - this.evCache[1].clientX);\r\n\r\n            if (this.prevDiff > 100) {\r\n                if (curDiff > this.prevDiff) {\r\n                    // The distance between the two pointers has increased\r\n\r\n                    this.zoom_in();\r\n                }\r\n                if (curDiff < this.prevDiff) {\r\n                    // The distance between the two pointers has decreased\r\n                    this.zoom_out();\r\n                }\r\n            }\r\n            this.prevDiff = curDiff;\r\n        }\r\n    }\r\n\r\n    pointerup_handler(ev) {\r\n        this.remove_event(ev);\r\n        if (this.evCache.length < 2) {\r\n            this.prevDiff = -1;\r\n        }\r\n    }\r\n    remove_event(ev) {\r\n        // Remove this event from the target's cache\r\n        for (var i = 0; i < this.evCache.length; i++) {\r\n            if (this.evCache[i].pointerId == ev.pointerId) {\r\n                this.evCache.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    /* End Mobile Zoom */\r\n    load() {\r\n        for (var key in this.drawflow.drawflow[this.module].data) {\r\n            this.addNodeImport(this.drawflow.drawflow[this.module].data[key], this.precanvas);\r\n        }\r\n\r\n        if(this.reroute) {\r\n            for (var key in this.drawflow.drawflow[this.module].data) {\r\n                this.addRerouteImport(this.drawflow.drawflow[this.module].data[key]);\r\n            }\r\n        }\r\n\r\n        for (var key in this.drawflow.drawflow[this.module].data) {\r\n            this.updateConnectionNodes('node-'+key);\r\n        }\r\n\r\n        const editor = this.drawflow.drawflow;\r\n        let number = 1;\r\n        Object.keys(editor).map(function(moduleName, index) {\r\n            Object.keys(editor[moduleName].data).map(function(id, index2) {\r\n                if(parseInt(id) >= number) {\r\n                    number = parseInt(id)+1;\r\n                }\r\n            });\r\n        });\r\n        this.nodeId = number;\r\n    }\r\n\r\n    removeReouteConnectionSelected(){\r\n        this.dispatch('connectionUnselected', true);\r\n        if(this.reroute_fix_curvature) {\r\n            this.connection_selected.parentElement.querySelectorAll(\".main-path\").forEach((item, i) => {\r\n                item.classList.remove(\"selected\");\r\n            });\r\n        }\r\n    }\r\n\r\n    click(e) {\r\n        this.dispatch('click', e);\r\n        if(this.editor_mode === 'fixed') {\r\n            //return false;\r\n            e.preventDefault();\r\n            if(e.target.classList[0] === 'parent-drawflow' || e.target.classList[0] === 'drawflow') {\r\n                this.ele_selected = e.target.closest(\".parent-drawflow\");\r\n            } else {\r\n                return false;\r\n            }\r\n        } else if(this.editor_mode === 'view') {\r\n            if(e.target.closest(\".drawflow\") != null || e.target.matches('.parent-drawflow')) {\r\n                this.ele_selected = e.target.closest(\".parent-drawflow\");\r\n                e.preventDefault();\r\n            }\r\n        } else {\r\n            this.first_click = e.target;\r\n            this.ele_selected = e.target;\r\n            if(e.button === 0) {\r\n                this.contextmenuDel();\r\n            }\r\n\r\n            if(e.target.closest(\".drawflow_content_node\") != null) {\r\n                this.ele_selected = e.target.closest(\".drawflow_content_node\").parentElement;\r\n            }\r\n        }\r\n        switch (this.ele_selected.classList[0]) {\r\n            case 'drawflow-node':\r\n                if(this.node_selected != null) {\r\n                    this.node_selected.classList.remove(\"selected\");\r\n                    if(this.node_selected != this.ele_selected) {\r\n                        this.dispatch('nodeUnselected', true);\r\n                    }\r\n                }\r\n                if(this.connection_selected != null) {\r\n                    this.connection_selected.classList.remove(\"selected\");\r\n                    this.removeReouteConnectionSelected();\r\n                    this.connection_selected = null;\r\n                }\r\n                if(this.node_selected != this.ele_selected) {\r\n                    this.dispatch('nodeSelected', this.ele_selected.id.slice(5));\r\n                }\r\n                this.node_selected = this.ele_selected;\r\n                this.node_selected.classList.add(\"selected\");\r\n                if(!this.draggable_inputs) {\r\n                    if(e.target.tagName !== 'INPUT' && e.target.tagName !== 'TEXTAREA' && e.target.tagName !== 'SELECT' && e.target.hasAttribute('contenteditable') !== true) {\r\n                        this.drag = true;\r\n                    }\r\n                } else {\r\n                    if(e.target.tagName !== 'SELECT') {\r\n                        this.drag = true;\r\n                    }\r\n                }\r\n                break;\r\n            case 'output':\r\n                this.connection = true;\r\n                if(this.node_selected != null) {\r\n                    this.node_selected.classList.remove(\"selected\");\r\n                    this.node_selected = null;\r\n                    this.dispatch('nodeUnselected', true);\r\n                }\r\n                if(this.connection_selected != null) {\r\n                    this.connection_selected.classList.remove(\"selected\");\r\n                    this.removeReouteConnectionSelected();\r\n                    this.connection_selected = null;\r\n                }\r\n                this.drawConnection(e.target);\r\n                break;\r\n            case 'parent-drawflow':\r\n                if(this.node_selected != null) {\r\n                    this.node_selected.classList.remove(\"selected\");\r\n                    this.node_selected = null;\r\n                    this.dispatch('nodeUnselected', true);\r\n                }\r\n                if(this.connection_selected != null) {\r\n                    this.connection_selected.classList.remove(\"selected\");\r\n                    this.removeReouteConnectionSelected();\r\n                    this.connection_selected = null;\r\n                }\r\n                this.editor_selected = true;\r\n                break;\r\n            case 'drawflow':\r\n                if(this.node_selected != null) {\r\n                    this.node_selected.classList.remove(\"selected\");\r\n                    this.node_selected = null;\r\n                    this.dispatch('nodeUnselected', true);\r\n                }\r\n                if(this.connection_selected != null) {\r\n                    this.connection_selected.classList.remove(\"selected\");\r\n                    this.removeReouteConnectionSelected();\r\n                    this.connection_selected = null;\r\n                }\r\n                this.editor_selected = true;\r\n                break;\r\n            case 'main-path':\r\n                if(this.node_selected != null) {\r\n                    this.node_selected.classList.remove(\"selected\");\r\n                    this.node_selected = null;\r\n                    this.dispatch('nodeUnselected', true);\r\n                }\r\n                if(this.connection_selected != null) {\r\n                    this.connection_selected.classList.remove(\"selected\");\r\n                    this.removeReouteConnectionSelected();\r\n                    this.connection_selected = null;\r\n                }\r\n                this.connection_selected = this.ele_selected;\r\n                this.connection_selected.classList.add(\"selected\");\r\n                const listclassConnection = this.connection_selected.parentElement.classList;\r\n                this.dispatch('connectionSelected', { output_id: listclassConnection[2].slice(14), input_id: listclassConnection[1].slice(13), output_class: listclassConnection[3], input_class: listclassConnection[4] });\r\n                if(this.reroute_fix_curvature) {\r\n                    this.connection_selected.parentElement.querySelectorAll(\".main-path\").forEach((item, i) => {\r\n                        item.classList.add(\"selected\");\r\n                    });\r\n                }\r\n                break;\r\n            case 'point':\r\n                this.drag_point = true;\r\n                this.ele_selected.classList.add(\"selected\");\r\n                break;\r\n            case 'drawflow-delete':\r\n                if(this.node_selected ) {\r\n                    this.removeNodeId(this.node_selected.id);\r\n                }\r\n\r\n                if(this.connection_selected) {\r\n                    this.removeConnection();\r\n                }\r\n\r\n                if(this.node_selected != null) {\r\n                    this.node_selected.classList.remove(\"selected\");\r\n                    this.node_selected = null;\r\n                    this.dispatch('nodeUnselected', true);\r\n                }\r\n                if(this.connection_selected != null) {\r\n                    this.connection_selected.classList.remove(\"selected\");\r\n                    this.removeReouteConnectionSelected();\r\n                    this.connection_selected = null;\r\n                }\r\n\r\n                break;\r\n            default:\r\n        }\r\n        if (e.type === \"touchstart\") {\r\n            this.pos_x = e.touches[0].clientX;\r\n            this.pos_x_start = e.touches[0].clientX;\r\n            this.pos_y = e.touches[0].clientY;\r\n            this.pos_y_start = e.touches[0].clientY;\r\n        } else {\r\n            this.pos_x = e.clientX;\r\n            this.pos_x_start = e.clientX;\r\n            this.pos_y = e.clientY;\r\n            this.pos_y_start = e.clientY;\r\n        }\r\n        if (this.drag || ['input','output','main-path'].includes(this.ele_selected.classList[0])) {\r\n            e.preventDefault();\r\n        }\r\n        this.dispatch('clickEnd', e);\r\n    }\r\n\r\n    position(e) {\r\n        if (e.type === \"touchmove\") {\r\n            var e_pos_x = e.touches[0].clientX;\r\n            var e_pos_y = e.touches[0].clientY;\r\n        } else {\r\n            var e_pos_x = e.clientX;\r\n            var e_pos_y = e.clientY;\r\n        }\r\n\r\n\r\n        if(this.connection) {\r\n            this.updateConnection(e_pos_x, e_pos_y);\r\n        }\r\n        if(this.editor_selected) {\r\n            x =  this.canvas_x + (-(this.pos_x - e_pos_x))\r\n            y = this.canvas_y + (-(this.pos_y - e_pos_y))\r\n            this.dispatch('translate', { x: x, y: y});\r\n            this.precanvas.style.transform = \"translate(\"+x+\"px, \"+y+\"px) scale(\"+this.zoom+\")\";\r\n        }\r\n        if(this.drag) {\r\n\r\n            var x = (this.pos_x - e_pos_x) * this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom);\r\n            var y = (this.pos_y - e_pos_y) * this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom);\r\n            this.pos_x = e_pos_x;\r\n            this.pos_y = e_pos_y;\r\n\r\n            this.ele_selected.style.top = (this.ele_selected.offsetTop - y) + \"px\";\r\n            this.ele_selected.style.left = (this.ele_selected.offsetLeft - x) + \"px\";\r\n\r\n            this.drawflow.drawflow[this.module].data[this.ele_selected.id.slice(5)].pos_x = (this.ele_selected.offsetLeft - x);\r\n            this.drawflow.drawflow[this.module].data[this.ele_selected.id.slice(5)].pos_y = (this.ele_selected.offsetTop - y);\r\n\r\n            this.updateConnectionNodes(this.ele_selected.id)\r\n        }\r\n\r\n        if(this.drag_point) {\r\n\r\n            var x = (this.pos_x - e_pos_x) * this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom);\r\n            var y = (this.pos_y - e_pos_y) * this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom);\r\n            this.pos_x = e_pos_x;\r\n            this.pos_y = e_pos_y;\r\n\r\n            var pos_x = this.pos_x * ( this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - (this.precanvas.getBoundingClientRect().x * ( this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)));\r\n            var pos_y = this.pos_y * ( this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - (this.precanvas.getBoundingClientRect().y * ( this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)));\r\n\r\n            this.ele_selected.setAttributeNS(null, 'cx', pos_x);\r\n            this.ele_selected.setAttributeNS(null, 'cy', pos_y);\r\n\r\n            const nodeUpdate = this.ele_selected.parentElement.classList[2].slice(9);\r\n            const nodeUpdateIn = this.ele_selected.parentElement.classList[1].slice(13);\r\n            const output_class = this.ele_selected.parentElement.classList[3];\r\n            const input_class = this.ele_selected.parentElement.classList[4];\r\n\r\n            let numberPointPosition = Array.from(this.ele_selected.parentElement.children).indexOf(this.ele_selected)-1;\r\n\r\n            if(this.reroute_fix_curvature) {\r\n                const numberMainPath = this.ele_selected.parentElement.querySelectorAll(\".main-path\").length-1;\r\n                numberPointPosition -= numberMainPath;\r\n                if(numberPointPosition < 0) {\r\n                    numberPointPosition = 0;\r\n                }\r\n            }\r\n\r\n            const nodeId = nodeUpdate.slice(5);\r\n            const searchConnection = this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections.findIndex(function(item,i) {\r\n                return item.node ===  nodeUpdateIn && item.output === input_class;\r\n            });\r\n\r\n            this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points[numberPointPosition] = { pos_x: pos_x, pos_y: pos_y };\r\n\r\n            const parentSelected = this.ele_selected.parentElement.classList[2].slice(9);\r\n\r\n            this.updateConnectionNodes(parentSelected);\r\n        }\r\n\r\n        if (e.type === \"touchmove\") {\r\n            this.mouse_x = e_pos_x;\r\n            this.mouse_y = e_pos_y;\r\n        }\r\n        this.dispatch('mouseMove', {x: e_pos_x,y: e_pos_y });\r\n    }\r\n\r\n    dragEnd(e) {\r\n        if (e.type === \"touchend\") {\r\n            var e_pos_x = this.mouse_x;\r\n            var e_pos_y = this.mouse_y;\r\n            var ele_last = document.elementFromPoint(e_pos_x, e_pos_y);\r\n        } else {\r\n            var e_pos_x = e.clientX;\r\n            var e_pos_y = e.clientY;\r\n            var ele_last = e.target;\r\n        }\r\n\r\n        if(this.drag) {\r\n            if(this.pos_x_start != e_pos_x || this.pos_y_start != e_pos_y) {\r\n                this.dispatch('nodeMoved', this.ele_selected.id.slice(5));\r\n            }\r\n        }\r\n\r\n        if(this.drag_point) {\r\n            this.ele_selected.classList.remove(\"selected\");\r\n            if(this.pos_x_start != e_pos_x || this.pos_y_start != e_pos_y) {\r\n                this.dispatch('rerouteMoved', this.ele_selected.parentElement.classList[2].slice(14));\r\n            }\r\n        }\r\n\r\n        if(this.editor_selected) {\r\n            this.canvas_x = this.canvas_x + (-(this.pos_x - e_pos_x));\r\n            this.canvas_y = this.canvas_y + (-(this.pos_y - e_pos_y));\r\n            this.editor_selected = false;\r\n        }\r\n        if(this.connection === true) {\r\n            if(ele_last.classList[0] === 'input' || (this.force_first_input && (ele_last.closest(\".drawflow_content_node\") != null || ele_last.classList[0] === 'drawflow-node'))) {\r\n\r\n                if(this.force_first_input && (ele_last.closest(\".drawflow_content_node\") != null || ele_last.classList[0] === 'drawflow-node')) {\r\n                    if(ele_last.closest(\".drawflow_content_node\") != null) {\r\n                        var input_id = ele_last.closest(\".drawflow_content_node\").parentElement.id;\r\n                    } else {\r\n                        var input_id = ele_last.id;\r\n                    }\r\n                    if(Object.keys(this.getNodeFromId(input_id.slice(5)).inputs).length === 0) {\r\n                        var input_class = false;\r\n                    } else {\r\n                        var input_class = \"input_1\";\r\n                    }\r\n\r\n\r\n                } else {\r\n                    // Fix connection;\r\n                    var input_id = ele_last.parentElement.parentElement.id;\r\n                    var input_class = ele_last.classList[1];\r\n                }\r\n                var output_id = this.ele_selected.parentElement.parentElement.id;\r\n                var output_class = this.ele_selected.classList[1];\r\n\r\n                if(output_id !== input_id && input_class !== false) {\r\n\r\n                    if(this.container.querySelectorAll('.connection.node_in_'+input_id+'.node_out_'+output_id+'.'+output_class+'.'+input_class).length === 0) {\r\n                        // Conection no exist save connection\r\n\r\n                        this.connection_ele.classList.add(\"node_in_\"+input_id);\r\n                        this.connection_ele.classList.add(\"node_out_\"+output_id);\r\n                        this.connection_ele.classList.add(output_class);\r\n                        this.connection_ele.classList.add(input_class);\r\n                        var id_input = input_id.slice(5);\r\n                        var id_output = output_id.slice(5);\r\n\r\n                        this.drawflow.drawflow[this.module].data[id_output].outputs[output_class].connections.push( {\"node\": id_input, \"output\": input_class});\r\n                        this.drawflow.drawflow[this.module].data[id_input].inputs[input_class].connections.push( {\"node\": id_output, \"input\": output_class});\r\n                        this.updateConnectionNodes('node-'+id_output);\r\n                        this.updateConnectionNodes('node-'+id_input);\r\n                        this.dispatch('connectionCreated', { output_id: id_output, input_id: id_input, output_class:  output_class, input_class: input_class});\r\n\r\n                    } else {\r\n                        this.dispatch('connectionCancel', true);\r\n                        this.connection_ele.remove();\r\n                    }\r\n\r\n                    this.connection_ele = null;\r\n                } else {\r\n                    // Connection exists Remove Connection;\r\n                    this.dispatch('connectionCancel', true);\r\n                    this.connection_ele.remove();\r\n                    this.connection_ele = null;\r\n                }\r\n\r\n            } else {\r\n                // Remove Connection;\r\n                this.dispatch('connectionCancel', true);\r\n                this.connection_ele.remove();\r\n                this.connection_ele = null;\r\n            }\r\n        }\r\n\r\n        this.drag = false;\r\n        this.drag_point = false;\r\n        this.connection = false;\r\n        this.ele_selected = null;\r\n        this.editor_selected = false;\r\n\r\n        this.dispatch('mouseUp', e);\r\n    }\r\n    contextmenu(e) {\r\n        this.dispatch('contextmenu', e);\r\n        e.preventDefault();\r\n        if(this.editor_mode === 'fixed' || this.editor_mode === 'view') {\r\n            return false;\r\n        }\r\n        if(this.precanvas.getElementsByClassName(\"drawflow-delete\").length) {\r\n            this.precanvas.getElementsByClassName(\"drawflow-delete\")[0].remove()\r\n        };\r\n        if(this.node_selected || this.connection_selected) {\r\n            var deletebox = document.createElement('div');\r\n            deletebox.classList.add(\"drawflow-delete\");\r\n            deletebox.innerHTML = \"x\";\r\n            if(this.node_selected) {\r\n                this.node_selected.appendChild(deletebox);\r\n\r\n            }\r\n            if(this.connection_selected) {\r\n                deletebox.style.top = e.clientY * ( this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - (this.precanvas.getBoundingClientRect().y *  ( this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) ) + \"px\";\r\n                deletebox.style.left = e.clientX * ( this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - (this.precanvas.getBoundingClientRect().x *  ( this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) ) + \"px\";\r\n\r\n                this.precanvas.appendChild(deletebox);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n    contextmenuDel() {\r\n        if(this.precanvas.getElementsByClassName(\"drawflow-delete\").length) {\r\n            this.precanvas.getElementsByClassName(\"drawflow-delete\")[0].remove()\r\n        };\r\n    }\r\n\r\n    key(e) {\r\n        this.dispatch('keydown', e);\r\n        if(this.editor_mode === 'fixed' || this.editor_mode === 'view') {\r\n            return false;\r\n        }\r\n        if (e.key === 'Delete' || (e.key === 'Backspace' && e.metaKey)) {\r\n            if(this.node_selected != null) {\r\n                if(this.first_click.tagName !== 'INPUT' && this.first_click.tagName !== 'TEXTAREA' && this.first_click.hasAttribute('contenteditable') !== true) {\r\n                    this.removeNodeId(this.node_selected.id);\r\n                }\r\n            }\r\n            if(this.connection_selected != null) {\r\n                this.removeConnection();\r\n            }\r\n        }\r\n    }\r\n\r\n    zoom_enter(event, delta) {\r\n        if (event.ctrlKey) {\r\n            event.preventDefault()\r\n            if(event.deltaY > 0) {\r\n                // Zoom Out\r\n                this.zoom_out();\r\n            } else {\r\n                // Zoom In\r\n                this.zoom_in();\r\n            }\r\n        }\r\n    }\r\n    zoom_refresh(){\r\n        this.dispatch('zoom', this.zoom);\r\n        this.canvas_x = (this.canvas_x / this.zoom_last_value) * this.zoom;\r\n        this.canvas_y = (this.canvas_y / this.zoom_last_value) * this.zoom;\r\n        this.zoom_last_value = this.zoom;\r\n        this.precanvas.style.transform = \"translate(\"+this.canvas_x+\"px, \"+this.canvas_y+\"px) scale(\"+this.zoom+\")\";\r\n    }\r\n    zoom_in() {\r\n        if(this.zoom < this.zoom_max) {\r\n            this.zoom+=this.zoom_value;\r\n            this.zoom_refresh();\r\n        }\r\n    }\r\n    zoom_out() {\r\n        if(this.zoom > this.zoom_min) {\r\n            this.zoom-=this.zoom_value;\r\n            this.zoom_refresh();\r\n        }\r\n    }\r\n    zoom_reset(){\r\n        if(this.zoom != 1) {\r\n            this.zoom = 1;\r\n            this.zoom_refresh();\r\n        }\r\n    }\r\n\r\n    createCurvature(start_pos_x, start_pos_y, end_pos_x, end_pos_y, curvature_value, type) {\r\n        var line_x = start_pos_x;\r\n        var line_y = start_pos_y;\r\n        var x = end_pos_x;\r\n        var y = end_pos_y;\r\n        var curvature = curvature_value;\r\n        //type openclose open close other\r\n        switch (type) {\r\n            case 'open':\r\n                if(start_pos_x >= end_pos_x) {\r\n                    var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n                    var hx2 = x - Math.abs(x - line_x) * (curvature*-1);\r\n                } else {\r\n                    var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n                    var hx2 = x - Math.abs(x - line_x) * curvature;\r\n                }\r\n                return ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;\r\n\r\n                break\r\n            case 'close':\r\n                if(start_pos_x >= end_pos_x) {\r\n                    var hx1 = line_x + Math.abs(x - line_x) * (curvature*-1);\r\n                    var hx2 = x - Math.abs(x - line_x) * curvature;\r\n                } else {\r\n                    var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n                    var hx2 = x - Math.abs(x - line_x) * curvature;\r\n                }\r\n                return ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;\r\n                break;\r\n            case 'other':\r\n                if(start_pos_x >= end_pos_x) {\r\n                    var hx1 = line_x + Math.abs(x - line_x) * (curvature*-1);\r\n                    var hx2 = x - Math.abs(x - line_x) * (curvature*-1);\r\n                } else {\r\n                    var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n                    var hx2 = x - Math.abs(x - line_x) * curvature;\r\n                }\r\n                return ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;\r\n                break;\r\n            default:\r\n\r\n                var hx1 = line_x + Math.abs(x - line_x) * curvature;\r\n                var hx2 = x - Math.abs(x - line_x) * curvature;\r\n\r\n                return ' M '+ line_x +' '+ line_y +' C '+ hx1 +' '+ line_y +' '+ hx2 +' ' + y +' ' + x +'  ' + y;\r\n        }\r\n\r\n    }\r\n\r\n    drawConnection(ele) {\r\n        var connection = document.createElementNS('http://www.w3.org/2000/svg',\"svg\");\r\n        this.connection_ele = connection;\r\n        var path = document.createElementNS('http://www.w3.org/2000/svg',\"path\");\r\n        path.classList.add(\"main-path\");\r\n        path.setAttributeNS(null, 'd', '');\r\n        // path.innerHTML = 'a';\r\n        connection.classList.add(\"connection\");\r\n        connection.appendChild(path);\r\n        this.precanvas.appendChild(connection);\r\n        var id_output = ele.parentElement.parentElement.id.slice(5);\r\n        var output_class = ele.classList[1];\r\n        this.dispatch('connectionStart', { output_id: id_output, output_class:  output_class });\r\n\r\n    }\r\n\r\n    updateConnection(eX, eY) {\r\n        const precanvas = this.precanvas;\r\n        const zoom = this.zoom;\r\n        let precanvasWitdhZoom = precanvas.clientWidth / (precanvas.clientWidth * zoom);\r\n        precanvasWitdhZoom = precanvasWitdhZoom || 0;\r\n        let precanvasHeightZoom = precanvas.clientHeight / (precanvas.clientHeight * zoom);\r\n        precanvasHeightZoom = precanvasHeightZoom || 0;\r\n        var path = this.connection_ele.children[0];\r\n\r\n        var line_x = this.ele_selected.offsetWidth/2 + (this.ele_selected.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom;\r\n        var line_y = this.ele_selected.offsetHeight/2 + (this.ele_selected.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom;\r\n\r\n        var x = eX * ( this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - (this.precanvas.getBoundingClientRect().x *  ( this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) );\r\n        var y = eY * ( this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - (this.precanvas.getBoundingClientRect().y *  ( this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) );\r\n\r\n        var curvature = this.curvature;\r\n        var lineCurve = this.createCurvature(line_x, line_y, x, y, curvature, 'openclose');\r\n        path.setAttributeNS(null, 'd', lineCurve);\r\n\r\n    }\r\n\r\n    addConnection(id_output, id_input, output_class, input_class) {\r\n        var nodeOneModule = this.getModuleFromNodeId(id_output);\r\n        var nodeTwoModule = this.getModuleFromNodeId(id_input);\r\n        if(nodeOneModule === nodeTwoModule) {\r\n\r\n            var dataNode = this.getNodeFromId(id_output);\r\n            var exist = false;\r\n            for(var checkOutput in dataNode.outputs[output_class].connections){\r\n                var connectionSearch = dataNode.outputs[output_class].connections[checkOutput]\r\n                if(connectionSearch.node == id_input && connectionSearch.output == input_class) {\r\n                    exist = true;\r\n                }\r\n            }\r\n            // Check connection exist\r\n            if(exist === false) {\r\n                //Create Connection\r\n                this.drawflow.drawflow[nodeOneModule].data[id_output].outputs[output_class].connections.push( {\"node\": id_input.toString(), \"output\": input_class});\r\n                this.drawflow.drawflow[nodeOneModule].data[id_input].inputs[input_class].connections.push( {\"node\": id_output.toString(), \"input\": output_class});\r\n\r\n                if(this.module === nodeOneModule) {\r\n                    //Draw connection\r\n                    var connection = document.createElementNS('http://www.w3.org/2000/svg',\"svg\");\r\n                    var path = document.createElementNS('http://www.w3.org/2000/svg',\"path\");\r\n                    path.classList.add(\"main-path\");\r\n                    path.setAttributeNS(null, 'd', '');\r\n                    // path.innerHTML = 'a';\r\n                    connection.classList.add(\"connection\");\r\n                    connection.classList.add(\"node_in_node-\"+id_input);\r\n                    connection.classList.add(\"node_out_node-\"+id_output);\r\n                    connection.classList.add(output_class);\r\n                    connection.classList.add(input_class);\r\n                    connection.appendChild(path);\r\n                    this.precanvas.appendChild(connection);\r\n                    this.updateConnectionNodes('node-'+id_output);\r\n                    this.updateConnectionNodes('node-'+id_input);\r\n                }\r\n\r\n                this.dispatch('connectionCreated', { output_id: id_output, input_id: id_input, output_class:  output_class, input_class: input_class});\r\n            }\r\n        }\r\n    }\r\n\r\n    updateConnectionNodes(id) {\r\n\r\n        // Aquí nos quedamos;\r\n        const idSearch = 'node_in_'+id;\r\n        const idSearchOut = 'node_out_'+id;\r\n        var line_path = this.line_path/2;\r\n        const container = this.container;\r\n        const precanvas = this.precanvas;\r\n        const curvature = this.curvature;\r\n        const createCurvature = this.createCurvature;\r\n        const reroute_curvature = this.reroute_curvature;\r\n        const reroute_curvature_start_end = this.reroute_curvature_start_end;\r\n        const reroute_fix_curvature = this.reroute_fix_curvature;\r\n        const rerouteWidth = this.reroute_width;\r\n        const zoom = this.zoom;\r\n        let precanvasWitdhZoom = precanvas.clientWidth / (precanvas.clientWidth * zoom);\r\n        precanvasWitdhZoom = precanvasWitdhZoom || 0;\r\n        let precanvasHeightZoom = precanvas.clientHeight / (precanvas.clientHeight * zoom);\r\n        precanvasHeightZoom = precanvasHeightZoom || 0;\r\n\r\n        const elemsOut = container.querySelectorAll(`.${idSearchOut}`);\r\n\r\n        Object.keys(elemsOut).map(function(item, index) {\r\n            if(elemsOut[item].querySelector('.point') === null) {\r\n\r\n                var elemtsearchId_out = container.querySelector(`#${id}`);\r\n\r\n                var id_search = elemsOut[item].classList[1].replace('node_in_', '');\r\n                var elemtsearchId = container.querySelector(`#${id_search}`);\r\n\r\n                var elemtsearch = elemtsearchId.querySelectorAll('.'+elemsOut[item].classList[4])[0]\r\n\r\n                var eX = elemtsearch.offsetWidth/2 + (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom;\r\n                var eY = elemtsearch.offsetHeight/2 + (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom;\r\n\r\n                var elemtsearchOut = elemtsearchId_out.querySelectorAll('.'+elemsOut[item].classList[3])[0]\r\n\r\n                var line_x =  elemtsearchOut.offsetWidth/2 + (elemtsearchOut.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom;\r\n                var line_y =  elemtsearchOut.offsetHeight/2 + (elemtsearchOut.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom;\r\n\r\n                var x = eX;\r\n                var y = eY;\r\n\r\n                const lineCurve = createCurvature(line_x, line_y, x, y, curvature, 'openclose');\r\n                elemsOut[item].children[0].setAttributeNS(null, 'd', lineCurve );\r\n            } else {\r\n                const points = elemsOut[item].querySelectorAll('.point');\r\n                let linecurve = '';\r\n                const reoute_fix = [];\r\n                points.forEach((item, i) => {\r\n                    if(i === 0 && ((points.length -1) === 0)) {\r\n\r\n                        var elemtsearchId_out = container.querySelector(`#${id}`);\r\n                        var elemtsearch = item;\r\n\r\n                        var eX =  (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom + rerouteWidth;\r\n                        var eY =  (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom + rerouteWidth;\r\n\r\n                        var elemtsearchOut = elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[3])[0]\r\n                        var line_x =  elemtsearchOut.offsetWidth/2 + (elemtsearchOut.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom;\r\n                        var line_y =  elemtsearchOut.offsetHeight/2 + (elemtsearchOut.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom;\r\n                        var x = eX;\r\n                        var y = eY;\r\n\r\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'open');\r\n                        linecurve += lineCurveSearch;\r\n                        reoute_fix.push(lineCurveSearch);\r\n\r\n                        var elemtsearchId_out = item;\r\n                        var id_search = item.parentElement.classList[1].replace('node_in_', '');\r\n                        var elemtsearchId = container.querySelector(`#${id_search}`);\r\n                        var elemtsearch = elemtsearchId.querySelectorAll('.'+item.parentElement.classList[4])[0]\r\n\r\n                        var elemtsearchIn = elemtsearchId.querySelectorAll('.'+item.parentElement.classList[4])[0]\r\n                        var eX =  elemtsearchIn.offsetWidth/2 + (elemtsearchIn.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom;\r\n                        var eY =  elemtsearchIn.offsetHeight/2 + (elemtsearchIn.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom;\r\n\r\n\r\n                        var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom + rerouteWidth;\r\n                        var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom + rerouteWidth;\r\n                        var x = eX;\r\n                        var y = eY;\r\n\r\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'close');\r\n                        linecurve += lineCurveSearch;\r\n                        reoute_fix.push(lineCurveSearch);\r\n\r\n                    } else if(i === 0) {\r\n\r\n                        var elemtsearchId_out = container.querySelector(`#${id}`);\r\n                        var elemtsearch = item;\r\n\r\n                        var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom + rerouteWidth;\r\n                        var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom + rerouteWidth;\r\n\r\n                        var elemtsearchOut = elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[3])[0]\r\n                        var line_x =  elemtsearchOut.offsetWidth/2 + (elemtsearchOut.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom;\r\n                        var line_y =  elemtsearchOut.offsetHeight/2 + (elemtsearchOut.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom;\r\n\r\n                        var x = eX;\r\n                        var y = eY;\r\n\r\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'open');\r\n                        linecurve += lineCurveSearch;\r\n                        reoute_fix.push(lineCurveSearch);\r\n\r\n                        // SECOND\r\n                        var elemtsearchId_out = item;\r\n                        var elemtsearch = points[i+1];\r\n\r\n                        var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom + rerouteWidth;\r\n                        var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom + rerouteWidth;\r\n                        var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom + rerouteWidth;\r\n                        var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom + rerouteWidth;\r\n                        var x = eX;\r\n                        var y = eY;\r\n\r\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature, 'other');\r\n                        linecurve += lineCurveSearch;\r\n                        reoute_fix.push(lineCurveSearch);\r\n\r\n                    } else if (i === (points.length -1)) {\r\n\r\n                        var elemtsearchId_out = item;\r\n\r\n                        var id_search = item.parentElement.classList[1].replace('node_in_', '');\r\n                        var elemtsearchId = container.querySelector(`#${id_search}`);\r\n                        var elemtsearch = elemtsearchId.querySelectorAll('.'+item.parentElement.classList[4])[0]\r\n\r\n                        var elemtsearchIn = elemtsearchId.querySelectorAll('.'+item.parentElement.classList[4])[0]\r\n                        var eX =  elemtsearchIn.offsetWidth/2 + (elemtsearchIn.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom;\r\n                        var eY =  elemtsearchIn.offsetHeight/2 + (elemtsearchIn.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom;\r\n                        var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\r\n                        var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\r\n                        var x = eX;\r\n                        var y = eY;\r\n\r\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'close');\r\n                        linecurve += lineCurveSearch;\r\n                        reoute_fix.push(lineCurveSearch);\r\n\r\n                    } else {\r\n                        var elemtsearchId_out = item;\r\n                        var elemtsearch = points[i+1];\r\n\r\n                        var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\r\n                        var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) +rerouteWidth;\r\n                        var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * (precanvas.clientWidth / (precanvas.clientWidth * zoom)) + rerouteWidth;\r\n                        var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * (precanvas.clientHeight / (precanvas.clientHeight * zoom)) + rerouteWidth;\r\n                        var x = eX;\r\n                        var y = eY;\r\n\r\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature, 'other');\r\n                        linecurve += lineCurveSearch;\r\n                        reoute_fix.push(lineCurveSearch);\r\n                    }\r\n\r\n                });\r\n                if(reroute_fix_curvature) {\r\n                    reoute_fix.forEach((itempath, i) => {\r\n                        elemsOut[item].children[i].setAttributeNS(null, 'd', itempath);\r\n                    });\r\n\r\n                } else {\r\n                    elemsOut[item].children[0].setAttributeNS(null, 'd', linecurve);\r\n                }\r\n\r\n            }\r\n        })\r\n\r\n        const elems = container.querySelectorAll(`.${idSearch}`);\r\n        Object.keys(elems).map(function(item, index) {\r\n\r\n            if(elems[item].querySelector('.point') === null) {\r\n                var elemtsearchId_in = container.querySelector(`#${id}`);\r\n\r\n                var id_search = elems[item].classList[2].replace('node_out_', '');\r\n                var elemtsearchId = container.querySelector(`#${id_search}`);\r\n                var elemtsearch = elemtsearchId.querySelectorAll('.'+elems[item].classList[3])[0]\r\n\r\n                var line_x = elemtsearch.offsetWidth/2 + (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom;\r\n                var line_y = elemtsearch.offsetHeight/2 + (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom;\r\n\r\n                var elemtsearchId_in = elemtsearchId_in.querySelectorAll('.'+elems[item].classList[4])[0]\r\n                var x = elemtsearchId_in.offsetWidth/2 + (elemtsearchId_in.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom;\r\n                var y = elemtsearchId_in.offsetHeight/2 + (elemtsearchId_in.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom;\r\n\r\n                const lineCurve = createCurvature(line_x, line_y, x, y, curvature, 'openclose');\r\n                elems[item].children[0].setAttributeNS(null, 'd', lineCurve );\r\n\r\n            } else {\r\n                const points = elems[item].querySelectorAll('.point');\r\n                let linecurve = '';\r\n                const reoute_fix = [];\r\n                points.forEach((item, i) => {\r\n                    if(i === 0 && ((points.length -1) === 0)) {\r\n\r\n                        var elemtsearchId_out = container.querySelector(`#${id}`);\r\n                        var elemtsearch = item;\r\n\r\n                        var line_x = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom + rerouteWidth;\r\n                        var line_y = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom +rerouteWidth;\r\n\r\n                        var elemtsearchIn = elemtsearchId_out.querySelectorAll('.'+item.parentElement.classList[4])[0]\r\n                        var eX =  elemtsearchIn.offsetWidth/2 + (elemtsearchIn.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom;\r\n                        var eY =  elemtsearchIn.offsetHeight/2 + (elemtsearchIn.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom;\r\n\r\n                        var x = eX;\r\n                        var y = eY;\r\n\r\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'close');\r\n                        linecurve += lineCurveSearch;\r\n                        reoute_fix.push(lineCurveSearch);\r\n\r\n                        var elemtsearchId_out = item;\r\n                        var id_search = item.parentElement.classList[2].replace('node_out_', '');\r\n                        var elemtsearchId = container.querySelector(`#${id_search}`);\r\n                        var elemtsearch = elemtsearchId.querySelectorAll('.'+item.parentElement.classList[3])[0]\r\n\r\n                        var elemtsearchOut = elemtsearchId.querySelectorAll('.'+item.parentElement.classList[3])[0]\r\n                        var line_x =  elemtsearchOut.offsetWidth/2 + (elemtsearchOut.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom;\r\n                        var line_y =  elemtsearchOut.offsetHeight/2 + (elemtsearchOut.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom;\r\n\r\n                        var eX = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom + rerouteWidth;\r\n                        var eY = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom + rerouteWidth;\r\n                        var x = eX;\r\n                        var y = eY;\r\n\r\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'open');\r\n                        linecurve += lineCurveSearch;\r\n                        reoute_fix.push(lineCurveSearch);\r\n\r\n\r\n                    } else if(i === 0) {\r\n                        // FIRST\r\n                        var elemtsearchId_out = item;\r\n                        var id_search = item.parentElement.classList[2].replace('node_out_', '');\r\n                        var elemtsearchId = container.querySelector(`#${id_search}`);\r\n                        var elemtsearch = elemtsearchId.querySelectorAll('.'+item.parentElement.classList[3])[0]\r\n                        var elemtsearchOut = elemtsearchId.querySelectorAll('.'+item.parentElement.classList[3])[0]\r\n                        var line_x =  elemtsearchOut.offsetWidth/2 + (elemtsearchOut.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom;\r\n                        var line_y =  elemtsearchOut.offsetHeight/2 + (elemtsearchOut.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom;\r\n\r\n                        var eX = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom + rerouteWidth;\r\n                        var eY = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom + rerouteWidth;\r\n                        var x = eX;\r\n                        var y = eY;\r\n\r\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'open');\r\n                        linecurve += lineCurveSearch;\r\n                        reoute_fix.push(lineCurveSearch);\r\n\r\n                        // SECOND\r\n                        var elemtsearchId_out = item;\r\n                        var elemtsearch = points[i+1];\r\n\r\n                        var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom + rerouteWidth;\r\n                        var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom +rerouteWidth;\r\n                        var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom + rerouteWidth;\r\n                        var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom + rerouteWidth;\r\n                        var x = eX;\r\n                        var y = eY;\r\n\r\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature, 'other');\r\n                        linecurve += lineCurveSearch;\r\n                        reoute_fix.push(lineCurveSearch);\r\n\r\n                    } else if (i === (points.length -1)) {\r\n\r\n                        var elemtsearchId_out = item;\r\n\r\n                        var id_search = item.parentElement.classList[1].replace('node_in_', '');\r\n                        var elemtsearchId = container.querySelector(`#${id_search}`);\r\n                        var elemtsearch = elemtsearchId.querySelectorAll('.'+item.parentElement.classList[4])[0]\r\n\r\n                        var elemtsearchIn = elemtsearchId.querySelectorAll('.'+item.parentElement.classList[4])[0]\r\n                        var eX =  elemtsearchIn.offsetWidth/2 + (elemtsearchIn.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom;\r\n                        var eY =  elemtsearchIn.offsetHeight/2 + (elemtsearchIn.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom;\r\n\r\n                        var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom + rerouteWidth;\r\n                        var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom + rerouteWidth;\r\n                        var x = eX;\r\n                        var y = eY;\r\n\r\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature_start_end, 'close');\r\n                        linecurve += lineCurveSearch;\r\n                        reoute_fix.push(lineCurveSearch);\r\n\r\n                    } else {\r\n\r\n                        var elemtsearchId_out = item;\r\n                        var elemtsearch = points[i+1];\r\n\r\n                        var eX = (elemtsearch.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom + rerouteWidth;\r\n                        var eY = (elemtsearch.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom +rerouteWidth;\r\n                        var line_x = (elemtsearchId_out.getBoundingClientRect().x - precanvas.getBoundingClientRect().x ) * precanvasWitdhZoom + rerouteWidth;\r\n                        var line_y = (elemtsearchId_out.getBoundingClientRect().y - precanvas.getBoundingClientRect().y ) * precanvasHeightZoom + rerouteWidth;\r\n                        var x = eX;\r\n                        var y = eY;\r\n\r\n                        var lineCurveSearch = createCurvature(line_x, line_y, x, y, reroute_curvature, 'other');\r\n                        linecurve += lineCurveSearch;\r\n                        reoute_fix.push(lineCurveSearch);\r\n                    }\r\n\r\n                });\r\n                if(reroute_fix_curvature) {\r\n                    reoute_fix.forEach((itempath, i) => {\r\n                        elems[item].children[i].setAttributeNS(null, 'd', itempath);\r\n                    });\r\n\r\n                } else {\r\n                    elems[item].children[0].setAttributeNS(null, 'd', linecurve);\r\n                }\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    dblclick(e) {\r\n        if(this.connection_selected != null && this.reroute) {\r\n            this.createReroutePoint(this.connection_selected);\r\n        }\r\n\r\n        if(e.target.classList[0] === 'point') {\r\n            this.removeReroutePoint(e.target);\r\n        }\r\n    }\r\n\r\n    createReroutePoint(ele) {\r\n        this.connection_selected.classList.remove(\"selected\");\r\n        const nodeUpdate = this.connection_selected.parentElement.classList[2].slice(9);\r\n        const nodeUpdateIn = this.connection_selected.parentElement.classList[1].slice(13);\r\n        const output_class = this.connection_selected.parentElement.classList[3];\r\n        const input_class = this.connection_selected.parentElement.classList[4];\r\n        this.connection_selected = null;\r\n        const point = document.createElementNS('http://www.w3.org/2000/svg',\"circle\");\r\n        point.classList.add(\"point\");\r\n        var pos_x = this.pos_x * ( this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)) - (this.precanvas.getBoundingClientRect().x * ( this.precanvas.clientWidth / (this.precanvas.clientWidth * this.zoom)));\r\n        var pos_y = this.pos_y * ( this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)) - (this.precanvas.getBoundingClientRect().y * ( this.precanvas.clientHeight / (this.precanvas.clientHeight * this.zoom)));\r\n\r\n        point.setAttributeNS(null, 'cx', pos_x);\r\n        point.setAttributeNS(null, 'cy', pos_y);\r\n        point.setAttributeNS(null, 'r', this.reroute_width);\r\n\r\n        let position_add_array_point = 0;\r\n        if(this.reroute_fix_curvature) {\r\n\r\n            const numberPoints = ele.parentElement.querySelectorAll(\".main-path\").length;\r\n            var path = document.createElementNS('http://www.w3.org/2000/svg',\"path\");\r\n            path.classList.add(\"main-path\");\r\n            path.setAttributeNS(null, 'd', '');\r\n\r\n            ele.parentElement.insertBefore(path, ele.parentElement.children[numberPoints]);\r\n            if(numberPoints === 1) {\r\n                ele.parentElement.appendChild(point);\r\n            }  else {\r\n                const search_point = Array.from(ele.parentElement.children).indexOf(ele)\r\n                position_add_array_point = search_point;\r\n                ele.parentElement.insertBefore(point, ele.parentElement.children[search_point+numberPoints+1]);\r\n            }\r\n\r\n        } else {\r\n            ele.parentElement.appendChild(point);\r\n        }\r\n\r\n        const nodeId = nodeUpdate.slice(5);\r\n        const searchConnection = this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections.findIndex(function(item,i) {\r\n            return item.node ===  nodeUpdateIn && item.output === input_class;\r\n        });\r\n\r\n        if(this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points === undefined)  {\r\n            this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points = [];\r\n        }\r\n\r\n        if(this.reroute_fix_curvature) {\r\n\r\n            if(position_add_array_point > 0 || this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points !== []) {\r\n                this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points.splice(position_add_array_point, 0, { pos_x: pos_x, pos_y: pos_y });\r\n            } else {\r\n                this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points.push({ pos_x: pos_x, pos_y: pos_y });\r\n            }\r\n\r\n            ele.parentElement.querySelectorAll(\".main-path\").forEach((item, i) => {\r\n                item.classList.remove(\"selected\");\r\n            });\r\n\r\n        } else {\r\n            this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points.push({ pos_x: pos_x, pos_y: pos_y });\r\n        }\r\n\r\n        this.dispatch('addReroute', nodeId);\r\n        this.updateConnectionNodes(nodeUpdate);\r\n    }\r\n\r\n    removeReroutePoint(ele) {\r\n        const nodeUpdate = ele.parentElement.classList[2].slice(9)\r\n        const nodeUpdateIn = ele.parentElement.classList[1].slice(13);\r\n        const output_class = ele.parentElement.classList[3];\r\n        const input_class = ele.parentElement.classList[4];\r\n\r\n        let numberPointPosition = Array.from(ele.parentElement.children).indexOf(ele);\r\n        const nodeId = nodeUpdate.slice(5);\r\n        const searchConnection = this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections.findIndex(function(item,i) {\r\n            return item.node ===  nodeUpdateIn && item.output === input_class;\r\n        });\r\n\r\n        if(this.reroute_fix_curvature) {\r\n            const numberMainPath = ele.parentElement.querySelectorAll(\".main-path\").length\r\n            ele.parentElement.children[numberMainPath-1].remove();\r\n            numberPointPosition -= numberMainPath;\r\n            if(numberPointPosition < 0) {\r\n                numberPointPosition = 0;\r\n            }\r\n        } else {\r\n            numberPointPosition--;\r\n        }\r\n        this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class].connections[searchConnection].points.splice(numberPointPosition,1);\r\n\r\n        ele.remove();\r\n        this.dispatch('removeReroute', nodeId);\r\n        this.updateConnectionNodes(nodeUpdate);\r\n    }\r\n\r\n    registerNode(name, html, props = null, options = null) {\r\n        this.noderegister[name] = {html: html, props: props, options: options};\r\n    }\r\n\r\n    getNodeFromId(id) {\r\n        var moduleName = this.getModuleFromNodeId(id)\r\n        return JSON.parse(JSON.stringify(this.drawflow.drawflow[moduleName].data[id]));\r\n    }\r\n    getNodesFromName(name) {\r\n        var nodes = [];\r\n        const editor = this.drawflow.drawflow\r\n        Object.keys(editor).map(function(moduleName, index) {\r\n            for (var node in editor[moduleName].data) {\r\n                if(editor[moduleName].data[node].name == name) {\r\n                    nodes.push(editor[moduleName].data[node].id);\r\n                }\r\n            }\r\n        });\r\n        return nodes;\r\n    }\r\n\r\n    addNode (name, num_in, num_out, ele_pos_x, ele_pos_y, classoverride, data, html, typenode = false) {\r\n        if (this.useuuid) {\r\n            var newNodeId = this.getUuid();\r\n        } else {\r\n            var newNodeId = this.nodeId;\r\n        }\r\n        const parent = document.createElement('div');\r\n        parent.classList.add(\"parent-node\");\r\n\r\n        const node = document.createElement('div');\r\n        node.innerHTML = \"\";\r\n        node.setAttribute(\"id\", \"node-\"+newNodeId);\r\n        node.classList.add(\"drawflow-node\");\r\n        if(classoverride != '') {\r\n            node.classList.add(...classoverride.split(' '));\r\n        }\r\n\r\n        const inputs = document.createElement('div');\r\n        inputs.classList.add(\"inputs\");\r\n\r\n        const outputs = document.createElement('div');\r\n        outputs.classList.add(\"outputs\");\r\n\r\n        const json_inputs = {}\r\n        for(var x = 0; x < num_in; x++) {\r\n            const input = document.createElement('div');\r\n            input.classList.add(\"input\");\r\n            input.classList.add(\"input_\"+(x+1));\r\n            json_inputs[\"input_\"+(x+1)] = { \"connections\": []};\r\n            inputs.appendChild(input);\r\n        }\r\n\r\n        const json_outputs = {}\r\n        for(var x = 0; x < num_out; x++) {\r\n            const output = document.createElement('div');\r\n            output.classList.add(\"output\");\r\n            output.classList.add(\"output_\"+(x+1));\r\n            json_outputs[\"output_\"+(x+1)] = { \"connections\": []};\r\n            outputs.appendChild(output);\r\n        }\r\n\r\n        const content = document.createElement('div');\r\n        content.classList.add(\"drawflow_content_node\");\r\n        if(typenode === false) {\r\n            content.innerHTML = html;\r\n        } else if (typenode === true) {\r\n            content.appendChild(this.noderegister[html].html.cloneNode(true));\r\n        } else {\r\n            if(parseInt(this.render.version) === 3 ) {\r\n                //Vue 3\r\n                let wrapper = this.render.h(this.noderegister[html].html, this.noderegister[html].props, this.noderegister[html].options);\r\n                wrapper.appContext = this.parent;\r\n                this.render.render(wrapper,content);\r\n\r\n            } else {\r\n                // Vue 2\r\n                let wrapper = new this.render({\r\n                    parent: this.parent,\r\n                    render: h => h(this.noderegister[html].html, { props: this.noderegister[html].props }),\r\n                    ...this.noderegister[html].options\r\n                }).$mount()\r\n                //\r\n                content.appendChild(wrapper.$el);\r\n            }\r\n        }\r\n\r\n        Object.entries(data).forEach(function (key, value) {\r\n            if(typeof key[1] === \"object\") {\r\n                insertObjectkeys(null, key[0], key[0]);\r\n            } else {\r\n                var elems = content.querySelectorAll('[df-'+key[0]+']');\r\n                for(var i = 0; i < elems.length; i++) {\r\n                    elems[i].value = key[1];\r\n                    if(elems[i].isContentEditable) {\r\n                        elems[i].innerText = key[1];\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        function insertObjectkeys(object, name, completname) {\r\n            if(object === null) {\r\n                var object = data[name];\r\n            } else {\r\n                var object = object[name]\r\n            }\r\n            if(object !== null) {\r\n                Object.entries(object).forEach(function (key, value) {\r\n                    if(typeof key[1] === \"object\") {\r\n                        insertObjectkeys(object, key[0], completname+'-'+key[0]);\r\n                    } else {\r\n                        var elems = content.querySelectorAll('[df-'+completname+'-'+key[0]+']');\r\n                        for(var i = 0; i < elems.length; i++) {\r\n                            elems[i].value = key[1];\r\n                            if(elems[i].isContentEditable) {\r\n                                elems[i].innerText = key[1];\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        node.appendChild(inputs);\r\n        node.appendChild(content);\r\n        node.appendChild(outputs);\r\n        node.style.top = ele_pos_y + \"px\";\r\n        node.style.left = ele_pos_x + \"px\";\r\n        parent.appendChild(node);\r\n        this.precanvas.appendChild(parent);\r\n        var json = {\r\n            id: newNodeId,\r\n            name: name,\r\n            data: data,\r\n            class: classoverride,\r\n            html: html,\r\n            typenode: typenode,\r\n            inputs: json_inputs,\r\n            outputs: json_outputs,\r\n            pos_x: ele_pos_x,\r\n            pos_y: ele_pos_y,\r\n        }\r\n        this.drawflow.drawflow[this.module].data[newNodeId] = json;\r\n        this.dispatch('nodeCreated', newNodeId);\r\n        if (!this.useuuid) {\r\n            this.nodeId++;\r\n        }\r\n        return newNodeId;\r\n    }\r\n\r\n    addNodeImport (dataNode, precanvas) {\r\n        const parent = document.createElement('div');\r\n        parent.classList.add(\"parent-node\");\r\n\r\n        const node = document.createElement('div');\r\n        node.innerHTML = \"\";\r\n        node.setAttribute(\"id\", \"node-\"+dataNode.id);\r\n        node.classList.add(\"drawflow-node\");\r\n        if(dataNode.class != '') {\r\n            node.classList.add(...dataNode.class.split(' '));\r\n        }\r\n\r\n        const inputs = document.createElement('div');\r\n        inputs.classList.add(\"inputs\");\r\n\r\n        const outputs = document.createElement('div');\r\n        outputs.classList.add(\"outputs\");\r\n\r\n        Object.keys(dataNode.inputs).map(function(input_item, index) {\r\n            const input = document.createElement('div');\r\n            input.classList.add(\"input\");\r\n            input.classList.add(input_item);\r\n            inputs.appendChild(input);\r\n            Object.keys(dataNode.inputs[input_item].connections).map(function(output_item, index) {\r\n\r\n                var connection = document.createElementNS('http://www.w3.org/2000/svg',\"svg\");\r\n                var path = document.createElementNS('http://www.w3.org/2000/svg',\"path\");\r\n                path.classList.add(\"main-path\");\r\n                path.setAttributeNS(null, 'd', '');\r\n                // path.innerHTML = 'a';\r\n                connection.classList.add(\"connection\");\r\n                connection.classList.add(\"node_in_node-\"+dataNode.id);\r\n                connection.classList.add(\"node_out_node-\"+dataNode.inputs[input_item].connections[output_item].node);\r\n                connection.classList.add(dataNode.inputs[input_item].connections[output_item].input);\r\n                connection.classList.add(input_item);\r\n\r\n                connection.appendChild(path);\r\n                precanvas.appendChild(connection);\r\n\r\n            });\r\n        });\r\n\r\n        for(var x = 0; x < Object.keys(dataNode.outputs).length; x++) {\r\n            const output = document.createElement('div');\r\n            output.classList.add(\"output\");\r\n            output.classList.add(\"output_\"+(x+1));\r\n            outputs.appendChild(output);\r\n        }\r\n\r\n        const content = document.createElement('div');\r\n        content.classList.add(\"drawflow_content_node\");\r\n\r\n        if(dataNode.typenode === false) {\r\n            content.innerHTML = dataNode.html;\r\n        } else if (dataNode.typenode === true) {\r\n            content.appendChild(this.noderegister[dataNode.html].html.cloneNode(true));\r\n        } else {\r\n            if(parseInt(this.render.version) === 3 ) {\r\n                //Vue 3\r\n                let wrapper = this.render.h(this.noderegister[dataNode.html].html, this.noderegister[dataNode.html].props, this.noderegister[dataNode.html].options);\r\n                wrapper.appContext = this.parent;\r\n                this.render.render(wrapper,content);\r\n\r\n            } else {\r\n                //Vue 2\r\n                let wrapper = new this.render({\r\n                    parent: this.parent,\r\n                    render: h => h(this.noderegister[dataNode.html].html, { props: this.noderegister[dataNode.html].props }),\r\n                    ...this.noderegister[dataNode.html].options\r\n                }).$mount()\r\n                content.appendChild(wrapper.$el);\r\n            }\r\n        }\r\n\r\n        Object.entries(dataNode.data).forEach(function (key, value) {\r\n            if(typeof key[1] === \"object\") {\r\n                insertObjectkeys(null, key[0], key[0]);\r\n            } else {\r\n                var elems = content.querySelectorAll('[df-'+key[0]+']');\r\n                for(var i = 0; i < elems.length; i++) {\r\n                    elems[i].value = key[1];\r\n                    if(elems[i].isContentEditable) {\r\n                        elems[i].innerText = key[1];\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        function insertObjectkeys(object, name, completname) {\r\n            if(object === null) {\r\n                var object = dataNode.data[name];\r\n            } else {\r\n                var object = object[name]\r\n            }\r\n            if(object !== null) {\r\n                Object.entries(object).forEach(function (key, value) {\r\n                    if(typeof key[1] === \"object\") {\r\n                        insertObjectkeys(object, key[0], completname+'-'+key[0]);\r\n                    } else {\r\n                        var elems = content.querySelectorAll('[df-'+completname+'-'+key[0]+']');\r\n                        for(var i = 0; i < elems.length; i++) {\r\n                            elems[i].value = key[1];\r\n                            if(elems[i].isContentEditable) {\r\n                                elems[i].innerText = key[1];\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        node.appendChild(inputs);\r\n        node.appendChild(content);\r\n        node.appendChild(outputs);\r\n        node.style.top = dataNode.pos_y + \"px\";\r\n        node.style.left = dataNode.pos_x + \"px\";\r\n        parent.appendChild(node);\r\n        this.precanvas.appendChild(parent);\r\n    }\r\n\r\n    addRerouteImport(dataNode) {\r\n        const reroute_width = this.reroute_width\r\n        const reroute_fix_curvature = this.reroute_fix_curvature\r\n        const container = this.container;\r\n        Object.keys(dataNode.outputs).map(function(output_item, index) {\r\n            Object.keys(dataNode.outputs[output_item].connections).map(function(input_item, index) {\r\n                const points = dataNode.outputs[output_item].connections[input_item].points\r\n                if(points !== undefined) {\r\n\r\n                    points.forEach((item, i) => {\r\n                        const input_id = dataNode.outputs[output_item].connections[input_item].node;\r\n                        const input_class = dataNode.outputs[output_item].connections[input_item].output;\r\n                        const ele = container.querySelector('.connection.node_in_node-'+input_id+'.node_out_node-'+dataNode.id+'.'+output_item+'.'+input_class);\r\n\r\n                        if(reroute_fix_curvature) {\r\n                            if(i === 0) {\r\n                                for (var z = 0; z < points.length; z++) {\r\n                                    var path = document.createElementNS('http://www.w3.org/2000/svg',\"path\");\r\n                                    path.classList.add(\"main-path\");\r\n                                    path.setAttributeNS(null, 'd', '');\r\n                                    ele.appendChild(path);\r\n\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        const point = document.createElementNS('http://www.w3.org/2000/svg',\"circle\");\r\n                        point.classList.add(\"point\");\r\n                        var pos_x = item.pos_x;\r\n                        var pos_y = item.pos_y;\r\n\r\n                        point.setAttributeNS(null, 'cx', pos_x);\r\n                        point.setAttributeNS(null, 'cy', pos_y);\r\n                        point.setAttributeNS(null, 'r', reroute_width);\r\n\r\n                        ele.appendChild(point);\r\n                    });\r\n                };\r\n            });\r\n        });\r\n    }\r\n\r\n    updateNodeValue(event) {\r\n        var attr = event.target.attributes\r\n        for (var i = 0; i < attr.length; i++) {\r\n            if (attr[i].nodeName.startsWith('df-')) {\r\n                var keys = attr[i].nodeName.slice(3).split(\"-\");\r\n                var target = this.drawflow.drawflow[this.module].data[event.target.closest(\".drawflow_content_node\").parentElement.id.slice(5)].data;\r\n                for (var index = 0; index < keys.length - 1; index += 1) {\r\n                    if (target[keys[index]] == null) {\r\n                        target[keys[index]] = {};\r\n                    }\r\n                    target = target[keys[index]];\r\n                }\r\n                target[keys[keys.length - 1]] = event.target.value;\r\n                if(event.target.isContentEditable) {\r\n                    target[keys[keys.length - 1]] = event.target.innerText;\r\n                }\r\n                this.dispatch('nodeDataChanged', event.target.closest(\".drawflow_content_node\").parentElement.id.slice(5));\r\n            }\r\n        }\r\n    }\r\n\r\n    updateNodeDataFromId(id, data) {\r\n        var moduleName = this.getModuleFromNodeId(id)\r\n        this.drawflow.drawflow[moduleName].data[id].data = data;\r\n        if(this.module === moduleName) {\r\n            const content = this.container.querySelector('#node-'+id);\r\n\r\n            Object.entries(data).forEach(function (key, value) {\r\n                if(typeof key[1] === \"object\") {\r\n                    insertObjectkeys(null, key[0], key[0]);\r\n                } else {\r\n                    var elems = content.querySelectorAll('[df-'+key[0]+']');\r\n                    for(var i = 0; i < elems.length; i++) {\r\n                        elems[i].value = key[1];\r\n                        if(elems[i].isContentEditable) {\r\n                            elems[i].innerText = key[1];\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n\r\n            function insertObjectkeys(object, name, completname) {\r\n                if(object === null) {\r\n                    var object = data[name];\r\n                } else {\r\n                    var object = object[name]\r\n                }\r\n                if(object !== null) {\r\n                    Object.entries(object).forEach(function (key, value) {\r\n                        if(typeof key[1] === \"object\") {\r\n                            insertObjectkeys(object, key[0], completname+'-'+key[0]);\r\n                        } else {\r\n                            var elems = content.querySelectorAll('[df-'+completname+'-'+key[0]+']');\r\n                            for(var i = 0; i < elems.length; i++) {\r\n                                elems[i].value = key[1];\r\n                                if(elems[i].isContentEditable) {\r\n                                    elems[i].innerText = key[1];\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    addNodeInput(id) {\r\n        var moduleName = this.getModuleFromNodeId(id)\r\n        const infoNode = this.getNodeFromId(id)\r\n        const numInputs = Object.keys(infoNode.inputs).length;\r\n        if(this.module === moduleName) {\r\n            //Draw input\r\n            const input = document.createElement('div');\r\n            input.classList.add(\"input\");\r\n            input.classList.add(\"input_\"+(numInputs+1));\r\n            const parent = this.container.querySelector('#node-'+id+' .inputs');\r\n            parent.appendChild(input);\r\n            this.updateConnectionNodes('node-'+id);\r\n\r\n        }\r\n        this.drawflow.drawflow[moduleName].data[id].inputs[\"input_\"+(numInputs+1)] = { \"connections\": []};\r\n    }\r\n\r\n    addNodeOutput(id) {\r\n        var moduleName = this.getModuleFromNodeId(id)\r\n        const infoNode = this.getNodeFromId(id)\r\n        const numOutputs = Object.keys(infoNode.outputs).length;\r\n        if(this.module === moduleName) {\r\n            //Draw output\r\n            const output = document.createElement('div');\r\n            output.classList.add(\"output\");\r\n            output.classList.add(\"output_\"+(numOutputs+1));\r\n            const parent = this.container.querySelector('#node-'+id+' .outputs');\r\n            parent.appendChild(output);\r\n            this.updateConnectionNodes('node-'+id);\r\n\r\n        }\r\n        this.drawflow.drawflow[moduleName].data[id].outputs[\"output_\"+(numOutputs+1)] = { \"connections\": []};\r\n    }\r\n\r\n    removeNodeInput(id, input_class) {\r\n        var moduleName = this.getModuleFromNodeId(id)\r\n        const infoNode = this.getNodeFromId(id)\r\n        if(this.module === moduleName) {\r\n            this.container.querySelector('#node-'+id+' .inputs .input.'+input_class).remove();\r\n        }\r\n        const removeInputs = [];\r\n        Object.keys(infoNode.inputs[input_class].connections).map(function(key, index) {\r\n            const id_output = infoNode.inputs[input_class].connections[index].node;\r\n            const output_class = infoNode.inputs[input_class].connections[index].input;\r\n            removeInputs.push({id_output, id, output_class, input_class})\r\n        })\r\n        // Remove connections\r\n        removeInputs.forEach((item, i) => {\r\n            this.removeSingleConnection(item.id_output, item.id, item.output_class, item.input_class);\r\n        });\r\n\r\n        delete this.drawflow.drawflow[moduleName].data[id].inputs[input_class];\r\n\r\n        // Update connection\r\n        const connections = [];\r\n        const connectionsInputs = this.drawflow.drawflow[moduleName].data[id].inputs\r\n        Object.keys(connectionsInputs).map(function(key, index) {\r\n            connections.push(connectionsInputs[key]);\r\n        });\r\n        this.drawflow.drawflow[moduleName].data[id].inputs = {};\r\n        const input_class_id = input_class.slice(6);\r\n        let nodeUpdates = [];\r\n        connections.forEach((item, i) => {\r\n            item.connections.forEach((itemx, f) => {\r\n                nodeUpdates.push(itemx);\r\n            });\r\n            this.drawflow.drawflow[moduleName].data[id].inputs['input_'+ (i+1)] = item;\r\n        });\r\n        nodeUpdates =  new Set(nodeUpdates.map(e => JSON.stringify(e)));\r\n        nodeUpdates = Array.from(nodeUpdates).map(e => JSON.parse(e));\r\n\r\n        if(this.module === moduleName) {\r\n            const eles = this.container.querySelectorAll(\"#node-\"+id +\" .inputs .input\");\r\n            eles.forEach((item, i) => {\r\n                const id_class = item.classList[1].slice(6);\r\n                if(parseInt(input_class_id) < parseInt(id_class)) {\r\n                    item.classList.remove('input_'+id_class);\r\n                    item.classList.add('input_'+(id_class-1));\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        nodeUpdates.forEach((itemx, i) => {\r\n            this.drawflow.drawflow[moduleName].data[itemx.node].outputs[itemx.input].connections.forEach((itemz, g) => {\r\n                if(itemz.node == id) {\r\n                    const output_id = itemz.output.slice(6);\r\n                    if(parseInt(input_class_id) < parseInt(output_id)) {\r\n                        if(this.module === moduleName) {\r\n                            const ele = this.container.querySelector(\".connection.node_in_node-\"+id+\".node_out_node-\"+itemx.node+\".\"+itemx.input+\".input_\"+output_id);\r\n                            ele.classList.remove('input_'+output_id);\r\n                            ele.classList.add('input_'+(output_id-1));\r\n                        }\r\n                        if(itemz.points) {\r\n                            this.drawflow.drawflow[moduleName].data[itemx.node].outputs[itemx.input].connections[g] = { node: itemz.node, output: 'input_'+(output_id-1), points: itemz.points }\r\n                        } else {\r\n                            this.drawflow.drawflow[moduleName].data[itemx.node].outputs[itemx.input].connections[g] = { node: itemz.node, output: 'input_'+(output_id-1)}\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        this.updateConnectionNodes('node-'+id);\r\n    }\r\n\r\n    removeNodeOutput(id, output_class) {\r\n        var moduleName = this.getModuleFromNodeId(id)\r\n        const infoNode = this.getNodeFromId(id)\r\n        if(this.module === moduleName) {\r\n            this.container.querySelector('#node-'+id+' .outputs .output.'+output_class).remove();\r\n        }\r\n        const removeOutputs = [];\r\n        Object.keys(infoNode.outputs[output_class].connections).map(function(key, index) {\r\n            const id_input = infoNode.outputs[output_class].connections[index].node;\r\n            const input_class = infoNode.outputs[output_class].connections[index].output;\r\n            removeOutputs.push({id, id_input, output_class, input_class})\r\n        })\r\n        // Remove connections\r\n        removeOutputs.forEach((item, i) => {\r\n            this.removeSingleConnection(item.id, item.id_input, item.output_class, item.input_class);\r\n        });\r\n\r\n        delete this.drawflow.drawflow[moduleName].data[id].outputs[output_class];\r\n\r\n        // Update connection\r\n        const connections = [];\r\n        const connectionsOuputs = this.drawflow.drawflow[moduleName].data[id].outputs\r\n        Object.keys(connectionsOuputs).map(function(key, index) {\r\n            connections.push(connectionsOuputs[key]);\r\n        });\r\n        this.drawflow.drawflow[moduleName].data[id].outputs = {};\r\n        const output_class_id = output_class.slice(7);\r\n        let nodeUpdates = [];\r\n        connections.forEach((item, i) => {\r\n            item.connections.forEach((itemx, f) => {\r\n                nodeUpdates.push({ node: itemx.node, output: itemx.output });\r\n            });\r\n            this.drawflow.drawflow[moduleName].data[id].outputs['output_'+ (i+1)] = item;\r\n        });\r\n        nodeUpdates =  new Set(nodeUpdates.map(e => JSON.stringify(e)));\r\n        nodeUpdates = Array.from(nodeUpdates).map(e => JSON.parse(e));\r\n\r\n        if(this.module === moduleName) {\r\n            const eles = this.container.querySelectorAll(\"#node-\"+id +\" .outputs .output\");\r\n            eles.forEach((item, i) => {\r\n                const id_class = item.classList[1].slice(7);\r\n                if(parseInt(output_class_id) < parseInt(id_class)) {\r\n                    item.classList.remove('output_'+id_class);\r\n                    item.classList.add('output_'+(id_class-1));\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        nodeUpdates.forEach((itemx, i) => {\r\n            this.drawflow.drawflow[moduleName].data[itemx.node].inputs[itemx.output].connections.forEach((itemz, g) => {\r\n                if(itemz.node == id) {\r\n                    const input_id = itemz.input.slice(7);\r\n                    if(parseInt(output_class_id) < parseInt(input_id)) {\r\n                        if(this.module === moduleName) {\r\n\r\n                            const ele = this.container.querySelector(\".connection.node_in_node-\"+itemx.node+\".node_out_node-\"+id+\".output_\"+input_id+\".\"+itemx.output);\r\n                            ele.classList.remove('output_'+input_id);\r\n                            ele.classList.remove(itemx.output);\r\n                            ele.classList.add('output_'+(input_id-1));\r\n                            ele.classList.add(itemx.output);\r\n                        }\r\n                        if(itemz.points) {\r\n                            this.drawflow.drawflow[moduleName].data[itemx.node].inputs[itemx.output].connections[g] = { node: itemz.node, input: 'output_'+(input_id-1), points: itemz.points }\r\n                        } else {\r\n                            this.drawflow.drawflow[moduleName].data[itemx.node].inputs[itemx.output].connections[g] = { node: itemz.node, input: 'output_'+(input_id-1)}\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        this.updateConnectionNodes('node-'+id);\r\n    }\r\n\r\n    removeNodeId(id) {\r\n        this.removeConnectionNodeId(id);\r\n        var moduleName = this.getModuleFromNodeId(id.slice(5))\r\n        if(this.module === moduleName) {\r\n            this.container.querySelector(`#${id}`).remove();\r\n        }\r\n        delete this.drawflow.drawflow[moduleName].data[id.slice(5)];\r\n        this.dispatch('nodeRemoved', id.slice(5));\r\n    }\r\n\r\n    removeConnection() {\r\n        if(this.connection_selected != null) {\r\n            var listclass = this.connection_selected.parentElement.classList;\r\n            this.connection_selected.parentElement.remove();\r\n            //console.log(listclass);\r\n            var index_out = this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[listclass[3]].connections.findIndex(function(item,i) {\r\n                return item.node === listclass[1].slice(13) && item.output === listclass[4]\r\n            });\r\n            this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[listclass[3]].connections.splice(index_out,1);\r\n\r\n            var index_in = this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[listclass[4]].connections.findIndex(function(item,i) {\r\n                return item.node === listclass[2].slice(14) && item.input === listclass[3]\r\n            });\r\n            this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[listclass[4]].connections.splice(index_in,1);\r\n            this.dispatch('connectionRemoved', { output_id: listclass[2].slice(14), input_id: listclass[1].slice(13), output_class: listclass[3], input_class: listclass[4] } );\r\n            this.connection_selected = null;\r\n        }\r\n    }\r\n\r\n    removeSingleConnection(id_output, id_input, output_class, input_class) {\r\n        var nodeOneModule = this.getModuleFromNodeId(id_output);\r\n        var nodeTwoModule = this.getModuleFromNodeId(id_input);\r\n        if(nodeOneModule === nodeTwoModule) {\r\n            // Check nodes in same module.\r\n\r\n            // Check connection exist\r\n            var exists = this.drawflow.drawflow[nodeOneModule].data[id_output].outputs[output_class].connections.findIndex(function(item,i) {\r\n                return item.node == id_input && item.output === input_class\r\n            });\r\n            if(exists > -1) {\r\n\r\n                if(this.module === nodeOneModule) {\r\n                    // In same module with view.\r\n                    this.container.querySelector('.connection.node_in_node-'+id_input+'.node_out_node-'+id_output+'.'+output_class+'.'+input_class).remove();\r\n                }\r\n\r\n                var index_out = this.drawflow.drawflow[nodeOneModule].data[id_output].outputs[output_class].connections.findIndex(function(item,i) {\r\n                    return item.node == id_input && item.output === input_class\r\n                });\r\n                this.drawflow.drawflow[nodeOneModule].data[id_output].outputs[output_class].connections.splice(index_out,1);\r\n\r\n                var index_in = this.drawflow.drawflow[nodeOneModule].data[id_input].inputs[input_class].connections.findIndex(function(item,i) {\r\n                    return item.node == id_output && item.input === output_class\r\n                });\r\n                this.drawflow.drawflow[nodeOneModule].data[id_input].inputs[input_class].connections.splice(index_in,1);\r\n\r\n                this.dispatch('connectionRemoved', { output_id: id_output, input_id: id_input, output_class:  output_class, input_class: input_class});\r\n                return true;\r\n\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    removeConnectionNodeId(id) {\r\n        const idSearchIn = 'node_in_'+id;\r\n        const idSearchOut = 'node_out_'+id;\r\n\r\n        const elemsOut = this.container.querySelectorAll(`.${idSearchOut}`);\r\n        for(var i = elemsOut.length-1; i >= 0; i--) {\r\n            var listclass = elemsOut[i].classList;\r\n\r\n            var index_in = this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[listclass[4]].connections.findIndex(function(item,i) {\r\n                return item.node === listclass[2].slice(14) && item.input === listclass[3]\r\n            });\r\n            this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[listclass[4]].connections.splice(index_in,1);\r\n\r\n            var index_out = this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[listclass[3]].connections.findIndex(function(item,i) {\r\n                return item.node === listclass[1].slice(13) && item.output === listclass[4]\r\n            });\r\n            this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[listclass[3]].connections.splice(index_out,1);\r\n\r\n            elemsOut[i].remove();\r\n\r\n            this.dispatch('connectionRemoved', { output_id: listclass[2].slice(14), input_id: listclass[1].slice(13), output_class: listclass[3], input_class: listclass[4] } );\r\n        }\r\n\r\n        const elemsIn = this.container.querySelectorAll(`.${idSearchIn}`);\r\n        for(var i = elemsIn.length-1; i >= 0; i--) {\r\n\r\n            var listclass = elemsIn[i].classList;\r\n\r\n            var index_out = this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[listclass[3]].connections.findIndex(function(item,i) {\r\n                return item.node === listclass[1].slice(13) && item.output === listclass[4]\r\n            });\r\n            this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[listclass[3]].connections.splice(index_out,1);\r\n\r\n            var index_in = this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[listclass[4]].connections.findIndex(function(item,i) {\r\n                return item.node === listclass[2].slice(14) && item.input === listclass[3]\r\n            });\r\n            this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[listclass[4]].connections.splice(index_in,1);\r\n\r\n            elemsIn[i].remove();\r\n\r\n            this.dispatch('connectionRemoved', { output_id: listclass[2].slice(14), input_id: listclass[1].slice(13), output_class: listclass[3], input_class: listclass[4] } );\r\n        }\r\n    }\r\n\r\n    getModuleFromNodeId(id) {\r\n        var nameModule;\r\n        const editor = this.drawflow.drawflow\r\n        Object.keys(editor).map(function(moduleName, index) {\r\n            Object.keys(editor[moduleName].data).map(function(node, index2) {\r\n                if(node == id) {\r\n                    nameModule = moduleName;\r\n                }\r\n            })\r\n        });\r\n        return nameModule;\r\n    }\r\n\r\n    addModule(name) {\r\n        this.drawflow.drawflow[name] =  { \"data\": {} };\r\n        this.dispatch('moduleCreated', name);\r\n    }\r\n    changeModule(name) {\r\n        this.dispatch('moduleChanged', name);\r\n        this.module = name;\r\n        this.precanvas.innerHTML = \"\";\r\n        this.canvas_x = 0;\r\n        this.canvas_y = 0;\r\n        this.pos_x = 0;\r\n        this.pos_y = 0;\r\n        this.mouse_x = 0;\r\n        this.mouse_y = 0;\r\n        this.zoom = 1;\r\n        this.zoom_last_value = 1;\r\n        this.precanvas.style.transform = '';\r\n        this.import(this.drawflow, false);\r\n    }\r\n\r\n    removeModule(name) {\r\n        if(this.module === name) {\r\n            this.changeModule('Home');\r\n        }\r\n        delete this.drawflow.drawflow[name];\r\n        this.dispatch('moduleRemoved', name);\r\n    }\r\n\r\n    clearModuleSelected() {\r\n        this.precanvas.innerHTML = \"\";\r\n        this.drawflow.drawflow[this.module] =  { \"data\": {} };\r\n    }\r\n\r\n    clear () {\r\n        this.precanvas.innerHTML = \"\";\r\n        this.drawflow = { \"drawflow\": { \"Home\": { \"data\": {} }}};\r\n    }\r\n    export () {\r\n        const dataExport = JSON.parse(JSON.stringify(this.drawflow));\r\n        this.dispatch('export', dataExport);\r\n        return dataExport;\r\n    }\r\n\r\n    import (data, notifi = true) {\r\n        this.clear();\r\n        this.drawflow = JSON.parse(JSON.stringify(data));\r\n        this.load();\r\n        if(notifi) {\r\n            this.dispatch('import', 'import');\r\n        }\r\n    }\r\n\r\n    /* Events */\r\n    on (event, callback) {\r\n        // Check if the callback is not a function\r\n        if (typeof callback !== 'function') {\r\n            console.error(`The listener callback must be a function, the given type is ${typeof callback}`);\r\n            return false;\r\n        }\r\n        // Check if the event is not a string\r\n        if (typeof event !== 'string') {\r\n            console.error(`The event name must be a string, the given type is ${typeof event}`);\r\n            return false;\r\n        }\r\n        // Check if this event not exists\r\n        if (this.events[event] === undefined) {\r\n            this.events[event] = {\r\n                listeners: []\r\n            }\r\n        }\r\n        this.events[event].listeners.push(callback);\r\n    }\r\n\r\n    removeListener (event, callback) {\r\n        // Check if this event not exists\r\n\r\n        if (!this.events[event]) return false\r\n\r\n        const listeners = this.events[event].listeners\r\n        const listenerIndex = listeners.indexOf(callback)\r\n        const hasListener = listenerIndex > -1\r\n        if (hasListener) listeners.splice(listenerIndex, 1)\r\n    }\r\n\r\n    dispatch (event, details) {\r\n        // Check if this event not exists\r\n        if (this.events[event] === undefined) {\r\n            // console.error(`This event: ${event} does not exist`);\r\n            return false;\r\n        }\r\n        this.events[event].listeners.forEach((listener) => {\r\n            listener(details);\r\n        });\r\n    }\r\n\r\n    getUuid() {\r\n        // http://www.ietf.org/rfc/rfc4122.txt\r\n        var s = [];\r\n        var hexDigits = \"0123456789abcdef\";\r\n        for (var i = 0; i < 36; i++) {\r\n            s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\r\n        }\r\n        s[14] = \"4\";  // bits 12-15 of the time_hi_and_version field to 0010\r\n        s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01\r\n        s[8] = s[13] = s[18] = s[23] = \"-\";\r\n\r\n        var uuid = s.join(\"\");\r\n        return uuid;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://shaderlab/./sys/public/js/flow/drawflow.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./sys/public/js/editor.js");
/******/ 	
/******/ })()
;